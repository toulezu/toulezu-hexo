{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","path":"vendors/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/bower.json","path":"vendors/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","path":"vendors/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","path":"vendors/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","path":"vendors/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","path":"vendors/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","path":"vendors/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","path":"vendors/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","path":"vendors/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","path":"vendors/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","path":"vendors/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","path":"vendors/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","path":"vendors/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","path":"vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","path":"vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"20038353db532b4c40625419d396da7359f89cbe","modified":1465187502660},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1465187502661},{"_id":"themes/next/.gitignore","hash":"63d003fa46cf9665b4dab1786f9dc694812a5a79","modified":1465187502662},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1465187502662},{"_id":"themes/next/.javascript_ignore","hash":"beb0b95736650284ceb712a162cc033847a83cd3","modified":1465187502663},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1465187502663},{"_id":"themes/next/README.en.md","hash":"fa31bbc6dd8778b8dee469740c92b3b5b59702af","modified":1465187502663},{"_id":"themes/next/README.md","hash":"06aaf1241e9e1619956c86d8b1397a643840a9d1","modified":1465187502663},{"_id":"themes/next/_config.yml","hash":"bcba8cd431ca869d0bb8b4cf668ef55d7d6b8755","modified":1465381513562},{"_id":"themes/next/bower.json","hash":"da39b00fcdf2e7a42af412de0a4d3617cc6d7084","modified":1465187502664},{"_id":"themes/next/gulpfile.coffee","hash":"4e8c1082fa82e383494ff5b5963b7936d9c7bb2e","modified":1465187502664},{"_id":"themes/next/package.json","hash":"95eaba1607544965e432d56406bae391dd11bcbb","modified":1465187502692},{"_id":"source/_posts/写在github上的第一篇博客.md","hash":"d783a9df85c11fd10422f1ea3fdf71620b54f3d4","modified":1465370090277},{"_id":"source/_posts/Java中的 synchronizd 关键字用法.md","hash":"1da0ee8c956a2c821f2ae7573f4da2cbc259cf8e","modified":1465370120105},{"_id":"source/tags/index.md","hash":"a3cc1ea85a2b7030f89da430cc78b76da78a5eb5","modified":1465612535268},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1465187502649},{"_id":"themes/next/.git/config","hash":"340cff4364d9733a32042fdb93097c334a781c93","modified":1465187502653},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1465187488396},{"_id":"themes/next/.git/index","hash":"15b41d9d8b7244fa466ce70456c9381d91ef21d0","modified":1465187502801},{"_id":"themes/next/.git/packed-refs","hash":"02892c61db95b1804fb81c414ae32cfbf7881236","modified":1465187502628},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"4312fb37fa2b8663006be3c4fe01125ec01171c1","modified":1465187502661},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"2692e36cc35b1594530981e7727771f601720a43","modified":1465187502662},{"_id":"themes/next/languages/de.yml","hash":"4c3ffeb0d214c807a226dd98214958cb5483df1c","modified":1465187502665},{"_id":"themes/next/languages/default.yml","hash":"d2f6784b9c6567b64e58736e36025dbf96d863d4","modified":1465187502665},{"_id":"themes/next/languages/fr-FR.yml","hash":"d8a40fe025fad6f42df0cf16d4be2d513769b062","modified":1465187502666},{"_id":"themes/next/languages/en.yml","hash":"df81ab6b1cf3c88ed053d3766381cd12eb659fe3","modified":1465187502665},{"_id":"themes/next/languages/id.yml","hash":"19537c8bae42c4c2e7d06a64537e8dfd503b7e19","modified":1465187502667},{"_id":"themes/next/languages/ja.yml","hash":"e594aa42a33c489e4a65065659a01bb76c3c0cb5","modified":1465187502668},{"_id":"themes/next/languages/pt.yml","hash":"4c64594f477905d5d2d9ca2422f03175b7b0c617","modified":1465187502668},{"_id":"themes/next/languages/ru.yml","hash":"c3aedb94decf05a301662afc3398ab563dd9995a","modified":1465187502668},{"_id":"themes/next/languages/zh-Hans.yml","hash":"23b45e77c1846c9457b98c745a60a9461678c389","modified":1465187502669},{"_id":"themes/next/languages/zh-hk.yml","hash":"88e603eb0f3fd25c35bb37bd30372fd77bba7c46","modified":1465187502669},{"_id":"themes/next/languages/zh-tw.yml","hash":"04479b419c72b71fd34046f3fc33ebda4fe8de84","modified":1465187502669},{"_id":"themes/next/layout/_layout.swig","hash":"1138b849e1240249480849cc2b6c6d09b28207a5","modified":1465187502670},{"_id":"themes/next/layout/archive.swig","hash":"b867a08f6b43de8b5d700c84b943df55917407ae","modified":1465187502690},{"_id":"themes/next/layout/category.swig","hash":"58cf08388901f7549b1fca95548b2c79173aa840","modified":1465187502691},{"_id":"themes/next/layout/index.swig","hash":"e5b52e04296203262a400e8e36ae12426d31fd5b","modified":1465187502691},{"_id":"themes/next/layout/page.swig","hash":"a91e3fd7aef26e8a02e339e3372801c517f400cf","modified":1465187502691},{"_id":"themes/next/layout/post.swig","hash":"b8334c479840b7724638eec71971cbd8512ae58d","modified":1465187502691},{"_id":"themes/next/layout/tag.swig","hash":"6f764ea3ab11eeb7c530df45528d449b14f5dc62","modified":1465187502692},{"_id":"themes/next/scripts/merge-configs.js","hash":"f8cde6953939802f92da5b7a2458c6c539e9be69","modified":1465187502694},{"_id":"themes/next/test/.jshintrc","hash":"1dae9d1cf7df1ae6d5c5efd6cffb949e9b8dcebb","modified":1465187502799},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1465187502800},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1465187502800},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1465187502760},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1465187488396},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1465187488397},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1465187488397},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1465187488397},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1465187488398},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1465187488398},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1465187488398},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1465187488398},{"_id":"themes/next/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1465187488399},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1465187488399},{"_id":"themes/next/.git/logs/HEAD","hash":"272bbc73332ad8a0ad5f1854cdb902b175412746","modified":1465187502652},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"b87a5122dbff1d5fccf8f3d09d1640bd4b01c4a0","modified":1465187502671},{"_id":"themes/next/layout/_macro/post.swig","hash":"843389ec3cb4c2baa6a6a2bb916f803c89ca723b","modified":1465187502672},{"_id":"themes/next/layout/_macro/reward.swig","hash":"b6cb171f0ed227b82b8f7601814af2df93f3a09a","modified":1465187502672},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"9fc9f89c169439d7584197930359b758eb198a1c","modified":1465187502673},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"d569af20d20a960d534a5b60f90c20fef519d351","modified":1465187502673},{"_id":"themes/next/layout/_partials/comments.swig","hash":"5d84f3938e99f1908a6a1d44dd530740625f0188","modified":1465187502674},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1465187502674},{"_id":"themes/next/layout/_partials/footer.swig","hash":"27669118b957e8a39d843b63dddf561c9d62b336","modified":1465187502675},{"_id":"themes/next/layout/_partials/head.swig","hash":"0065ae49406ade2848b86bd4cd520af9d2148ece","modified":1465187502675},{"_id":"themes/next/layout/_partials/header.swig","hash":"46f8bbe51c0334c64c3a237bc0fe8ef73c6e58e1","modified":1465187502676},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1465187502676},{"_id":"themes/next/layout/_partials/search.swig","hash":"95b55fe35f2d2c22f2cc055d4379b5435314c7ec","modified":1465187502677},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"c5db707b46eac6a5df1d2a77f8556945a66fd181","modified":1465187502681},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1465187502681},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1465187502681},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"c9d45628330ce8bf5fbe71c9f131c7d75334c1c4","modified":1465187502690},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1465187502694},{"_id":"themes/next/scripts/tags/full-image.js","hash":"86194a05a8c6499de0b2aaa525d6de135778c0ae","modified":1465187502694},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1465187502695},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1465187502759},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1465187502760},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1465187502760},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1465187502761},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1465187502761},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1465187502762},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1465187502762},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1465187502762},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1465187502762},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1465187502763},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1465187502763},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1465187502763},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1465187502763},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1465187502763},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1465187502682},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1465187502682},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1465187502740},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1465187502741},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1465187502742},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1465187502750},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1465187502759},{"_id":"themes/next/.git/refs/heads/master","hash":"0968682c501e49ce9672185597d4aaa5c3770278","modified":1465187502650},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1465187502676},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"efa7efcbb575381b508f9aa0e0c53140eef72a7b","modified":1465187502677},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1465187502677},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1465187502678},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"bf8e9223a40748b2e3ef77d753a8e1dbbce8095e","modified":1465187502678},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"3fdde03f45a80f7a85097a40b40358adde618fc7","modified":1465187502678},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1465187502680},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"12684840de632eb16e53ffa863166306a756fd4f","modified":1465187502680},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1465187502682},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1465187502682},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"91c5353fcb94cc3b3f265b06ad2341734bc4c826","modified":1465187502684},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"8ba01f1ac07fbca62a4b00f5a0a3a506122c1530","modified":1465187502687},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"3bb70d8d68142ee27f3cc98c2a4339757e7af3d3","modified":1465187502688},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"5bd98c26cc188a2a30504d1330a0eaae34034db0","modified":1465187502689},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"4a5c6df1579a4ca72ed17f7dbd6d16a509aa7dc8","modified":1465187502689},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1465187502689},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1465187502728},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"a0f23e75a137d8c996c70e2059e0074f1e97a127","modified":1465187502741},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"531934ea21ef4dc9f0978512050f54834f0a6cff","modified":1465187502742},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1465187502750},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"b8e3663996b39590509d843f674360872b0242ac","modified":1465187502758},{"_id":"themes/next/source/css/_variables/base.styl","hash":"a7ae72e846393493385275d934eaa78534d9834c","modified":1465187502758},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1465187502764},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"4a0da1bed19e65bd7db42421b447061bc1618710","modified":1465187502765},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1465187502765},{"_id":"themes/next/source/js/src/motion.js","hash":"ff9ea37d05c269e3a140c4ab448af03efc4bcc76","modified":1465187502766},{"_id":"themes/next/source/js/src/post-details.js","hash":"458af3b1bd7783c1950808e66cedfa9fb68bf21f","modified":1465187502766},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1465187502767},{"_id":"themes/next/source/js/src/utils.js","hash":"418d09eb4df5dcc5e8d13d7f6245b1888200b51c","modified":1465187502768},{"_id":"themes/next/source/vendors/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1465187502768},{"_id":"themes/next/source/vendors/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1465187502769},{"_id":"themes/next/source/vendors/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1465187502774},{"_id":"themes/next/source/vendors/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1465187502775},{"_id":"themes/next/source/vendors/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1465187502775},{"_id":"themes/next/source/vendors/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1465187502775},{"_id":"themes/next/source/vendors/font-awesome/.bower.json","hash":"bb093f2ac1f1305069d873a7941324c8e0de3135","modified":1465187502777},{"_id":"themes/next/source/vendors/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1465187502777},{"_id":"themes/next/source/vendors/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1465187502779},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","hash":"ed80b43dbc7e3009b2f436741b9796df8eb3be02","modified":1465187502779},{"_id":"themes/next/source/vendors/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1465187502780},{"_id":"themes/next/source/vendors/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1465187502789},{"_id":"themes/next/source/vendors/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1465187502791},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1465187502791},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1465187502791},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1465187502792},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1465187502792},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1465187502792},{"_id":"themes/next/source/vendors/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1465187502794},{"_id":"themes/next/source/vendors/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1465187502794},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1465187502797},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1465187502798},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1465187502799},{"_id":"themes/next/source/vendors/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1465187502790},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"272bbc73332ad8a0ad5f1854cdb902b175412746","modified":1465187502651},{"_id":"themes/next/.git/objects/pack/pack-d10e6aede1d0d8b7f65f9aba5a1cb255762e5d58.idx","hash":"5ff705517bf2c54b4fb93e3085b8bf56def7b471","modified":1465187502442},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1465187502646},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"ae5b8597603d4e42ee66ed121544e7b1c644767e","modified":1465187502684},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"24105e62d7f26946907fa14cd02589f899bf8122","modified":1465187502684},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"096e7a6958b3bcacaa94361266832871ccb989c0","modified":1465187502686},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"a79e7e0d809fcf407593dd7ed9e023db21c3cbd6","modified":1465187502686},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"1b6af02fd0ba3f729675cd95429a0cea4aebf358","modified":1465187502687},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1465187502687},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"f8b6a3017ab79057ce99f1ccb512193d67f4a35f","modified":1465187502688},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"2338be12ffee58bc08197cb9da8aaf31737aaf5c","modified":1465187502688},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ad69cbf94eedacc27e756cdb9c7073416db697d0","modified":1465187502695},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1465187502695},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1465187502695},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"b7d5cc29586ac796a50d90974ad99d24a5982137","modified":1465187502695},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1465187502703},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1465187502712},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1465187502726},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5a35aa0381b0e1d465b952a997194441020446ea","modified":1465187502726},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"b6ee5fefa6046086a76ddbcfafc82482816fa3e0","modified":1465187502726},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1465187502727},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1465187502727},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"c9218b48c56e52c06af9ce3cc8fbdae737cf16fe","modified":1465187502727},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1465187502743},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1465187502743},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1465187502743},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1465187502744},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"55b44e03054cd20ed8129bf986b15fba5fd85aad","modified":1465187502744},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1465187502744},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1465187502744},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"124b540f059fd1ed13514362007cfc70355278c6","modified":1465187502746},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1465187502746},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"13af2fb21fabfc4df4b577ce5363e13d03daff71","modified":1465187502746},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1465187502747},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1465187502747},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c9875c010bebd77b4f59d459a10455fceb0a66a1","modified":1465187502748},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"de31e923bf5102498f06b1ae6bdf2ea22409f3e0","modified":1465187502748},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"2182a6da3434a6fd4d03ab1592c645d3d3c88500","modified":1465187502748},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"9887bd3894db5394c1e64e800afaae55f47e8dd0","modified":1465187502749},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1465187502749},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"983c0723e8cfd84b67c2e66da0c26425a8db06e0","modified":1465187502749},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"88a5e0e95f93e4adb196bff1aac17d6cfb03768a","modified":1465187502750},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"a9d064d600ee35acd66508167e1ac8c6cfdbdcd8","modified":1465187502767},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1465187502769},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1465187502769},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1465187502770},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1465187502770},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1465187502770},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1465187502770},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1465187502773},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1465187502774},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1465187502774},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1465187502776},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1465187502776},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","hash":"811432ad1e2d6c1f6da9a63fd919bf2a02b71dd9","modified":1465187502781},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1465187502781},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","hash":"4c2c5f5f6cc86d775a44b944661e038b7be98149","modified":1465187502782},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1465187502789},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1465187502793},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1465187502793},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1465187502783},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1465187502784},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1465187502789},{"_id":"themes/next/source/vendors/velocity/velocity.js","hash":"e63dc7cea055ca60a95d286f32349d88b10c5a4d","modified":1465187502795},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"272bbc73332ad8a0ad5f1854cdb902b175412746","modified":1465187502649},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4c4ef6e997d0c6e21de39c2daa0c768e12c8c6fa","modified":1465187502696},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1465187502696},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1465187502697},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"852fd77500bda2c1a6651a14aa48d7d6222adc9d","modified":1465187502697},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1465187502698},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1465187502697},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"70ec8d38d2b3ee1906793d1dcb68032adfa65f03","modified":1465187502698},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"12e366f04497e3f44388fd40111a03e02f7c26af","modified":1465187502698},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"104b5c79cd891506e0beaf938b083685f1da8637","modified":1465187502700},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1465187502701},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"b8f9c95702e87fd0b170ab586c82c9718a245f8a","modified":1465187502701},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1465187502703},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a45f5fce643eec4e1b927165229d560364bcace1","modified":1465187502704},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1465187502704},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"4866fb9453d7d4c83a1c4e55d74e4afed336eb8b","modified":1465187502706},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1465187502706},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"ca20affaeaf33c0904cb6356864fc6b78e95f447","modified":1465187502706},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"2bc3e33fdfbcf348c96ca60598f629dcd7ba3617","modified":1465187502707},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"929fac3a505bacbce6ba63009fd15851e2a8669d","modified":1465187502707},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"8355b0e9375b3245508efda0e18acd069c2aa767","modified":1465187502707},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1465187502707},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"350469437b20ecfd6f3ca45e400478f8e3f71cfb","modified":1465187502708},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1465187502708},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"681b7c8ce4dc47130a0ca67c1ec62be7c96e4c4f","modified":1465187502708},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"7f2bdd6109614d35408ee5ac3335aad4464c69c7","modified":1465187502709},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1465187502709},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"821991c0890966a512b43e8b1cf9537e738a09a0","modified":1465187502709},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1465187502710},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1465187502710},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"394888efec32749b353292a59ec7f1b609d6325e","modified":1465187502710},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"06b9a99d63b4d57fdbf70b88ab7036fbc47e3f52","modified":1465187502711},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"702be9e57dd6ff5fa99642a1f6e3df26215b8805","modified":1465187502711},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1465187502711},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1465187502712},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"dd941824210733588841897457e0cc9697ca5608","modified":1465187502712},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1465187502713},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"a83f493e494f5c73fab8f6f5b686ef1670490095","modified":1465187502713},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1465187502713},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1465187502714},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"7f7e9df15148608a9c29326dd880d8e8e8efc0ec","modified":1465187502714},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1465187502725},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"dcb4548d07cbb38b645b1753cf3ee7157e16921a","modified":1465187502725},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"7bd182d918f3117335a5ee87a1b544e6d2b54d7d","modified":1465187502725},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1465187502745},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1465187502745},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1465187502747},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1465187502771},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1465187502771},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1465187502772},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1465187502772},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1465187502773},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1465187502772},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1465187502788},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"f346b8b3df147e4059e1a7d66c52c9a6e1cec3e8","modified":1465187502786},{"_id":"themes/next/.git/objects/pack/pack-d10e6aede1d0d8b7f65f9aba5a1cb255762e5d58.pack","hash":"019b42f33730bed196bccb53090a9373d38391d5","modified":1465187502526},{"_id":"source/_posts/ELK：安装.md","hash":"eff5fae76dfe95d3de14fa57c4eef9c874f88aeb","modified":1465552773284},{"_id":"public/atom.xml","hash":"57ded53abd327a4dd4a536c010a60078372aef25","modified":1465612544238},{"_id":"public/sitemap.xml","hash":"3a10ec06328b8f53b9b05ff60fe1d4dfaae12483","modified":1465612544238},{"_id":"public/tags/index.html","hash":"7a64fd78f2831855a4b702f946aee78c6593c124","modified":1465612544241},{"_id":"public/2016/06/01/写在github上的第一篇博客/index.html","hash":"2fcdbee08fe79ac622f2b6e777d514454a0b95c4","modified":1465612544241},{"_id":"public/categories/技术/index.html","hash":"aebbecba62ea2bbf9798a4dd1168f4bf8149f766","modified":1465612544241},{"_id":"public/categories/生活/index.html","hash":"12f91794dde518b33571dc665f441b246b6b40f8","modified":1465612544241},{"_id":"public/index.html","hash":"531447d449b47b82988e7563a1609084188210cf","modified":1465612544241},{"_id":"public/archives/index.html","hash":"c4d3b9289c66456572c4906fcf327fc3d63896a2","modified":1465612544241},{"_id":"public/tags/Java/index.html","hash":"75b90c3b9d4d5ccac9e4e62aac28af65aaba5f50","modified":1465612544241},{"_id":"public/tags/感想/index.html","hash":"710b6286473ef98f9aae565630a2f12d3a1c6491","modified":1465612544241},{"_id":"public/tags/ELK/index.html","hash":"d50b8c8dfd92856a3c38e6fd3856a29aa407f108","modified":1465612544241},{"_id":"public/2016/06/10/ELK：安装/index.html","hash":"17584a5f1f1855783e60ecbd34802dc401d7ae71","modified":1465612544241},{"_id":"public/2016/06/07/Java中的 synchronizd 关键字用法/index.html","hash":"51bea6d2e9305b9f3133942550237e692e26f0eb","modified":1465612544241},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1465612544253},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1465612544253},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1465612544253},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1465612544253},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1465612544253},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1465612544253},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1465612544253},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1465612544253},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1465612544253},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1465612544253},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1465612544253},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1465612544253},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1465612544253},{"_id":"public/vendors/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1465612544253},{"_id":"public/vendors/font-awesome/HELP-US-OUT.txt","hash":"ed80b43dbc7e3009b2f436741b9796df8eb3be02","modified":1465612544254},{"_id":"public/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1465612544254},{"_id":"public/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1465612544254},{"_id":"public/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1465612544254},{"_id":"public/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1465612544254},{"_id":"public/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1465612544254},{"_id":"public/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1465612544254},{"_id":"public/vendors/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1465612544254},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1465612544254},{"_id":"public/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1465612544254},{"_id":"public/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1465612544859},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1465612544866},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1465612544867},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1465612544878},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1465612544878},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1465612544878},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1465612544878},{"_id":"public/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1465612544878},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1465612544878},{"_id":"public/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1465612544878},{"_id":"public/vendors/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1465612544878},{"_id":"public/vendors/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1465612544878},{"_id":"public/vendors/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1465612544878},{"_id":"public/vendors/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1465612544878},{"_id":"public/vendors/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1465612544878},{"_id":"public/vendors/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1465612544878},{"_id":"public/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1465612544879},{"_id":"public/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1465612544879},{"_id":"public/vendors/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1465612544879},{"_id":"public/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1465612544879},{"_id":"public/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1465612544879},{"_id":"public/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1465612544879},{"_id":"public/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1465612544879},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1465612544879},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1465612544879},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1465612544879},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1465612544880},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1465612544880},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1465612544881},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1465612544881},{"_id":"public/css/main.css","hash":"87050ff85294f94cf05e6700635500a91ad69c84","modified":1465612544881},{"_id":"public/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1465612544881},{"_id":"public/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1465612544881},{"_id":"public/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1465612544881},{"_id":"public/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1465612544881},{"_id":"public/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1465612544881},{"_id":"public/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1465612544881},{"_id":"public/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1465612544881},{"_id":"public/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1465612544881},{"_id":"public/vendors/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1465612544881},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1465612544881},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"f346b8b3df147e4059e1a7d66c52c9a6e1cec3e8","modified":1465612544899}],"Category":[{"name":"技术","_id":"cip6qbsta00043kr9opjlgwna"},{"name":"生活","_id":"cip6qbstb00063kr9cosv6dto"}],"Data":[],"Page":[{"title":"tags","date":"2016-06-08T10:14:15.000Z","_content":"\n","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-06-08 18:14:15\n---\n\n","updated":"2016-06-11T02:35:35.268Z","path":"tags/index.html","_id":"cip6qbst300013kr9w93655bo","comments":1,"layout":"page","content":"","excerpt":"","more":""}],"Post":[{"title":"Java 中的 synchronizd 关键字在同步中的使用","date":"2016-06-06T16:00:00.000Z","description":"Java 中的 synchronizd 关键字在同步中的使用","_content":"\n### 为什么要线程同步\n\n- 同步的目的是避免在同一个时间点操作同一个数据\n- 这里操作是指`update`，`delete`，数据是指任意对象\n- 每一个对象都有一把锁，`synchronized` 就是为此对象上锁，等到 `synchronized` 方法或`synchronized` 代码块执行完就会自动解锁，所有多线程执行相同带`synchronized`的代码时会检查所操作对象是否上锁，如果已经被锁住，就阻塞等待，直到锁此代码段的线程执行完此代码块。\n\n### synchronized 5种用法\n\n-\t用在普通方法上\n```java\npublic synchronized void test() {\n // 业务代码\n}\n```\n-\t用在静态方法上\n```java\npublic static synchronized void test3() {\n // 业务代码\n}\n```\n-\t用在代码块，括号里面是this\n```java\npublic void test1() {\n    synchronized(this) {\n      // 业务代码\n\t  }\n}\n```\n-\t用在代码块，括号里面是类的一个实例，和this类似\n```java\npublic void test11() {\n  Sync sync = this;\n  synchronized(sync) {\n    // 业务代码\n  }\n}\n```\n-\t用在代码块，括号里面是类\n```java\npublic void test2() {\n  synchronized (Sync.class) {\n      // 业务代码\n  }\n}\n```\n\nsynchronized 锁住的是括号里的对象，而不是代码。对于非静态的 synchronized 方法，锁的就是对象本身也就是this。\n\n当 synchronized 锁住一个对象后，别的线程如果也想拿到这个对象的锁，就必须等待这个线程执行完成释放锁，才能再次给对象加锁，这样才达到线程同步的目的。\n\n```java\npublic class SynchronizedTest {\n\t\n\tPerson p = new Person(\"lin\", 15);\n\t\n\tpublic synchronized void say() {//相当于锁住this，效果和say3()一样，只要多个线程同时访问同一个SynchronizedTest实例（相当于this），就会发生不能同时访问此方法\n\t\tSystem.out.println(p.getName());\n\t}\n\t\n\tpublic void say2() {\n\t\tsynchronized(p) {//相当于锁住p，只要多个线程同时访问此代码块且是同一个p，那么在同一时间，只有一个线程能对P进行操作。\n\t\t\tSystem.out.println(p.getName());\n\t\t}\n\t}\n\t\n\tpublic void say3() {\n\t\tsynchronized(this) {//锁住this，效果和say()一样，只要多个线程同时访问同一个SynchronizedTest实例（this），就会发生不能同时访问此代码块\n\t\t\tSystem.out.println(p.getName());\n\t\t}\n\t}\n}\n\n```\n上面的三种用法都是为了避免在多个线程操作同一个对象的时候同时访问一个代码块或者某个方法。\n\n### 误用 synchronized 的情况\n下面的代码想要防止多个线程同时对某个代码块的访问，但是最后没有做到。\n```java\nclass Sync {  \n  \n    public synchronized void test() {  \n        System.out.println(\"test开始..\");  \n        try {  \n            Thread.sleep(1000);  \n        } catch (InterruptedException e) {  \n            e.printStackTrace();  \n        }  \n        System.out.println(\"test结束..\");  \n    }  \n}  \n  \nclass MyThread extends Thread {  \n  \n    public void run() {  \n        Sync sync = new Sync();  \n        sync.test();  \n    }  \n}  \n  \npublic class Main {  \n  \n    public static void main(String[] args) {  \n        for (int i = 0; i < 3; i++) {  \n            Thread thread = new MyThread();  \n            thread.start();  \n        }  \n    }  \n}  \n```\n```\n运行结果：\ntest开始..\ntest开始..\ntest开始..\ntest结束..\ntest结束..\ntest结束..\n```\n可以看出来，上面的程序起了三个线程，同时运行test方法，虽然test方法加上了synchronized，但是还是同时运行起来，貌似synchronized没起作用。\n\n将test方法改成如下：\n```java\npublic void test() {  \n    synchronized(this){  \n        System.out.println(\"test开始..\");  \n        try {  \n            Thread.sleep(1000);  \n        } catch (InterruptedException e) {  \n            e.printStackTrace();  \n        }  \n        System.out.println(\"test结束..\");  \n    }  \n}  \n```\n```\n运行结果：\ntest开始..\ntest开始..\ntest开始..\ntest结束..\ntest结束..\ntest结束..\n```\n一切还是这么平静，没有看到synchronized 达到想要的结果。为什么？刚才讲到上面的两种方法是为了避免在多个线程操作**同一个对象**的时候同时访问一个代码块或者某个方法，但是在\n```java\nclass MyThread extends Thread {  \n  \n    public void run() {  \n        Sync sync = new Sync();  \n        sync.test();  \n    }  \n}  \n```\n中，每个线程都单独操作一个 Sync 对象，这样线程之间根本不会发生同步。怎么做呢？\n```java\nclass MyThread2 extends Thread {\n\t\n\tprivate Sync sync;\n\t\n\tpublic MyThread2(Sync sync) {\n\t\tthis.sync = sync;\n\t}\n\t  \n    public void run() {\n        sync.test();  \n    }  \n}\n```\n```java\nSync sync = new Sync();\nfor (int i = 0; i < 3; i++) {  \n    Thread thread = new MyThread2(sync);\n    thread.start();  \n}\n```\n输出结果如下：\n```\ntest开始..\ntest结束..\ntest开始..\ntest结束..\ntest开始..\ntest结束..\n```\n这样就达到预期了，多个线程在操作同一个对象的时候只有一个线程能够访问 test 方法。\n\n但是还有其他方法吗？也就是如何避免多个线程执行多个对象的同一个代码块呢。看看下面的代码：\n```java\npublic class Sync {\n\tpublic void test2() {\n\t\tsynchronized (Sync.class) { // 作用于 Sync 类的所有实例\n\t\t\tSystem.out.println(\"test2开始..\");\n\t\t\ttry {\n\t\t\t\tThread.sleep(1000);\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\tSystem.out.println(\"test2结束..\");\n\t\t}\n\t}\n}\n```\n```java\nclass MyThread3 extends Thread {  \n\t  \n    public void run() {  \n        Sync sync = new Sync();  \n        sync.test2();  \n    }  \n}\n```\n```java\nfor (int i = 0; i < 3; i++) {  \n    Thread thread = new MyThread3();\n    thread.start();  \n}\n```\n输出结果如下：\n```\ntest2开始..\ntest2结束..\ntest2开始..\ntest2结束..\ntest2开始..\ntest2结束..\n```\n这样就满足期望了，关键是\n```java\nsynchronized (Sync.class) { // 作用于 Sync 类的所有实例\n//...\n}\n```\n\n如果synchronized作用于某个静态方法上会有什么效果呢？\n```java\npublic static synchronized void test3() {\n\tSystem.out.println(\"test3开始..\");\n\ttry {\n\t\tThread.sleep(1000);\n\t} catch (InterruptedException e) {\n\t\te.printStackTrace();\n\t}\n\tSystem.out.println(\"test3结束..\");\n}\n```\n```java\nclass MyThread4 extends Thread {  \n\t  \n    public void run() {  \n        Sync.test3();  \n    }  \n}\n```\n```java\nfor (int i = 0; i < 3; i++) {  \n    Thread thread = new MyThread4();\n    thread.start();  \n}\n```\n输出结果如下：\n```\ntest3开始..\ntest3结束..\ntest3开始..\ntest3结束..\ntest3开始..\ntest3结束..\n```\n这同样能够满足期望，从上面的这些例子也很好说明了5种的synchronized区别和相同点。\n\n\n### 对 synchronized 的总结\n\n- 方法同步，锁当前对象（this）\n- 静态同步方法，锁当前类的Class对象\n- 对于同步代码块，锁住的是synchronized括号中的对象，任意对象，当前类对象或者是其他对象。\n\n参考如下：\n[Java:使用synchronized和Lock对象获取对象锁](http://zhangjunhd.blog.51cto.com/113473/70300)\n[线程同步总结--synchronized方法和synchronized代码块](http://991690137.iteye.com/blog/1948882)","source":"_posts/Java中的 synchronizd 关键字用法.md","raw":"---\ntitle: Java 中的 synchronizd 关键字在同步中的使用\ndate: 2016-06-07\ntags: Java\ncategories: 技术\ndescription: Java 中的 synchronizd 关键字在同步中的使用\n---\n\n### 为什么要线程同步\n\n- 同步的目的是避免在同一个时间点操作同一个数据\n- 这里操作是指`update`，`delete`，数据是指任意对象\n- 每一个对象都有一把锁，`synchronized` 就是为此对象上锁，等到 `synchronized` 方法或`synchronized` 代码块执行完就会自动解锁，所有多线程执行相同带`synchronized`的代码时会检查所操作对象是否上锁，如果已经被锁住，就阻塞等待，直到锁此代码段的线程执行完此代码块。\n\n### synchronized 5种用法\n\n-\t用在普通方法上\n```java\npublic synchronized void test() {\n // 业务代码\n}\n```\n-\t用在静态方法上\n```java\npublic static synchronized void test3() {\n // 业务代码\n}\n```\n-\t用在代码块，括号里面是this\n```java\npublic void test1() {\n    synchronized(this) {\n      // 业务代码\n\t  }\n}\n```\n-\t用在代码块，括号里面是类的一个实例，和this类似\n```java\npublic void test11() {\n  Sync sync = this;\n  synchronized(sync) {\n    // 业务代码\n  }\n}\n```\n-\t用在代码块，括号里面是类\n```java\npublic void test2() {\n  synchronized (Sync.class) {\n      // 业务代码\n  }\n}\n```\n\nsynchronized 锁住的是括号里的对象，而不是代码。对于非静态的 synchronized 方法，锁的就是对象本身也就是this。\n\n当 synchronized 锁住一个对象后，别的线程如果也想拿到这个对象的锁，就必须等待这个线程执行完成释放锁，才能再次给对象加锁，这样才达到线程同步的目的。\n\n```java\npublic class SynchronizedTest {\n\t\n\tPerson p = new Person(\"lin\", 15);\n\t\n\tpublic synchronized void say() {//相当于锁住this，效果和say3()一样，只要多个线程同时访问同一个SynchronizedTest实例（相当于this），就会发生不能同时访问此方法\n\t\tSystem.out.println(p.getName());\n\t}\n\t\n\tpublic void say2() {\n\t\tsynchronized(p) {//相当于锁住p，只要多个线程同时访问此代码块且是同一个p，那么在同一时间，只有一个线程能对P进行操作。\n\t\t\tSystem.out.println(p.getName());\n\t\t}\n\t}\n\t\n\tpublic void say3() {\n\t\tsynchronized(this) {//锁住this，效果和say()一样，只要多个线程同时访问同一个SynchronizedTest实例（this），就会发生不能同时访问此代码块\n\t\t\tSystem.out.println(p.getName());\n\t\t}\n\t}\n}\n\n```\n上面的三种用法都是为了避免在多个线程操作同一个对象的时候同时访问一个代码块或者某个方法。\n\n### 误用 synchronized 的情况\n下面的代码想要防止多个线程同时对某个代码块的访问，但是最后没有做到。\n```java\nclass Sync {  \n  \n    public synchronized void test() {  \n        System.out.println(\"test开始..\");  \n        try {  \n            Thread.sleep(1000);  \n        } catch (InterruptedException e) {  \n            e.printStackTrace();  \n        }  \n        System.out.println(\"test结束..\");  \n    }  \n}  \n  \nclass MyThread extends Thread {  \n  \n    public void run() {  \n        Sync sync = new Sync();  \n        sync.test();  \n    }  \n}  \n  \npublic class Main {  \n  \n    public static void main(String[] args) {  \n        for (int i = 0; i < 3; i++) {  \n            Thread thread = new MyThread();  \n            thread.start();  \n        }  \n    }  \n}  \n```\n```\n运行结果：\ntest开始..\ntest开始..\ntest开始..\ntest结束..\ntest结束..\ntest结束..\n```\n可以看出来，上面的程序起了三个线程，同时运行test方法，虽然test方法加上了synchronized，但是还是同时运行起来，貌似synchronized没起作用。\n\n将test方法改成如下：\n```java\npublic void test() {  \n    synchronized(this){  \n        System.out.println(\"test开始..\");  \n        try {  \n            Thread.sleep(1000);  \n        } catch (InterruptedException e) {  \n            e.printStackTrace();  \n        }  \n        System.out.println(\"test结束..\");  \n    }  \n}  \n```\n```\n运行结果：\ntest开始..\ntest开始..\ntest开始..\ntest结束..\ntest结束..\ntest结束..\n```\n一切还是这么平静，没有看到synchronized 达到想要的结果。为什么？刚才讲到上面的两种方法是为了避免在多个线程操作**同一个对象**的时候同时访问一个代码块或者某个方法，但是在\n```java\nclass MyThread extends Thread {  \n  \n    public void run() {  \n        Sync sync = new Sync();  \n        sync.test();  \n    }  \n}  \n```\n中，每个线程都单独操作一个 Sync 对象，这样线程之间根本不会发生同步。怎么做呢？\n```java\nclass MyThread2 extends Thread {\n\t\n\tprivate Sync sync;\n\t\n\tpublic MyThread2(Sync sync) {\n\t\tthis.sync = sync;\n\t}\n\t  \n    public void run() {\n        sync.test();  \n    }  \n}\n```\n```java\nSync sync = new Sync();\nfor (int i = 0; i < 3; i++) {  \n    Thread thread = new MyThread2(sync);\n    thread.start();  \n}\n```\n输出结果如下：\n```\ntest开始..\ntest结束..\ntest开始..\ntest结束..\ntest开始..\ntest结束..\n```\n这样就达到预期了，多个线程在操作同一个对象的时候只有一个线程能够访问 test 方法。\n\n但是还有其他方法吗？也就是如何避免多个线程执行多个对象的同一个代码块呢。看看下面的代码：\n```java\npublic class Sync {\n\tpublic void test2() {\n\t\tsynchronized (Sync.class) { // 作用于 Sync 类的所有实例\n\t\t\tSystem.out.println(\"test2开始..\");\n\t\t\ttry {\n\t\t\t\tThread.sleep(1000);\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\tSystem.out.println(\"test2结束..\");\n\t\t}\n\t}\n}\n```\n```java\nclass MyThread3 extends Thread {  \n\t  \n    public void run() {  \n        Sync sync = new Sync();  \n        sync.test2();  \n    }  \n}\n```\n```java\nfor (int i = 0; i < 3; i++) {  \n    Thread thread = new MyThread3();\n    thread.start();  \n}\n```\n输出结果如下：\n```\ntest2开始..\ntest2结束..\ntest2开始..\ntest2结束..\ntest2开始..\ntest2结束..\n```\n这样就满足期望了，关键是\n```java\nsynchronized (Sync.class) { // 作用于 Sync 类的所有实例\n//...\n}\n```\n\n如果synchronized作用于某个静态方法上会有什么效果呢？\n```java\npublic static synchronized void test3() {\n\tSystem.out.println(\"test3开始..\");\n\ttry {\n\t\tThread.sleep(1000);\n\t} catch (InterruptedException e) {\n\t\te.printStackTrace();\n\t}\n\tSystem.out.println(\"test3结束..\");\n}\n```\n```java\nclass MyThread4 extends Thread {  \n\t  \n    public void run() {  \n        Sync.test3();  \n    }  \n}\n```\n```java\nfor (int i = 0; i < 3; i++) {  \n    Thread thread = new MyThread4();\n    thread.start();  \n}\n```\n输出结果如下：\n```\ntest3开始..\ntest3结束..\ntest3开始..\ntest3结束..\ntest3开始..\ntest3结束..\n```\n这同样能够满足期望，从上面的这些例子也很好说明了5种的synchronized区别和相同点。\n\n\n### 对 synchronized 的总结\n\n- 方法同步，锁当前对象（this）\n- 静态同步方法，锁当前类的Class对象\n- 对于同步代码块，锁住的是synchronized括号中的对象，任意对象，当前类对象或者是其他对象。\n\n参考如下：\n[Java:使用synchronized和Lock对象获取对象锁](http://zhangjunhd.blog.51cto.com/113473/70300)\n[线程同步总结--synchronized方法和synchronized代码块](http://991690137.iteye.com/blog/1948882)","slug":"Java中的 synchronizd 关键字用法","published":1,"updated":"2016-06-08T07:15:20.105Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cip6qbssx00003kr9eb8lxx8m","content":"<h3 id=\"为什么要线程同步\"><a href=\"#为什么要线程同步\" class=\"headerlink\" title=\"为什么要线程同步\"></a>为什么要线程同步</h3><ul>\n<li>同步的目的是避免在同一个时间点操作同一个数据</li>\n<li>这里操作是指<code>update</code>，<code>delete</code>，数据是指任意对象</li>\n<li>每一个对象都有一把锁，<code>synchronized</code> 就是为此对象上锁，等到 <code>synchronized</code> 方法或<code>synchronized</code> 代码块执行完就会自动解锁，所有多线程执行相同带<code>synchronized</code>的代码时会检查所操作对象是否上锁，如果已经被锁住，就阻塞等待，直到锁此代码段的线程执行完此代码块。</li>\n</ul>\n<h3 id=\"synchronized-5种用法\"><a href=\"#synchronized-5种用法\" class=\"headerlink\" title=\"synchronized 5种用法\"></a>synchronized 5种用法</h3><ul>\n<li><p>用在普通方法上</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"> <span class=\"comment\">// 业务代码</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>用在静态方法上</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">test3</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"> <span class=\"comment\">// 业务代码</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>用在代码块，括号里面是this</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span>(<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 业务代码</span></span><br><span class=\"line\">\t  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>用在代码块，括号里面是类的一个实例，和this类似</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test11</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  Sync sync = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">  <span class=\"keyword\">synchronized</span>(sync) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 业务代码</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>用在代码块，括号里面是类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">synchronized</span> (Sync.class) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 业务代码</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>synchronized 锁住的是括号里的对象，而不是代码。对于非静态的 synchronized 方法，锁的就是对象本身也就是this。</p>\n<p>当 synchronized 锁住一个对象后，别的线程如果也想拿到这个对象的锁，就必须等待这个线程执行完成释放锁，才能再次给对象加锁，这样才达到线程同步的目的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SynchronizedTest</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tPerson p = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"lin\"</span>, <span class=\"number\">15</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">say</span><span class=\"params\">()</span> </span>&#123;<span class=\"comment\">//相当于锁住this，效果和say3()一样，只要多个线程同时访问同一个SynchronizedTest实例（相当于this），就会发生不能同时访问此方法</span></span><br><span class=\"line\">\t\tSystem.out.println(p.getName());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">say2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">synchronized</span>(p) &#123;<span class=\"comment\">//相当于锁住p，只要多个线程同时访问此代码块且是同一个p，那么在同一时间，只有一个线程能对P进行操作。</span></span><br><span class=\"line\">\t\t\tSystem.out.println(p.getName());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">say3</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">synchronized</span>(<span class=\"keyword\">this</span>) &#123;<span class=\"comment\">//锁住this，效果和say()一样，只要多个线程同时访问同一个SynchronizedTest实例（this），就会发生不能同时访问此代码块</span></span><br><span class=\"line\">\t\t\tSystem.out.println(p.getName());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的三种用法都是为了避免在多个线程操作同一个对象的时候同时访问一个代码块或者某个方法。</p>\n<h3 id=\"误用-synchronized-的情况\"><a href=\"#误用-synchronized-的情况\" class=\"headerlink\" title=\"误用 synchronized 的情况\"></a>误用 synchronized 的情况</h3><p>下面的代码想要防止多个线程同时对某个代码块的访问，但是最后没有做到。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sync</span> </span>&#123;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"test开始..\"</span>);  </span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;  </span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">1000</span>);  </span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;  </span><br><span class=\"line\">            e.printStackTrace();  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"test结束..\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        Sync sync = <span class=\"keyword\">new</span> Sync();  </span><br><span class=\"line\">        sync.test();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;  </span><br><span class=\"line\">            Thread thread = <span class=\"keyword\">new</span> MyThread();  </span><br><span class=\"line\">            thread.start();  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">运行结果：</span><br><span class=\"line\">test开始..</span><br><span class=\"line\">test开始..</span><br><span class=\"line\">test开始..</span><br><span class=\"line\">test结束..</span><br><span class=\"line\">test结束..</span><br><span class=\"line\">test结束..</span><br></pre></td></tr></table></figure>\n<p>可以看出来，上面的程序起了三个线程，同时运行test方法，虽然test方法加上了synchronized，但是还是同时运行起来，貌似synchronized没起作用。</p>\n<p>将test方法改成如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span>(<span class=\"keyword\">this</span>)&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"test开始..\"</span>);  </span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;  </span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">1000</span>);  </span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;  </span><br><span class=\"line\">            e.printStackTrace();  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"test结束..\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">运行结果：</span><br><span class=\"line\">test开始..</span><br><span class=\"line\">test开始..</span><br><span class=\"line\">test开始..</span><br><span class=\"line\">test结束..</span><br><span class=\"line\">test结束..</span><br><span class=\"line\">test结束..</span><br></pre></td></tr></table></figure>\n<p>一切还是这么平静，没有看到synchronized 达到想要的结果。为什么？刚才讲到上面的两种方法是为了避免在多个线程操作<strong>同一个对象</strong>的时候同时访问一个代码块或者某个方法，但是在<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        Sync sync = <span class=\"keyword\">new</span> Sync();  </span><br><span class=\"line\">        sync.test();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>中，每个线程都单独操作一个 Sync 对象，这样线程之间根本不会发生同步。怎么做呢？<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread2</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Sync sync;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyThread2</span><span class=\"params\">(Sync sync)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.sync = sync;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        sync.test();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Sync sync = <span class=\"keyword\">new</span> Sync();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;  </span><br><span class=\"line\">    Thread thread = <span class=\"keyword\">new</span> MyThread2(sync);</span><br><span class=\"line\">    thread.start();  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test开始..</span><br><span class=\"line\">test结束..</span><br><span class=\"line\">test开始..</span><br><span class=\"line\">test结束..</span><br><span class=\"line\">test开始..</span><br><span class=\"line\">test结束..</span><br></pre></td></tr></table></figure></p>\n<p>这样就达到预期了，多个线程在操作同一个对象的时候只有一个线程能够访问 test 方法。</p>\n<p>但是还有其他方法吗？也就是如何避免多个线程执行多个对象的同一个代码块呢。看看下面的代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sync</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">synchronized</span> (Sync.class) &#123; <span class=\"comment\">// 作用于 Sync 类的所有实例</span></span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"test2开始..\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\tThread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"test2结束..\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread3</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;  </span><br><span class=\"line\">\t  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        Sync sync = <span class=\"keyword\">new</span> Sync();  </span><br><span class=\"line\">        sync.test2();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;  </span><br><span class=\"line\">    Thread thread = <span class=\"keyword\">new</span> MyThread3();</span><br><span class=\"line\">    thread.start();  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test2开始..</span><br><span class=\"line\">test2结束..</span><br><span class=\"line\">test2开始..</span><br><span class=\"line\">test2结束..</span><br><span class=\"line\">test2开始..</span><br><span class=\"line\">test2结束..</span><br></pre></td></tr></table></figure></p>\n<p>这样就满足期望了，关键是<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">synchronized</span> (Sync.class) &#123; <span class=\"comment\">// 作用于 Sync 类的所有实例</span></span><br><span class=\"line\"><span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>如果synchronized作用于某个静态方法上会有什么效果呢？<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">test3</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"test3开始..\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\tThread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">\t\te.printStackTrace();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"test3结束..\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread4</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;  </span><br><span class=\"line\">\t  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        Sync.test3();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;  </span><br><span class=\"line\">    Thread thread = <span class=\"keyword\">new</span> MyThread4();</span><br><span class=\"line\">    thread.start();  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test3开始..</span><br><span class=\"line\">test3结束..</span><br><span class=\"line\">test3开始..</span><br><span class=\"line\">test3结束..</span><br><span class=\"line\">test3开始..</span><br><span class=\"line\">test3结束..</span><br></pre></td></tr></table></figure></p>\n<p>这同样能够满足期望，从上面的这些例子也很好说明了5种的synchronized区别和相同点。</p>\n<h3 id=\"对-synchronized-的总结\"><a href=\"#对-synchronized-的总结\" class=\"headerlink\" title=\"对 synchronized 的总结\"></a>对 synchronized 的总结</h3><ul>\n<li>方法同步，锁当前对象（this）</li>\n<li>静态同步方法，锁当前类的Class对象</li>\n<li>对于同步代码块，锁住的是synchronized括号中的对象，任意对象，当前类对象或者是其他对象。</li>\n</ul>\n<p>参考如下：<br><a href=\"http://zhangjunhd.blog.51cto.com/113473/70300\" target=\"_blank\" rel=\"external\">Java:使用synchronized和Lock对象获取对象锁</a><br><a href=\"http://991690137.iteye.com/blog/1948882\" target=\"_blank\" rel=\"external\">线程同步总结–synchronized方法和synchronized代码块</a></p>\n","excerpt":"","more":"<h3 id=\"为什么要线程同步\"><a href=\"#为什么要线程同步\" class=\"headerlink\" title=\"为什么要线程同步\"></a>为什么要线程同步</h3><ul>\n<li>同步的目的是避免在同一个时间点操作同一个数据</li>\n<li>这里操作是指<code>update</code>，<code>delete</code>，数据是指任意对象</li>\n<li>每一个对象都有一把锁，<code>synchronized</code> 就是为此对象上锁，等到 <code>synchronized</code> 方法或<code>synchronized</code> 代码块执行完就会自动解锁，所有多线程执行相同带<code>synchronized</code>的代码时会检查所操作对象是否上锁，如果已经被锁住，就阻塞等待，直到锁此代码段的线程执行完此代码块。</li>\n</ul>\n<h3 id=\"synchronized-5种用法\"><a href=\"#synchronized-5种用法\" class=\"headerlink\" title=\"synchronized 5种用法\"></a>synchronized 5种用法</h3><ul>\n<li><p>用在普通方法上</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"> <span class=\"comment\">// 业务代码</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>用在静态方法上</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">test3</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"> <span class=\"comment\">// 业务代码</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>用在代码块，括号里面是this</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span>(<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 业务代码</span></span><br><span class=\"line\">\t  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>用在代码块，括号里面是类的一个实例，和this类似</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test11</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  Sync sync = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">  <span class=\"keyword\">synchronized</span>(sync) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 业务代码</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>用在代码块，括号里面是类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">synchronized</span> (Sync.class) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 业务代码</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>synchronized 锁住的是括号里的对象，而不是代码。对于非静态的 synchronized 方法，锁的就是对象本身也就是this。</p>\n<p>当 synchronized 锁住一个对象后，别的线程如果也想拿到这个对象的锁，就必须等待这个线程执行完成释放锁，才能再次给对象加锁，这样才达到线程同步的目的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SynchronizedTest</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tPerson p = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"lin\"</span>, <span class=\"number\">15</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">say</span><span class=\"params\">()</span> </span>&#123;<span class=\"comment\">//相当于锁住this，效果和say3()一样，只要多个线程同时访问同一个SynchronizedTest实例（相当于this），就会发生不能同时访问此方法</span></span><br><span class=\"line\">\t\tSystem.out.println(p.getName());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">say2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">synchronized</span>(p) &#123;<span class=\"comment\">//相当于锁住p，只要多个线程同时访问此代码块且是同一个p，那么在同一时间，只有一个线程能对P进行操作。</span></span><br><span class=\"line\">\t\t\tSystem.out.println(p.getName());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">say3</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">synchronized</span>(<span class=\"keyword\">this</span>) &#123;<span class=\"comment\">//锁住this，效果和say()一样，只要多个线程同时访问同一个SynchronizedTest实例（this），就会发生不能同时访问此代码块</span></span><br><span class=\"line\">\t\t\tSystem.out.println(p.getName());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的三种用法都是为了避免在多个线程操作同一个对象的时候同时访问一个代码块或者某个方法。</p>\n<h3 id=\"误用-synchronized-的情况\"><a href=\"#误用-synchronized-的情况\" class=\"headerlink\" title=\"误用 synchronized 的情况\"></a>误用 synchronized 的情况</h3><p>下面的代码想要防止多个线程同时对某个代码块的访问，但是最后没有做到。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sync</span> </span>&#123;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"test开始..\"</span>);  </span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;  </span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">1000</span>);  </span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;  </span><br><span class=\"line\">            e.printStackTrace();  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"test结束..\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        Sync sync = <span class=\"keyword\">new</span> Sync();  </span><br><span class=\"line\">        sync.test();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;  </span><br><span class=\"line\">            Thread thread = <span class=\"keyword\">new</span> MyThread();  </span><br><span class=\"line\">            thread.start();  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">运行结果：</span><br><span class=\"line\">test开始..</span><br><span class=\"line\">test开始..</span><br><span class=\"line\">test开始..</span><br><span class=\"line\">test结束..</span><br><span class=\"line\">test结束..</span><br><span class=\"line\">test结束..</span><br></pre></td></tr></table></figure>\n<p>可以看出来，上面的程序起了三个线程，同时运行test方法，虽然test方法加上了synchronized，但是还是同时运行起来，貌似synchronized没起作用。</p>\n<p>将test方法改成如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span>(<span class=\"keyword\">this</span>)&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"test开始..\"</span>);  </span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;  </span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">1000</span>);  </span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;  </span><br><span class=\"line\">            e.printStackTrace();  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"test结束..\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">运行结果：</span><br><span class=\"line\">test开始..</span><br><span class=\"line\">test开始..</span><br><span class=\"line\">test开始..</span><br><span class=\"line\">test结束..</span><br><span class=\"line\">test结束..</span><br><span class=\"line\">test结束..</span><br></pre></td></tr></table></figure>\n<p>一切还是这么平静，没有看到synchronized 达到想要的结果。为什么？刚才讲到上面的两种方法是为了避免在多个线程操作<strong>同一个对象</strong>的时候同时访问一个代码块或者某个方法，但是在<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        Sync sync = <span class=\"keyword\">new</span> Sync();  </span><br><span class=\"line\">        sync.test();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>中，每个线程都单独操作一个 Sync 对象，这样线程之间根本不会发生同步。怎么做呢？<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread2</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Sync sync;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyThread2</span><span class=\"params\">(Sync sync)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.sync = sync;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        sync.test();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Sync sync = <span class=\"keyword\">new</span> Sync();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;  </span><br><span class=\"line\">    Thread thread = <span class=\"keyword\">new</span> MyThread2(sync);</span><br><span class=\"line\">    thread.start();  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test开始..</span><br><span class=\"line\">test结束..</span><br><span class=\"line\">test开始..</span><br><span class=\"line\">test结束..</span><br><span class=\"line\">test开始..</span><br><span class=\"line\">test结束..</span><br></pre></td></tr></table></figure></p>\n<p>这样就达到预期了，多个线程在操作同一个对象的时候只有一个线程能够访问 test 方法。</p>\n<p>但是还有其他方法吗？也就是如何避免多个线程执行多个对象的同一个代码块呢。看看下面的代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sync</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">synchronized</span> (Sync.class) &#123; <span class=\"comment\">// 作用于 Sync 类的所有实例</span></span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"test2开始..\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\tThread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"test2结束..\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread3</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;  </span><br><span class=\"line\">\t  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        Sync sync = <span class=\"keyword\">new</span> Sync();  </span><br><span class=\"line\">        sync.test2();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;  </span><br><span class=\"line\">    Thread thread = <span class=\"keyword\">new</span> MyThread3();</span><br><span class=\"line\">    thread.start();  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test2开始..</span><br><span class=\"line\">test2结束..</span><br><span class=\"line\">test2开始..</span><br><span class=\"line\">test2结束..</span><br><span class=\"line\">test2开始..</span><br><span class=\"line\">test2结束..</span><br></pre></td></tr></table></figure></p>\n<p>这样就满足期望了，关键是<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">synchronized</span> (Sync.class) &#123; <span class=\"comment\">// 作用于 Sync 类的所有实例</span></span><br><span class=\"line\"><span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>如果synchronized作用于某个静态方法上会有什么效果呢？<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">test3</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"test3开始..\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\tThread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">\t\te.printStackTrace();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"test3结束..\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread4</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;  </span><br><span class=\"line\">\t  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        Sync.test3();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;  </span><br><span class=\"line\">    Thread thread = <span class=\"keyword\">new</span> MyThread4();</span><br><span class=\"line\">    thread.start();  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test3开始..</span><br><span class=\"line\">test3结束..</span><br><span class=\"line\">test3开始..</span><br><span class=\"line\">test3结束..</span><br><span class=\"line\">test3开始..</span><br><span class=\"line\">test3结束..</span><br></pre></td></tr></table></figure></p>\n<p>这同样能够满足期望，从上面的这些例子也很好说明了5种的synchronized区别和相同点。</p>\n<h3 id=\"对-synchronized-的总结\"><a href=\"#对-synchronized-的总结\" class=\"headerlink\" title=\"对 synchronized 的总结\"></a>对 synchronized 的总结</h3><ul>\n<li>方法同步，锁当前对象（this）</li>\n<li>静态同步方法，锁当前类的Class对象</li>\n<li>对于同步代码块，锁住的是synchronized括号中的对象，任意对象，当前类对象或者是其他对象。</li>\n</ul>\n<p>参考如下：<br><a href=\"http://zhangjunhd.blog.51cto.com/113473/70300\">Java:使用synchronized和Lock对象获取对象锁</a><br><a href=\"http://991690137.iteye.com/blog/1948882\">线程同步总结–synchronized方法和synchronized代码块</a></p>\n"},{"title":"写在github上的第一篇博客","date":"2016-05-31T16:00:00.000Z","description":"关于技术和生活的一些感想","_content":"\n这是我的第一篇写在 github 上的博客，但不会是最后一篇。\n\n在这里，我将分享自己在技术学习上的心得，和一些读书笔记，以及在看过他人技术类博客之后的一些个人感想，总之，在这里将会展现我技术，人生成长的点点滴滴。\n\n- 关于技术，我的分享点将侧重于`Java`，`数据库`，`JavaScript`，`Android`，以及对一些开源技术的学习。\n\n- 关于人生，我将分享个人的技术成长心路，对技术发展的看法，对社会生活百态的感想，对爱情，家庭以及生活的感悟。\n","source":"_posts/写在github上的第一篇博客.md","raw":"---\ntitle: 写在github上的第一篇博客\ndate: 2016-06-01\ntags: 感想\ncategories: 生活\ndescription: 关于技术和生活的一些感想\n---\n\n这是我的第一篇写在 github 上的博客，但不会是最后一篇。\n\n在这里，我将分享自己在技术学习上的心得，和一些读书笔记，以及在看过他人技术类博客之后的一些个人感想，总之，在这里将会展现我技术，人生成长的点点滴滴。\n\n- 关于技术，我的分享点将侧重于`Java`，`数据库`，`JavaScript`，`Android`，以及对一些开源技术的学习。\n\n- 关于人生，我将分享个人的技术成长心路，对技术发展的看法，对社会生活百态的感想，对爱情，家庭以及生活的感悟。\n","slug":"写在github上的第一篇博客","published":1,"updated":"2016-06-08T07:14:50.277Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cip6qbst500023kr9cw88dx48","content":"<p>这是我的第一篇写在 github 上的博客，但不会是最后一篇。</p>\n<p>在这里，我将分享自己在技术学习上的心得，和一些读书笔记，以及在看过他人技术类博客之后的一些个人感想，总之，在这里将会展现我技术，人生成长的点点滴滴。</p>\n<ul>\n<li><p>关于技术，我的分享点将侧重于<code>Java</code>，<code>数据库</code>，<code>JavaScript</code>，<code>Android</code>，以及对一些开源技术的学习。</p>\n</li>\n<li><p>关于人生，我将分享个人的技术成长心路，对技术发展的看法，对社会生活百态的感想，对爱情，家庭以及生活的感悟。</p>\n</li>\n</ul>\n","excerpt":"","more":"<p>这是我的第一篇写在 github 上的博客，但不会是最后一篇。</p>\n<p>在这里，我将分享自己在技术学习上的心得，和一些读书笔记，以及在看过他人技术类博客之后的一些个人感想，总之，在这里将会展现我技术，人生成长的点点滴滴。</p>\n<ul>\n<li><p>关于技术，我的分享点将侧重于<code>Java</code>，<code>数据库</code>，<code>JavaScript</code>，<code>Android</code>，以及对一些开源技术的学习。</p>\n</li>\n<li><p>关于人生，我将分享个人的技术成长心路，对技术发展的看法，对社会生活百态的感想，对爱情，家庭以及生活的感悟。</p>\n</li>\n</ul>\n"},{"title":"ELK：安装","date":"2016-06-09T16:00:00.000Z","description":"ELK 初步认识和安装","_content":"\n#ELK：安装\n\nELK 是 Elasticsearch,Logstash,Kibana的合称，依赖Java才能运行。\n\n- ElasticSearch 是开源分布式搜索引擎，能够实时处理，分析日志\n\n- Logstash 统一对应用程序日志进行收集管理\n\n- Kibana 是一个为 Logstash 和 ElasticSearch 提供的日志分析的 Web 接口。可使用它对日志进行高效的搜索、可视化、分析等各种操作\n\n他们之间的依赖关系如下：\n\nKibana <- ElasticSearch <- Logstash\n\n## 安装 Java\n\n- 到`http://www.oracle.com/technetwork/java/javase/downloads/index.html`下载`jdk-8u91-linux-x64.gz`\n\n- 上传到`Ubuntu`上的`/usr/local/soft`目录下，执行`tar -xvf jdk-8u91-linux-x64.gz`解压\n\n- 将下面的Java配置追加到`/etc/profile`文件中，然后执行`source /etc/profile`让配置立即生效\n```\n# set Java environment\nJAVA_HOME=/usr/local/soft/jdk1.8.0_91\nPATH=$JAVA_HOME/bin:$PATH\nCLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar\nexport JAVA_HOME\nexport PATH\nexport CLASSPATH\n```\n- 执行`java -version`和`javac -version`都能返回当前安装的Java的版本号，说明安装成功\n\n\n- 如果当前用户对目录没有权限，执行`sudo chown -R dev:dev /usr/local/soft`，其中`dev:dev`表示dev用户在dev用户组。\n\n\n\n## 安装 Elasticsearch\n\n- 到`https://www.elastic.co/downloads/elasticsearch`下载 elasticsearch-2.3.3.tar.gz\n\n- 上传到`Ubuntu`上的`/usr/local/soft`目录下，执行`tar -xvf elasticsearch-2.3.3.tar.gz`解压\n\n- 执行`sh elasticsearch-2.3.3/bin/elasticsearch`\n\n- 打开浏览器输入`http://localhost:9200/`，返回如下内容说明安装成功:\n```\n{\n  \"name\" : \"Earth Lord\",\n  \"cluster_name\" : \"elasticsearch\",\n  \"version\" : {\n    \"number\" : \"2.3.3\",\n    \"build_hash\" : \"218bdf10790eef486ff2c41a3df5cfa32dadcfde\",\n    \"build_timestamp\" : \"2016-05-17T15:40:04Z\",\n    \"build_snapshot\" : false,\n    \"lucene_version\" : \"5.5.0\"\n  },\n  \"tagline\" : \"You Know, for Search\"\n}\n```\n## 安装 Logstash\n\n- 在`https://www.elastic.co/downloads/logstash`下载`logstash-2.3.2.tar.gz`\n\n- 上传到`Ubuntu`上的`/usr/local/soft`目录下，执行`tar -xvf logstash-2.3.2.tar.gz`解压\n\n- 执行`sh logstash-2.3.2/bin/logstash -e 'input { stdin { } } output { stdout {} }'`，提示\n```\nSettings: Default pipeline workers: 1\nPipeline main started\n```\n说明安装成功，输入任意内容将会打印刚才的输入。\n\n## 安装 Kibana\n\n- 在`https://www.elastic.co/downloads/kibana`下载`kibana-4.5.1-linux-x64.tar.gz`\n\n- 上传到`Ubuntu`上的`/usr/local/soft`目录下，执行`tar -xvf kibana-4.5.1-linux-x64.tar.gz`解压\n\n- 编辑`vi kibana-4.5.1-linux-x64/config/kibana.yml`，确保kibana和elasticsearch 关联起来\n```\nelasticsearch.url: \"http://localhost:9200\"\n```\n\n- 编辑`vi elasticsearch-2.3.3/config/elasticsearch.yml`，追加下面一行，并重启elasticsearch服务\n```\nhttp.cors.enabled: true\n```\n\n- 执行`sh kibana-4.5.1-linux-x64/bin/kibana`启动kibana，在浏览器中输入`http://localhost:5601`，即可访问kibana\n\n参考：\n[CentOS下使用ELK套件搭建日志分析和监控平台](http://blog.csdn.net/i_chips/article/details/43309415)\n[http://www.cnblogs.com/danbo/p/5220516.html](ELK日志分析系统)\n[Logstash实践: 分布式系统的日志监控](http://www.cnblogs.com/yiwenshengmei/p/use_logstash_collect_log.html)","source":"_posts/ELK：安装.md","raw":"---\ntitle: ELK：安装\ndate: 2016-06-10\ntags: ELK\ncategories: 技术\ndescription: ELK 初步认识和安装\n---\n\n#ELK：安装\n\nELK 是 Elasticsearch,Logstash,Kibana的合称，依赖Java才能运行。\n\n- ElasticSearch 是开源分布式搜索引擎，能够实时处理，分析日志\n\n- Logstash 统一对应用程序日志进行收集管理\n\n- Kibana 是一个为 Logstash 和 ElasticSearch 提供的日志分析的 Web 接口。可使用它对日志进行高效的搜索、可视化、分析等各种操作\n\n他们之间的依赖关系如下：\n\nKibana <- ElasticSearch <- Logstash\n\n## 安装 Java\n\n- 到`http://www.oracle.com/technetwork/java/javase/downloads/index.html`下载`jdk-8u91-linux-x64.gz`\n\n- 上传到`Ubuntu`上的`/usr/local/soft`目录下，执行`tar -xvf jdk-8u91-linux-x64.gz`解压\n\n- 将下面的Java配置追加到`/etc/profile`文件中，然后执行`source /etc/profile`让配置立即生效\n```\n# set Java environment\nJAVA_HOME=/usr/local/soft/jdk1.8.0_91\nPATH=$JAVA_HOME/bin:$PATH\nCLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar\nexport JAVA_HOME\nexport PATH\nexport CLASSPATH\n```\n- 执行`java -version`和`javac -version`都能返回当前安装的Java的版本号，说明安装成功\n\n\n- 如果当前用户对目录没有权限，执行`sudo chown -R dev:dev /usr/local/soft`，其中`dev:dev`表示dev用户在dev用户组。\n\n\n\n## 安装 Elasticsearch\n\n- 到`https://www.elastic.co/downloads/elasticsearch`下载 elasticsearch-2.3.3.tar.gz\n\n- 上传到`Ubuntu`上的`/usr/local/soft`目录下，执行`tar -xvf elasticsearch-2.3.3.tar.gz`解压\n\n- 执行`sh elasticsearch-2.3.3/bin/elasticsearch`\n\n- 打开浏览器输入`http://localhost:9200/`，返回如下内容说明安装成功:\n```\n{\n  \"name\" : \"Earth Lord\",\n  \"cluster_name\" : \"elasticsearch\",\n  \"version\" : {\n    \"number\" : \"2.3.3\",\n    \"build_hash\" : \"218bdf10790eef486ff2c41a3df5cfa32dadcfde\",\n    \"build_timestamp\" : \"2016-05-17T15:40:04Z\",\n    \"build_snapshot\" : false,\n    \"lucene_version\" : \"5.5.0\"\n  },\n  \"tagline\" : \"You Know, for Search\"\n}\n```\n## 安装 Logstash\n\n- 在`https://www.elastic.co/downloads/logstash`下载`logstash-2.3.2.tar.gz`\n\n- 上传到`Ubuntu`上的`/usr/local/soft`目录下，执行`tar -xvf logstash-2.3.2.tar.gz`解压\n\n- 执行`sh logstash-2.3.2/bin/logstash -e 'input { stdin { } } output { stdout {} }'`，提示\n```\nSettings: Default pipeline workers: 1\nPipeline main started\n```\n说明安装成功，输入任意内容将会打印刚才的输入。\n\n## 安装 Kibana\n\n- 在`https://www.elastic.co/downloads/kibana`下载`kibana-4.5.1-linux-x64.tar.gz`\n\n- 上传到`Ubuntu`上的`/usr/local/soft`目录下，执行`tar -xvf kibana-4.5.1-linux-x64.tar.gz`解压\n\n- 编辑`vi kibana-4.5.1-linux-x64/config/kibana.yml`，确保kibana和elasticsearch 关联起来\n```\nelasticsearch.url: \"http://localhost:9200\"\n```\n\n- 编辑`vi elasticsearch-2.3.3/config/elasticsearch.yml`，追加下面一行，并重启elasticsearch服务\n```\nhttp.cors.enabled: true\n```\n\n- 执行`sh kibana-4.5.1-linux-x64/bin/kibana`启动kibana，在浏览器中输入`http://localhost:5601`，即可访问kibana\n\n参考：\n[CentOS下使用ELK套件搭建日志分析和监控平台](http://blog.csdn.net/i_chips/article/details/43309415)\n[http://www.cnblogs.com/danbo/p/5220516.html](ELK日志分析系统)\n[Logstash实践: 分布式系统的日志监控](http://www.cnblogs.com/yiwenshengmei/p/use_logstash_collect_log.html)","slug":"ELK：安装","published":1,"updated":"2016-06-10T09:59:33.284Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cipajpyu00000nkr9ad68nf29","content":"<p>#ELK：安装</p>\n<p>ELK 是 Elasticsearch,Logstash,Kibana的合称，依赖Java才能运行。</p>\n<ul>\n<li><p>ElasticSearch 是开源分布式搜索引擎，能够实时处理，分析日志</p>\n</li>\n<li><p>Logstash 统一对应用程序日志进行收集管理</p>\n</li>\n<li><p>Kibana 是一个为 Logstash 和 ElasticSearch 提供的日志分析的 Web 接口。可使用它对日志进行高效的搜索、可视化、分析等各种操作</p>\n</li>\n</ul>\n<p>他们之间的依赖关系如下：</p>\n<p>Kibana &lt;- ElasticSearch &lt;- Logstash</p>\n<h2 id=\"安装-Java\"><a href=\"#安装-Java\" class=\"headerlink\" title=\"安装 Java\"></a>安装 Java</h2><ul>\n<li><p>到<code>http://www.oracle.com/technetwork/java/javase/downloads/index.html</code>下载<code>jdk-8u91-linux-x64.gz</code></p>\n</li>\n<li><p>上传到<code>Ubuntu</code>上的<code>/usr/local/soft</code>目录下，执行<code>tar -xvf jdk-8u91-linux-x64.gz</code>解压</p>\n</li>\n<li><p>将下面的Java配置追加到<code>/etc/profile</code>文件中，然后执行<code>source /etc/profile</code>让配置立即生效</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># set Java environment</span><br><span class=\"line\">JAVA_HOME=/usr/local/soft/jdk1.8.0_91</span><br><span class=\"line\">PATH=$JAVA_HOME/bin:$PATH</span><br><span class=\"line\">CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class=\"line\">export JAVA_HOME</span><br><span class=\"line\">export PATH</span><br><span class=\"line\">export CLASSPATH</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>执行<code>java -version</code>和<code>javac -version</code>都能返回当前安装的Java的版本号，说明安装成功</p>\n</li>\n</ul>\n<ul>\n<li>如果当前用户对目录没有权限，执行<code>sudo chown -R dev:dev /usr/local/soft</code>，其中<code>dev:dev</code>表示dev用户在dev用户组。</li>\n</ul>\n<h2 id=\"安装-Elasticsearch\"><a href=\"#安装-Elasticsearch\" class=\"headerlink\" title=\"安装 Elasticsearch\"></a>安装 Elasticsearch</h2><ul>\n<li><p>到<code>https://www.elastic.co/downloads/elasticsearch</code>下载 elasticsearch-2.3.3.tar.gz</p>\n</li>\n<li><p>上传到<code>Ubuntu</code>上的<code>/usr/local/soft</code>目录下，执行<code>tar -xvf elasticsearch-2.3.3.tar.gz</code>解压</p>\n</li>\n<li><p>执行<code>sh elasticsearch-2.3.3/bin/elasticsearch</code></p>\n</li>\n<li><p>打开浏览器输入<code>http://localhost:9200/</code>，返回如下内容说明安装成功:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;name&quot; : &quot;Earth Lord&quot;,</span><br><span class=\"line\">  &quot;cluster_name&quot; : &quot;elasticsearch&quot;,</span><br><span class=\"line\">  &quot;version&quot; : &#123;</span><br><span class=\"line\">    &quot;number&quot; : &quot;2.3.3&quot;,</span><br><span class=\"line\">    &quot;build_hash&quot; : &quot;218bdf10790eef486ff2c41a3df5cfa32dadcfde&quot;,</span><br><span class=\"line\">    &quot;build_timestamp&quot; : &quot;2016-05-17T15:40:04Z&quot;,</span><br><span class=\"line\">    &quot;build_snapshot&quot; : false,</span><br><span class=\"line\">    &quot;lucene_version&quot; : &quot;5.5.0&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;tagline&quot; : &quot;You Know, for Search&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"安装-Logstash\"><a href=\"#安装-Logstash\" class=\"headerlink\" title=\"安装 Logstash\"></a>安装 Logstash</h2><ul>\n<li><p>在<code>https://www.elastic.co/downloads/logstash</code>下载<code>logstash-2.3.2.tar.gz</code></p>\n</li>\n<li><p>上传到<code>Ubuntu</code>上的<code>/usr/local/soft</code>目录下，执行<code>tar -xvf logstash-2.3.2.tar.gz</code>解压</p>\n</li>\n<li><p>执行<code>sh logstash-2.3.2/bin/logstash -e &#39;input { stdin { } } output { stdout {} }&#39;</code>，提示</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Settings: Default pipeline workers: 1</span><br><span class=\"line\">Pipeline main started</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>说明安装成功，输入任意内容将会打印刚才的输入。</p>\n<h2 id=\"安装-Kibana\"><a href=\"#安装-Kibana\" class=\"headerlink\" title=\"安装 Kibana\"></a>安装 Kibana</h2><ul>\n<li><p>在<code>https://www.elastic.co/downloads/kibana</code>下载<code>kibana-4.5.1-linux-x64.tar.gz</code></p>\n</li>\n<li><p>上传到<code>Ubuntu</code>上的<code>/usr/local/soft</code>目录下，执行<code>tar -xvf kibana-4.5.1-linux-x64.tar.gz</code>解压</p>\n</li>\n<li><p>编辑<code>vi kibana-4.5.1-linux-x64/config/kibana.yml</code>，确保kibana和elasticsearch 关联起来</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">elasticsearch.url: &quot;http://localhost:9200&quot;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>编辑<code>vi elasticsearch-2.3.3/config/elasticsearch.yml</code>，追加下面一行，并重启elasticsearch服务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http.cors.enabled: true</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>执行<code>sh kibana-4.5.1-linux-x64/bin/kibana</code>启动kibana，在浏览器中输入<code>http://localhost:5601</code>，即可访问kibana</p>\n</li>\n</ul>\n<p>参考：<br><a href=\"http://blog.csdn.net/i_chips/article/details/43309415\" target=\"_blank\" rel=\"external\">CentOS下使用ELK套件搭建日志分析和监控平台</a><br><a href=\"ELK日志分析系统\">http://www.cnblogs.com/danbo/p/5220516.html</a><br><a href=\"http://www.cnblogs.com/yiwenshengmei/p/use_logstash_collect_log.html\" target=\"_blank\" rel=\"external\">Logstash实践: 分布式系统的日志监控</a></p>\n","excerpt":"","more":"<p>#ELK：安装</p>\n<p>ELK 是 Elasticsearch,Logstash,Kibana的合称，依赖Java才能运行。</p>\n<ul>\n<li><p>ElasticSearch 是开源分布式搜索引擎，能够实时处理，分析日志</p>\n</li>\n<li><p>Logstash 统一对应用程序日志进行收集管理</p>\n</li>\n<li><p>Kibana 是一个为 Logstash 和 ElasticSearch 提供的日志分析的 Web 接口。可使用它对日志进行高效的搜索、可视化、分析等各种操作</p>\n</li>\n</ul>\n<p>他们之间的依赖关系如下：</p>\n<p>Kibana &lt;- ElasticSearch &lt;- Logstash</p>\n<h2 id=\"安装-Java\"><a href=\"#安装-Java\" class=\"headerlink\" title=\"安装 Java\"></a>安装 Java</h2><ul>\n<li><p>到<code>http://www.oracle.com/technetwork/java/javase/downloads/index.html</code>下载<code>jdk-8u91-linux-x64.gz</code></p>\n</li>\n<li><p>上传到<code>Ubuntu</code>上的<code>/usr/local/soft</code>目录下，执行<code>tar -xvf jdk-8u91-linux-x64.gz</code>解压</p>\n</li>\n<li><p>将下面的Java配置追加到<code>/etc/profile</code>文件中，然后执行<code>source /etc/profile</code>让配置立即生效</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># set Java environment</span><br><span class=\"line\">JAVA_HOME=/usr/local/soft/jdk1.8.0_91</span><br><span class=\"line\">PATH=$JAVA_HOME/bin:$PATH</span><br><span class=\"line\">CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class=\"line\">export JAVA_HOME</span><br><span class=\"line\">export PATH</span><br><span class=\"line\">export CLASSPATH</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>执行<code>java -version</code>和<code>javac -version</code>都能返回当前安装的Java的版本号，说明安装成功</p>\n</li>\n</ul>\n<ul>\n<li>如果当前用户对目录没有权限，执行<code>sudo chown -R dev:dev /usr/local/soft</code>，其中<code>dev:dev</code>表示dev用户在dev用户组。</li>\n</ul>\n<h2 id=\"安装-Elasticsearch\"><a href=\"#安装-Elasticsearch\" class=\"headerlink\" title=\"安装 Elasticsearch\"></a>安装 Elasticsearch</h2><ul>\n<li><p>到<code>https://www.elastic.co/downloads/elasticsearch</code>下载 elasticsearch-2.3.3.tar.gz</p>\n</li>\n<li><p>上传到<code>Ubuntu</code>上的<code>/usr/local/soft</code>目录下，执行<code>tar -xvf elasticsearch-2.3.3.tar.gz</code>解压</p>\n</li>\n<li><p>执行<code>sh elasticsearch-2.3.3/bin/elasticsearch</code></p>\n</li>\n<li><p>打开浏览器输入<code>http://localhost:9200/</code>，返回如下内容说明安装成功:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;name&quot; : &quot;Earth Lord&quot;,</span><br><span class=\"line\">  &quot;cluster_name&quot; : &quot;elasticsearch&quot;,</span><br><span class=\"line\">  &quot;version&quot; : &#123;</span><br><span class=\"line\">    &quot;number&quot; : &quot;2.3.3&quot;,</span><br><span class=\"line\">    &quot;build_hash&quot; : &quot;218bdf10790eef486ff2c41a3df5cfa32dadcfde&quot;,</span><br><span class=\"line\">    &quot;build_timestamp&quot; : &quot;2016-05-17T15:40:04Z&quot;,</span><br><span class=\"line\">    &quot;build_snapshot&quot; : false,</span><br><span class=\"line\">    &quot;lucene_version&quot; : &quot;5.5.0&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;tagline&quot; : &quot;You Know, for Search&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"安装-Logstash\"><a href=\"#安装-Logstash\" class=\"headerlink\" title=\"安装 Logstash\"></a>安装 Logstash</h2><ul>\n<li><p>在<code>https://www.elastic.co/downloads/logstash</code>下载<code>logstash-2.3.2.tar.gz</code></p>\n</li>\n<li><p>上传到<code>Ubuntu</code>上的<code>/usr/local/soft</code>目录下，执行<code>tar -xvf logstash-2.3.2.tar.gz</code>解压</p>\n</li>\n<li><p>执行<code>sh logstash-2.3.2/bin/logstash -e &#39;input { stdin { } } output { stdout {} }&#39;</code>，提示</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Settings: Default pipeline workers: 1</span><br><span class=\"line\">Pipeline main started</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>说明安装成功，输入任意内容将会打印刚才的输入。</p>\n<h2 id=\"安装-Kibana\"><a href=\"#安装-Kibana\" class=\"headerlink\" title=\"安装 Kibana\"></a>安装 Kibana</h2><ul>\n<li><p>在<code>https://www.elastic.co/downloads/kibana</code>下载<code>kibana-4.5.1-linux-x64.tar.gz</code></p>\n</li>\n<li><p>上传到<code>Ubuntu</code>上的<code>/usr/local/soft</code>目录下，执行<code>tar -xvf kibana-4.5.1-linux-x64.tar.gz</code>解压</p>\n</li>\n<li><p>编辑<code>vi kibana-4.5.1-linux-x64/config/kibana.yml</code>，确保kibana和elasticsearch 关联起来</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">elasticsearch.url: &quot;http://localhost:9200&quot;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>编辑<code>vi elasticsearch-2.3.3/config/elasticsearch.yml</code>，追加下面一行，并重启elasticsearch服务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http.cors.enabled: true</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>执行<code>sh kibana-4.5.1-linux-x64/bin/kibana</code>启动kibana，在浏览器中输入<code>http://localhost:5601</code>，即可访问kibana</p>\n</li>\n</ul>\n<p>参考：<br><a href=\"http://blog.csdn.net/i_chips/article/details/43309415\">CentOS下使用ELK套件搭建日志分析和监控平台</a><br><a href=\"ELK日志分析系统\">http://www.cnblogs.com/danbo/p/5220516.html</a><br><a href=\"http://www.cnblogs.com/yiwenshengmei/p/use_logstash_collect_log.html\">Logstash实践: 分布式系统的日志监控</a></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cip6qbssx00003kr9eb8lxx8m","category_id":"cip6qbsta00043kr9opjlgwna","_id":"cip6qbstd00083kr9wt6dmb53"},{"post_id":"cip6qbst500023kr9cw88dx48","category_id":"cip6qbstb00063kr9cosv6dto","_id":"cip6qbstd000a3kr9wotbwfjw"},{"post_id":"cipajpyu00000nkr9ad68nf29","category_id":"cip6qbsta00043kr9opjlgwna","_id":"cipajpyup0002nkr9s6bod2wo"}],"PostTag":[{"post_id":"cip6qbssx00003kr9eb8lxx8m","tag_id":"cip6qbst800033kr9jc54ql9y","_id":"cip6qbstc00073kr97wn8sjlq"},{"post_id":"cip6qbst500023kr9cw88dx48","tag_id":"cip6qbstb00053kr9fl3hzswg","_id":"cip6qbstd00093kr9ja0a38xp"},{"post_id":"cipajpyu00000nkr9ad68nf29","tag_id":"cipajpyul0001nkr9jq71f2ll","_id":"cipajpyuq0003nkr99yn1bt4o"}],"Tag":[{"name":"Java","_id":"cip6qbst800033kr9jc54ql9y"},{"name":"感想","_id":"cip6qbstb00053kr9fl3hzswg"},{"name":"ELK","_id":"cipajpyul0001nkr9jq71f2ll"}]}}