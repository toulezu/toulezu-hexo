{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","path":"vendors/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/bower.json","path":"vendors/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","path":"vendors/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","path":"vendors/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","path":"vendors/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","path":"vendors/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","path":"vendors/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","path":"vendors/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","path":"vendors/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","path":"vendors/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","path":"vendors/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","path":"vendors/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","path":"vendors/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","path":"vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","path":"vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"20038353db532b4c40625419d396da7359f89cbe","modified":1476067107076},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1476067107079},{"_id":"themes/next/.gitignore","hash":"80710b94ff2f6c013859ebffffe90f9295fc94ed","modified":1476067107104},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1476067107107},{"_id":"themes/next/.javascript_ignore","hash":"beb0b95736650284ceb712a162cc033847a83cd3","modified":1476067107110},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1476067107114},{"_id":"themes/next/README.en.md","hash":"fa31bbc6dd8778b8dee469740c92b3b5b59702af","modified":1476067107127},{"_id":"themes/next/README.md","hash":"06aaf1241e9e1619956c86d8b1397a643840a9d1","modified":1476067107135},{"_id":"themes/next/_config.yml","hash":"596d4b89a062b3e204224af83bc0b8190c51a2b4","modified":1495849470698},{"_id":"themes/next/bower.json","hash":"da39b00fcdf2e7a42af412de0a4d3617cc6d7084","modified":1476067107144},{"_id":"themes/next/gulpfile.coffee","hash":"d21430c020ad4b2ae195d8750c3865897e605d33","modified":1476067107149},{"_id":"themes/next/package.json","hash":"95eaba1607544965e432d56406bae391dd11bcbb","modified":1476067107531},{"_id":"source/_posts/ELK：安装.md","hash":"5f2e685181557ec0ab6cafd94abfb01a619128a0","modified":1476064686768},{"_id":"source/_posts/Java 分段从文件中读取数据的一个例子.md","hash":"87b9ad154fa14f9ff203190aeb330ac1eb9bb364","modified":1495849136392},{"_id":"source/_posts/Java中的 synchronizd 关键字用法.md","hash":"51f607820bdb4ba3fbf07215ec453e6dff75846b","modified":1476064686772},{"_id":"source/_posts/Log4j向Logstash发送日志实践.md","hash":"57bfd219a21bc89610b2b020c9865409cd87e395","modified":1476064686776},{"_id":"source/_posts/MariaDB 在 RedHat Linux 上的安装过程以及 MySQL 相关命令的使用.md","hash":"07297aa5a447c60462c333775726b0587bc7b0fa","modified":1495850143440},{"_id":"source/_posts/hexo的一些使用记录.txt","hash":"e19da419affd4dbce2faa1605571917b11be0d61","modified":1476064686780},{"_id":"source/_posts/mybatis-generator 学习笔记.txt","hash":"6d64bf683e96208cbfa0fd662b5738c4a3e441b6","modified":1476064686780},{"_id":"source/_posts/windows下自动上传war到Linux服务器，自动部署，自动重启Tomcat的系列脚本.md","hash":"e7f094e6a7a286904ca68ba96d0db2e499e290e2","modified":1495849867152},{"_id":"source/_posts/一个从 Jar 文件中获取所有的类路径的工具类.md","hash":"70123de55606a233f848f4718f8dbd9247edab6f","modified":1495849136412},{"_id":"source/_posts/使用Maven的profile和testResource进行Junit单元测试.md","hash":"c12844f062eace40453ae6d9f17817e3e3623d1d","modified":1476064686781},{"_id":"source/_posts/关于Java多线程在提升程序性能上的一些实践.md","hash":"04c5ac9fff38ed7068f848080fa4edeb16d61160","modified":1476064686787},{"_id":"source/_posts/写在github上的第一篇博客.md","hash":"23acd9bfcf6e1c15d48e69bf97bf5cbe22fee3d6","modified":1476064686791},{"_id":"source/_posts/在 Linux 上监控 Tomcat 是否关闭, 如果关闭自动重启.md","hash":"b3e94fead9850c663a0d1b2fa5b42480d50c3f0e","modified":1495850370690},{"_id":"source/_posts/在Junit单元测试中通过@PropertySource来获取Bean中的@Value属性值.md","hash":"2f6d5c993ca032f8c5f0f341b6d8362a15277f65","modified":1495849146683},{"_id":"source/_posts/对 Spring 中一些常见的 Annotation 的理解.md","hash":"4404204bb1f569f30c692afc4ef710604afd2a53","modified":1495850775573},{"_id":"source/_posts/对于缓存的一些认识.txt","hash":"14208c99da46c9eb501ee72d3b8e73aa88594337","modified":1476064686794},{"_id":"source/_posts/总结一下Spring中Bean的单例和多例.md","hash":"51fbc3b37c73acf343a7bb0089fb7b0851f83e29","modified":1476064686795},{"_id":"source/about/index.md","hash":"1150a4a42eabc51fd050f03b616f49b15b3d6af5","modified":1476064686843},{"_id":"source/categories/index.md","hash":"d84141743ecdebfbbfa470778b7bb54c27714119","modified":1476064686850},{"_id":"source/tags/index.md","hash":"001dd6f79652a835368f5279aa9983ceb9565307","modified":1476064686857},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1476067107045},{"_id":"themes/next/.git/config","hash":"8e94cc015a498d35202e9fd57e44b3c51e1e5634","modified":1476067107065},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1476067052315},{"_id":"themes/next/.git/index","hash":"7c335fae14a01d5f076604c595314af34ef5390a","modified":1476067108430},{"_id":"themes/next/.git/packed-refs","hash":"2b019142afbfebbe883b6603ea96aeefd15e0e82","modified":1476067107030},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"4312fb37fa2b8663006be3c4fe01125ec01171c1","modified":1476067107083},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"2692e36cc35b1594530981e7727771f601720a43","modified":1476067107087},{"_id":"themes/next/languages/default.yml","hash":"d2f6784b9c6567b64e58736e36025dbf96d863d4","modified":1476067107156},{"_id":"themes/next/languages/en.yml","hash":"df81ab6b1cf3c88ed053d3766381cd12eb659fe3","modified":1476067107159},{"_id":"themes/next/languages/de.yml","hash":"4c3ffeb0d214c807a226dd98214958cb5483df1c","modified":1476067107153},{"_id":"themes/next/languages/fr-FR.yml","hash":"d8a40fe025fad6f42df0cf16d4be2d513769b062","modified":1476067107163},{"_id":"themes/next/languages/id.yml","hash":"19537c8bae42c4c2e7d06a64537e8dfd503b7e19","modified":1476067107166},{"_id":"themes/next/languages/ja.yml","hash":"e594aa42a33c489e4a65065659a01bb76c3c0cb5","modified":1476067107170},{"_id":"themes/next/languages/ko.yml","hash":"feed5fdb677f87fbb9ba2b6e4413e7011180708e","modified":1476067107174},{"_id":"themes/next/languages/pt-BR.yml","hash":"81498b783372f11b2149bd2b1731e78432760a0e","modified":1476067107178},{"_id":"themes/next/languages/pt.yml","hash":"4c64594f477905d5d2d9ca2422f03175b7b0c617","modified":1476067107212},{"_id":"themes/next/languages/ru.yml","hash":"c3aedb94decf05a301662afc3398ab563dd9995a","modified":1476067107218},{"_id":"themes/next/languages/zh-Hans.yml","hash":"23b45e77c1846c9457b98c745a60a9461678c389","modified":1476067107223},{"_id":"themes/next/languages/zh-hk.yml","hash":"88e603eb0f3fd25c35bb37bd30372fd77bba7c46","modified":1476067107228},{"_id":"themes/next/languages/zh-tw.yml","hash":"04479b419c72b71fd34046f3fc33ebda4fe8de84","modified":1476067107232},{"_id":"themes/next/layout/_layout.swig","hash":"e11e494d55905e11af2db42944fb160733f308e6","modified":1476067107236},{"_id":"themes/next/layout/archive.swig","hash":"b867a08f6b43de8b5d700c84b943df55917407ae","modified":1476067107507},{"_id":"themes/next/layout/category.swig","hash":"58cf08388901f7549b1fca95548b2c79173aa840","modified":1476067107513},{"_id":"themes/next/layout/index.swig","hash":"e5b52e04296203262a400e8e36ae12426d31fd5b","modified":1476067107516},{"_id":"themes/next/layout/page.swig","hash":"a91e3fd7aef26e8a02e339e3372801c517f400cf","modified":1476067107520},{"_id":"themes/next/layout/tag.swig","hash":"6f764ea3ab11eeb7c530df45528d449b14f5dc62","modified":1476067107528},{"_id":"themes/next/layout/post.swig","hash":"b8334c479840b7724638eec71971cbd8512ae58d","modified":1476067107524},{"_id":"themes/next/scripts/merge-configs.js","hash":"f8cde6953939802f92da5b7a2458c6c539e9be69","modified":1476067107560},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1476067108418},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1476067108422},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1476067108426},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1476067107984},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1476067052322},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1476067052319},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1476067052327},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1476067052330},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1476067052334},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1476067052338},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1476067052343},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1476067052348},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1476067052352},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1476067052356},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1476067052361},{"_id":"themes/next/.git/logs/HEAD","hash":"b52f0b164599a0a9ca260f8ae6d9adfcf29593fe","modified":1476067107054},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"1c0e1418aace8d309fde8d4b26dd4b08493f666f","modified":1476067107241},{"_id":"themes/next/layout/_macro/post.swig","hash":"a2052d3f379c3c70fbde47c29175ef2c637716d6","modified":1476067107246},{"_id":"themes/next/layout/_macro/reward.swig","hash":"b6cb171f0ed227b82b8f7601814af2df93f3a09a","modified":1476067107251},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"f7138e4986b485119db84564cdeacda80ede8ad5","modified":1476067107256},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"c5cc0070ca7c9a8dbd4b09e0398db536c3cdbe8a","modified":1476067107261},{"_id":"themes/next/layout/_partials/comments.swig","hash":"d04a53cb1bb8a5f462b05107e9c566c2dfbf4c7d","modified":1476067107265},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1476067107269},{"_id":"themes/next/layout/_partials/footer.swig","hash":"d749b5b6b48dac6ddf5084e470122b09ce0a215a","modified":1476067107274},{"_id":"themes/next/layout/_partials/head.swig","hash":"6448e1335922f255c846badff630b6d84a3aba21","modified":1476067107277},{"_id":"themes/next/layout/_partials/header.swig","hash":"c0697644817f1570093de9f17ea096295da8c5f1","modified":1476067107286},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1476067107290},{"_id":"themes/next/layout/_partials/search.swig","hash":"95b55fe35f2d2c22f2cc055d4379b5435314c7ec","modified":1476067107295},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"c5db707b46eac6a5df1d2a77f8556945a66fd181","modified":1476067107358},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1476067107361},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1476067107365},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"c9d45628330ce8bf5fbe71c9f131c7d75334c1c4","modified":1476067107478},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1476067107564},{"_id":"themes/next/scripts/tags/full-image.js","hash":"86194a05a8c6499de0b2aaa525d6de135778c0ae","modified":1476067107567},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1476067107572},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1476067107980},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1476067107985},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1476067107986},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1476067107991},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1476067107997},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1476067108003},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1476067108009},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1476067108014},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1476067108020},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1476067108024},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1476067108025},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1476067108026},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1476067108029},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1476067108034},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1476067107372},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1476067107373},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1476067107855},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1476067107855},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1476067107862},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1476067107968},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1476067107979},{"_id":"themes/next/.git/refs/heads/master","hash":"c2dfdb1c9763f4b704310934baa32097241d6172","modified":1476067107050},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1476067107282},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1476067107302},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"efa7efcbb575381b508f9aa0e0c53140eef72a7b","modified":1476067107299},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1476067107324},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1476067107328},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1476067107332},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1476067107341},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"12684840de632eb16e53ffa863166306a756fd4f","modified":1476067107347},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1476067107369},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1476067107373},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"91c5353fcb94cc3b3f265b06ad2341734bc4c826","modified":1476067107377},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"8ba01f1ac07fbca62a4b00f5a0a3a506122c1530","modified":1476067107413},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"e495aed8fb36bf8015ddbd64366270a7debad2b0","modified":1476067107428},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"c14b6f75f5b9ea2ca0069776a6b2f80b972123dc","modified":1476067107436},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"4a5c6df1579a4ca72ed17f7dbd6d16a509aa7dc8","modified":1476067107464},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1476067107472},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1476067107853},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"a0f23e75a137d8c996c70e2059e0074f1e97a127","modified":1476067107855},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"531934ea21ef4dc9f0978512050f54834f0a6cff","modified":1476067107859},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1476067107965},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"b8e3663996b39590509d843f674360872b0242ac","modified":1476067107969},{"_id":"themes/next/source/css/_variables/base.styl","hash":"7531a9746a800461d34f771f17604dc686fbefb6","modified":1476067107973},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1476067108035},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"4a0da1bed19e65bd7db42421b447061bc1618710","modified":1476067108040},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1476067108047},{"_id":"themes/next/source/js/src/motion.js","hash":"ff9ea37d05c269e3a140c4ab448af03efc4bcc76","modified":1476067108066},{"_id":"themes/next/source/js/src/post-details.js","hash":"458af3b1bd7783c1950808e66cedfa9fb68bf21f","modified":1476067108076},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1476067108093},{"_id":"themes/next/source/js/src/utils.js","hash":"418d09eb4df5dcc5e8d13d7f6245b1888200b51c","modified":1476067108098},{"_id":"themes/next/source/vendors/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1476067108111},{"_id":"themes/next/source/vendors/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1476067108106},{"_id":"themes/next/source/vendors/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1476067108201},{"_id":"themes/next/source/vendors/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1476067108205},{"_id":"themes/next/source/vendors/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1476067108209},{"_id":"themes/next/source/vendors/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1476067108226},{"_id":"themes/next/source/vendors/font-awesome/.bower.json","hash":"bb093f2ac1f1305069d873a7941324c8e0de3135","modified":1476067108244},{"_id":"themes/next/source/vendors/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1476067108249},{"_id":"themes/next/source/vendors/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1476067108254},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","hash":"ed80b43dbc7e3009b2f436741b9796df8eb3be02","modified":1476067108258},{"_id":"themes/next/source/vendors/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1476067108258},{"_id":"themes/next/source/vendors/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1476067108310},{"_id":"themes/next/source/vendors/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1476067108321},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1476067108324},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1476067108328},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1476067108332},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1476067108362},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1476067108366},{"_id":"themes/next/source/vendors/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1476067108381},{"_id":"themes/next/source/vendors/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1476067108385},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1476067108401},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1476067108407},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1476067108412},{"_id":"themes/next/source/vendors/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1476067108314},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"b52f0b164599a0a9ca260f8ae6d9adfcf29593fe","modified":1476067107057},{"_id":"themes/next/.git/objects/pack/pack-118a81b8e2f0b6b9f993c01769c6bea2556fdf75.idx","hash":"450063e2acde4ce5d024fca4e4ca23cacab75144","modified":1476067106807},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1476067107040},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"ae5b8597603d4e42ee66ed121544e7b1c644767e","modified":1476067107381},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"24105e62d7f26946907fa14cd02589f899bf8122","modified":1476067107386},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1476067107390},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"1b6af02fd0ba3f729675cd95429a0cea4aebf358","modified":1476067107401},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"a79e7e0d809fcf407593dd7ed9e023db21c3cbd6","modified":1476067107395},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1476067107407},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"f8b6a3017ab79057ce99f1ccb512193d67f4a35f","modified":1476067107416},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"0a2f48971d86ea72e1a8fd1d8bbf2b7d423666b2","modified":1476067107422},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ad69cbf94eedacc27e756cdb9c7073416db697d0","modified":1476067107577},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1476067107581},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1476067107584},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"b7d5cc29586ac796a50d90974ad99d24a5982137","modified":1476067107587},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1476067107657},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1476067107747},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1476067107825},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5a35aa0381b0e1d465b952a997194441020446ea","modified":1476067107829},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"b6ee5fefa6046086a76ddbcfafc82482816fa3e0","modified":1476067107833},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1476067107838},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"c9218b48c56e52c06af9ce3cc8fbdae737cf16fe","modified":1476067107844},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1476067107849},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1476067107864},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1476067107867},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1476067107871},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1476067107874},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"55b44e03054cd20ed8129bf986b15fba5fd85aad","modified":1476067107878},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1476067107882},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1476067107885},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1476067107915},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1476067107918},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"13af2fb21fabfc4df4b577ce5363e13d03daff71","modified":1476067107923},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1476067107927},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1476067107930},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c9875c010bebd77b4f59d459a10455fceb0a66a1","modified":1476067107938},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"de31e923bf5102498f06b1ae6bdf2ea22409f3e0","modified":1476067107942},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"338e9475519ce72af29a1bc05610f9f486e0f1c2","modified":1476067107946},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"9887bd3894db5394c1e64e800afaae55f47e8dd0","modified":1476067107951},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1476067107955},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"983c0723e8cfd84b67c2e66da0c26425a8db06e0","modified":1476067107958},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"88a5e0e95f93e4adb196bff1aac17d6cfb03768a","modified":1476067107962},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"a9d064d600ee35acd66508167e1ac8c6cfdbdcd8","modified":1476067108084},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1476067108115},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1476067108116},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1476067108118},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1476067108148},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1476067108149},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1476067108150},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1476067108183},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1476067108188},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1476067108195},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1476067108230},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1476067108237},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","hash":"811432ad1e2d6c1f6da9a63fd919bf2a02b71dd9","modified":1476067108262},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1476067108268},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","hash":"4c2c5f5f6cc86d775a44b944661e038b7be98149","modified":1476067108274},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1476067108307},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1476067108371},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1476067108376},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1476067108281},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1476067108284},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1476067108304},{"_id":"themes/next/source/vendors/velocity/velocity.js","hash":"e63dc7cea055ca60a95d286f32349d88b10c5a4d","modified":1476067108390},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"b52f0b164599a0a9ca260f8ae6d9adfcf29593fe","modified":1476067107037},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4c4ef6e997d0c6e21de39c2daa0c768e12c8c6fa","modified":1476067107590},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1476067107597},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1476067107594},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"852fd77500bda2c1a6651a14aa48d7d6222adc9d","modified":1476067107600},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1476067107605},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1476067107609},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1476067107613},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"586d45f555fa32ed0f404d3da672f24966142cb1","modified":1476067107616},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"12e366f04497e3f44388fd40111a03e02f7c26af","modified":1476067107621},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"104b5c79cd891506e0beaf938b083685f1da8637","modified":1476067107625},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1476067107629},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"b8f9c95702e87fd0b170ab586c82c9718a245f8a","modified":1476067107633},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1476067107637},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"7f2bdd6109614d35408ee5ac3335aad4464c69c7","modified":1476067107711},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1476067107715},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"821991c0890966a512b43e8b1cf9537e738a09a0","modified":1476067107719},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1476067107723},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1476067107726},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"394888efec32749b353292a59ec7f1b609d6325e","modified":1476067107730},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"06b9a99d63b4d57fdbf70b88ab7036fbc47e3f52","modified":1476067107734},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"702be9e57dd6ff5fa99642a1f6e3df26215b8805","modified":1476067107738},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1476067107743},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a45f5fce643eec4e1b927165229d560364bcace1","modified":1476067107662},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1476067107666},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"4866fb9453d7d4c83a1c4e55d74e4afed336eb8b","modified":1476067107671},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1476067107675},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"ca20affaeaf33c0904cb6356864fc6b78e95f447","modified":1476067107679},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"2bc3e33fdfbcf348c96ca60598f629dcd7ba3617","modified":1476067107682},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"929fac3a505bacbce6ba63009fd15851e2a8669d","modified":1476067107686},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"8355b0e9375b3245508efda0e18acd069c2aa767","modified":1476067107690},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1476067107694},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"350469437b20ecfd6f3ca45e400478f8e3f71cfb","modified":1476067107698},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1476067107702},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"681b7c8ce4dc47130a0ca67c1ec62be7c96e4c4f","modified":1476067107706},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1476067107752},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"dd941824210733588841897457e0cc9697ca5608","modified":1476067107789},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1476067107794},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"a83f493e494f5c73fab8f6f5b686ef1670490095","modified":1476067107798},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1476067107802},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"7f7e9df15148608a9c29326dd880d8e8e8efc0ec","modified":1476067107806},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1476067107810},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1476067107814},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"eb4ede7d7446d8a2f2ddeef3b17f497a6ad30756","modified":1476067107817},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"7bd182d918f3117335a5ee87a1b544e6d2b54d7d","modified":1476067107822},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1476067107908},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1476067107912},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1476067107934},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1476067108151},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1476067108152},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1476067108165},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1476067108170},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1476067108175},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1476067108179},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1476067108300},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"f346b8b3df147e4059e1a7d66c52c9a6e1cec3e8","modified":1476067108290},{"_id":"themes/next/.git/objects/pack/pack-118a81b8e2f0b6b9f993c01769c6bea2556fdf75.pack","hash":"3b2d314fa05528a17a3f98c132b4e9717040965e","modified":1476067106897},{"_id":"public/atom.xml","hash":"6c8fb5725f0d0326ca97ac8dc11bdfef738ce32b","modified":1495850792213},{"_id":"public/sitemap.xml","hash":"46e3dde994e2dcf1d979ef83aa55ebad01b55768","modified":1495850792213},{"_id":"public/categories/index.html","hash":"fb8572588113794abd1295a3fdf5237e34395eee","modified":1495850792224},{"_id":"public/about/index.html","hash":"e6fbb3d046958dc55ff913855d95c10dd8bb73ae","modified":1495850792224},{"_id":"public/tags/index.html","hash":"93663d528827d4398570426002e5c8665e56e0a7","modified":1495850792224},{"_id":"public/2016/06/01/blog-github-some-thinking/index.html","hash":"a6a731d295a16038e8689d522502b3f1c6a17b67","modified":1495850792224},{"_id":"public/categories/技术/index.html","hash":"a5321484b68e93529d71621ba5b8e532bc5a834f","modified":1495850792224},{"_id":"public/categories/技术/page/2/index.html","hash":"d8e31c06b80aea097d655eed095d2f0b0dad0e09","modified":1495850792224},{"_id":"public/categories/多线程/index.html","hash":"bb92557910a22b03213c6fdaa08ecb31b9af4994","modified":1495850792225},{"_id":"public/categories/生活/index.html","hash":"7c848d63a4fb10f58f54eb06676ffcfb29efb354","modified":1495850792225},{"_id":"public/categories/Spring/index.html","hash":"1bedaf91871f6c02a425ccb04622a466b0e8c441","modified":1495850792225},{"_id":"public/tags/ELK/index.html","hash":"d020516e7aca28f62b6c244c4b76752b968201ef","modified":1495850792225},{"_id":"public/tags/Java/index.html","hash":"659d7e3ebd33655a76a593421994a9ef585150ae","modified":1495850792225},{"_id":"public/tags/Log4j/index.html","hash":"ad9edce60143e5cf6577f90aca0f503509b09a2c","modified":1495850792225},{"_id":"public/tags/Logstash/index.html","hash":"9b20ae1c6cf29c7fa133138eaeb9f1542135aeda","modified":1495850792225},{"_id":"public/tags/Linux/index.html","hash":"1f897c87723be5f309158cabb9888cb4026f4b74","modified":1495850792225},{"_id":"public/tags/MariaDB/index.html","hash":"1572cf5dcd8c44afe53cdb85d23a00debb37e446","modified":1495850792225},{"_id":"public/tags/MySql/index.html","hash":"293482ae94530779e31084a0f88442440300c497","modified":1495850792225},{"_id":"public/tags/自动部署/index.html","hash":"31db07f2cc84030223d28de00ac52fd440ee713e","modified":1495850792225},{"_id":"public/tags/Maven/index.html","hash":"f908fae06ebbb207cbf32e2d1c6596849eecce85","modified":1495850792225},{"_id":"public/tags/Junit/index.html","hash":"32f8b09f1ebe33a7c7d208a7878a4e141d6b5a43","modified":1495850792225},{"_id":"public/tags/Thread/index.html","hash":"a0df0dc8bc6233c91b87922435b3eefbf1323e20","modified":1495850792225},{"_id":"public/tags/Runnable/index.html","hash":"e2d34ba585798e78bb98ca289732388f974d6c7f","modified":1495850792226},{"_id":"public/tags/Executor/index.html","hash":"362dc50dab50f7f34064c543d2422b503640ffea","modified":1495850792226},{"_id":"public/tags/感想/index.html","hash":"a2b4aa54773f8046829e9b50af692494e51d4e99","modified":1495850792226},{"_id":"public/tags/系统监控/index.html","hash":"392e74cfa0164e4adc25db39c926df3828cda5c8","modified":1495850792226},{"_id":"public/tags/Tomcat/index.html","hash":"cbc188a18bd4b5636ccc112db42a999e6b820069","modified":1495850792226},{"_id":"public/tags/Spring/index.html","hash":"95ce86caf4d737bd894e19bca703a23fe0a54be8","modified":1495850792226},{"_id":"public/tags/Annotation/index.html","hash":"694ad41b8baf747c4281da9a2aeda90f211b0fb4","modified":1495850792226},{"_id":"public/2017/05/23/Spring-Annotation/index.html","hash":"f2fbc44485ea8cf30e22b8bbdb68f78c05e80954","modified":1495850792226},{"_id":"public/2017/05/15/Linux-MariaDB-setup-MySql/index.html","hash":"b14450f45718628767570946ed4722606c90996b","modified":1495850792226},{"_id":"public/2017/05/15/Linux-monitor-Tomcat/index.html","hash":"2ab41fe0ba46c9786e23446849c4f34c2fd58673","modified":1495850792226},{"_id":"public/2016/12/20/Windows-auto-deploy-war-to-Linux/index.html","hash":"ec928e530709f759c8bbf569f3158994137a6b5d","modified":1495850792226},{"_id":"public/2016/11/17/load-jar-file-class/index.html","hash":"74924c4817185d38bedf19cc8fd95c333adf45a1","modified":1495850792226},{"_id":"public/2016/10/31/java-read-file-piece/index.html","hash":"99cc233eaac0e8237331fdbf66f8b61a1f3b0cef","modified":1495850792226},{"_id":"public/2016/09/30/Spring-Junit-PropertySource-Value/index.html","hash":"11764d916f434783cf2fa2c7b9783a5c400e4959","modified":1495850792226},{"_id":"public/2016/08/30/Java-Thread-Runnable-Executor-Practice/index.html","hash":"d21a5eb0ac1cf48dd347de7d4f4c68daf0e60dc0","modified":1495850792226},{"_id":"public/2016/07/13/Spring-bean-scope-usage/index.html","hash":"5c2b908f28c242c3c48b07e159ff0a1d76cd9e90","modified":1495850792227},{"_id":"public/2016/07/11/Maven-profiles-testResource-Junit/index.html","hash":"f5a29b985d0d32c81b9658a8b624861e68bc9634","modified":1495850792227},{"_id":"public/2016/07/05/log4j-logstash-practice/index.html","hash":"c01e617715bc93a48039db8ea7b9b5201f81bb0d","modified":1495850792227},{"_id":"public/2016/06/10/ELK-introduce-setup/index.html","hash":"9c9a256900329d42b60b0cd3c79ed2a2d2c21480","modified":1495850792227},{"_id":"public/2016/06/07/Java-synchronizd-usage/index.html","hash":"ac583bfab1660141bd30ad79b5d5a6f57ec41d88","modified":1495850792227},{"_id":"public/archives/index.html","hash":"3a3732ad993e85cb588e1f4f2b32ee396cb3ae5c","modified":1495850792227},{"_id":"public/index.html","hash":"e6790f30b9b226d8688f7ec83801fbf3c986ba6a","modified":1495850792227},{"_id":"public/page/2/index.html","hash":"25c2230eb00d4a414513303e4d6ccf5c1aa33274","modified":1495850792227},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1495850792249},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1495850792249},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1495850792249},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1495850792249},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1495850792249},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1495850792249},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1495850792249},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1495850792249},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1495850792249},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1495850792250},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1495850792250},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1495850792250},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1495850792250},{"_id":"public/vendors/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1495850792250},{"_id":"public/vendors/font-awesome/HELP-US-OUT.txt","hash":"ed80b43dbc7e3009b2f436741b9796df8eb3be02","modified":1495850792250},{"_id":"public/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1495850792250},{"_id":"public/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1495850792250},{"_id":"public/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1495850792250},{"_id":"public/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1495850792250},{"_id":"public/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1495850792250},{"_id":"public/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1495850792250},{"_id":"public/vendors/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1495850792250},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1495850792250},{"_id":"public/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1495850792250},{"_id":"public/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1495850793029},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1495850793032},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1495850793033},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1495850793036},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1495850793036},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1495850793036},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1495850793036},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1495850793037},{"_id":"public/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1495850793037},{"_id":"public/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1495850793037},{"_id":"public/vendors/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1495850793037},{"_id":"public/vendors/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1495850793037},{"_id":"public/vendors/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1495850793037},{"_id":"public/vendors/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1495850793037},{"_id":"public/vendors/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1495850793037},{"_id":"public/vendors/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1495850793037},{"_id":"public/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1495850793037},{"_id":"public/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1495850793037},{"_id":"public/vendors/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1495850793037},{"_id":"public/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1495850793037},{"_id":"public/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1495850793037},{"_id":"public/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1495850793037},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1495850793037},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1495850793037},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1495850793038},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1495850793038},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1495850793038},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1495850793038},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1495850793038},{"_id":"public/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1495850793038},{"_id":"public/css/main.css","hash":"25732fe6c085d7eecaa6bdc28e1b8fff7690546f","modified":1495850793038},{"_id":"public/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1495850793038},{"_id":"public/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1495850793038},{"_id":"public/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1495850793038},{"_id":"public/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1495850793038},{"_id":"public/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1495850793038},{"_id":"public/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1495850793038},{"_id":"public/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1495850793038},{"_id":"public/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1495850793038},{"_id":"public/vendors/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1495850793038},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1495850793054},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"f346b8b3df147e4059e1a7d66c52c9a6e1cec3e8","modified":1495850793086}],"Category":[{"name":"技术","_id":"cj36mxs150003fwezyztz10wl"},{"name":"多线程","_id":"cj36mxs1w000mfwez9xf4elks"},{"name":"生活","_id":"cj36mxs25000ufwezumj6anxh"},{"name":"Spring","_id":"cj36mxs280010fwez58q4l90x"}],"Data":[],"Page":[{"title":"分类","date":"2016-07-14T02:59:22.000Z","layout":"categories","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2016-07-14 10:59:22\nlayout: categories\ntype: \"categories\"\ncomments: false\n---\n","updated":"2016-10-10T01:58:06.850Z","path":"categories/index.html","_id":"cj36mxs6y0020fweztc025e7j","content":"","excerpt":"","more":""},{"title":"关于我","layout":"categories","date":"2016-07-14T02:59:34.000Z","comments":0,"_content":"","source":"about/index.md","raw":"---\ntitle: 关于我\nlayout: categories\ndate: 2016-07-14 10:59:34\ncomments: false\n---\n","updated":"2016-10-10T01:58:06.843Z","path":"about/index.html","_id":"cj36mxs720022fwezvbv7r0yx","content":"","excerpt":"","more":""},{"title":"标签","layout":"tags","date":"2016-06-08T10:14:15.000Z","type":"tags","comments":0,"_content":"\n","source":"tags/index.md","raw":"---\ntitle: 标签\nlayout: tags\ndate: 2016-06-08 18:14:15\ntype: \"tags\"\ncomments: false\n---\n\n","updated":"2016-10-10T01:58:06.857Z","path":"tags/index.html","_id":"cj36mxs760024fwezwi326ylu","content":"","excerpt":"","more":""}],"Post":[{"title":"ELK：安装","title_url":"ELK-introduce-setup","date":"2016-06-09T16:00:00.000Z","description":"ELK 初步认识和安装","_content":"\n## ELK 简单介绍\n\nELK 是 Elasticsearch,Logstash,Kibana的合称，依赖Java才能运行。\n\n- ElasticSearch 是开源分布式搜索引擎，能够实时处理，分析日志\n\n- Logstash 统一对应用程序日志进行收集管理\n\n- Kibana 是一个为 Logstash 和 ElasticSearch 提供的日志分析的 Web 接口。可使用它对日志进行高效的搜索、可视化、分析等各种操作\n\n他们之间的依赖关系如下：\n\nKibana <- ElasticSearch <- Logstash\n\n## 安装 Java\n\n- 到`http://www.oracle.com/technetwork/java/javase/downloads/index.html`下载`jdk-8u91-linux-x64.gz`\n\n- 上传到`Ubuntu`上的`/usr/local/soft`目录下，执行`tar -xvf jdk-8u91-linux-x64.gz`解压\n\n- 将下面的Java配置追加到`/etc/profile`文件中，然后执行`source /etc/profile`让配置立即生效\n```\n# set Java environment\nJAVA_HOME=/usr/local/soft/jdk1.8.0_91\nPATH=$JAVA_HOME/bin:$PATH\nCLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar\nexport JAVA_HOME\nexport PATH\nexport CLASSPATH\n```\n- 执行`java -version`和`javac -version`都能返回当前安装的Java的版本号，说明安装成功\n\n\n- 如果当前用户对目录没有权限，执行`sudo chown -R dev:dev /usr/local/soft`，其中`dev:dev`表示dev用户在dev用户组。\n\n\n\n## 安装 Elasticsearch\n\n- 到`https://www.elastic.co/downloads/elasticsearch`下载 elasticsearch-2.3.3.tar.gz\n\n- 上传到`Ubuntu`上的`/usr/local/soft`目录下，执行`tar -xvf elasticsearch-2.3.3.tar.gz`解压\n\n- 执行`sh elasticsearch-2.3.3/bin/elasticsearch`\n\n- 打开浏览器输入`http://localhost:9200/`，返回如下内容说明安装成功:\n```\n{\n  \"name\" : \"Earth Lord\",\n  \"cluster_name\" : \"elasticsearch\",\n  \"version\" : {\n    \"number\" : \"2.3.3\",\n    \"build_hash\" : \"218bdf10790eef486ff2c41a3df5cfa32dadcfde\",\n    \"build_timestamp\" : \"2016-05-17T15:40:04Z\",\n    \"build_snapshot\" : false,\n    \"lucene_version\" : \"5.5.0\"\n  },\n  \"tagline\" : \"You Know, for Search\"\n}\n```\n## 安装 Logstash\n\n- 在`https://www.elastic.co/downloads/logstash`下载`logstash-2.3.2.tar.gz`\n\n- 上传到`Ubuntu`上的`/usr/local/soft`目录下，执行`tar -xvf logstash-2.3.2.tar.gz`解压\n\n- 执行`sh logstash-2.3.2/bin/logstash -e 'input { stdin { } } output { stdout {} }'`，提示\n```\nSettings: Default pipeline workers: 1\nPipeline main started\n```\n说明安装成功，输入任意内容将会打印刚才的输入。\n\n## 安装 Kibana\n\n- 在`https://www.elastic.co/downloads/kibana`下载`kibana-4.5.1-linux-x64.tar.gz`\n\n- 上传到`Ubuntu`上的`/usr/local/soft`目录下，执行`tar -xvf kibana-4.5.1-linux-x64.tar.gz`解压\n\n- 编辑`vi kibana-4.5.1-linux-x64/config/kibana.yml`，确保kibana和elasticsearch 关联起来\n```\nelasticsearch.url: \"http://localhost:9200\"\n```\n\n- 编辑`vi elasticsearch-2.3.3/config/elasticsearch.yml`，追加下面一行，并重启elasticsearch服务\n```\nhttp.cors.enabled: true\n```\n\n- 执行`sh kibana-4.5.1-linux-x64/bin/kibana`启动kibana，在浏览器中输入`http://localhost:5601`，即可访问kibana\n\n参考：\n[CentOS下使用ELK套件搭建日志分析和监控平台](http://blog.csdn.net/i_chips/article/details/43309415)\n[http://www.cnblogs.com/danbo/p/5220516.html](ELK日志分析系统)\n[Logstash实践: 分布式系统的日志监控](http://www.cnblogs.com/yiwenshengmei/p/use_logstash_collect_log.html)","source":"_posts/ELK：安装.md","raw":"---\ntitle: ELK：安装\ntitle_url: ELK-introduce-setup\ndate: 2016-06-10\ntags: ELK\ncategories: 技术\ndescription: ELK 初步认识和安装\n---\n\n## ELK 简单介绍\n\nELK 是 Elasticsearch,Logstash,Kibana的合称，依赖Java才能运行。\n\n- ElasticSearch 是开源分布式搜索引擎，能够实时处理，分析日志\n\n- Logstash 统一对应用程序日志进行收集管理\n\n- Kibana 是一个为 Logstash 和 ElasticSearch 提供的日志分析的 Web 接口。可使用它对日志进行高效的搜索、可视化、分析等各种操作\n\n他们之间的依赖关系如下：\n\nKibana <- ElasticSearch <- Logstash\n\n## 安装 Java\n\n- 到`http://www.oracle.com/technetwork/java/javase/downloads/index.html`下载`jdk-8u91-linux-x64.gz`\n\n- 上传到`Ubuntu`上的`/usr/local/soft`目录下，执行`tar -xvf jdk-8u91-linux-x64.gz`解压\n\n- 将下面的Java配置追加到`/etc/profile`文件中，然后执行`source /etc/profile`让配置立即生效\n```\n# set Java environment\nJAVA_HOME=/usr/local/soft/jdk1.8.0_91\nPATH=$JAVA_HOME/bin:$PATH\nCLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar\nexport JAVA_HOME\nexport PATH\nexport CLASSPATH\n```\n- 执行`java -version`和`javac -version`都能返回当前安装的Java的版本号，说明安装成功\n\n\n- 如果当前用户对目录没有权限，执行`sudo chown -R dev:dev /usr/local/soft`，其中`dev:dev`表示dev用户在dev用户组。\n\n\n\n## 安装 Elasticsearch\n\n- 到`https://www.elastic.co/downloads/elasticsearch`下载 elasticsearch-2.3.3.tar.gz\n\n- 上传到`Ubuntu`上的`/usr/local/soft`目录下，执行`tar -xvf elasticsearch-2.3.3.tar.gz`解压\n\n- 执行`sh elasticsearch-2.3.3/bin/elasticsearch`\n\n- 打开浏览器输入`http://localhost:9200/`，返回如下内容说明安装成功:\n```\n{\n  \"name\" : \"Earth Lord\",\n  \"cluster_name\" : \"elasticsearch\",\n  \"version\" : {\n    \"number\" : \"2.3.3\",\n    \"build_hash\" : \"218bdf10790eef486ff2c41a3df5cfa32dadcfde\",\n    \"build_timestamp\" : \"2016-05-17T15:40:04Z\",\n    \"build_snapshot\" : false,\n    \"lucene_version\" : \"5.5.0\"\n  },\n  \"tagline\" : \"You Know, for Search\"\n}\n```\n## 安装 Logstash\n\n- 在`https://www.elastic.co/downloads/logstash`下载`logstash-2.3.2.tar.gz`\n\n- 上传到`Ubuntu`上的`/usr/local/soft`目录下，执行`tar -xvf logstash-2.3.2.tar.gz`解压\n\n- 执行`sh logstash-2.3.2/bin/logstash -e 'input { stdin { } } output { stdout {} }'`，提示\n```\nSettings: Default pipeline workers: 1\nPipeline main started\n```\n说明安装成功，输入任意内容将会打印刚才的输入。\n\n## 安装 Kibana\n\n- 在`https://www.elastic.co/downloads/kibana`下载`kibana-4.5.1-linux-x64.tar.gz`\n\n- 上传到`Ubuntu`上的`/usr/local/soft`目录下，执行`tar -xvf kibana-4.5.1-linux-x64.tar.gz`解压\n\n- 编辑`vi kibana-4.5.1-linux-x64/config/kibana.yml`，确保kibana和elasticsearch 关联起来\n```\nelasticsearch.url: \"http://localhost:9200\"\n```\n\n- 编辑`vi elasticsearch-2.3.3/config/elasticsearch.yml`，追加下面一行，并重启elasticsearch服务\n```\nhttp.cors.enabled: true\n```\n\n- 执行`sh kibana-4.5.1-linux-x64/bin/kibana`启动kibana，在浏览器中输入`http://localhost:5601`，即可访问kibana\n\n参考：\n[CentOS下使用ELK套件搭建日志分析和监控平台](http://blog.csdn.net/i_chips/article/details/43309415)\n[http://www.cnblogs.com/danbo/p/5220516.html](ELK日志分析系统)\n[Logstash实践: 分布式系统的日志监控](http://www.cnblogs.com/yiwenshengmei/p/use_logstash_collect_log.html)","slug":"ELK：安装","published":1,"updated":"2016-10-10T01:58:06.768Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj36mxs0u0000fwezkprdxwe9","content":"<h2 id=\"ELK-简单介绍\"><a href=\"#ELK-简单介绍\" class=\"headerlink\" title=\"ELK 简单介绍\"></a>ELK 简单介绍</h2><p>ELK 是 Elasticsearch,Logstash,Kibana的合称，依赖Java才能运行。</p>\n<ul>\n<li><p>ElasticSearch 是开源分布式搜索引擎，能够实时处理，分析日志</p>\n</li>\n<li><p>Logstash 统一对应用程序日志进行收集管理</p>\n</li>\n<li><p>Kibana 是一个为 Logstash 和 ElasticSearch 提供的日志分析的 Web 接口。可使用它对日志进行高效的搜索、可视化、分析等各种操作</p>\n</li>\n</ul>\n<p>他们之间的依赖关系如下：</p>\n<p>Kibana &lt;- ElasticSearch &lt;- Logstash</p>\n<h2 id=\"安装-Java\"><a href=\"#安装-Java\" class=\"headerlink\" title=\"安装 Java\"></a>安装 Java</h2><ul>\n<li><p>到<code>http://www.oracle.com/technetwork/java/javase/downloads/index.html</code>下载<code>jdk-8u91-linux-x64.gz</code></p>\n</li>\n<li><p>上传到<code>Ubuntu</code>上的<code>/usr/local/soft</code>目录下，执行<code>tar -xvf jdk-8u91-linux-x64.gz</code>解压</p>\n</li>\n<li><p>将下面的Java配置追加到<code>/etc/profile</code>文件中，然后执行<code>source /etc/profile</code>让配置立即生效</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># set Java environment</span><br><span class=\"line\">JAVA_HOME=/usr/local/soft/jdk1.8.0_91</span><br><span class=\"line\">PATH=$JAVA_HOME/bin:$PATH</span><br><span class=\"line\">CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class=\"line\">export JAVA_HOME</span><br><span class=\"line\">export PATH</span><br><span class=\"line\">export CLASSPATH</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>执行<code>java -version</code>和<code>javac -version</code>都能返回当前安装的Java的版本号，说明安装成功</p>\n</li>\n</ul>\n<ul>\n<li>如果当前用户对目录没有权限，执行<code>sudo chown -R dev:dev /usr/local/soft</code>，其中<code>dev:dev</code>表示dev用户在dev用户组。</li>\n</ul>\n<h2 id=\"安装-Elasticsearch\"><a href=\"#安装-Elasticsearch\" class=\"headerlink\" title=\"安装 Elasticsearch\"></a>安装 Elasticsearch</h2><ul>\n<li><p>到<code>https://www.elastic.co/downloads/elasticsearch</code>下载 elasticsearch-2.3.3.tar.gz</p>\n</li>\n<li><p>上传到<code>Ubuntu</code>上的<code>/usr/local/soft</code>目录下，执行<code>tar -xvf elasticsearch-2.3.3.tar.gz</code>解压</p>\n</li>\n<li><p>执行<code>sh elasticsearch-2.3.3/bin/elasticsearch</code></p>\n</li>\n<li><p>打开浏览器输入<code>http://localhost:9200/</code>，返回如下内容说明安装成功:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;name&quot; : &quot;Earth Lord&quot;,</span><br><span class=\"line\">  &quot;cluster_name&quot; : &quot;elasticsearch&quot;,</span><br><span class=\"line\">  &quot;version&quot; : &#123;</span><br><span class=\"line\">    &quot;number&quot; : &quot;2.3.3&quot;,</span><br><span class=\"line\">    &quot;build_hash&quot; : &quot;218bdf10790eef486ff2c41a3df5cfa32dadcfde&quot;,</span><br><span class=\"line\">    &quot;build_timestamp&quot; : &quot;2016-05-17T15:40:04Z&quot;,</span><br><span class=\"line\">    &quot;build_snapshot&quot; : false,</span><br><span class=\"line\">    &quot;lucene_version&quot; : &quot;5.5.0&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;tagline&quot; : &quot;You Know, for Search&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"安装-Logstash\"><a href=\"#安装-Logstash\" class=\"headerlink\" title=\"安装 Logstash\"></a>安装 Logstash</h2><ul>\n<li><p>在<code>https://www.elastic.co/downloads/logstash</code>下载<code>logstash-2.3.2.tar.gz</code></p>\n</li>\n<li><p>上传到<code>Ubuntu</code>上的<code>/usr/local/soft</code>目录下，执行<code>tar -xvf logstash-2.3.2.tar.gz</code>解压</p>\n</li>\n<li><p>执行<code>sh logstash-2.3.2/bin/logstash -e &#39;input { stdin { } } output { stdout {} }&#39;</code>，提示</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Settings: Default pipeline workers: 1</span><br><span class=\"line\">Pipeline main started</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>说明安装成功，输入任意内容将会打印刚才的输入。</p>\n<h2 id=\"安装-Kibana\"><a href=\"#安装-Kibana\" class=\"headerlink\" title=\"安装 Kibana\"></a>安装 Kibana</h2><ul>\n<li><p>在<code>https://www.elastic.co/downloads/kibana</code>下载<code>kibana-4.5.1-linux-x64.tar.gz</code></p>\n</li>\n<li><p>上传到<code>Ubuntu</code>上的<code>/usr/local/soft</code>目录下，执行<code>tar -xvf kibana-4.5.1-linux-x64.tar.gz</code>解压</p>\n</li>\n<li><p>编辑<code>vi kibana-4.5.1-linux-x64/config/kibana.yml</code>，确保kibana和elasticsearch 关联起来</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">elasticsearch.url: &quot;http://localhost:9200&quot;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>编辑<code>vi elasticsearch-2.3.3/config/elasticsearch.yml</code>，追加下面一行，并重启elasticsearch服务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http.cors.enabled: true</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>执行<code>sh kibana-4.5.1-linux-x64/bin/kibana</code>启动kibana，在浏览器中输入<code>http://localhost:5601</code>，即可访问kibana</p>\n</li>\n</ul>\n<p>参考：<br><a href=\"http://blog.csdn.net/i_chips/article/details/43309415\" target=\"_blank\" rel=\"external\">CentOS下使用ELK套件搭建日志分析和监控平台</a><br><a href=\"ELK日志分析系统\">http://www.cnblogs.com/danbo/p/5220516.html</a><br><a href=\"http://www.cnblogs.com/yiwenshengmei/p/use_logstash_collect_log.html\" target=\"_blank\" rel=\"external\">Logstash实践: 分布式系统的日志监控</a></p>\n","excerpt":"","more":"<h2 id=\"ELK-简单介绍\"><a href=\"#ELK-简单介绍\" class=\"headerlink\" title=\"ELK 简单介绍\"></a>ELK 简单介绍</h2><p>ELK 是 Elasticsearch,Logstash,Kibana的合称，依赖Java才能运行。</p>\n<ul>\n<li><p>ElasticSearch 是开源分布式搜索引擎，能够实时处理，分析日志</p>\n</li>\n<li><p>Logstash 统一对应用程序日志进行收集管理</p>\n</li>\n<li><p>Kibana 是一个为 Logstash 和 ElasticSearch 提供的日志分析的 Web 接口。可使用它对日志进行高效的搜索、可视化、分析等各种操作</p>\n</li>\n</ul>\n<p>他们之间的依赖关系如下：</p>\n<p>Kibana &lt;- ElasticSearch &lt;- Logstash</p>\n<h2 id=\"安装-Java\"><a href=\"#安装-Java\" class=\"headerlink\" title=\"安装 Java\"></a>安装 Java</h2><ul>\n<li><p>到<code>http://www.oracle.com/technetwork/java/javase/downloads/index.html</code>下载<code>jdk-8u91-linux-x64.gz</code></p>\n</li>\n<li><p>上传到<code>Ubuntu</code>上的<code>/usr/local/soft</code>目录下，执行<code>tar -xvf jdk-8u91-linux-x64.gz</code>解压</p>\n</li>\n<li><p>将下面的Java配置追加到<code>/etc/profile</code>文件中，然后执行<code>source /etc/profile</code>让配置立即生效</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># set Java environment</span><br><span class=\"line\">JAVA_HOME=/usr/local/soft/jdk1.8.0_91</span><br><span class=\"line\">PATH=$JAVA_HOME/bin:$PATH</span><br><span class=\"line\">CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class=\"line\">export JAVA_HOME</span><br><span class=\"line\">export PATH</span><br><span class=\"line\">export CLASSPATH</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>执行<code>java -version</code>和<code>javac -version</code>都能返回当前安装的Java的版本号，说明安装成功</p>\n</li>\n</ul>\n<ul>\n<li>如果当前用户对目录没有权限，执行<code>sudo chown -R dev:dev /usr/local/soft</code>，其中<code>dev:dev</code>表示dev用户在dev用户组。</li>\n</ul>\n<h2 id=\"安装-Elasticsearch\"><a href=\"#安装-Elasticsearch\" class=\"headerlink\" title=\"安装 Elasticsearch\"></a>安装 Elasticsearch</h2><ul>\n<li><p>到<code>https://www.elastic.co/downloads/elasticsearch</code>下载 elasticsearch-2.3.3.tar.gz</p>\n</li>\n<li><p>上传到<code>Ubuntu</code>上的<code>/usr/local/soft</code>目录下，执行<code>tar -xvf elasticsearch-2.3.3.tar.gz</code>解压</p>\n</li>\n<li><p>执行<code>sh elasticsearch-2.3.3/bin/elasticsearch</code></p>\n</li>\n<li><p>打开浏览器输入<code>http://localhost:9200/</code>，返回如下内容说明安装成功:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;name&quot; : &quot;Earth Lord&quot;,</span><br><span class=\"line\">  &quot;cluster_name&quot; : &quot;elasticsearch&quot;,</span><br><span class=\"line\">  &quot;version&quot; : &#123;</span><br><span class=\"line\">    &quot;number&quot; : &quot;2.3.3&quot;,</span><br><span class=\"line\">    &quot;build_hash&quot; : &quot;218bdf10790eef486ff2c41a3df5cfa32dadcfde&quot;,</span><br><span class=\"line\">    &quot;build_timestamp&quot; : &quot;2016-05-17T15:40:04Z&quot;,</span><br><span class=\"line\">    &quot;build_snapshot&quot; : false,</span><br><span class=\"line\">    &quot;lucene_version&quot; : &quot;5.5.0&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;tagline&quot; : &quot;You Know, for Search&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"安装-Logstash\"><a href=\"#安装-Logstash\" class=\"headerlink\" title=\"安装 Logstash\"></a>安装 Logstash</h2><ul>\n<li><p>在<code>https://www.elastic.co/downloads/logstash</code>下载<code>logstash-2.3.2.tar.gz</code></p>\n</li>\n<li><p>上传到<code>Ubuntu</code>上的<code>/usr/local/soft</code>目录下，执行<code>tar -xvf logstash-2.3.2.tar.gz</code>解压</p>\n</li>\n<li><p>执行<code>sh logstash-2.3.2/bin/logstash -e &#39;input { stdin { } } output { stdout {} }&#39;</code>，提示</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Settings: Default pipeline workers: 1</span><br><span class=\"line\">Pipeline main started</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>说明安装成功，输入任意内容将会打印刚才的输入。</p>\n<h2 id=\"安装-Kibana\"><a href=\"#安装-Kibana\" class=\"headerlink\" title=\"安装 Kibana\"></a>安装 Kibana</h2><ul>\n<li><p>在<code>https://www.elastic.co/downloads/kibana</code>下载<code>kibana-4.5.1-linux-x64.tar.gz</code></p>\n</li>\n<li><p>上传到<code>Ubuntu</code>上的<code>/usr/local/soft</code>目录下，执行<code>tar -xvf kibana-4.5.1-linux-x64.tar.gz</code>解压</p>\n</li>\n<li><p>编辑<code>vi kibana-4.5.1-linux-x64/config/kibana.yml</code>，确保kibana和elasticsearch 关联起来</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">elasticsearch.url: &quot;http://localhost:9200&quot;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>编辑<code>vi elasticsearch-2.3.3/config/elasticsearch.yml</code>，追加下面一行，并重启elasticsearch服务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http.cors.enabled: true</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>执行<code>sh kibana-4.5.1-linux-x64/bin/kibana</code>启动kibana，在浏览器中输入<code>http://localhost:5601</code>，即可访问kibana</p>\n</li>\n</ul>\n<p>参考：<br><a href=\"http://blog.csdn.net/i_chips/article/details/43309415\">CentOS下使用ELK套件搭建日志分析和监控平台</a><br><a href=\"ELK日志分析系统\">http://www.cnblogs.com/danbo/p/5220516.html</a><br><a href=\"http://www.cnblogs.com/yiwenshengmei/p/use_logstash_collect_log.html\">Logstash实践: 分布式系统的日志监控</a></p>\n"},{"title":"Java 中的 synchronizd 关键字在同步中的使用","title_url":"Java-synchronizd-usage","date":"2016-06-06T16:00:00.000Z","description":"Java 中的 synchronizd 关键字在同步中的使用","_content":"\n### 为什么要线程同步\n\n- 同步的目的是避免在同一个时间点操作同一个数据\n- 这里操作是指`update`，`delete`，数据是指任意对象\n- 每一个对象都有一把锁，`synchronized` 就是为此对象上锁，等到 `synchronized` 方法或`synchronized` 代码块执行完就会自动解锁，所有多线程执行相同带`synchronized`的代码时会检查所操作对象是否上锁，如果已经被锁住，就阻塞等待，直到锁此代码段的线程执行完此代码块。\n\n### synchronized 5种用法\n\n-\t用在普通方法上\n```java\npublic synchronized void test() {\n // 业务代码\n}\n```\n-\t用在静态方法上\n```java\npublic static synchronized void test3() {\n // 业务代码\n}\n```\n-\t用在代码块，括号里面是this\n```java\npublic void test1() {\n    synchronized(this) {\n      // 业务代码\n\t  }\n}\n```\n-\t用在代码块，括号里面是类的一个实例，和this类似\n```java\npublic void test11() {\n  Sync sync = this;\n  synchronized(sync) {\n    // 业务代码\n  }\n}\n```\n-\t用在代码块，括号里面是类\n```java\npublic void test2() {\n  synchronized (Sync.class) {\n      // 业务代码\n  }\n}\n```\n\nsynchronized 锁住的是括号里的对象，而不是代码。对于非静态的 synchronized 方法，锁的就是对象本身也就是this。\n\n当 synchronized 锁住一个对象后，别的线程如果也想拿到这个对象的锁，就必须等待这个线程执行完成释放锁，才能再次给对象加锁，这样才达到线程同步的目的。\n\n```java\npublic class SynchronizedTest {\n\t\n\tPerson p = new Person(\"lin\", 15);\n\t\n\tpublic synchronized void say() {//相当于锁住this，效果和say3()一样，只要多个线程同时访问同一个SynchronizedTest实例（相当于this），就会发生不能同时访问此方法\n\t\tSystem.out.println(p.getName());\n\t}\n\t\n\tpublic void say2() {\n\t\tsynchronized(p) {//相当于锁住p，只要多个线程同时访问此代码块且是同一个p，那么在同一时间，只有一个线程能对P进行操作。\n\t\t\tSystem.out.println(p.getName());\n\t\t}\n\t}\n\t\n\tpublic void say3() {\n\t\tsynchronized(this) {//锁住this，效果和say()一样，只要多个线程同时访问同一个SynchronizedTest实例（this），就会发生不能同时访问此代码块\n\t\t\tSystem.out.println(p.getName());\n\t\t}\n\t}\n}\n\n```\n上面的三种用法都是为了避免在多个线程操作同一个对象的时候同时访问一个代码块或者某个方法。\n\n### 误用 synchronized 的情况\n下面的代码想要防止多个线程同时对某个代码块的访问，但是最后没有做到。\n```java\nclass Sync {  \n  \n    public synchronized void test() {  \n        System.out.println(\"test开始..\");  \n        try {  \n            Thread.sleep(1000);  \n        } catch (InterruptedException e) {  \n            e.printStackTrace();  \n        }  \n        System.out.println(\"test结束..\");  \n    }  \n}  \n  \nclass MyThread extends Thread {  \n  \n    public void run() {  \n        Sync sync = new Sync();  \n        sync.test();  \n    }  \n}  \n  \npublic class Main {  \n  \n    public static void main(String[] args) {  \n        for (int i = 0; i < 3; i++) {  \n            Thread thread = new MyThread();  \n            thread.start();  \n        }  \n    }  \n}  \n```\n```\n运行结果：\ntest开始..\ntest开始..\ntest开始..\ntest结束..\ntest结束..\ntest结束..\n```\n可以看出来，上面的程序起了三个线程，同时运行test方法，虽然test方法加上了synchronized，但是还是同时运行起来，貌似synchronized没起作用。\n\n将test方法改成如下：\n```java\npublic void test() {  \n    synchronized(this){  \n        System.out.println(\"test开始..\");  \n        try {  \n            Thread.sleep(1000);  \n        } catch (InterruptedException e) {  \n            e.printStackTrace();  \n        }  \n        System.out.println(\"test结束..\");  \n    }  \n}  \n```\n```\n运行结果：\ntest开始..\ntest开始..\ntest开始..\ntest结束..\ntest结束..\ntest结束..\n```\n一切还是这么平静，没有看到synchronized 达到想要的结果。为什么？刚才讲到上面的两种方法是为了避免在多个线程操作**同一个对象**的时候同时访问一个代码块或者某个方法，但是在\n```java\nclass MyThread extends Thread {  \n  \n    public void run() {  \n        Sync sync = new Sync();  \n        sync.test();  \n    }  \n}  \n```\n中，每个线程都单独操作一个 Sync 对象，这样线程之间根本不会发生同步。怎么做呢？\n```java\nclass MyThread2 extends Thread {\n\t\n\tprivate Sync sync;\n\t\n\tpublic MyThread2(Sync sync) {\n\t\tthis.sync = sync;\n\t}\n\t  \n    public void run() {\n        sync.test();  \n    }  \n}\n```\n```java\nSync sync = new Sync();\nfor (int i = 0; i < 3; i++) {  \n    Thread thread = new MyThread2(sync);\n    thread.start();  \n}\n```\n输出结果如下：\n```\ntest开始..\ntest结束..\ntest开始..\ntest结束..\ntest开始..\ntest结束..\n```\n这样就达到预期了，多个线程在操作同一个对象的时候只有一个线程能够访问 test 方法。\n\n但是还有其他方法吗？也就是如何避免多个线程执行多个对象的同一个代码块呢。看看下面的代码：\n```java\npublic class Sync {\n\tpublic void test2() {\n\t\tsynchronized (Sync.class) { // 作用于 Sync 类的所有实例\n\t\t\tSystem.out.println(\"test2开始..\");\n\t\t\ttry {\n\t\t\t\tThread.sleep(1000);\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\tSystem.out.println(\"test2结束..\");\n\t\t}\n\t}\n}\n```\n```java\nclass MyThread3 extends Thread {  \n\t  \n    public void run() {  \n        Sync sync = new Sync();  \n        sync.test2();  \n    }  \n}\n```\n```java\nfor (int i = 0; i < 3; i++) {  \n    Thread thread = new MyThread3();\n    thread.start();  \n}\n```\n输出结果如下：\n```\ntest2开始..\ntest2结束..\ntest2开始..\ntest2结束..\ntest2开始..\ntest2结束..\n```\n这样就满足期望了，关键是\n```java\nsynchronized (Sync.class) { // 作用于 Sync 类的所有实例\n//...\n}\n```\n\n如果synchronized作用于某个静态方法上会有什么效果呢？\n```java\npublic static synchronized void test3() {\n\tSystem.out.println(\"test3开始..\");\n\ttry {\n\t\tThread.sleep(1000);\n\t} catch (InterruptedException e) {\n\t\te.printStackTrace();\n\t}\n\tSystem.out.println(\"test3结束..\");\n}\n```\n```java\nclass MyThread4 extends Thread {  \n\t  \n    public void run() {  \n        Sync.test3();  \n    }  \n}\n```\n```java\nfor (int i = 0; i < 3; i++) {  \n    Thread thread = new MyThread4();\n    thread.start();  \n}\n```\n输出结果如下：\n```\ntest3开始..\ntest3结束..\ntest3开始..\ntest3结束..\ntest3开始..\ntest3结束..\n```\n这同样能够满足期望，从上面的这些例子也很好说明了5种的synchronized区别和相同点。\n\n\n### 对 synchronized 的总结\n\n- 方法同步，锁当前对象（this）\n- 静态同步方法，锁当前类的Class对象\n- 对于同步代码块，锁住的是synchronized括号中的对象，任意对象，当前类对象或者是其他对象。\n\n参考如下：\n[Java:使用synchronized和Lock对象获取对象锁](http://zhangjunhd.blog.51cto.com/113473/70300)\n[线程同步总结--synchronized方法和synchronized代码块](http://991690137.iteye.com/blog/1948882)","source":"_posts/Java中的 synchronizd 关键字用法.md","raw":"---\ntitle: Java 中的 synchronizd 关键字在同步中的使用\ntitle_url: Java-synchronizd-usage\ndate: 2016-06-07\ntags: Java\ncategories: 技术\ndescription: Java 中的 synchronizd 关键字在同步中的使用\n---\n\n### 为什么要线程同步\n\n- 同步的目的是避免在同一个时间点操作同一个数据\n- 这里操作是指`update`，`delete`，数据是指任意对象\n- 每一个对象都有一把锁，`synchronized` 就是为此对象上锁，等到 `synchronized` 方法或`synchronized` 代码块执行完就会自动解锁，所有多线程执行相同带`synchronized`的代码时会检查所操作对象是否上锁，如果已经被锁住，就阻塞等待，直到锁此代码段的线程执行完此代码块。\n\n### synchronized 5种用法\n\n-\t用在普通方法上\n```java\npublic synchronized void test() {\n // 业务代码\n}\n```\n-\t用在静态方法上\n```java\npublic static synchronized void test3() {\n // 业务代码\n}\n```\n-\t用在代码块，括号里面是this\n```java\npublic void test1() {\n    synchronized(this) {\n      // 业务代码\n\t  }\n}\n```\n-\t用在代码块，括号里面是类的一个实例，和this类似\n```java\npublic void test11() {\n  Sync sync = this;\n  synchronized(sync) {\n    // 业务代码\n  }\n}\n```\n-\t用在代码块，括号里面是类\n```java\npublic void test2() {\n  synchronized (Sync.class) {\n      // 业务代码\n  }\n}\n```\n\nsynchronized 锁住的是括号里的对象，而不是代码。对于非静态的 synchronized 方法，锁的就是对象本身也就是this。\n\n当 synchronized 锁住一个对象后，别的线程如果也想拿到这个对象的锁，就必须等待这个线程执行完成释放锁，才能再次给对象加锁，这样才达到线程同步的目的。\n\n```java\npublic class SynchronizedTest {\n\t\n\tPerson p = new Person(\"lin\", 15);\n\t\n\tpublic synchronized void say() {//相当于锁住this，效果和say3()一样，只要多个线程同时访问同一个SynchronizedTest实例（相当于this），就会发生不能同时访问此方法\n\t\tSystem.out.println(p.getName());\n\t}\n\t\n\tpublic void say2() {\n\t\tsynchronized(p) {//相当于锁住p，只要多个线程同时访问此代码块且是同一个p，那么在同一时间，只有一个线程能对P进行操作。\n\t\t\tSystem.out.println(p.getName());\n\t\t}\n\t}\n\t\n\tpublic void say3() {\n\t\tsynchronized(this) {//锁住this，效果和say()一样，只要多个线程同时访问同一个SynchronizedTest实例（this），就会发生不能同时访问此代码块\n\t\t\tSystem.out.println(p.getName());\n\t\t}\n\t}\n}\n\n```\n上面的三种用法都是为了避免在多个线程操作同一个对象的时候同时访问一个代码块或者某个方法。\n\n### 误用 synchronized 的情况\n下面的代码想要防止多个线程同时对某个代码块的访问，但是最后没有做到。\n```java\nclass Sync {  \n  \n    public synchronized void test() {  \n        System.out.println(\"test开始..\");  \n        try {  \n            Thread.sleep(1000);  \n        } catch (InterruptedException e) {  \n            e.printStackTrace();  \n        }  \n        System.out.println(\"test结束..\");  \n    }  \n}  \n  \nclass MyThread extends Thread {  \n  \n    public void run() {  \n        Sync sync = new Sync();  \n        sync.test();  \n    }  \n}  \n  \npublic class Main {  \n  \n    public static void main(String[] args) {  \n        for (int i = 0; i < 3; i++) {  \n            Thread thread = new MyThread();  \n            thread.start();  \n        }  \n    }  \n}  \n```\n```\n运行结果：\ntest开始..\ntest开始..\ntest开始..\ntest结束..\ntest结束..\ntest结束..\n```\n可以看出来，上面的程序起了三个线程，同时运行test方法，虽然test方法加上了synchronized，但是还是同时运行起来，貌似synchronized没起作用。\n\n将test方法改成如下：\n```java\npublic void test() {  \n    synchronized(this){  \n        System.out.println(\"test开始..\");  \n        try {  \n            Thread.sleep(1000);  \n        } catch (InterruptedException e) {  \n            e.printStackTrace();  \n        }  \n        System.out.println(\"test结束..\");  \n    }  \n}  \n```\n```\n运行结果：\ntest开始..\ntest开始..\ntest开始..\ntest结束..\ntest结束..\ntest结束..\n```\n一切还是这么平静，没有看到synchronized 达到想要的结果。为什么？刚才讲到上面的两种方法是为了避免在多个线程操作**同一个对象**的时候同时访问一个代码块或者某个方法，但是在\n```java\nclass MyThread extends Thread {  \n  \n    public void run() {  \n        Sync sync = new Sync();  \n        sync.test();  \n    }  \n}  \n```\n中，每个线程都单独操作一个 Sync 对象，这样线程之间根本不会发生同步。怎么做呢？\n```java\nclass MyThread2 extends Thread {\n\t\n\tprivate Sync sync;\n\t\n\tpublic MyThread2(Sync sync) {\n\t\tthis.sync = sync;\n\t}\n\t  \n    public void run() {\n        sync.test();  \n    }  \n}\n```\n```java\nSync sync = new Sync();\nfor (int i = 0; i < 3; i++) {  \n    Thread thread = new MyThread2(sync);\n    thread.start();  \n}\n```\n输出结果如下：\n```\ntest开始..\ntest结束..\ntest开始..\ntest结束..\ntest开始..\ntest结束..\n```\n这样就达到预期了，多个线程在操作同一个对象的时候只有一个线程能够访问 test 方法。\n\n但是还有其他方法吗？也就是如何避免多个线程执行多个对象的同一个代码块呢。看看下面的代码：\n```java\npublic class Sync {\n\tpublic void test2() {\n\t\tsynchronized (Sync.class) { // 作用于 Sync 类的所有实例\n\t\t\tSystem.out.println(\"test2开始..\");\n\t\t\ttry {\n\t\t\t\tThread.sleep(1000);\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\tSystem.out.println(\"test2结束..\");\n\t\t}\n\t}\n}\n```\n```java\nclass MyThread3 extends Thread {  \n\t  \n    public void run() {  \n        Sync sync = new Sync();  \n        sync.test2();  \n    }  \n}\n```\n```java\nfor (int i = 0; i < 3; i++) {  \n    Thread thread = new MyThread3();\n    thread.start();  \n}\n```\n输出结果如下：\n```\ntest2开始..\ntest2结束..\ntest2开始..\ntest2结束..\ntest2开始..\ntest2结束..\n```\n这样就满足期望了，关键是\n```java\nsynchronized (Sync.class) { // 作用于 Sync 类的所有实例\n//...\n}\n```\n\n如果synchronized作用于某个静态方法上会有什么效果呢？\n```java\npublic static synchronized void test3() {\n\tSystem.out.println(\"test3开始..\");\n\ttry {\n\t\tThread.sleep(1000);\n\t} catch (InterruptedException e) {\n\t\te.printStackTrace();\n\t}\n\tSystem.out.println(\"test3结束..\");\n}\n```\n```java\nclass MyThread4 extends Thread {  \n\t  \n    public void run() {  \n        Sync.test3();  \n    }  \n}\n```\n```java\nfor (int i = 0; i < 3; i++) {  \n    Thread thread = new MyThread4();\n    thread.start();  \n}\n```\n输出结果如下：\n```\ntest3开始..\ntest3结束..\ntest3开始..\ntest3结束..\ntest3开始..\ntest3结束..\n```\n这同样能够满足期望，从上面的这些例子也很好说明了5种的synchronized区别和相同点。\n\n\n### 对 synchronized 的总结\n\n- 方法同步，锁当前对象（this）\n- 静态同步方法，锁当前类的Class对象\n- 对于同步代码块，锁住的是synchronized括号中的对象，任意对象，当前类对象或者是其他对象。\n\n参考如下：\n[Java:使用synchronized和Lock对象获取对象锁](http://zhangjunhd.blog.51cto.com/113473/70300)\n[线程同步总结--synchronized方法和synchronized代码块](http://991690137.iteye.com/blog/1948882)","slug":"Java中的 synchronizd 关键字用法","published":1,"updated":"2016-10-10T01:58:06.772Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj36mxs0z0001fwez44tzs592","content":"<h3 id=\"为什么要线程同步\"><a href=\"#为什么要线程同步\" class=\"headerlink\" title=\"为什么要线程同步\"></a>为什么要线程同步</h3><ul>\n<li>同步的目的是避免在同一个时间点操作同一个数据</li>\n<li>这里操作是指<code>update</code>，<code>delete</code>，数据是指任意对象</li>\n<li>每一个对象都有一把锁，<code>synchronized</code> 就是为此对象上锁，等到 <code>synchronized</code> 方法或<code>synchronized</code> 代码块执行完就会自动解锁，所有多线程执行相同带<code>synchronized</code>的代码时会检查所操作对象是否上锁，如果已经被锁住，就阻塞等待，直到锁此代码段的线程执行完此代码块。</li>\n</ul>\n<h3 id=\"synchronized-5种用法\"><a href=\"#synchronized-5种用法\" class=\"headerlink\" title=\"synchronized 5种用法\"></a>synchronized 5种用法</h3><ul>\n<li><p>用在普通方法上</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"> <span class=\"comment\">// 业务代码</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>用在静态方法上</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">test3</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"> <span class=\"comment\">// 业务代码</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>用在代码块，括号里面是this</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span>(<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 业务代码</span></span><br><span class=\"line\">\t  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>用在代码块，括号里面是类的一个实例，和this类似</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test11</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  Sync sync = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">  <span class=\"keyword\">synchronized</span>(sync) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 业务代码</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>用在代码块，括号里面是类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">synchronized</span> (Sync.class) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 业务代码</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>synchronized 锁住的是括号里的对象，而不是代码。对于非静态的 synchronized 方法，锁的就是对象本身也就是this。</p>\n<p>当 synchronized 锁住一个对象后，别的线程如果也想拿到这个对象的锁，就必须等待这个线程执行完成释放锁，才能再次给对象加锁，这样才达到线程同步的目的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SynchronizedTest</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tPerson p = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"lin\"</span>, <span class=\"number\">15</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">say</span><span class=\"params\">()</span> </span>&#123;<span class=\"comment\">//相当于锁住this，效果和say3()一样，只要多个线程同时访问同一个SynchronizedTest实例（相当于this），就会发生不能同时访问此方法</span></span><br><span class=\"line\">\t\tSystem.out.println(p.getName());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">say2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">synchronized</span>(p) &#123;<span class=\"comment\">//相当于锁住p，只要多个线程同时访问此代码块且是同一个p，那么在同一时间，只有一个线程能对P进行操作。</span></span><br><span class=\"line\">\t\t\tSystem.out.println(p.getName());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">say3</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">synchronized</span>(<span class=\"keyword\">this</span>) &#123;<span class=\"comment\">//锁住this，效果和say()一样，只要多个线程同时访问同一个SynchronizedTest实例（this），就会发生不能同时访问此代码块</span></span><br><span class=\"line\">\t\t\tSystem.out.println(p.getName());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的三种用法都是为了避免在多个线程操作同一个对象的时候同时访问一个代码块或者某个方法。</p>\n<h3 id=\"误用-synchronized-的情况\"><a href=\"#误用-synchronized-的情况\" class=\"headerlink\" title=\"误用 synchronized 的情况\"></a>误用 synchronized 的情况</h3><p>下面的代码想要防止多个线程同时对某个代码块的访问，但是最后没有做到。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sync</span> </span>&#123;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"test开始..\"</span>);  </span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;  </span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">1000</span>);  </span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;  </span><br><span class=\"line\">            e.printStackTrace();  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"test结束..\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        Sync sync = <span class=\"keyword\">new</span> Sync();  </span><br><span class=\"line\">        sync.test();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;  </span><br><span class=\"line\">            Thread thread = <span class=\"keyword\">new</span> MyThread();  </span><br><span class=\"line\">            thread.start();  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">运行结果：</span><br><span class=\"line\">test开始..</span><br><span class=\"line\">test开始..</span><br><span class=\"line\">test开始..</span><br><span class=\"line\">test结束..</span><br><span class=\"line\">test结束..</span><br><span class=\"line\">test结束..</span><br></pre></td></tr></table></figure>\n<p>可以看出来，上面的程序起了三个线程，同时运行test方法，虽然test方法加上了synchronized，但是还是同时运行起来，貌似synchronized没起作用。</p>\n<p>将test方法改成如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span>(<span class=\"keyword\">this</span>)&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"test开始..\"</span>);  </span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;  </span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">1000</span>);  </span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;  </span><br><span class=\"line\">            e.printStackTrace();  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"test结束..\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">运行结果：</span><br><span class=\"line\">test开始..</span><br><span class=\"line\">test开始..</span><br><span class=\"line\">test开始..</span><br><span class=\"line\">test结束..</span><br><span class=\"line\">test结束..</span><br><span class=\"line\">test结束..</span><br></pre></td></tr></table></figure>\n<p>一切还是这么平静，没有看到synchronized 达到想要的结果。为什么？刚才讲到上面的两种方法是为了避免在多个线程操作<strong>同一个对象</strong>的时候同时访问一个代码块或者某个方法，但是在<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        Sync sync = <span class=\"keyword\">new</span> Sync();  </span><br><span class=\"line\">        sync.test();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>中，每个线程都单独操作一个 Sync 对象，这样线程之间根本不会发生同步。怎么做呢？<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread2</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Sync sync;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyThread2</span><span class=\"params\">(Sync sync)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.sync = sync;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        sync.test();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Sync sync = <span class=\"keyword\">new</span> Sync();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;  </span><br><span class=\"line\">    Thread thread = <span class=\"keyword\">new</span> MyThread2(sync);</span><br><span class=\"line\">    thread.start();  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test开始..</span><br><span class=\"line\">test结束..</span><br><span class=\"line\">test开始..</span><br><span class=\"line\">test结束..</span><br><span class=\"line\">test开始..</span><br><span class=\"line\">test结束..</span><br></pre></td></tr></table></figure></p>\n<p>这样就达到预期了，多个线程在操作同一个对象的时候只有一个线程能够访问 test 方法。</p>\n<p>但是还有其他方法吗？也就是如何避免多个线程执行多个对象的同一个代码块呢。看看下面的代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sync</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">synchronized</span> (Sync.class) &#123; <span class=\"comment\">// 作用于 Sync 类的所有实例</span></span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"test2开始..\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\tThread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"test2结束..\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread3</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;  </span><br><span class=\"line\">\t  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        Sync sync = <span class=\"keyword\">new</span> Sync();  </span><br><span class=\"line\">        sync.test2();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;  </span><br><span class=\"line\">    Thread thread = <span class=\"keyword\">new</span> MyThread3();</span><br><span class=\"line\">    thread.start();  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test2开始..</span><br><span class=\"line\">test2结束..</span><br><span class=\"line\">test2开始..</span><br><span class=\"line\">test2结束..</span><br><span class=\"line\">test2开始..</span><br><span class=\"line\">test2结束..</span><br></pre></td></tr></table></figure></p>\n<p>这样就满足期望了，关键是<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">synchronized</span> (Sync.class) &#123; <span class=\"comment\">// 作用于 Sync 类的所有实例</span></span><br><span class=\"line\"><span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>如果synchronized作用于某个静态方法上会有什么效果呢？<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">test3</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"test3开始..\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\tThread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">\t\te.printStackTrace();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"test3结束..\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread4</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;  </span><br><span class=\"line\">\t  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        Sync.test3();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;  </span><br><span class=\"line\">    Thread thread = <span class=\"keyword\">new</span> MyThread4();</span><br><span class=\"line\">    thread.start();  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test3开始..</span><br><span class=\"line\">test3结束..</span><br><span class=\"line\">test3开始..</span><br><span class=\"line\">test3结束..</span><br><span class=\"line\">test3开始..</span><br><span class=\"line\">test3结束..</span><br></pre></td></tr></table></figure></p>\n<p>这同样能够满足期望，从上面的这些例子也很好说明了5种的synchronized区别和相同点。</p>\n<h3 id=\"对-synchronized-的总结\"><a href=\"#对-synchronized-的总结\" class=\"headerlink\" title=\"对 synchronized 的总结\"></a>对 synchronized 的总结</h3><ul>\n<li>方法同步，锁当前对象（this）</li>\n<li>静态同步方法，锁当前类的Class对象</li>\n<li>对于同步代码块，锁住的是synchronized括号中的对象，任意对象，当前类对象或者是其他对象。</li>\n</ul>\n<p>参考如下：<br><a href=\"http://zhangjunhd.blog.51cto.com/113473/70300\" target=\"_blank\" rel=\"external\">Java:使用synchronized和Lock对象获取对象锁</a><br><a href=\"http://991690137.iteye.com/blog/1948882\" target=\"_blank\" rel=\"external\">线程同步总结–synchronized方法和synchronized代码块</a></p>\n","excerpt":"","more":"<h3 id=\"为什么要线程同步\"><a href=\"#为什么要线程同步\" class=\"headerlink\" title=\"为什么要线程同步\"></a>为什么要线程同步</h3><ul>\n<li>同步的目的是避免在同一个时间点操作同一个数据</li>\n<li>这里操作是指<code>update</code>，<code>delete</code>，数据是指任意对象</li>\n<li>每一个对象都有一把锁，<code>synchronized</code> 就是为此对象上锁，等到 <code>synchronized</code> 方法或<code>synchronized</code> 代码块执行完就会自动解锁，所有多线程执行相同带<code>synchronized</code>的代码时会检查所操作对象是否上锁，如果已经被锁住，就阻塞等待，直到锁此代码段的线程执行完此代码块。</li>\n</ul>\n<h3 id=\"synchronized-5种用法\"><a href=\"#synchronized-5种用法\" class=\"headerlink\" title=\"synchronized 5种用法\"></a>synchronized 5种用法</h3><ul>\n<li><p>用在普通方法上</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"> <span class=\"comment\">// 业务代码</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>用在静态方法上</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">test3</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"> <span class=\"comment\">// 业务代码</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>用在代码块，括号里面是this</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span>(<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 业务代码</span></span><br><span class=\"line\">\t  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>用在代码块，括号里面是类的一个实例，和this类似</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test11</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  Sync sync = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">  <span class=\"keyword\">synchronized</span>(sync) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 业务代码</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>用在代码块，括号里面是类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">synchronized</span> (Sync.class) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 业务代码</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>synchronized 锁住的是括号里的对象，而不是代码。对于非静态的 synchronized 方法，锁的就是对象本身也就是this。</p>\n<p>当 synchronized 锁住一个对象后，别的线程如果也想拿到这个对象的锁，就必须等待这个线程执行完成释放锁，才能再次给对象加锁，这样才达到线程同步的目的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SynchronizedTest</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tPerson p = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"lin\"</span>, <span class=\"number\">15</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">say</span><span class=\"params\">()</span> </span>&#123;<span class=\"comment\">//相当于锁住this，效果和say3()一样，只要多个线程同时访问同一个SynchronizedTest实例（相当于this），就会发生不能同时访问此方法</span></span><br><span class=\"line\">\t\tSystem.out.println(p.getName());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">say2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">synchronized</span>(p) &#123;<span class=\"comment\">//相当于锁住p，只要多个线程同时访问此代码块且是同一个p，那么在同一时间，只有一个线程能对P进行操作。</span></span><br><span class=\"line\">\t\t\tSystem.out.println(p.getName());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">say3</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">synchronized</span>(<span class=\"keyword\">this</span>) &#123;<span class=\"comment\">//锁住this，效果和say()一样，只要多个线程同时访问同一个SynchronizedTest实例（this），就会发生不能同时访问此代码块</span></span><br><span class=\"line\">\t\t\tSystem.out.println(p.getName());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的三种用法都是为了避免在多个线程操作同一个对象的时候同时访问一个代码块或者某个方法。</p>\n<h3 id=\"误用-synchronized-的情况\"><a href=\"#误用-synchronized-的情况\" class=\"headerlink\" title=\"误用 synchronized 的情况\"></a>误用 synchronized 的情况</h3><p>下面的代码想要防止多个线程同时对某个代码块的访问，但是最后没有做到。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sync</span> </span>&#123;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"test开始..\"</span>);  </span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;  </span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">1000</span>);  </span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;  </span><br><span class=\"line\">            e.printStackTrace();  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"test结束..\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        Sync sync = <span class=\"keyword\">new</span> Sync();  </span><br><span class=\"line\">        sync.test();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;  </span><br><span class=\"line\">            Thread thread = <span class=\"keyword\">new</span> MyThread();  </span><br><span class=\"line\">            thread.start();  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">运行结果：</span><br><span class=\"line\">test开始..</span><br><span class=\"line\">test开始..</span><br><span class=\"line\">test开始..</span><br><span class=\"line\">test结束..</span><br><span class=\"line\">test结束..</span><br><span class=\"line\">test结束..</span><br></pre></td></tr></table></figure>\n<p>可以看出来，上面的程序起了三个线程，同时运行test方法，虽然test方法加上了synchronized，但是还是同时运行起来，貌似synchronized没起作用。</p>\n<p>将test方法改成如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span>(<span class=\"keyword\">this</span>)&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"test开始..\"</span>);  </span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;  </span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">1000</span>);  </span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;  </span><br><span class=\"line\">            e.printStackTrace();  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"test结束..\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">运行结果：</span><br><span class=\"line\">test开始..</span><br><span class=\"line\">test开始..</span><br><span class=\"line\">test开始..</span><br><span class=\"line\">test结束..</span><br><span class=\"line\">test结束..</span><br><span class=\"line\">test结束..</span><br></pre></td></tr></table></figure>\n<p>一切还是这么平静，没有看到synchronized 达到想要的结果。为什么？刚才讲到上面的两种方法是为了避免在多个线程操作<strong>同一个对象</strong>的时候同时访问一个代码块或者某个方法，但是在<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        Sync sync = <span class=\"keyword\">new</span> Sync();  </span><br><span class=\"line\">        sync.test();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>中，每个线程都单独操作一个 Sync 对象，这样线程之间根本不会发生同步。怎么做呢？<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread2</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Sync sync;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyThread2</span><span class=\"params\">(Sync sync)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.sync = sync;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        sync.test();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Sync sync = <span class=\"keyword\">new</span> Sync();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;  </span><br><span class=\"line\">    Thread thread = <span class=\"keyword\">new</span> MyThread2(sync);</span><br><span class=\"line\">    thread.start();  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test开始..</span><br><span class=\"line\">test结束..</span><br><span class=\"line\">test开始..</span><br><span class=\"line\">test结束..</span><br><span class=\"line\">test开始..</span><br><span class=\"line\">test结束..</span><br></pre></td></tr></table></figure></p>\n<p>这样就达到预期了，多个线程在操作同一个对象的时候只有一个线程能够访问 test 方法。</p>\n<p>但是还有其他方法吗？也就是如何避免多个线程执行多个对象的同一个代码块呢。看看下面的代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sync</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">synchronized</span> (Sync.class) &#123; <span class=\"comment\">// 作用于 Sync 类的所有实例</span></span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"test2开始..\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\tThread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"test2结束..\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread3</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;  </span><br><span class=\"line\">\t  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        Sync sync = <span class=\"keyword\">new</span> Sync();  </span><br><span class=\"line\">        sync.test2();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;  </span><br><span class=\"line\">    Thread thread = <span class=\"keyword\">new</span> MyThread3();</span><br><span class=\"line\">    thread.start();  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test2开始..</span><br><span class=\"line\">test2结束..</span><br><span class=\"line\">test2开始..</span><br><span class=\"line\">test2结束..</span><br><span class=\"line\">test2开始..</span><br><span class=\"line\">test2结束..</span><br></pre></td></tr></table></figure></p>\n<p>这样就满足期望了，关键是<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">synchronized</span> (Sync.class) &#123; <span class=\"comment\">// 作用于 Sync 类的所有实例</span></span><br><span class=\"line\"><span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>如果synchronized作用于某个静态方法上会有什么效果呢？<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">test3</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"test3开始..\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\tThread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">\t\te.printStackTrace();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"test3结束..\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread4</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;  </span><br><span class=\"line\">\t  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        Sync.test3();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;  </span><br><span class=\"line\">    Thread thread = <span class=\"keyword\">new</span> MyThread4();</span><br><span class=\"line\">    thread.start();  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test3开始..</span><br><span class=\"line\">test3结束..</span><br><span class=\"line\">test3开始..</span><br><span class=\"line\">test3结束..</span><br><span class=\"line\">test3开始..</span><br><span class=\"line\">test3结束..</span><br></pre></td></tr></table></figure></p>\n<p>这同样能够满足期望，从上面的这些例子也很好说明了5种的synchronized区别和相同点。</p>\n<h3 id=\"对-synchronized-的总结\"><a href=\"#对-synchronized-的总结\" class=\"headerlink\" title=\"对 synchronized 的总结\"></a>对 synchronized 的总结</h3><ul>\n<li>方法同步，锁当前对象（this）</li>\n<li>静态同步方法，锁当前类的Class对象</li>\n<li>对于同步代码块，锁住的是synchronized括号中的对象，任意对象，当前类对象或者是其他对象。</li>\n</ul>\n<p>参考如下：<br><a href=\"http://zhangjunhd.blog.51cto.com/113473/70300\">Java:使用synchronized和Lock对象获取对象锁</a><br><a href=\"http://991690137.iteye.com/blog/1948882\">线程同步总结–synchronized方法和synchronized代码块</a></p>\n"},{"title":"Log4j向Logstash发送日志实践","title_url":"log4j-logstash-practice","date":"2016-07-04T16:00:00.000Z","description":"Log4j向Logstash发送日志实践","_content":"\n## 在logstash中配置log4j\n\n- 在logstash的配置文件中增加如下配置\n```\ninput {\n  stdin {\n  }\n  log4j {\n    type => \"log4j-test\"\n    port => 4560\n  }\n}\n\nfilter {\n  grok {\n    match => { \"message\" => \"%{COMBINEDAPACHELOG}\" }\n  }\n}\n\noutput {\n  elasticsearch {\n        hosts => [\"localhost:9200\"]\n        index => \"logstash-%{type}-%{+YYYY.MM.dd}\"\n\t\tdocument_type => \"%{type}\"\n  }\n  stdout { codec => rubydebug }\n}\n```\n- 其中`input`下的`port`表示本机开放4560端口接收网络中其他主机应用程序中log4j发送过来的日志，也可以指定其他未被占用的端口，`type` 为接收的日志起的别名\n\n- `output`下的`elasticsearch`部分表示logstash将接收的日志发送给本机的elasticsearch，其端口为9200，`index` 表示生成索引的名称\n\n- 这里的配置是服务器模式，也就是logstash作为日志服务器开放一个端口，网络中其他主机主动发送日志\n\n## 在应用中配置 log4j\n\n- log4j用SocketAppender将日志发送到指定的主机和端口，在log4j.xml中配置如下\n```xml\n<appender name=\"LOGSTASH\" class=\"org.apache.log4j.net.SocketAppender\">\n\t<param name=\"RemoteHost\" value=\"192.168.37.118\"/>\n\t<param name=\"Port\" value=\"4560\"/>\t\n\t<param name=\"ReconnectionDelay\" value=\"10000\"/>\n\t<param name=\"LocationInfo\" value=\"true\"/>\n\t<param name=\"Threshold\" value=\"INFO\"/>\n\t<param name=\"Application\" value=\"web-api\" />\n</appender>\n```\n\n- 其中`RemoteHost`和`Port`表示logstash主机的ip和开放的端口，`Threshold` 表示将何种等级的日志发送到logstash，`Application`表示日志来源于哪个应用\n\n- 如果使用log4j.properties文件，配置如下\n```\nlog4j.appender.socket=org.apache.log4j.net.SocketAppender  \nlog4j.appender.socket.RemoteHost=192.168.37.118\nlog4j.appender.socket.Port=4560\nlog4j.appender.socket.ReconnectionDelay=10000\nlog4j.appender.socket.LocationInfo=true\nlog4j.appender.socket.Threshold=INFO\nlog4j.appender.socket.Application=web-api\n```\n\n- 关于`SocketAppender`中的`RemoteHost`和`Port`等字段的含义参考`SocketAppender`的源码\n\n\n参考如下：\n\n[logstash的log4j插件使用说明](https://www.elastic.co/guide/en/logstash/current/plugins-inputs-log4j.html)\n\n","source":"_posts/Log4j向Logstash发送日志实践.md","raw":"---\ntitle: Log4j向Logstash发送日志实践\ntitle_url: log4j-logstash-practice\ndate: 2016-07-05\ntags: [Log4j,Logstash]\ncategories: 技术\ndescription: Log4j向Logstash发送日志实践\n---\n\n## 在logstash中配置log4j\n\n- 在logstash的配置文件中增加如下配置\n```\ninput {\n  stdin {\n  }\n  log4j {\n    type => \"log4j-test\"\n    port => 4560\n  }\n}\n\nfilter {\n  grok {\n    match => { \"message\" => \"%{COMBINEDAPACHELOG}\" }\n  }\n}\n\noutput {\n  elasticsearch {\n        hosts => [\"localhost:9200\"]\n        index => \"logstash-%{type}-%{+YYYY.MM.dd}\"\n\t\tdocument_type => \"%{type}\"\n  }\n  stdout { codec => rubydebug }\n}\n```\n- 其中`input`下的`port`表示本机开放4560端口接收网络中其他主机应用程序中log4j发送过来的日志，也可以指定其他未被占用的端口，`type` 为接收的日志起的别名\n\n- `output`下的`elasticsearch`部分表示logstash将接收的日志发送给本机的elasticsearch，其端口为9200，`index` 表示生成索引的名称\n\n- 这里的配置是服务器模式，也就是logstash作为日志服务器开放一个端口，网络中其他主机主动发送日志\n\n## 在应用中配置 log4j\n\n- log4j用SocketAppender将日志发送到指定的主机和端口，在log4j.xml中配置如下\n```xml\n<appender name=\"LOGSTASH\" class=\"org.apache.log4j.net.SocketAppender\">\n\t<param name=\"RemoteHost\" value=\"192.168.37.118\"/>\n\t<param name=\"Port\" value=\"4560\"/>\t\n\t<param name=\"ReconnectionDelay\" value=\"10000\"/>\n\t<param name=\"LocationInfo\" value=\"true\"/>\n\t<param name=\"Threshold\" value=\"INFO\"/>\n\t<param name=\"Application\" value=\"web-api\" />\n</appender>\n```\n\n- 其中`RemoteHost`和`Port`表示logstash主机的ip和开放的端口，`Threshold` 表示将何种等级的日志发送到logstash，`Application`表示日志来源于哪个应用\n\n- 如果使用log4j.properties文件，配置如下\n```\nlog4j.appender.socket=org.apache.log4j.net.SocketAppender  \nlog4j.appender.socket.RemoteHost=192.168.37.118\nlog4j.appender.socket.Port=4560\nlog4j.appender.socket.ReconnectionDelay=10000\nlog4j.appender.socket.LocationInfo=true\nlog4j.appender.socket.Threshold=INFO\nlog4j.appender.socket.Application=web-api\n```\n\n- 关于`SocketAppender`中的`RemoteHost`和`Port`等字段的含义参考`SocketAppender`的源码\n\n\n参考如下：\n\n[logstash的log4j插件使用说明](https://www.elastic.co/guide/en/logstash/current/plugins-inputs-log4j.html)\n\n","slug":"Log4j向Logstash发送日志实践","published":1,"updated":"2016-10-10T01:58:06.776Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj36mxs160004fwezmtgt1srz","content":"<h2 id=\"在logstash中配置log4j\"><a href=\"#在logstash中配置log4j\" class=\"headerlink\" title=\"在logstash中配置log4j\"></a>在logstash中配置log4j</h2><ul>\n<li><p>在logstash的配置文件中增加如下配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">input &#123;</span><br><span class=\"line\">  stdin &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  log4j &#123;</span><br><span class=\"line\">    type =&gt; &quot;log4j-test&quot;</span><br><span class=\"line\">    port =&gt; 4560</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">filter &#123;</span><br><span class=\"line\">  grok &#123;</span><br><span class=\"line\">    match =&gt; &#123; &quot;message&quot; =&gt; &quot;%&#123;COMBINEDAPACHELOG&#125;&quot; &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">output &#123;</span><br><span class=\"line\">  elasticsearch &#123;</span><br><span class=\"line\">        hosts =&gt; [&quot;localhost:9200&quot;]</span><br><span class=\"line\">        index =&gt; &quot;logstash-%&#123;type&#125;-%&#123;+YYYY.MM.dd&#125;&quot;</span><br><span class=\"line\">\t\tdocument_type =&gt; &quot;%&#123;type&#125;&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  stdout &#123; codec =&gt; rubydebug &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>其中<code>input</code>下的<code>port</code>表示本机开放4560端口接收网络中其他主机应用程序中log4j发送过来的日志，也可以指定其他未被占用的端口，<code>type</code> 为接收的日志起的别名</p>\n</li>\n<li><p><code>output</code>下的<code>elasticsearch</code>部分表示logstash将接收的日志发送给本机的elasticsearch，其端口为9200，<code>index</code> 表示生成索引的名称</p>\n</li>\n<li><p>这里的配置是服务器模式，也就是logstash作为日志服务器开放一个端口，网络中其他主机主动发送日志</p>\n</li>\n</ul>\n<h2 id=\"在应用中配置-log4j\"><a href=\"#在应用中配置-log4j\" class=\"headerlink\" title=\"在应用中配置 log4j\"></a>在应用中配置 log4j</h2><ul>\n<li><p>log4j用SocketAppender将日志发送到指定的主机和端口，在log4j.xml中配置如下</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"LOGSTASH\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.apache.log4j.net.SocketAppender\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"RemoteHost\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"192.168.37.118\"</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Port\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"4560\"</span>/&gt;</span>\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"ReconnectionDelay\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"10000\"</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"LocationInfo\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Threshold\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"INFO\"</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Application\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"web-api\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>其中<code>RemoteHost</code>和<code>Port</code>表示logstash主机的ip和开放的端口，<code>Threshold</code> 表示将何种等级的日志发送到logstash，<code>Application</code>表示日志来源于哪个应用</p>\n</li>\n<li><p>如果使用log4j.properties文件，配置如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">log4j.appender.socket=org.apache.log4j.net.SocketAppender  </span><br><span class=\"line\">log4j.appender.socket.RemoteHost=192.168.37.118</span><br><span class=\"line\">log4j.appender.socket.Port=4560</span><br><span class=\"line\">log4j.appender.socket.ReconnectionDelay=10000</span><br><span class=\"line\">log4j.appender.socket.LocationInfo=true</span><br><span class=\"line\">log4j.appender.socket.Threshold=INFO</span><br><span class=\"line\">log4j.appender.socket.Application=web-api</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>关于<code>SocketAppender</code>中的<code>RemoteHost</code>和<code>Port</code>等字段的含义参考<code>SocketAppender</code>的源码</p>\n</li>\n</ul>\n<p>参考如下：</p>\n<p><a href=\"https://www.elastic.co/guide/en/logstash/current/plugins-inputs-log4j.html\" target=\"_blank\" rel=\"external\">logstash的log4j插件使用说明</a></p>\n","excerpt":"","more":"<h2 id=\"在logstash中配置log4j\"><a href=\"#在logstash中配置log4j\" class=\"headerlink\" title=\"在logstash中配置log4j\"></a>在logstash中配置log4j</h2><ul>\n<li><p>在logstash的配置文件中增加如下配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">input &#123;</span><br><span class=\"line\">  stdin &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  log4j &#123;</span><br><span class=\"line\">    type =&gt; &quot;log4j-test&quot;</span><br><span class=\"line\">    port =&gt; 4560</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">filter &#123;</span><br><span class=\"line\">  grok &#123;</span><br><span class=\"line\">    match =&gt; &#123; &quot;message&quot; =&gt; &quot;%&#123;COMBINEDAPACHELOG&#125;&quot; &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">output &#123;</span><br><span class=\"line\">  elasticsearch &#123;</span><br><span class=\"line\">        hosts =&gt; [&quot;localhost:9200&quot;]</span><br><span class=\"line\">        index =&gt; &quot;logstash-%&#123;type&#125;-%&#123;+YYYY.MM.dd&#125;&quot;</span><br><span class=\"line\">\t\tdocument_type =&gt; &quot;%&#123;type&#125;&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  stdout &#123; codec =&gt; rubydebug &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>其中<code>input</code>下的<code>port</code>表示本机开放4560端口接收网络中其他主机应用程序中log4j发送过来的日志，也可以指定其他未被占用的端口，<code>type</code> 为接收的日志起的别名</p>\n</li>\n<li><p><code>output</code>下的<code>elasticsearch</code>部分表示logstash将接收的日志发送给本机的elasticsearch，其端口为9200，<code>index</code> 表示生成索引的名称</p>\n</li>\n<li><p>这里的配置是服务器模式，也就是logstash作为日志服务器开放一个端口，网络中其他主机主动发送日志</p>\n</li>\n</ul>\n<h2 id=\"在应用中配置-log4j\"><a href=\"#在应用中配置-log4j\" class=\"headerlink\" title=\"在应用中配置 log4j\"></a>在应用中配置 log4j</h2><ul>\n<li><p>log4j用SocketAppender将日志发送到指定的主机和端口，在log4j.xml中配置如下</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"LOGSTASH\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.apache.log4j.net.SocketAppender\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"RemoteHost\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"192.168.37.118\"</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Port\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"4560\"</span>/&gt;</span>\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"ReconnectionDelay\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"10000\"</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"LocationInfo\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Threshold\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"INFO\"</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Application\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"web-api\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>其中<code>RemoteHost</code>和<code>Port</code>表示logstash主机的ip和开放的端口，<code>Threshold</code> 表示将何种等级的日志发送到logstash，<code>Application</code>表示日志来源于哪个应用</p>\n</li>\n<li><p>如果使用log4j.properties文件，配置如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">log4j.appender.socket=org.apache.log4j.net.SocketAppender  </span><br><span class=\"line\">log4j.appender.socket.RemoteHost=192.168.37.118</span><br><span class=\"line\">log4j.appender.socket.Port=4560</span><br><span class=\"line\">log4j.appender.socket.ReconnectionDelay=10000</span><br><span class=\"line\">log4j.appender.socket.LocationInfo=true</span><br><span class=\"line\">log4j.appender.socket.Threshold=INFO</span><br><span class=\"line\">log4j.appender.socket.Application=web-api</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>关于<code>SocketAppender</code>中的<code>RemoteHost</code>和<code>Port</code>等字段的含义参考<code>SocketAppender</code>的源码</p>\n</li>\n</ul>\n<p>参考如下：</p>\n<p><a href=\"https://www.elastic.co/guide/en/logstash/current/plugins-inputs-log4j.html\">logstash的log4j插件使用说明</a></p>\n"},{"title":"MariaDB 在 RedHat Linux 上的安装过程以及 MySQL 相关命令的使用","title_url":"Linux-MariaDB-setup-MySql","date":"2017-05-14T16:00:00.000Z","description":"MariaDB 在 RedHat Linux 上的安装过程以及 MySQL 相关命令的使用","_content":"\n## 安装\n\n```\nyum install mariadb-server mariadb\n```\n如果提示已经有存在的包了,通过以下命令卸载\n\n```\nyum -y remove mysql-libs*\n```\n\n## 启动 MariaDB.service\n\n```\nsystemctl start mariadb.service\n```\n\n## 设置开机启动 MariaDB.service\n\n```\nsystemctl enable mariadb.service\n```\n\n## 验证是否安装成功\n\n```\nps -wef | grep mariadb | grep -v grep\n```\n\n## 修改root密码\n\nMariaDB Server 默认root密码为空,这里通过登入mysql后修改密码\n\n```\n[root@localhost ~]# mysql -u root\n```\n\n输入上面的命令后提示 `MariaDB [(none)]>`,然后输入以下命令:\n\n```\nuse mysql;\nupdate user set password=PASSWORD('new_password') where User='root';\nflush privileges;\nquit\n```\n\n## 通过命令登录mysql\n\n```\n[root@localhost ~]# mysql -u root -p\n```\n\n输入上面的命令后提示输入密码.\n\n\n## mysql 命令行窗口基本使用\n\n- `show databases;` 显示数据库列表\n- `use datamonitor;` 切换到指定的数据库\n- `show tables;` 显示某个数据库下所有\n- `desc dm_mail_info;` 显示某个表的详细信息\n- `source /etc/appData/datamonitor.sql` 将sql备份数据导入到数据库中\n\n## 参考\n\n- [RedHat Linux RPM方式安装MySQL5.6](http://blog.csdn.net/chenjinge7/article/details/46582527)","source":"_posts/MariaDB 在 RedHat Linux 上的安装过程以及 MySQL 相关命令的使用.md","raw":"---\ntitle: MariaDB 在 RedHat Linux 上的安装过程以及 MySQL 相关命令的使用\ntitle_url: Linux-MariaDB-setup-MySql\ndate: 2017-05-15\ntags: [Linux,MariaDB,MySql]\ncategories: 技术\ndescription: MariaDB 在 RedHat Linux 上的安装过程以及 MySQL 相关命令的使用\n---\n\n## 安装\n\n```\nyum install mariadb-server mariadb\n```\n如果提示已经有存在的包了,通过以下命令卸载\n\n```\nyum -y remove mysql-libs*\n```\n\n## 启动 MariaDB.service\n\n```\nsystemctl start mariadb.service\n```\n\n## 设置开机启动 MariaDB.service\n\n```\nsystemctl enable mariadb.service\n```\n\n## 验证是否安装成功\n\n```\nps -wef | grep mariadb | grep -v grep\n```\n\n## 修改root密码\n\nMariaDB Server 默认root密码为空,这里通过登入mysql后修改密码\n\n```\n[root@localhost ~]# mysql -u root\n```\n\n输入上面的命令后提示 `MariaDB [(none)]>`,然后输入以下命令:\n\n```\nuse mysql;\nupdate user set password=PASSWORD('new_password') where User='root';\nflush privileges;\nquit\n```\n\n## 通过命令登录mysql\n\n```\n[root@localhost ~]# mysql -u root -p\n```\n\n输入上面的命令后提示输入密码.\n\n\n## mysql 命令行窗口基本使用\n\n- `show databases;` 显示数据库列表\n- `use datamonitor;` 切换到指定的数据库\n- `show tables;` 显示某个数据库下所有\n- `desc dm_mail_info;` 显示某个表的详细信息\n- `source /etc/appData/datamonitor.sql` 将sql备份数据导入到数据库中\n\n## 参考\n\n- [RedHat Linux RPM方式安装MySQL5.6](http://blog.csdn.net/chenjinge7/article/details/46582527)","slug":"MariaDB 在 RedHat Linux 上的安装过程以及 MySQL 相关命令的使用","published":1,"updated":"2017-05-27T01:55:43.440Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj36mxs170005fwez6g7rfbdi","content":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install mariadb-server mariadb</span><br></pre></td></tr></table></figure>\n<p>如果提示已经有存在的包了,通过以下命令卸载</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y remove mysql-libs*</span><br></pre></td></tr></table></figure>\n<h2 id=\"启动-MariaDB-service\"><a href=\"#启动-MariaDB-service\" class=\"headerlink\" title=\"启动 MariaDB.service\"></a>启动 MariaDB.service</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start mariadb.service</span><br></pre></td></tr></table></figure>\n<h2 id=\"设置开机启动-MariaDB-service\"><a href=\"#设置开机启动-MariaDB-service\" class=\"headerlink\" title=\"设置开机启动 MariaDB.service\"></a>设置开机启动 MariaDB.service</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable mariadb.service</span><br></pre></td></tr></table></figure>\n<h2 id=\"验证是否安装成功\"><a href=\"#验证是否安装成功\" class=\"headerlink\" title=\"验证是否安装成功\"></a>验证是否安装成功</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -wef | grep mariadb | grep -v grep</span><br></pre></td></tr></table></figure>\n<h2 id=\"修改root密码\"><a href=\"#修改root密码\" class=\"headerlink\" title=\"修改root密码\"></a>修改root密码</h2><p>MariaDB Server 默认root密码为空,这里通过登入mysql后修改密码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# mysql -u root</span><br></pre></td></tr></table></figure>\n<p>输入上面的命令后提示 <code>MariaDB [(none)]&gt;</code>,然后输入以下命令:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use mysql;</span><br><span class=\"line\">update user set password=PASSWORD(&apos;new_password&apos;) where User=&apos;root&apos;;</span><br><span class=\"line\">flush privileges;</span><br><span class=\"line\">quit</span><br></pre></td></tr></table></figure>\n<h2 id=\"通过命令登录mysql\"><a href=\"#通过命令登录mysql\" class=\"headerlink\" title=\"通过命令登录mysql\"></a>通过命令登录mysql</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# mysql -u root -p</span><br></pre></td></tr></table></figure>\n<p>输入上面的命令后提示输入密码.</p>\n<h2 id=\"mysql-命令行窗口基本使用\"><a href=\"#mysql-命令行窗口基本使用\" class=\"headerlink\" title=\"mysql 命令行窗口基本使用\"></a>mysql 命令行窗口基本使用</h2><ul>\n<li><code>show databases;</code> 显示数据库列表</li>\n<li><code>use datamonitor;</code> 切换到指定的数据库</li>\n<li><code>show tables;</code> 显示某个数据库下所有</li>\n<li><code>desc dm_mail_info;</code> 显示某个表的详细信息</li>\n<li><code>source /etc/appData/datamonitor.sql</code> 将sql备份数据导入到数据库中</li>\n</ul>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"http://blog.csdn.net/chenjinge7/article/details/46582527\" target=\"_blank\" rel=\"external\">RedHat Linux RPM方式安装MySQL5.6</a></li>\n</ul>\n","excerpt":"","more":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install mariadb-server mariadb</span><br></pre></td></tr></table></figure>\n<p>如果提示已经有存在的包了,通过以下命令卸载</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y remove mysql-libs*</span><br></pre></td></tr></table></figure>\n<h2 id=\"启动-MariaDB-service\"><a href=\"#启动-MariaDB-service\" class=\"headerlink\" title=\"启动 MariaDB.service\"></a>启动 MariaDB.service</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start mariadb.service</span><br></pre></td></tr></table></figure>\n<h2 id=\"设置开机启动-MariaDB-service\"><a href=\"#设置开机启动-MariaDB-service\" class=\"headerlink\" title=\"设置开机启动 MariaDB.service\"></a>设置开机启动 MariaDB.service</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable mariadb.service</span><br></pre></td></tr></table></figure>\n<h2 id=\"验证是否安装成功\"><a href=\"#验证是否安装成功\" class=\"headerlink\" title=\"验证是否安装成功\"></a>验证是否安装成功</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -wef | grep mariadb | grep -v grep</span><br></pre></td></tr></table></figure>\n<h2 id=\"修改root密码\"><a href=\"#修改root密码\" class=\"headerlink\" title=\"修改root密码\"></a>修改root密码</h2><p>MariaDB Server 默认root密码为空,这里通过登入mysql后修改密码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# mysql -u root</span><br></pre></td></tr></table></figure>\n<p>输入上面的命令后提示 <code>MariaDB [(none)]&gt;</code>,然后输入以下命令:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use mysql;</span><br><span class=\"line\">update user set password=PASSWORD(&apos;new_password&apos;) where User=&apos;root&apos;;</span><br><span class=\"line\">flush privileges;</span><br><span class=\"line\">quit</span><br></pre></td></tr></table></figure>\n<h2 id=\"通过命令登录mysql\"><a href=\"#通过命令登录mysql\" class=\"headerlink\" title=\"通过命令登录mysql\"></a>通过命令登录mysql</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# mysql -u root -p</span><br></pre></td></tr></table></figure>\n<p>输入上面的命令后提示输入密码.</p>\n<h2 id=\"mysql-命令行窗口基本使用\"><a href=\"#mysql-命令行窗口基本使用\" class=\"headerlink\" title=\"mysql 命令行窗口基本使用\"></a>mysql 命令行窗口基本使用</h2><ul>\n<li><code>show databases;</code> 显示数据库列表</li>\n<li><code>use datamonitor;</code> 切换到指定的数据库</li>\n<li><code>show tables;</code> 显示某个数据库下所有</li>\n<li><code>desc dm_mail_info;</code> 显示某个表的详细信息</li>\n<li><code>source /etc/appData/datamonitor.sql</code> 将sql备份数据导入到数据库中</li>\n</ul>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"http://blog.csdn.net/chenjinge7/article/details/46582527\">RedHat Linux RPM方式安装MySQL5.6</a></li>\n</ul>\n"},{"title":"Windows下自动上传war到Linux服务器，自动部署，自动重启Tomcat的系列脚本","title_url":"Windows-auto-deploy-war-to-Linux","date":"2016-12-19T16:00:00.000Z","description":"Windows下自动上传war到Linux服务器，自动部署，自动重启Tomcat的系列脚本,用于本地自动化部署","_content":"\n## Windows 下自动上传 war 到 Linux 服务器\n\n- 下面的 cmd 脚本通过 Maven 命令执行打包，生成 war\n- 通过 pscp 将 war 上传到服务器\n- 通过 plink 远程调用 Linux 上的 shell 脚本\n- 其中 pscp 来自 PUTTY\n- putty_privatekey 用于 plink 无密码登录 Linux，也可以通过用户名和密码的方式\n- 其中 test-web-deploy.sh 用于自动部署 war\n\n```\n@echo off\nset project_path=D:\\svn-workspace\\test-web\nset local_file=%project_path%\\target\\test-web.war\nset putty_privatekey=D:\\soft\\keys\\test-privatekey.ppk\nset deploy-shell=test-web-deploy.sh\n \nset server_user_1=dev\nset server_passwd_1=123\nset server_ip_1=10.32.22.61\n \nset server_path=/usr/local/apps\n\necho ---------------------------------------------- execute mvn clean install\nD:\ncd %project_path%\ncall mvn clean install -Dmaven.test.skip=true -Ptest\n \necho ---------------------------------------------- upload war file to server \ncall pscp -l %server_user_1% -pw %server_passwd_1% -r %local_file% %server_ip_1%:%server_path%\n\necho ---------------------------------------------- execute %deploy-shell%\ncall plink -i %putty_privatekey% %server_user_1%@%server_ip_1% sh %deploy-shell%\n \npause\n```\n\n## Linux 自动部署 war\n\n- 在下面的脚本是 test-web-deploy.sh，会调用 tomcat_restart.sh，用于重启 Tomcat\n\n```\n#!/bin/bash\napp_name=test-web\napp_path=/usr/local/apps\ntomcat_path=/usr/local/soft/tomcat-test-web\n\ncd $app_path\nif [ -f ${app_name}.war ];then\n    echo find ${app_name}.war, unpack the file then restart the tomcat\n    rm -rvf ./${app_name}/*\n    mv ./${app_name}.war $app_path/${app_name}/\n    cd $app_path/${app_name}\n    jar -xvf ${app_name}.war\n    rm -rvf ${app_name}.war\n  else\n    echo not find ${app_name}.war, only restart the tomcat\nfi\n\ncd $tomcat_path\nsh tomcat_restart.sh\n```\n\n## 自动重启 Tomcat\n\n- 下面的脚本是 tomcat_restart.sh，基本思路是通过 Tomcat 安装路径找到进程pid，杀死后再重启\n\n```\n#!/bin/bash\n# 首先找到tomcat根目录， 确保当前脚本在tomcat根目录下\ntomcat_path=/usr/local/soft/tomcat-test-web\necho tomcat path is $tomcat_path\n\n# 找到tomcat的进程id\ntomcat_pid=$(ps -ef|grep $tomcat_path|gawk '$0 !~/grep/ {print $2}' |tr -s '\\n' ' ')\nif [ \"$tomcat_pid\" ];then\n  echo tomcat process id is $tomcat_pid\n  # 杀掉tomcat进程\n  if\n    kill -9 $tomcat_pid\n  then\n    echo kill tomcat process success\n  else\n   echo kill tomcat process fail\n  fi\nelse\n  echo tomcat is already dead\nfi\n\n# 启动tomcat并重定向到日志输出\nsh $tomcat_path/bin/startup.sh\ntail -f $tomcat_path/logs/catalina.out\n```\n\n## 可能遇到的问题\n\n### 执行 `jar -xvf xxx.war` 的时候提示:`/bin/bash: jar: command not found`\n### 解决如下\n\n```\ncd /usr/bin\nsudo ln -s -f /usr/lib/jvm/jdk1.6.0_30/bin/jar\n```\n**jdk安装目录按自己实际情况更改**\n\n如果提示`javah：commond not found`，于是照葫芦画瓢，输入命令\n\n```\ncd /usr/bin\nln -s -f /usr/lib/jvm/jdk1.6.0_30/bin/javah\n```\n\n## 总结\n\n- 该系列脚本解决了自动部署问题，非常适用于敏捷开发\n- 基于该系列脚本可以实现自动发布系统的开发 :)","source":"_posts/windows下自动上传war到Linux服务器，自动部署，自动重启Tomcat的系列脚本.md","raw":"---\ntitle: Windows下自动上传war到Linux服务器，自动部署，自动重启Tomcat的系列脚本\ntitle_url: Windows-auto-deploy-war-to-Linux\ndate: 2016-12-20\ntags: [自动部署]\ncategories: 技术\ndescription: Windows下自动上传war到Linux服务器，自动部署，自动重启Tomcat的系列脚本,用于本地自动化部署\n---\n\n## Windows 下自动上传 war 到 Linux 服务器\n\n- 下面的 cmd 脚本通过 Maven 命令执行打包，生成 war\n- 通过 pscp 将 war 上传到服务器\n- 通过 plink 远程调用 Linux 上的 shell 脚本\n- 其中 pscp 来自 PUTTY\n- putty_privatekey 用于 plink 无密码登录 Linux，也可以通过用户名和密码的方式\n- 其中 test-web-deploy.sh 用于自动部署 war\n\n```\n@echo off\nset project_path=D:\\svn-workspace\\test-web\nset local_file=%project_path%\\target\\test-web.war\nset putty_privatekey=D:\\soft\\keys\\test-privatekey.ppk\nset deploy-shell=test-web-deploy.sh\n \nset server_user_1=dev\nset server_passwd_1=123\nset server_ip_1=10.32.22.61\n \nset server_path=/usr/local/apps\n\necho ---------------------------------------------- execute mvn clean install\nD:\ncd %project_path%\ncall mvn clean install -Dmaven.test.skip=true -Ptest\n \necho ---------------------------------------------- upload war file to server \ncall pscp -l %server_user_1% -pw %server_passwd_1% -r %local_file% %server_ip_1%:%server_path%\n\necho ---------------------------------------------- execute %deploy-shell%\ncall plink -i %putty_privatekey% %server_user_1%@%server_ip_1% sh %deploy-shell%\n \npause\n```\n\n## Linux 自动部署 war\n\n- 在下面的脚本是 test-web-deploy.sh，会调用 tomcat_restart.sh，用于重启 Tomcat\n\n```\n#!/bin/bash\napp_name=test-web\napp_path=/usr/local/apps\ntomcat_path=/usr/local/soft/tomcat-test-web\n\ncd $app_path\nif [ -f ${app_name}.war ];then\n    echo find ${app_name}.war, unpack the file then restart the tomcat\n    rm -rvf ./${app_name}/*\n    mv ./${app_name}.war $app_path/${app_name}/\n    cd $app_path/${app_name}\n    jar -xvf ${app_name}.war\n    rm -rvf ${app_name}.war\n  else\n    echo not find ${app_name}.war, only restart the tomcat\nfi\n\ncd $tomcat_path\nsh tomcat_restart.sh\n```\n\n## 自动重启 Tomcat\n\n- 下面的脚本是 tomcat_restart.sh，基本思路是通过 Tomcat 安装路径找到进程pid，杀死后再重启\n\n```\n#!/bin/bash\n# 首先找到tomcat根目录， 确保当前脚本在tomcat根目录下\ntomcat_path=/usr/local/soft/tomcat-test-web\necho tomcat path is $tomcat_path\n\n# 找到tomcat的进程id\ntomcat_pid=$(ps -ef|grep $tomcat_path|gawk '$0 !~/grep/ {print $2}' |tr -s '\\n' ' ')\nif [ \"$tomcat_pid\" ];then\n  echo tomcat process id is $tomcat_pid\n  # 杀掉tomcat进程\n  if\n    kill -9 $tomcat_pid\n  then\n    echo kill tomcat process success\n  else\n   echo kill tomcat process fail\n  fi\nelse\n  echo tomcat is already dead\nfi\n\n# 启动tomcat并重定向到日志输出\nsh $tomcat_path/bin/startup.sh\ntail -f $tomcat_path/logs/catalina.out\n```\n\n## 可能遇到的问题\n\n### 执行 `jar -xvf xxx.war` 的时候提示:`/bin/bash: jar: command not found`\n### 解决如下\n\n```\ncd /usr/bin\nsudo ln -s -f /usr/lib/jvm/jdk1.6.0_30/bin/jar\n```\n**jdk安装目录按自己实际情况更改**\n\n如果提示`javah：commond not found`，于是照葫芦画瓢，输入命令\n\n```\ncd /usr/bin\nln -s -f /usr/lib/jvm/jdk1.6.0_30/bin/javah\n```\n\n## 总结\n\n- 该系列脚本解决了自动部署问题，非常适用于敏捷开发\n- 基于该系列脚本可以实现自动发布系统的开发 :)","slug":"windows下自动上传war到Linux服务器，自动部署，自动重启Tomcat的系列脚本","published":1,"updated":"2017-05-27T01:51:07.152Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj36mxs1b0007fwez3i3hdhby","content":"<h2 id=\"Windows-下自动上传-war-到-Linux-服务器\"><a href=\"#Windows-下自动上传-war-到-Linux-服务器\" class=\"headerlink\" title=\"Windows 下自动上传 war 到 Linux 服务器\"></a>Windows 下自动上传 war 到 Linux 服务器</h2><ul>\n<li>下面的 cmd 脚本通过 Maven 命令执行打包，生成 war</li>\n<li>通过 pscp 将 war 上传到服务器</li>\n<li>通过 plink 远程调用 Linux 上的 shell 脚本</li>\n<li>其中 pscp 来自 PUTTY</li>\n<li>putty_privatekey 用于 plink 无密码登录 Linux，也可以通过用户名和密码的方式</li>\n<li>其中 test-web-deploy.sh 用于自动部署 war</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@echo off</span><br><span class=\"line\">set project_path=D:\\svn-workspace\\test-web</span><br><span class=\"line\">set local_file=%project_path%\\target\\test-web.war</span><br><span class=\"line\">set putty_privatekey=D:\\soft\\keys\\test-privatekey.ppk</span><br><span class=\"line\">set deploy-shell=test-web-deploy.sh</span><br><span class=\"line\"> </span><br><span class=\"line\">set server_user_1=dev</span><br><span class=\"line\">set server_passwd_1=123</span><br><span class=\"line\">set server_ip_1=10.32.22.61</span><br><span class=\"line\"> </span><br><span class=\"line\">set server_path=/usr/local/apps</span><br><span class=\"line\"></span><br><span class=\"line\">echo ---------------------------------------------- execute mvn clean install</span><br><span class=\"line\">D:</span><br><span class=\"line\">cd %project_path%</span><br><span class=\"line\">call mvn clean install -Dmaven.test.skip=true -Ptest</span><br><span class=\"line\"> </span><br><span class=\"line\">echo ---------------------------------------------- upload war file to server </span><br><span class=\"line\">call pscp -l %server_user_1% -pw %server_passwd_1% -r %local_file% %server_ip_1%:%server_path%</span><br><span class=\"line\"></span><br><span class=\"line\">echo ---------------------------------------------- execute %deploy-shell%</span><br><span class=\"line\">call plink -i %putty_privatekey% %server_user_1%@%server_ip_1% sh %deploy-shell%</span><br><span class=\"line\"> </span><br><span class=\"line\">pause</span><br></pre></td></tr></table></figure>\n<h2 id=\"Linux-自动部署-war\"><a href=\"#Linux-自动部署-war\" class=\"headerlink\" title=\"Linux 自动部署 war\"></a>Linux 自动部署 war</h2><ul>\n<li>在下面的脚本是 test-web-deploy.sh，会调用 tomcat_restart.sh，用于重启 Tomcat</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">app_name=test-web</span><br><span class=\"line\">app_path=/usr/local/apps</span><br><span class=\"line\">tomcat_path=/usr/local/soft/tomcat-test-web</span><br><span class=\"line\"></span><br><span class=\"line\">cd $app_path</span><br><span class=\"line\">if [ -f $&#123;app_name&#125;.war ];then</span><br><span class=\"line\">    echo find $&#123;app_name&#125;.war, unpack the file then restart the tomcat</span><br><span class=\"line\">    rm -rvf ./$&#123;app_name&#125;/*</span><br><span class=\"line\">    mv ./$&#123;app_name&#125;.war $app_path/$&#123;app_name&#125;/</span><br><span class=\"line\">    cd $app_path/$&#123;app_name&#125;</span><br><span class=\"line\">    jar -xvf $&#123;app_name&#125;.war</span><br><span class=\"line\">    rm -rvf $&#123;app_name&#125;.war</span><br><span class=\"line\">  else</span><br><span class=\"line\">    echo not find $&#123;app_name&#125;.war, only restart the tomcat</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">cd $tomcat_path</span><br><span class=\"line\">sh tomcat_restart.sh</span><br></pre></td></tr></table></figure>\n<h2 id=\"自动重启-Tomcat\"><a href=\"#自动重启-Tomcat\" class=\"headerlink\" title=\"自动重启 Tomcat\"></a>自动重启 Tomcat</h2><ul>\n<li>下面的脚本是 tomcat_restart.sh，基本思路是通过 Tomcat 安装路径找到进程pid，杀死后再重启</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"># 首先找到tomcat根目录， 确保当前脚本在tomcat根目录下</span><br><span class=\"line\">tomcat_path=/usr/local/soft/tomcat-test-web</span><br><span class=\"line\">echo tomcat path is $tomcat_path</span><br><span class=\"line\"></span><br><span class=\"line\"># 找到tomcat的进程id</span><br><span class=\"line\">tomcat_pid=$(ps -ef|grep $tomcat_path|gawk &apos;$0 !~/grep/ &#123;print $2&#125;&apos; |tr -s &apos;\\n&apos; &apos; &apos;)</span><br><span class=\"line\">if [ &quot;$tomcat_pid&quot; ];then</span><br><span class=\"line\">  echo tomcat process id is $tomcat_pid</span><br><span class=\"line\">  # 杀掉tomcat进程</span><br><span class=\"line\">  if</span><br><span class=\"line\">    kill -9 $tomcat_pid</span><br><span class=\"line\">  then</span><br><span class=\"line\">    echo kill tomcat process success</span><br><span class=\"line\">  else</span><br><span class=\"line\">   echo kill tomcat process fail</span><br><span class=\"line\">  fi</span><br><span class=\"line\">else</span><br><span class=\"line\">  echo tomcat is already dead</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\"># 启动tomcat并重定向到日志输出</span><br><span class=\"line\">sh $tomcat_path/bin/startup.sh</span><br><span class=\"line\">tail -f $tomcat_path/logs/catalina.out</span><br></pre></td></tr></table></figure>\n<h2 id=\"可能遇到的问题\"><a href=\"#可能遇到的问题\" class=\"headerlink\" title=\"可能遇到的问题\"></a>可能遇到的问题</h2><h3 id=\"执行-jar-xvf-xxx-war-的时候提示-bin-bash-jar-command-not-found\"><a href=\"#执行-jar-xvf-xxx-war-的时候提示-bin-bash-jar-command-not-found\" class=\"headerlink\" title=\"执行 jar -xvf xxx.war 的时候提示:/bin/bash: jar: command not found\"></a>执行 <code>jar -xvf xxx.war</code> 的时候提示:<code>/bin/bash: jar: command not found</code></h3><h3 id=\"解决如下\"><a href=\"#解决如下\" class=\"headerlink\" title=\"解决如下\"></a>解决如下</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/bin</span><br><span class=\"line\">sudo ln -s -f /usr/lib/jvm/jdk1.6.0_30/bin/jar</span><br></pre></td></tr></table></figure>\n<p><strong>jdk安装目录按自己实际情况更改</strong></p>\n<p>如果提示<code>javah：commond not found</code>，于是照葫芦画瓢，输入命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/bin</span><br><span class=\"line\">ln -s -f /usr/lib/jvm/jdk1.6.0_30/bin/javah</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>该系列脚本解决了自动部署问题，非常适用于敏捷开发</li>\n<li>基于该系列脚本可以实现自动发布系统的开发 :)</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"Windows-下自动上传-war-到-Linux-服务器\"><a href=\"#Windows-下自动上传-war-到-Linux-服务器\" class=\"headerlink\" title=\"Windows 下自动上传 war 到 Linux 服务器\"></a>Windows 下自动上传 war 到 Linux 服务器</h2><ul>\n<li>下面的 cmd 脚本通过 Maven 命令执行打包，生成 war</li>\n<li>通过 pscp 将 war 上传到服务器</li>\n<li>通过 plink 远程调用 Linux 上的 shell 脚本</li>\n<li>其中 pscp 来自 PUTTY</li>\n<li>putty_privatekey 用于 plink 无密码登录 Linux，也可以通过用户名和密码的方式</li>\n<li>其中 test-web-deploy.sh 用于自动部署 war</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@echo off</span><br><span class=\"line\">set project_path=D:\\svn-workspace\\test-web</span><br><span class=\"line\">set local_file=%project_path%\\target\\test-web.war</span><br><span class=\"line\">set putty_privatekey=D:\\soft\\keys\\test-privatekey.ppk</span><br><span class=\"line\">set deploy-shell=test-web-deploy.sh</span><br><span class=\"line\"> </span><br><span class=\"line\">set server_user_1=dev</span><br><span class=\"line\">set server_passwd_1=123</span><br><span class=\"line\">set server_ip_1=10.32.22.61</span><br><span class=\"line\"> </span><br><span class=\"line\">set server_path=/usr/local/apps</span><br><span class=\"line\"></span><br><span class=\"line\">echo ---------------------------------------------- execute mvn clean install</span><br><span class=\"line\">D:</span><br><span class=\"line\">cd %project_path%</span><br><span class=\"line\">call mvn clean install -Dmaven.test.skip=true -Ptest</span><br><span class=\"line\"> </span><br><span class=\"line\">echo ---------------------------------------------- upload war file to server </span><br><span class=\"line\">call pscp -l %server_user_1% -pw %server_passwd_1% -r %local_file% %server_ip_1%:%server_path%</span><br><span class=\"line\"></span><br><span class=\"line\">echo ---------------------------------------------- execute %deploy-shell%</span><br><span class=\"line\">call plink -i %putty_privatekey% %server_user_1%@%server_ip_1% sh %deploy-shell%</span><br><span class=\"line\"> </span><br><span class=\"line\">pause</span><br></pre></td></tr></table></figure>\n<h2 id=\"Linux-自动部署-war\"><a href=\"#Linux-自动部署-war\" class=\"headerlink\" title=\"Linux 自动部署 war\"></a>Linux 自动部署 war</h2><ul>\n<li>在下面的脚本是 test-web-deploy.sh，会调用 tomcat_restart.sh，用于重启 Tomcat</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">app_name=test-web</span><br><span class=\"line\">app_path=/usr/local/apps</span><br><span class=\"line\">tomcat_path=/usr/local/soft/tomcat-test-web</span><br><span class=\"line\"></span><br><span class=\"line\">cd $app_path</span><br><span class=\"line\">if [ -f $&#123;app_name&#125;.war ];then</span><br><span class=\"line\">    echo find $&#123;app_name&#125;.war, unpack the file then restart the tomcat</span><br><span class=\"line\">    rm -rvf ./$&#123;app_name&#125;/*</span><br><span class=\"line\">    mv ./$&#123;app_name&#125;.war $app_path/$&#123;app_name&#125;/</span><br><span class=\"line\">    cd $app_path/$&#123;app_name&#125;</span><br><span class=\"line\">    jar -xvf $&#123;app_name&#125;.war</span><br><span class=\"line\">    rm -rvf $&#123;app_name&#125;.war</span><br><span class=\"line\">  else</span><br><span class=\"line\">    echo not find $&#123;app_name&#125;.war, only restart the tomcat</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">cd $tomcat_path</span><br><span class=\"line\">sh tomcat_restart.sh</span><br></pre></td></tr></table></figure>\n<h2 id=\"自动重启-Tomcat\"><a href=\"#自动重启-Tomcat\" class=\"headerlink\" title=\"自动重启 Tomcat\"></a>自动重启 Tomcat</h2><ul>\n<li>下面的脚本是 tomcat_restart.sh，基本思路是通过 Tomcat 安装路径找到进程pid，杀死后再重启</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"># 首先找到tomcat根目录， 确保当前脚本在tomcat根目录下</span><br><span class=\"line\">tomcat_path=/usr/local/soft/tomcat-test-web</span><br><span class=\"line\">echo tomcat path is $tomcat_path</span><br><span class=\"line\"></span><br><span class=\"line\"># 找到tomcat的进程id</span><br><span class=\"line\">tomcat_pid=$(ps -ef|grep $tomcat_path|gawk &apos;$0 !~/grep/ &#123;print $2&#125;&apos; |tr -s &apos;\\n&apos; &apos; &apos;)</span><br><span class=\"line\">if [ &quot;$tomcat_pid&quot; ];then</span><br><span class=\"line\">  echo tomcat process id is $tomcat_pid</span><br><span class=\"line\">  # 杀掉tomcat进程</span><br><span class=\"line\">  if</span><br><span class=\"line\">    kill -9 $tomcat_pid</span><br><span class=\"line\">  then</span><br><span class=\"line\">    echo kill tomcat process success</span><br><span class=\"line\">  else</span><br><span class=\"line\">   echo kill tomcat process fail</span><br><span class=\"line\">  fi</span><br><span class=\"line\">else</span><br><span class=\"line\">  echo tomcat is already dead</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\"># 启动tomcat并重定向到日志输出</span><br><span class=\"line\">sh $tomcat_path/bin/startup.sh</span><br><span class=\"line\">tail -f $tomcat_path/logs/catalina.out</span><br></pre></td></tr></table></figure>\n<h2 id=\"可能遇到的问题\"><a href=\"#可能遇到的问题\" class=\"headerlink\" title=\"可能遇到的问题\"></a>可能遇到的问题</h2><h3 id=\"执行-jar-xvf-xxx-war-的时候提示-bin-bash-jar-command-not-found\"><a href=\"#执行-jar-xvf-xxx-war-的时候提示-bin-bash-jar-command-not-found\" class=\"headerlink\" title=\"执行 jar -xvf xxx.war 的时候提示:/bin/bash: jar: command not found\"></a>执行 <code>jar -xvf xxx.war</code> 的时候提示:<code>/bin/bash: jar: command not found</code></h3><h3 id=\"解决如下\"><a href=\"#解决如下\" class=\"headerlink\" title=\"解决如下\"></a>解决如下</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/bin</span><br><span class=\"line\">sudo ln -s -f /usr/lib/jvm/jdk1.6.0_30/bin/jar</span><br></pre></td></tr></table></figure>\n<p><strong>jdk安装目录按自己实际情况更改</strong></p>\n<p>如果提示<code>javah：commond not found</code>，于是照葫芦画瓢，输入命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/bin</span><br><span class=\"line\">ln -s -f /usr/lib/jvm/jdk1.6.0_30/bin/javah</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>该系列脚本解决了自动部署问题，非常适用于敏捷开发</li>\n<li>基于该系列脚本可以实现自动发布系统的开发 :)</li>\n</ul>\n"},{"title":"一个从 Jar 文件中获取所有的类路径的工具类","title_url":"load-jar-file-class","date":"2016-11-16T16:00:00.000Z","description":"一个从 Jar 文件中获取所有的类路径的工具类","_content":"\n```java\nimport java.io.File;\nimport java.io.IOException;\nimport java.lang.reflect.Modifier;\nimport java.util.ArrayList;\nimport java.util.Enumeration;\nimport java.util.List;\nimport java.util.Set;\nimport java.util.TreeSet;\nimport java.util.zip.ZipEntry;\nimport java.util.zip.ZipFile;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n/**\n * 关于类的工具类\n * 参考 @see org.apache.jorphan.reflect.ClassFinder\n * \n * @author chen_k\n *\n * 2016年11月17日-上午10:30:59\n */\npublic class ClassUtil {\n\t\n\tprivate static final Logger log = LoggerFactory.getLogger(ClassUtil.class);\n\t\n\tprivate static final String DOT_CLASS = \".class\";\n\tprivate static final int DOT_CLASS_LEN = DOT_CLASS.length();\n\n\t/**\n\t * 从指定的 jar 文件中获取类的路径列表\n\t * @param jarFile File jar 文件对象\n\t * @param parents Class<?>[] 继承或者实现的接口\n\t * @param inner 是否包含内部类\n\t * @param contain 类路径中含有的字符串，比如 .function.\n\t * @param notContain 类路径中不含有的字符串 .gui.\n\t * @return List<String>\n\t * @throws IOException\n\t */\n\tpublic static List<String> getClassList(File jarFile, Class<?>[] parents, boolean inner, String contain, String notContain) throws IOException {\n\t\tSet<String> listClasses = new TreeSet<>();\n\n\t\tZipFile zipFile = null;\n\t\ttry {\n\t\t\tzipFile = new ZipFile(jarFile);\n\t\t\tEnumeration<? extends ZipEntry> entries = zipFile.entries();\n\t\t\twhile (entries.hasMoreElements()) {\n\t\t\t\tString strEntry = entries.nextElement().toString();\n\t\t\t\tif (strEntry.endsWith(DOT_CLASS)) {\n\t\t\t\t\tString fixedClassName = fixClassName(strEntry);\n\t\t\t\t\tif (accept(parents, fixedClassName, contain, notContain, inner)) {\n\t\t\t\t\t\tlistClasses.add(fixedClassName);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\tthrow e;\n\t\t} finally {\n\t\t\tif (zipFile != null) {\n\t\t\t\ttry {\n\t\t\t\t\tzipFile.close();\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn new ArrayList<>(listClasses);\n\t}\n\t\n\tpublic static String fixClassName(String strClassName) {\n\t\tstrClassName = strClassName.replace('\\\\', '.');\n\t\tstrClassName = strClassName.replace('/', '.');\n\t\t// remove \".class\"\n\t\tstrClassName = strClassName.substring(0, strClassName.length() - DOT_CLASS_LEN);\n\t\treturn strClassName;\n\t}\n\n\tpublic static boolean accept(Class<?>[] parents, String className, String contains, String notContains,\n\t\t\tboolean inner) {\n\n\t\tif (contains != null && !className.contains(contains)) {\n\t\t\treturn false; // It does not contain a required string\n\t\t}\n\t\tif (notContains != null && className.contains(notContains)) {\n\t\t\treturn false; // It contains a banned string\n\t\t}\n\t\tif (!className.contains(\"$\") || inner) { // $NON-NLS-1$\n\t\t\tif (isChildOf(parents, className, Thread.currentThread().getContextClassLoader())) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic static boolean isChildOf(Class<?>[] parentClasses, String strClassName, ClassLoader contextClassLoader) {\n\t\t// might throw an exception, assume this is ignorable\n\t\ttry {\n\t\t\tClass<?> c = Class.forName(strClassName, false, contextClassLoader);\n\n\t\t\tif (!c.isInterface() && !Modifier.isAbstract(c.getModifiers())) {\n\t\t\t\tfor (Class<?> parentClass : parentClasses) {\n\t\t\t\t\tif (parentClass.isAssignableFrom(c)) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (UnsupportedClassVersionError | ClassNotFoundException | NoClassDefFoundError e) {\n\t\t\tlog.debug(e.getLocalizedMessage());\n\t\t}\n\t\treturn false;\n\t}\n\n}\n\n```\n\n比如 jar 文件在 `D:/soft/apache-jmeter-3.0/lib/ext/ApacheJMeter_functions.jar`\n``` java\nList<String> classes = ClassUtil.getClassList(new File(\"D:/soft/apache-jmeter-3.0/lib/ext/ApacheJMeter_functions.jar\"), new Class[] { Function.class }, true, \".functions.\", \".gui.\");\n// Function.class 是 org.apache.jmeter.functions.Function\n```\n\n打印 classes，输出如下：\n```\norg.apache.jmeter.functions.BeanShell\norg.apache.jmeter.functions.CSVRead\norg.apache.jmeter.functions.CharFunction\norg.apache.jmeter.functions.EscapeHtml\norg.apache.jmeter.functions.EscapeOroRegexpChars\norg.apache.jmeter.functions.EvalFunction\norg.apache.jmeter.functions.EvalVarFunction\norg.apache.jmeter.functions.FileToString\norg.apache.jmeter.functions.IntSum\norg.apache.jmeter.functions.IterationCounter\norg.apache.jmeter.functions.JavaScript\norg.apache.jmeter.functions.Jexl2Function\norg.apache.jmeter.functions.Jexl3Function\norg.apache.jmeter.functions.JexlFunction\norg.apache.jmeter.functions.LogFunction\norg.apache.jmeter.functions.LogFunction2\norg.apache.jmeter.functions.LongSum\norg.apache.jmeter.functions.MachineIP\norg.apache.jmeter.functions.MachineName\norg.apache.jmeter.functions.Property\norg.apache.jmeter.functions.Property2\norg.apache.jmeter.functions.Random\norg.apache.jmeter.functions.RandomString\norg.apache.jmeter.functions.RegexFunction\norg.apache.jmeter.functions.SamplerName\norg.apache.jmeter.functions.SetProperty\norg.apache.jmeter.functions.SplitFunction\norg.apache.jmeter.functions.StringFromFile\norg.apache.jmeter.functions.TestPlanName\norg.apache.jmeter.functions.ThreadNumber\norg.apache.jmeter.functions.TimeFunction\norg.apache.jmeter.functions.UnEscape\norg.apache.jmeter.functions.UnEscapeHtml\norg.apache.jmeter.functions.UrlDecode\norg.apache.jmeter.functions.UrlEncode\norg.apache.jmeter.functions.Uuid\norg.apache.jmeter.functions.Variable\norg.apache.jmeter.functions.XPath\n```","source":"_posts/一个从 Jar 文件中获取所有的类路径的工具类.md","raw":"---\ntitle: 一个从 Jar 文件中获取所有的类路径的工具类\ntitle_url: load-jar-file-class\ndate: 2016-11-17\ntags: [Java]\ncategories: 技术\ndescription: 一个从 Jar 文件中获取所有的类路径的工具类\n---\n\n```java\nimport java.io.File;\nimport java.io.IOException;\nimport java.lang.reflect.Modifier;\nimport java.util.ArrayList;\nimport java.util.Enumeration;\nimport java.util.List;\nimport java.util.Set;\nimport java.util.TreeSet;\nimport java.util.zip.ZipEntry;\nimport java.util.zip.ZipFile;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n/**\n * 关于类的工具类\n * 参考 @see org.apache.jorphan.reflect.ClassFinder\n * \n * @author chen_k\n *\n * 2016年11月17日-上午10:30:59\n */\npublic class ClassUtil {\n\t\n\tprivate static final Logger log = LoggerFactory.getLogger(ClassUtil.class);\n\t\n\tprivate static final String DOT_CLASS = \".class\";\n\tprivate static final int DOT_CLASS_LEN = DOT_CLASS.length();\n\n\t/**\n\t * 从指定的 jar 文件中获取类的路径列表\n\t * @param jarFile File jar 文件对象\n\t * @param parents Class<?>[] 继承或者实现的接口\n\t * @param inner 是否包含内部类\n\t * @param contain 类路径中含有的字符串，比如 .function.\n\t * @param notContain 类路径中不含有的字符串 .gui.\n\t * @return List<String>\n\t * @throws IOException\n\t */\n\tpublic static List<String> getClassList(File jarFile, Class<?>[] parents, boolean inner, String contain, String notContain) throws IOException {\n\t\tSet<String> listClasses = new TreeSet<>();\n\n\t\tZipFile zipFile = null;\n\t\ttry {\n\t\t\tzipFile = new ZipFile(jarFile);\n\t\t\tEnumeration<? extends ZipEntry> entries = zipFile.entries();\n\t\t\twhile (entries.hasMoreElements()) {\n\t\t\t\tString strEntry = entries.nextElement().toString();\n\t\t\t\tif (strEntry.endsWith(DOT_CLASS)) {\n\t\t\t\t\tString fixedClassName = fixClassName(strEntry);\n\t\t\t\t\tif (accept(parents, fixedClassName, contain, notContain, inner)) {\n\t\t\t\t\t\tlistClasses.add(fixedClassName);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\tthrow e;\n\t\t} finally {\n\t\t\tif (zipFile != null) {\n\t\t\t\ttry {\n\t\t\t\t\tzipFile.close();\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn new ArrayList<>(listClasses);\n\t}\n\t\n\tpublic static String fixClassName(String strClassName) {\n\t\tstrClassName = strClassName.replace('\\\\', '.');\n\t\tstrClassName = strClassName.replace('/', '.');\n\t\t// remove \".class\"\n\t\tstrClassName = strClassName.substring(0, strClassName.length() - DOT_CLASS_LEN);\n\t\treturn strClassName;\n\t}\n\n\tpublic static boolean accept(Class<?>[] parents, String className, String contains, String notContains,\n\t\t\tboolean inner) {\n\n\t\tif (contains != null && !className.contains(contains)) {\n\t\t\treturn false; // It does not contain a required string\n\t\t}\n\t\tif (notContains != null && className.contains(notContains)) {\n\t\t\treturn false; // It contains a banned string\n\t\t}\n\t\tif (!className.contains(\"$\") || inner) { // $NON-NLS-1$\n\t\t\tif (isChildOf(parents, className, Thread.currentThread().getContextClassLoader())) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic static boolean isChildOf(Class<?>[] parentClasses, String strClassName, ClassLoader contextClassLoader) {\n\t\t// might throw an exception, assume this is ignorable\n\t\ttry {\n\t\t\tClass<?> c = Class.forName(strClassName, false, contextClassLoader);\n\n\t\t\tif (!c.isInterface() && !Modifier.isAbstract(c.getModifiers())) {\n\t\t\t\tfor (Class<?> parentClass : parentClasses) {\n\t\t\t\t\tif (parentClass.isAssignableFrom(c)) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (UnsupportedClassVersionError | ClassNotFoundException | NoClassDefFoundError e) {\n\t\t\tlog.debug(e.getLocalizedMessage());\n\t\t}\n\t\treturn false;\n\t}\n\n}\n\n```\n\n比如 jar 文件在 `D:/soft/apache-jmeter-3.0/lib/ext/ApacheJMeter_functions.jar`\n``` java\nList<String> classes = ClassUtil.getClassList(new File(\"D:/soft/apache-jmeter-3.0/lib/ext/ApacheJMeter_functions.jar\"), new Class[] { Function.class }, true, \".functions.\", \".gui.\");\n// Function.class 是 org.apache.jmeter.functions.Function\n```\n\n打印 classes，输出如下：\n```\norg.apache.jmeter.functions.BeanShell\norg.apache.jmeter.functions.CSVRead\norg.apache.jmeter.functions.CharFunction\norg.apache.jmeter.functions.EscapeHtml\norg.apache.jmeter.functions.EscapeOroRegexpChars\norg.apache.jmeter.functions.EvalFunction\norg.apache.jmeter.functions.EvalVarFunction\norg.apache.jmeter.functions.FileToString\norg.apache.jmeter.functions.IntSum\norg.apache.jmeter.functions.IterationCounter\norg.apache.jmeter.functions.JavaScript\norg.apache.jmeter.functions.Jexl2Function\norg.apache.jmeter.functions.Jexl3Function\norg.apache.jmeter.functions.JexlFunction\norg.apache.jmeter.functions.LogFunction\norg.apache.jmeter.functions.LogFunction2\norg.apache.jmeter.functions.LongSum\norg.apache.jmeter.functions.MachineIP\norg.apache.jmeter.functions.MachineName\norg.apache.jmeter.functions.Property\norg.apache.jmeter.functions.Property2\norg.apache.jmeter.functions.Random\norg.apache.jmeter.functions.RandomString\norg.apache.jmeter.functions.RegexFunction\norg.apache.jmeter.functions.SamplerName\norg.apache.jmeter.functions.SetProperty\norg.apache.jmeter.functions.SplitFunction\norg.apache.jmeter.functions.StringFromFile\norg.apache.jmeter.functions.TestPlanName\norg.apache.jmeter.functions.ThreadNumber\norg.apache.jmeter.functions.TimeFunction\norg.apache.jmeter.functions.UnEscape\norg.apache.jmeter.functions.UnEscapeHtml\norg.apache.jmeter.functions.UrlDecode\norg.apache.jmeter.functions.UrlEncode\norg.apache.jmeter.functions.Uuid\norg.apache.jmeter.functions.Variable\norg.apache.jmeter.functions.XPath\n```","slug":"一个从 Jar 文件中获取所有的类路径的工具类","published":1,"updated":"2017-05-27T01:38:56.412Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj36mxs1e000afwezftuqrfgs","content":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Modifier;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Enumeration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Set;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.TreeSet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.zip.ZipEntry;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.zip.ZipFile;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.Logger;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.LoggerFactory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * 关于类的工具类</span><br><span class=\"line\"> * 参考 <span class=\"doctag\">@see</span> org.apache.jorphan.reflect.ClassFinder</span><br><span class=\"line\"> * </span><br><span class=\"line\"> * <span class=\"doctag\">@author</span> chen_k</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * 2016年11月17日-上午10:30:59</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClassUtil</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Logger log = LoggerFactory.getLogger(ClassUtil.class);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String DOT_CLASS = <span class=\"string\">\".class\"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> DOT_CLASS_LEN = DOT_CLASS.length();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span><br><span class=\"line\">\t * 从指定的 jar 文件中获取类的路径列表</span><br><span class=\"line\">\t * <span class=\"doctag\">@param</span> jarFile File jar 文件对象</span><br><span class=\"line\">\t * <span class=\"doctag\">@param</span> parents Class&lt;?&gt;[] 继承或者实现的接口</span><br><span class=\"line\">\t * <span class=\"doctag\">@param</span> inner 是否包含内部类</span><br><span class=\"line\">\t * <span class=\"doctag\">@param</span> contain 类路径中含有的字符串，比如 .function.</span><br><span class=\"line\">\t * <span class=\"doctag\">@param</span> notContain 类路径中不含有的字符串 .gui.</span><br><span class=\"line\">\t * <span class=\"doctag\">@return</span> List&lt;String&gt;</span><br><span class=\"line\">\t * <span class=\"doctag\">@throws</span> IOException</span><br><span class=\"line\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;String&gt; <span class=\"title\">getClassList</span><span class=\"params\">(File jarFile, Class&lt;?&gt;[] parents, <span class=\"keyword\">boolean</span> inner, String contain, String notContain)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">\t\tSet&lt;String&gt; listClasses = <span class=\"keyword\">new</span> TreeSet&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tZipFile zipFile = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tzipFile = <span class=\"keyword\">new</span> ZipFile(jarFile);</span><br><span class=\"line\">\t\t\tEnumeration&lt;? extends ZipEntry&gt; entries = zipFile.entries();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span> (entries.hasMoreElements()) &#123;</span><br><span class=\"line\">\t\t\t\tString strEntry = entries.nextElement().toString();</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (strEntry.endsWith(DOT_CLASS)) &#123;</span><br><span class=\"line\">\t\t\t\t\tString fixedClassName = fixClassName(strEntry);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (accept(parents, fixedClassName, contain, notContain, inner)) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tlistClasses.add(fixedClassName);</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> e;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (zipFile != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\t\tzipFile.close();</span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ArrayList&lt;&gt;(listClasses);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">fixClassName</span><span class=\"params\">(String strClassName)</span> </span>&#123;</span><br><span class=\"line\">\t\tstrClassName = strClassName.replace(<span class=\"string\">'\\\\'</span>, <span class=\"string\">'.'</span>);</span><br><span class=\"line\">\t\tstrClassName = strClassName.replace(<span class=\"string\">'/'</span>, <span class=\"string\">'.'</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// remove \".class\"</span></span><br><span class=\"line\">\t\tstrClassName = strClassName.substring(<span class=\"number\">0</span>, strClassName.length() - DOT_CLASS_LEN);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> strClassName;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">accept</span><span class=\"params\">(Class&lt;?&gt;[] parents, String className, String contains, String notContains,</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">boolean</span> inner)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (contains != <span class=\"keyword\">null</span> &amp;&amp; !className.contains(contains)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>; <span class=\"comment\">// It does not contain a required string</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (notContains != <span class=\"keyword\">null</span> &amp;&amp; className.contains(notContains)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>; <span class=\"comment\">// It contains a banned string</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!className.contains(<span class=\"string\">\"$\"</span>) || inner) &#123; <span class=\"comment\">// $NON-NLS-1$</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (isChildOf(parents, className, Thread.currentThread().getContextClassLoader())) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isChildOf</span><span class=\"params\">(Class&lt;?&gt;[] parentClasses, String strClassName, ClassLoader contextClassLoader)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// might throw an exception, assume this is ignorable</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tClass&lt;?&gt; c = Class.forName(strClassName, <span class=\"keyword\">false</span>, contextClassLoader);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!c.isInterface() &amp;&amp; !Modifier.isAbstract(c.getModifiers())) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> (Class&lt;?&gt; parentClass : parentClasses) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (parentClass.isAssignableFrom(c)) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (UnsupportedClassVersionError | ClassNotFoundException | NoClassDefFoundError e) &#123;</span><br><span class=\"line\">\t\t\tlog.debug(e.getLocalizedMessage());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>比如 jar 文件在 <code>D:/soft/apache-jmeter-3.0/lib/ext/ApacheJMeter_functions.jar</code><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; classes = ClassUtil.getClassList(<span class=\"keyword\">new</span> File(<span class=\"string\">\"D:/soft/apache-jmeter-3.0/lib/ext/ApacheJMeter_functions.jar\"</span>), <span class=\"keyword\">new</span> Class[] &#123; Function.class &#125;, <span class=\"keyword\">true</span>, <span class=\"string\">\".functions.\"</span>, <span class=\"string\">\".gui.\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// Function.class 是 org.apache.jmeter.functions.Function</span></span><br></pre></td></tr></table></figure></p>\n<p>打印 classes，输出如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.apache.jmeter.functions.BeanShell</span><br><span class=\"line\">org.apache.jmeter.functions.CSVRead</span><br><span class=\"line\">org.apache.jmeter.functions.CharFunction</span><br><span class=\"line\">org.apache.jmeter.functions.EscapeHtml</span><br><span class=\"line\">org.apache.jmeter.functions.EscapeOroRegexpChars</span><br><span class=\"line\">org.apache.jmeter.functions.EvalFunction</span><br><span class=\"line\">org.apache.jmeter.functions.EvalVarFunction</span><br><span class=\"line\">org.apache.jmeter.functions.FileToString</span><br><span class=\"line\">org.apache.jmeter.functions.IntSum</span><br><span class=\"line\">org.apache.jmeter.functions.IterationCounter</span><br><span class=\"line\">org.apache.jmeter.functions.JavaScript</span><br><span class=\"line\">org.apache.jmeter.functions.Jexl2Function</span><br><span class=\"line\">org.apache.jmeter.functions.Jexl3Function</span><br><span class=\"line\">org.apache.jmeter.functions.JexlFunction</span><br><span class=\"line\">org.apache.jmeter.functions.LogFunction</span><br><span class=\"line\">org.apache.jmeter.functions.LogFunction2</span><br><span class=\"line\">org.apache.jmeter.functions.LongSum</span><br><span class=\"line\">org.apache.jmeter.functions.MachineIP</span><br><span class=\"line\">org.apache.jmeter.functions.MachineName</span><br><span class=\"line\">org.apache.jmeter.functions.Property</span><br><span class=\"line\">org.apache.jmeter.functions.Property2</span><br><span class=\"line\">org.apache.jmeter.functions.Random</span><br><span class=\"line\">org.apache.jmeter.functions.RandomString</span><br><span class=\"line\">org.apache.jmeter.functions.RegexFunction</span><br><span class=\"line\">org.apache.jmeter.functions.SamplerName</span><br><span class=\"line\">org.apache.jmeter.functions.SetProperty</span><br><span class=\"line\">org.apache.jmeter.functions.SplitFunction</span><br><span class=\"line\">org.apache.jmeter.functions.StringFromFile</span><br><span class=\"line\">org.apache.jmeter.functions.TestPlanName</span><br><span class=\"line\">org.apache.jmeter.functions.ThreadNumber</span><br><span class=\"line\">org.apache.jmeter.functions.TimeFunction</span><br><span class=\"line\">org.apache.jmeter.functions.UnEscape</span><br><span class=\"line\">org.apache.jmeter.functions.UnEscapeHtml</span><br><span class=\"line\">org.apache.jmeter.functions.UrlDecode</span><br><span class=\"line\">org.apache.jmeter.functions.UrlEncode</span><br><span class=\"line\">org.apache.jmeter.functions.Uuid</span><br><span class=\"line\">org.apache.jmeter.functions.Variable</span><br><span class=\"line\">org.apache.jmeter.functions.XPath</span><br></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Modifier;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Enumeration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Set;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.TreeSet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.zip.ZipEntry;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.zip.ZipFile;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.Logger;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.LoggerFactory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * 关于类的工具类</span><br><span class=\"line\"> * 参考 <span class=\"doctag\">@see</span> org.apache.jorphan.reflect.ClassFinder</span><br><span class=\"line\"> * </span><br><span class=\"line\"> * <span class=\"doctag\">@author</span> chen_k</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * 2016年11月17日-上午10:30:59</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClassUtil</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Logger log = LoggerFactory.getLogger(ClassUtil.class);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String DOT_CLASS = <span class=\"string\">\".class\"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> DOT_CLASS_LEN = DOT_CLASS.length();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span><br><span class=\"line\">\t * 从指定的 jar 文件中获取类的路径列表</span><br><span class=\"line\">\t * <span class=\"doctag\">@param</span> jarFile File jar 文件对象</span><br><span class=\"line\">\t * <span class=\"doctag\">@param</span> parents Class&lt;?&gt;[] 继承或者实现的接口</span><br><span class=\"line\">\t * <span class=\"doctag\">@param</span> inner 是否包含内部类</span><br><span class=\"line\">\t * <span class=\"doctag\">@param</span> contain 类路径中含有的字符串，比如 .function.</span><br><span class=\"line\">\t * <span class=\"doctag\">@param</span> notContain 类路径中不含有的字符串 .gui.</span><br><span class=\"line\">\t * <span class=\"doctag\">@return</span> List&lt;String&gt;</span><br><span class=\"line\">\t * <span class=\"doctag\">@throws</span> IOException</span><br><span class=\"line\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;String&gt; <span class=\"title\">getClassList</span><span class=\"params\">(File jarFile, Class&lt;?&gt;[] parents, <span class=\"keyword\">boolean</span> inner, String contain, String notContain)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">\t\tSet&lt;String&gt; listClasses = <span class=\"keyword\">new</span> TreeSet&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tZipFile zipFile = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tzipFile = <span class=\"keyword\">new</span> ZipFile(jarFile);</span><br><span class=\"line\">\t\t\tEnumeration&lt;? extends ZipEntry&gt; entries = zipFile.entries();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span> (entries.hasMoreElements()) &#123;</span><br><span class=\"line\">\t\t\t\tString strEntry = entries.nextElement().toString();</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (strEntry.endsWith(DOT_CLASS)) &#123;</span><br><span class=\"line\">\t\t\t\t\tString fixedClassName = fixClassName(strEntry);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (accept(parents, fixedClassName, contain, notContain, inner)) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tlistClasses.add(fixedClassName);</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> e;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (zipFile != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\t\tzipFile.close();</span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ArrayList&lt;&gt;(listClasses);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">fixClassName</span><span class=\"params\">(String strClassName)</span> </span>&#123;</span><br><span class=\"line\">\t\tstrClassName = strClassName.replace(<span class=\"string\">'\\\\'</span>, <span class=\"string\">'.'</span>);</span><br><span class=\"line\">\t\tstrClassName = strClassName.replace(<span class=\"string\">'/'</span>, <span class=\"string\">'.'</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// remove \".class\"</span></span><br><span class=\"line\">\t\tstrClassName = strClassName.substring(<span class=\"number\">0</span>, strClassName.length() - DOT_CLASS_LEN);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> strClassName;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">accept</span><span class=\"params\">(Class&lt;?&gt;[] parents, String className, String contains, String notContains,</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">boolean</span> inner)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (contains != <span class=\"keyword\">null</span> &amp;&amp; !className.contains(contains)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>; <span class=\"comment\">// It does not contain a required string</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (notContains != <span class=\"keyword\">null</span> &amp;&amp; className.contains(notContains)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>; <span class=\"comment\">// It contains a banned string</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!className.contains(<span class=\"string\">\"$\"</span>) || inner) &#123; <span class=\"comment\">// $NON-NLS-1$</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (isChildOf(parents, className, Thread.currentThread().getContextClassLoader())) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isChildOf</span><span class=\"params\">(Class&lt;?&gt;[] parentClasses, String strClassName, ClassLoader contextClassLoader)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// might throw an exception, assume this is ignorable</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tClass&lt;?&gt; c = Class.forName(strClassName, <span class=\"keyword\">false</span>, contextClassLoader);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!c.isInterface() &amp;&amp; !Modifier.isAbstract(c.getModifiers())) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> (Class&lt;?&gt; parentClass : parentClasses) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (parentClass.isAssignableFrom(c)) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (UnsupportedClassVersionError | ClassNotFoundException | NoClassDefFoundError e) &#123;</span><br><span class=\"line\">\t\t\tlog.debug(e.getLocalizedMessage());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>比如 jar 文件在 <code>D:/soft/apache-jmeter-3.0/lib/ext/ApacheJMeter_functions.jar</code><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; classes = ClassUtil.getClassList(<span class=\"keyword\">new</span> File(<span class=\"string\">\"D:/soft/apache-jmeter-3.0/lib/ext/ApacheJMeter_functions.jar\"</span>), <span class=\"keyword\">new</span> Class[] &#123; Function.class &#125;, <span class=\"keyword\">true</span>, <span class=\"string\">\".functions.\"</span>, <span class=\"string\">\".gui.\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// Function.class 是 org.apache.jmeter.functions.Function</span></span><br></pre></td></tr></table></figure></p>\n<p>打印 classes，输出如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.apache.jmeter.functions.BeanShell</span><br><span class=\"line\">org.apache.jmeter.functions.CSVRead</span><br><span class=\"line\">org.apache.jmeter.functions.CharFunction</span><br><span class=\"line\">org.apache.jmeter.functions.EscapeHtml</span><br><span class=\"line\">org.apache.jmeter.functions.EscapeOroRegexpChars</span><br><span class=\"line\">org.apache.jmeter.functions.EvalFunction</span><br><span class=\"line\">org.apache.jmeter.functions.EvalVarFunction</span><br><span class=\"line\">org.apache.jmeter.functions.FileToString</span><br><span class=\"line\">org.apache.jmeter.functions.IntSum</span><br><span class=\"line\">org.apache.jmeter.functions.IterationCounter</span><br><span class=\"line\">org.apache.jmeter.functions.JavaScript</span><br><span class=\"line\">org.apache.jmeter.functions.Jexl2Function</span><br><span class=\"line\">org.apache.jmeter.functions.Jexl3Function</span><br><span class=\"line\">org.apache.jmeter.functions.JexlFunction</span><br><span class=\"line\">org.apache.jmeter.functions.LogFunction</span><br><span class=\"line\">org.apache.jmeter.functions.LogFunction2</span><br><span class=\"line\">org.apache.jmeter.functions.LongSum</span><br><span class=\"line\">org.apache.jmeter.functions.MachineIP</span><br><span class=\"line\">org.apache.jmeter.functions.MachineName</span><br><span class=\"line\">org.apache.jmeter.functions.Property</span><br><span class=\"line\">org.apache.jmeter.functions.Property2</span><br><span class=\"line\">org.apache.jmeter.functions.Random</span><br><span class=\"line\">org.apache.jmeter.functions.RandomString</span><br><span class=\"line\">org.apache.jmeter.functions.RegexFunction</span><br><span class=\"line\">org.apache.jmeter.functions.SamplerName</span><br><span class=\"line\">org.apache.jmeter.functions.SetProperty</span><br><span class=\"line\">org.apache.jmeter.functions.SplitFunction</span><br><span class=\"line\">org.apache.jmeter.functions.StringFromFile</span><br><span class=\"line\">org.apache.jmeter.functions.TestPlanName</span><br><span class=\"line\">org.apache.jmeter.functions.ThreadNumber</span><br><span class=\"line\">org.apache.jmeter.functions.TimeFunction</span><br><span class=\"line\">org.apache.jmeter.functions.UnEscape</span><br><span class=\"line\">org.apache.jmeter.functions.UnEscapeHtml</span><br><span class=\"line\">org.apache.jmeter.functions.UrlDecode</span><br><span class=\"line\">org.apache.jmeter.functions.UrlEncode</span><br><span class=\"line\">org.apache.jmeter.functions.Uuid</span><br><span class=\"line\">org.apache.jmeter.functions.Variable</span><br><span class=\"line\">org.apache.jmeter.functions.XPath</span><br></pre></td></tr></table></figure></p>\n"},{"title":"使用Maven的profiles和testResource进行Junit单元测试","title_url":"Maven-profiles-testResource-Junit","date":"2016-07-10T16:00:00.000Z","description":"使用Maven的profiles和testResource进行Junit单元测试","_content":"\n## Maven的profiles配置使用\n\nMaven的profiles可根据不同的环境将POM的配置应用到配置文件中的`${}`变量中，具体步骤如下：\n\n- POM的profiles配置如下\n```xml\n<project>\n\t\n\t<profiles>\n\t\t<profile>\n\t\t\t<id>dev</id>\n\t\t\t<activation>\n\t\t\t\t<activeByDefault>true</activeByDefault>\n\t\t\t</activation>\n\t\t\t<properties>\n\t\t\t\t<!-- 日志 -->\n\t\t\t\t<log.root.level>DEBUG</log.root.level>\n\t\t\t\t<log.root.name>Service</log.root.name>\n\t\t\t\t<log.special>Console</log.special>\n\t\t\t</properties>\n\t\t</profile>\n\t\t<profile>\n\t\t\t<id>test</id>\n\t\t\t<properties>\n\t\t\t\t<!-- 日志 -->\n\t\t\t\t<log.root.level>DEBUG</log.root.level>\n\t\t\t\t<log.root.name>Service</log.root.name>\n\t\t\t\t<log.special>Console</log.special>\n\t\t\t</properties>\n\t\t</profile>\n\t</profiles>\n</project>\n```\n\n- 为了在编译的时候就将POM的配置应用到文件中的`${}`变量中需要加入如下配置，具体会将profiles中的配置应用到`src/main/resources`目录下含有`${}`变量，\n这些变量可以在xml或者properties文件中\n```xml\n<project>\n\n\t<build>\n\t\t<resources>\n\t\t\t<resource>\n\t\t\t\t<directory>src/main/resources</directory>\n\t\t\t\t<includes>\n\t\t\t\t\t<include>*/*</include>\n\t\t\t\t\t<include>*</include>\n\t\t\t\t</includes>\n\t\t\t\t<filtering>true</filtering>\n\t\t\t</resource>\n\t\t</resources>\n\t</build>\n</project>\n```\n\n比如在`src/main/resources/log4j.properties`中有如下配置\n```\nlog4j.rootLogger=${log.root.level},${log.root.name},${log.special}\n\n#Console\nlog4j.appender.Console=org.apache.log4j.ConsoleAppender\nlog4j.appender.Console.layout=org.apache.log4j.PatternLayout\nlog4j.appender.Console.layout.ConversionPattern=%d{dd\\u65e5 HH:mm:ss,SSS} : %-5p %C{1}.%M() - %m%n\n```\n\n那么编译后在`target\\classes\\log4j.properties`文件中的内容如下：\n```\nlog4j.rootLogger=DEBUG,Service,Console\n\n#Console\nlog4j.appender.Console=org.apache.log4j.ConsoleAppender\nlog4j.appender.Console.layout=org.apache.log4j.PatternLayout\nlog4j.appender.Console.layout.ConversionPattern=%d{dd\\u65e5 HH:mm:ss,SSS} : %-5p %C{1}.%M() - %m%n\n```\n\n## 在Junit单元测试中利用profiles配置来区分不同环境\n\n在上面的介绍中是通过profiles配置来区分不同环境方便打包发布，这里介绍通过profiles配置区分不同环境进行单元测试，确保系统在发布前不仅能通过本地环境的单元测试，还能够通过线上环境的单元测试。\n\n- POM的profiles配置和上面的一样\n\n- 在`build`节点下新增`testResources`，确保在本地执行`mvn test -Ptest` 的时候将profiles配置应用到`src/test/resources`目录下含有`${}`变量并执行Junit单元测试\n```xml\n<project>\n\n\t<build>\n\t\t<testResources>\n\t\t\t<testResource>\n\t\t\t\t<directory>src/test/resources</directory>\n\t\t\t\t<includes>\n\t\t\t\t\t<include>*/*</include>\n\t\t\t\t\t<include>*</include>\n\t\t\t\t</includes>\n\t\t\t\t<filtering>true</filtering>\n\t\t\t</testResource>\n\t\t</testResources>\n\t</build>\n</project>\n```\n\n- 在`src/test/resources`目录下新建`test`文件夹，将properties文件移到该目录下，Maven在执行单元测试的时候默认从该目录读取properties文件\n\n- **注意**，在 Eclipse 中右键项目执行`Maven->Update Maven Project`后，需要右键项目在`Java Build Path`节点中选择`Source`选项卡，\n选中`src/main/resources`和`src/test/resources`下的`Excluded`选项点击右边的`Remove`按钮，最后点击下面的`Ok`按钮，才能将相关资源文件编译到`target`目录下\n\n## 编写一个Spring MVC的Controller层Junit单元测试\n\n- Controller层Junit单元测试与Service层有所不同，需要引入spring-test和spring-mock\n```xml\n<dependency>\n\t<groupId>org.springframework</groupId>\n\t<artifactId>spring-test</artifactId>\n\t<version>3.2.8.RELEASE</version>\n</dependency>\n<dependency>\n\t<groupId>org.springframework</groupId>\n\t<artifactId>spring-mock</artifactId>\n\t<version>2.0.8</version>\n</dependency>\n```\n\n- Controller层代码如下\n```java\n@ResponseBody\n@ApiOperation(value = \"获取用户信息\", notes = \"获取用户信息\", response = JsonResponses.class)\n@RequestMapping(value = \"/user_info\", method = RequestMethod.GET, produces = \"application/json; charset=utf-8\")\npublic void getUserInfo(@ModelAttribute BasicInfoBean basicInfo, \n\t\tHttpServletResponse response, HttpServletRequest request) throws Exception {\n\t\n\t// 验证uid是否存在\n\tInteger uid = basicInfo.getUid();\n\tif (uid == null) {\n\t\tHttpUtil.returnJson(new JsonResponses(API.CODE.kCodeParamsError, API.MESSAGE.PARAM_FAILED.concat(\":uid为空\")), response);\n\t\treturn;\n\t}\n\t\n\tUsers user = userServicebyUC.getUsersByUid(uid);\n\tfinal Map<String, Object> dataMap = new LinkedHashMap<>();\n\tsetUserModelMap(user, dataMap, basicInfo);\n\t\n\tHttpUtil.returnJson(new JsonResponses(API.CODE.kCodeSuccess, API.MESSAGE.SUCCESS, dataMap), response);\n}\n```\n\n- Junit代码如下\n```java\n@RunWith(SpringJUnit4ClassRunner.class)\n@WebAppConfiguration\n@ContextConfiguration(locations = { \"classpath:spring/*-config.xml\", \"classpath:spring/*-servlet.xml\" })\npublic class BaseController {\n\t\n\tprotected static String uid;\n\t\n\tstatic {\n\t\t// 加载配置文件\n\t\tProperties config = new Properties();\n\t\tInputStream input = null;\n\t\ttry {\n\t\t\tinput = API.class.getClassLoader().getResourceAsStream(\"test/test.properties\");\n\t\t\tReader reader = new InputStreamReader(input, \"UTF-8\");\n\t\t\tconfig.load(reader);\n\n\t\t\tuid = config.getProperty(\"uid\");\n\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tif (null != input) {\n\t\t\t\ttry {\n\t\t\t\t\tinput.close();\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// @Autowired\n\t// private WebApplicationContext wac;\n\t\n}\n\npublic class TestUserController extends BaseController {\n\t\n\tprivate Logger logger = LoggerFactory.getLogger(this.getClass());\n\t\n\t@Autowired\n\tprotected UserController userController;\n\n\tprotected MockMvc mockMvc;\n\n\t@Before\n\tpublic void setup() {\n\t\tmockMvc = MockMvcBuilders.standaloneSetup(userController).build();\n\t}\n\n\t@Test\n\tpublic void testFindPageUsers() throws Exception {\n\t\tlogger.info(\"uid is {}\", uid);\n\t\t\n\t\tResultActions ra = mockMvc.perform(MockMvcRequestBuilders.get(\"/user/user_info\")\n\t\t\t\t.accept(MediaType.APPLICATION_JSON).param(\"test\", \"1\").param(\"uid\", uid));\n\t\tMvcResult mr = ra.andReturn();\n\t\tMockHttpServletResponse resp = mr.getResponse();\n\t\tAssert.assertEquals(resp.getStatus(), 200);\n\t\t\n\t\tJSONObject obj = JSONObject.parseObject(resp.getContentAsString());\n\t\tJSONObject dataObj = obj.getJSONObject(\"data\");\n\t\tAssert.assertEquals(StringUtil.getStr(dataObj.get(\"uid\")), uid);\n\t}\n\n}\n```\n\n## 如何去掉单元测试\n\n- 在执行Maven命令的时候加上`-Dmaven.test.skip=true`即可，比如`clean install -Dmaven.test.skip=true`，这样就会在执行的过程中跳过单元测试 `[INFO] Tests are skipped.`，也可以在profiles的properties中增加`<maven.test.skip>true</maven.test.skip>`，具体如下\n```xml\n<project>\n\t\n\t<profiles>\n\t\t<profile>\n\t\t\t<id>dev</id>\n\t\t\t<activation>\n\t\t\t\t<activeByDefault>true</activeByDefault>\n\t\t\t</activation>\n\t\t\t<properties>\n\t\t\t\t<maven.test.skip>false</maven.test.skip>\n\t\t\t\t<!-- 日志 -->\n\t\t\t\t<log.root.level>DEBUG</log.root.level>\n\t\t\t\t<log.root.name>Service</log.root.name>\n\t\t\t\t<log.special>Console</log.special>\n\t\t\t</properties>\n\t\t</profile>\n\t\t<profile>\n\t\t\t<id>test</id>\n\t\t\t<properties>\n\t\t\t\t<maven.test.skip>true</maven.test.skip>\n\t\t\t\t<!-- 日志 -->\n\t\t\t\t<log.root.level>DEBUG</log.root.level>\n\t\t\t\t<log.root.name>Service</log.root.name>\n\t\t\t\t<log.special>Console</log.special>\n\t\t\t</properties>\n\t\t</profile>\n\t</profiles>\n</project>\n```\n\n## 参考如下\n- [Maven的profiles介绍](https://maven.apache.org/guides/introduction/introduction-to-profiles.html)\n- [MAVEN 属性定义与使用](http://www.tmser.com/post-178.html)\n- [Maven的生命周期和插件](http://www.open-open.com/lib/view/open1452138592011.html)\n- [利用maven中resources插件的copy-resources目标进行资源copy和过滤](http://xigua366.iteye.com/blog/2080668?utm_source=tuicool&utm_medium=referral)","source":"_posts/使用Maven的profile和testResource进行Junit单元测试.md","raw":"---\ntitle: 使用Maven的profiles和testResource进行Junit单元测试\ntitle_url: Maven-profiles-testResource-Junit\ndate: 2016-07-11\ntags: [Maven,Junit]\ncategories: 技术\ndescription: 使用Maven的profiles和testResource进行Junit单元测试\n---\n\n## Maven的profiles配置使用\n\nMaven的profiles可根据不同的环境将POM的配置应用到配置文件中的`${}`变量中，具体步骤如下：\n\n- POM的profiles配置如下\n```xml\n<project>\n\t\n\t<profiles>\n\t\t<profile>\n\t\t\t<id>dev</id>\n\t\t\t<activation>\n\t\t\t\t<activeByDefault>true</activeByDefault>\n\t\t\t</activation>\n\t\t\t<properties>\n\t\t\t\t<!-- 日志 -->\n\t\t\t\t<log.root.level>DEBUG</log.root.level>\n\t\t\t\t<log.root.name>Service</log.root.name>\n\t\t\t\t<log.special>Console</log.special>\n\t\t\t</properties>\n\t\t</profile>\n\t\t<profile>\n\t\t\t<id>test</id>\n\t\t\t<properties>\n\t\t\t\t<!-- 日志 -->\n\t\t\t\t<log.root.level>DEBUG</log.root.level>\n\t\t\t\t<log.root.name>Service</log.root.name>\n\t\t\t\t<log.special>Console</log.special>\n\t\t\t</properties>\n\t\t</profile>\n\t</profiles>\n</project>\n```\n\n- 为了在编译的时候就将POM的配置应用到文件中的`${}`变量中需要加入如下配置，具体会将profiles中的配置应用到`src/main/resources`目录下含有`${}`变量，\n这些变量可以在xml或者properties文件中\n```xml\n<project>\n\n\t<build>\n\t\t<resources>\n\t\t\t<resource>\n\t\t\t\t<directory>src/main/resources</directory>\n\t\t\t\t<includes>\n\t\t\t\t\t<include>*/*</include>\n\t\t\t\t\t<include>*</include>\n\t\t\t\t</includes>\n\t\t\t\t<filtering>true</filtering>\n\t\t\t</resource>\n\t\t</resources>\n\t</build>\n</project>\n```\n\n比如在`src/main/resources/log4j.properties`中有如下配置\n```\nlog4j.rootLogger=${log.root.level},${log.root.name},${log.special}\n\n#Console\nlog4j.appender.Console=org.apache.log4j.ConsoleAppender\nlog4j.appender.Console.layout=org.apache.log4j.PatternLayout\nlog4j.appender.Console.layout.ConversionPattern=%d{dd\\u65e5 HH:mm:ss,SSS} : %-5p %C{1}.%M() - %m%n\n```\n\n那么编译后在`target\\classes\\log4j.properties`文件中的内容如下：\n```\nlog4j.rootLogger=DEBUG,Service,Console\n\n#Console\nlog4j.appender.Console=org.apache.log4j.ConsoleAppender\nlog4j.appender.Console.layout=org.apache.log4j.PatternLayout\nlog4j.appender.Console.layout.ConversionPattern=%d{dd\\u65e5 HH:mm:ss,SSS} : %-5p %C{1}.%M() - %m%n\n```\n\n## 在Junit单元测试中利用profiles配置来区分不同环境\n\n在上面的介绍中是通过profiles配置来区分不同环境方便打包发布，这里介绍通过profiles配置区分不同环境进行单元测试，确保系统在发布前不仅能通过本地环境的单元测试，还能够通过线上环境的单元测试。\n\n- POM的profiles配置和上面的一样\n\n- 在`build`节点下新增`testResources`，确保在本地执行`mvn test -Ptest` 的时候将profiles配置应用到`src/test/resources`目录下含有`${}`变量并执行Junit单元测试\n```xml\n<project>\n\n\t<build>\n\t\t<testResources>\n\t\t\t<testResource>\n\t\t\t\t<directory>src/test/resources</directory>\n\t\t\t\t<includes>\n\t\t\t\t\t<include>*/*</include>\n\t\t\t\t\t<include>*</include>\n\t\t\t\t</includes>\n\t\t\t\t<filtering>true</filtering>\n\t\t\t</testResource>\n\t\t</testResources>\n\t</build>\n</project>\n```\n\n- 在`src/test/resources`目录下新建`test`文件夹，将properties文件移到该目录下，Maven在执行单元测试的时候默认从该目录读取properties文件\n\n- **注意**，在 Eclipse 中右键项目执行`Maven->Update Maven Project`后，需要右键项目在`Java Build Path`节点中选择`Source`选项卡，\n选中`src/main/resources`和`src/test/resources`下的`Excluded`选项点击右边的`Remove`按钮，最后点击下面的`Ok`按钮，才能将相关资源文件编译到`target`目录下\n\n## 编写一个Spring MVC的Controller层Junit单元测试\n\n- Controller层Junit单元测试与Service层有所不同，需要引入spring-test和spring-mock\n```xml\n<dependency>\n\t<groupId>org.springframework</groupId>\n\t<artifactId>spring-test</artifactId>\n\t<version>3.2.8.RELEASE</version>\n</dependency>\n<dependency>\n\t<groupId>org.springframework</groupId>\n\t<artifactId>spring-mock</artifactId>\n\t<version>2.0.8</version>\n</dependency>\n```\n\n- Controller层代码如下\n```java\n@ResponseBody\n@ApiOperation(value = \"获取用户信息\", notes = \"获取用户信息\", response = JsonResponses.class)\n@RequestMapping(value = \"/user_info\", method = RequestMethod.GET, produces = \"application/json; charset=utf-8\")\npublic void getUserInfo(@ModelAttribute BasicInfoBean basicInfo, \n\t\tHttpServletResponse response, HttpServletRequest request) throws Exception {\n\t\n\t// 验证uid是否存在\n\tInteger uid = basicInfo.getUid();\n\tif (uid == null) {\n\t\tHttpUtil.returnJson(new JsonResponses(API.CODE.kCodeParamsError, API.MESSAGE.PARAM_FAILED.concat(\":uid为空\")), response);\n\t\treturn;\n\t}\n\t\n\tUsers user = userServicebyUC.getUsersByUid(uid);\n\tfinal Map<String, Object> dataMap = new LinkedHashMap<>();\n\tsetUserModelMap(user, dataMap, basicInfo);\n\t\n\tHttpUtil.returnJson(new JsonResponses(API.CODE.kCodeSuccess, API.MESSAGE.SUCCESS, dataMap), response);\n}\n```\n\n- Junit代码如下\n```java\n@RunWith(SpringJUnit4ClassRunner.class)\n@WebAppConfiguration\n@ContextConfiguration(locations = { \"classpath:spring/*-config.xml\", \"classpath:spring/*-servlet.xml\" })\npublic class BaseController {\n\t\n\tprotected static String uid;\n\t\n\tstatic {\n\t\t// 加载配置文件\n\t\tProperties config = new Properties();\n\t\tInputStream input = null;\n\t\ttry {\n\t\t\tinput = API.class.getClassLoader().getResourceAsStream(\"test/test.properties\");\n\t\t\tReader reader = new InputStreamReader(input, \"UTF-8\");\n\t\t\tconfig.load(reader);\n\n\t\t\tuid = config.getProperty(\"uid\");\n\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tif (null != input) {\n\t\t\t\ttry {\n\t\t\t\t\tinput.close();\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// @Autowired\n\t// private WebApplicationContext wac;\n\t\n}\n\npublic class TestUserController extends BaseController {\n\t\n\tprivate Logger logger = LoggerFactory.getLogger(this.getClass());\n\t\n\t@Autowired\n\tprotected UserController userController;\n\n\tprotected MockMvc mockMvc;\n\n\t@Before\n\tpublic void setup() {\n\t\tmockMvc = MockMvcBuilders.standaloneSetup(userController).build();\n\t}\n\n\t@Test\n\tpublic void testFindPageUsers() throws Exception {\n\t\tlogger.info(\"uid is {}\", uid);\n\t\t\n\t\tResultActions ra = mockMvc.perform(MockMvcRequestBuilders.get(\"/user/user_info\")\n\t\t\t\t.accept(MediaType.APPLICATION_JSON).param(\"test\", \"1\").param(\"uid\", uid));\n\t\tMvcResult mr = ra.andReturn();\n\t\tMockHttpServletResponse resp = mr.getResponse();\n\t\tAssert.assertEquals(resp.getStatus(), 200);\n\t\t\n\t\tJSONObject obj = JSONObject.parseObject(resp.getContentAsString());\n\t\tJSONObject dataObj = obj.getJSONObject(\"data\");\n\t\tAssert.assertEquals(StringUtil.getStr(dataObj.get(\"uid\")), uid);\n\t}\n\n}\n```\n\n## 如何去掉单元测试\n\n- 在执行Maven命令的时候加上`-Dmaven.test.skip=true`即可，比如`clean install -Dmaven.test.skip=true`，这样就会在执行的过程中跳过单元测试 `[INFO] Tests are skipped.`，也可以在profiles的properties中增加`<maven.test.skip>true</maven.test.skip>`，具体如下\n```xml\n<project>\n\t\n\t<profiles>\n\t\t<profile>\n\t\t\t<id>dev</id>\n\t\t\t<activation>\n\t\t\t\t<activeByDefault>true</activeByDefault>\n\t\t\t</activation>\n\t\t\t<properties>\n\t\t\t\t<maven.test.skip>false</maven.test.skip>\n\t\t\t\t<!-- 日志 -->\n\t\t\t\t<log.root.level>DEBUG</log.root.level>\n\t\t\t\t<log.root.name>Service</log.root.name>\n\t\t\t\t<log.special>Console</log.special>\n\t\t\t</properties>\n\t\t</profile>\n\t\t<profile>\n\t\t\t<id>test</id>\n\t\t\t<properties>\n\t\t\t\t<maven.test.skip>true</maven.test.skip>\n\t\t\t\t<!-- 日志 -->\n\t\t\t\t<log.root.level>DEBUG</log.root.level>\n\t\t\t\t<log.root.name>Service</log.root.name>\n\t\t\t\t<log.special>Console</log.special>\n\t\t\t</properties>\n\t\t</profile>\n\t</profiles>\n</project>\n```\n\n## 参考如下\n- [Maven的profiles介绍](https://maven.apache.org/guides/introduction/introduction-to-profiles.html)\n- [MAVEN 属性定义与使用](http://www.tmser.com/post-178.html)\n- [Maven的生命周期和插件](http://www.open-open.com/lib/view/open1452138592011.html)\n- [利用maven中resources插件的copy-resources目标进行资源copy和过滤](http://xigua366.iteye.com/blog/2080668?utm_source=tuicool&utm_medium=referral)","slug":"使用Maven的profile和testResource进行Junit单元测试","published":1,"updated":"2016-10-10T01:58:06.781Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj36mxs1h000cfwezkis8yc0a","content":"<h2 id=\"Maven的profiles配置使用\"><a href=\"#Maven的profiles配置使用\" class=\"headerlink\" title=\"Maven的profiles配置使用\"></a>Maven的profiles配置使用</h2><p>Maven的profiles可根据不同的环境将POM的配置应用到配置文件中的<code>${}</code>变量中，具体步骤如下：</p>\n<ul>\n<li><p>POM的profiles配置如下</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">profiles</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>dev<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">activation</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">activeByDefault</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">activeByDefault</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">activation</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">&lt;!-- 日志 --&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">log.root.level</span>&gt;</span>DEBUG<span class=\"tag\">&lt;/<span class=\"name\">log.root.level</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">log.root.name</span>&gt;</span>Service<span class=\"tag\">&lt;/<span class=\"name\">log.root.name</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">log.special</span>&gt;</span>Console<span class=\"tag\">&lt;/<span class=\"name\">log.special</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">&lt;!-- 日志 --&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">log.root.level</span>&gt;</span>DEBUG<span class=\"tag\">&lt;/<span class=\"name\">log.root.level</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">log.root.name</span>&gt;</span>Service<span class=\"tag\">&lt;/<span class=\"name\">log.root.name</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">log.special</span>&gt;</span>Console<span class=\"tag\">&lt;/<span class=\"name\">log.special</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">profiles</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>为了在编译的时候就将POM的配置应用到文件中的<code>${}</code>变量中需要加入如下配置，具体会将profiles中的配置应用到<code>src/main/resources</code>目录下含有<code>${}</code>变量，<br>这些变量可以在xml或者properties文件中</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/resources<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>*/*<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>*<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">filtering</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">filtering</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>比如在<code>src/main/resources/log4j.properties</code>中有如下配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">log4j.rootLogger=$&#123;log.root.level&#125;,$&#123;log.root.name&#125;,$&#123;log.special&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#Console</span><br><span class=\"line\">log4j.appender.Console=org.apache.log4j.ConsoleAppender</span><br><span class=\"line\">log4j.appender.Console.layout=org.apache.log4j.PatternLayout</span><br><span class=\"line\">log4j.appender.Console.layout.ConversionPattern=%d&#123;dd\\u65e5 HH:mm:ss,SSS&#125; : %-5p %C&#123;1&#125;.%M() - %m%n</span><br></pre></td></tr></table></figure></p>\n<p>那么编译后在<code>target\\classes\\log4j.properties</code>文件中的内容如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">log4j.rootLogger=DEBUG,Service,Console</span><br><span class=\"line\"></span><br><span class=\"line\">#Console</span><br><span class=\"line\">log4j.appender.Console=org.apache.log4j.ConsoleAppender</span><br><span class=\"line\">log4j.appender.Console.layout=org.apache.log4j.PatternLayout</span><br><span class=\"line\">log4j.appender.Console.layout.ConversionPattern=%d&#123;dd\\u65e5 HH:mm:ss,SSS&#125; : %-5p %C&#123;1&#125;.%M() - %m%n</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"在Junit单元测试中利用profiles配置来区分不同环境\"><a href=\"#在Junit单元测试中利用profiles配置来区分不同环境\" class=\"headerlink\" title=\"在Junit单元测试中利用profiles配置来区分不同环境\"></a>在Junit单元测试中利用profiles配置来区分不同环境</h2><p>在上面的介绍中是通过profiles配置来区分不同环境方便打包发布，这里介绍通过profiles配置区分不同环境进行单元测试，确保系统在发布前不仅能通过本地环境的单元测试，还能够通过线上环境的单元测试。</p>\n<ul>\n<li><p>POM的profiles配置和上面的一样</p>\n</li>\n<li><p>在<code>build</code>节点下新增<code>testResources</code>，确保在本地执行<code>mvn test -Ptest</code> 的时候将profiles配置应用到<code>src/test/resources</code>目录下含有<code>${}</code>变量并执行Junit单元测试</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">testResources</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">testResource</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/test/resources<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>*/*<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>*<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">filtering</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">filtering</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">testResource</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">testResources</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在<code>src/test/resources</code>目录下新建<code>test</code>文件夹，将properties文件移到该目录下，Maven在执行单元测试的时候默认从该目录读取properties文件</p>\n</li>\n<li><p><strong>注意</strong>，在 Eclipse 中右键项目执行<code>Maven-&gt;Update Maven Project</code>后，需要右键项目在<code>Java Build Path</code>节点中选择<code>Source</code>选项卡，<br>选中<code>src/main/resources</code>和<code>src/test/resources</code>下的<code>Excluded</code>选项点击右边的<code>Remove</code>按钮，最后点击下面的<code>Ok</code>按钮，才能将相关资源文件编译到<code>target</code>目录下</p>\n</li>\n</ul>\n<h2 id=\"编写一个Spring-MVC的Controller层Junit单元测试\"><a href=\"#编写一个Spring-MVC的Controller层Junit单元测试\" class=\"headerlink\" title=\"编写一个Spring MVC的Controller层Junit单元测试\"></a>编写一个Spring MVC的Controller层Junit单元测试</h2><ul>\n<li><p>Controller层Junit单元测试与Service层有所不同，需要引入spring-test和spring-mock</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.2.8.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-mock<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.0.8<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Controller层代码如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\"><span class=\"meta\">@ApiOperation</span>(value = <span class=\"string\">\"获取用户信息\"</span>, notes = <span class=\"string\">\"获取用户信息\"</span>, response = JsonResponses.class)</span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/user_info\"</span>, method = RequestMethod.GET, produces = <span class=\"string\">\"application/json; charset=utf-8\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getUserInfo</span><span class=\"params\">(@ModelAttribute BasicInfoBean basicInfo, </span><br><span class=\"line\">\t\tHttpServletResponse response, HttpServletRequest request)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 验证uid是否存在</span></span><br><span class=\"line\">\tInteger uid = basicInfo.getUid();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (uid == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\tHttpUtil.returnJson(<span class=\"keyword\">new</span> JsonResponses(API.CODE.kCodeParamsError, API.MESSAGE.PARAM_FAILED.concat(<span class=\"string\">\":uid为空\"</span>)), response);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tUsers user = userServicebyUC.getUsersByUid(uid);</span><br><span class=\"line\">\t<span class=\"keyword\">final</span> Map&lt;String, Object&gt; dataMap = <span class=\"keyword\">new</span> LinkedHashMap&lt;&gt;();</span><br><span class=\"line\">\tsetUserModelMap(user, dataMap, basicInfo);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tHttpUtil.returnJson(<span class=\"keyword\">new</span> JsonResponses(API.CODE.kCodeSuccess, API.MESSAGE.SUCCESS, dataMap), response);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Junit代码如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class=\"line\"><span class=\"meta\">@WebAppConfiguration</span></span><br><span class=\"line\"><span class=\"meta\">@ContextConfiguration</span>(locations = &#123; <span class=\"string\">\"classpath:spring/*-config.xml\"</span>, <span class=\"string\">\"classpath:spring/*-servlet.xml\"</span> &#125;)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseController</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> String uid;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 加载配置文件</span></span><br><span class=\"line\">\t\tProperties config = <span class=\"keyword\">new</span> Properties();</span><br><span class=\"line\">\t\tInputStream input = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tinput = API.class.getClassLoader().getResourceAsStream(<span class=\"string\">\"test/test.properties\"</span>);</span><br><span class=\"line\">\t\t\tReader reader = <span class=\"keyword\">new</span> InputStreamReader(input, <span class=\"string\">\"UTF-8\"</span>);</span><br><span class=\"line\">\t\t\tconfig.load(reader);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tuid = config.getProperty(<span class=\"string\">\"uid\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != input) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\t\tinput.close();</span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// @Autowired</span></span><br><span class=\"line\">\t<span class=\"comment\">// private WebApplicationContext wac;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestUserController</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseController</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Logger logger = LoggerFactory.getLogger(<span class=\"keyword\">this</span>.getClass());</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Autowired</span></span><br><span class=\"line\">\t<span class=\"keyword\">protected</span> UserController userController;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">protected</span> MockMvc mockMvc;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Before</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setup</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tmockMvc = MockMvcBuilders.standaloneSetup(userController).build();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Test</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testFindPageUsers</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\tlogger.info(<span class=\"string\">\"uid is &#123;&#125;\"</span>, uid);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tResultActions ra = mockMvc.perform(MockMvcRequestBuilders.get(<span class=\"string\">\"/user/user_info\"</span>)</span><br><span class=\"line\">\t\t\t\t.accept(MediaType.APPLICATION_JSON).param(<span class=\"string\">\"test\"</span>, <span class=\"string\">\"1\"</span>).param(<span class=\"string\">\"uid\"</span>, uid));</span><br><span class=\"line\">\t\tMvcResult mr = ra.andReturn();</span><br><span class=\"line\">\t\tMockHttpServletResponse resp = mr.getResponse();</span><br><span class=\"line\">\t\tAssert.assertEquals(resp.getStatus(), <span class=\"number\">200</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tJSONObject obj = JSONObject.parseObject(resp.getContentAsString());</span><br><span class=\"line\">\t\tJSONObject dataObj = obj.getJSONObject(<span class=\"string\">\"data\"</span>);</span><br><span class=\"line\">\t\tAssert.assertEquals(StringUtil.getStr(dataObj.get(<span class=\"string\">\"uid\"</span>)), uid);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"如何去掉单元测试\"><a href=\"#如何去掉单元测试\" class=\"headerlink\" title=\"如何去掉单元测试\"></a>如何去掉单元测试</h2><ul>\n<li>在执行Maven命令的时候加上<code>-Dmaven.test.skip=true</code>即可，比如<code>clean install -Dmaven.test.skip=true</code>，这样就会在执行的过程中跳过单元测试 <code>[INFO] Tests are skipped.</code>，也可以在profiles的properties中增加<code>&lt;maven.test.skip&gt;true&lt;/maven.test.skip&gt;</code>，具体如下<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">profiles</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>dev<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">activation</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">activeByDefault</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">activeByDefault</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">activation</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">maven.test.skip</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">maven.test.skip</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">&lt;!-- 日志 --&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">log.root.level</span>&gt;</span>DEBUG<span class=\"tag\">&lt;/<span class=\"name\">log.root.level</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">log.root.name</span>&gt;</span>Service<span class=\"tag\">&lt;/<span class=\"name\">log.root.name</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">log.special</span>&gt;</span>Console<span class=\"tag\">&lt;/<span class=\"name\">log.special</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">maven.test.skip</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">maven.test.skip</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">&lt;!-- 日志 --&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">log.root.level</span>&gt;</span>DEBUG<span class=\"tag\">&lt;/<span class=\"name\">log.root.level</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">log.root.name</span>&gt;</span>Service<span class=\"tag\">&lt;/<span class=\"name\">log.root.name</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">log.special</span>&gt;</span>Console<span class=\"tag\">&lt;/<span class=\"name\">log.special</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">profiles</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"参考如下\"><a href=\"#参考如下\" class=\"headerlink\" title=\"参考如下\"></a>参考如下</h2><ul>\n<li><a href=\"https://maven.apache.org/guides/introduction/introduction-to-profiles.html\" target=\"_blank\" rel=\"external\">Maven的profiles介绍</a></li>\n<li><a href=\"http://www.tmser.com/post-178.html\" target=\"_blank\" rel=\"external\">MAVEN 属性定义与使用</a></li>\n<li><a href=\"http://www.open-open.com/lib/view/open1452138592011.html\" target=\"_blank\" rel=\"external\">Maven的生命周期和插件</a></li>\n<li><a href=\"http://xigua366.iteye.com/blog/2080668?utm_source=tuicool&amp;utm_medium=referral\" target=\"_blank\" rel=\"external\">利用maven中resources插件的copy-resources目标进行资源copy和过滤</a></li>\n</ul>\n","excerpt":"","more":"<h2 id=\"Maven的profiles配置使用\"><a href=\"#Maven的profiles配置使用\" class=\"headerlink\" title=\"Maven的profiles配置使用\"></a>Maven的profiles配置使用</h2><p>Maven的profiles可根据不同的环境将POM的配置应用到配置文件中的<code>${}</code>变量中，具体步骤如下：</p>\n<ul>\n<li><p>POM的profiles配置如下</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">profiles</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>dev<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">activation</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">activeByDefault</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">activeByDefault</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">activation</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">&lt;!-- 日志 --&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">log.root.level</span>&gt;</span>DEBUG<span class=\"tag\">&lt;/<span class=\"name\">log.root.level</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">log.root.name</span>&gt;</span>Service<span class=\"tag\">&lt;/<span class=\"name\">log.root.name</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">log.special</span>&gt;</span>Console<span class=\"tag\">&lt;/<span class=\"name\">log.special</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">&lt;!-- 日志 --&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">log.root.level</span>&gt;</span>DEBUG<span class=\"tag\">&lt;/<span class=\"name\">log.root.level</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">log.root.name</span>&gt;</span>Service<span class=\"tag\">&lt;/<span class=\"name\">log.root.name</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">log.special</span>&gt;</span>Console<span class=\"tag\">&lt;/<span class=\"name\">log.special</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">profiles</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>为了在编译的时候就将POM的配置应用到文件中的<code>${}</code>变量中需要加入如下配置，具体会将profiles中的配置应用到<code>src/main/resources</code>目录下含有<code>${}</code>变量，<br>这些变量可以在xml或者properties文件中</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/resources<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>*/*<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>*<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">filtering</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">filtering</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>比如在<code>src/main/resources/log4j.properties</code>中有如下配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">log4j.rootLogger=$&#123;log.root.level&#125;,$&#123;log.root.name&#125;,$&#123;log.special&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#Console</span><br><span class=\"line\">log4j.appender.Console=org.apache.log4j.ConsoleAppender</span><br><span class=\"line\">log4j.appender.Console.layout=org.apache.log4j.PatternLayout</span><br><span class=\"line\">log4j.appender.Console.layout.ConversionPattern=%d&#123;dd\\u65e5 HH:mm:ss,SSS&#125; : %-5p %C&#123;1&#125;.%M() - %m%n</span><br></pre></td></tr></table></figure></p>\n<p>那么编译后在<code>target\\classes\\log4j.properties</code>文件中的内容如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">log4j.rootLogger=DEBUG,Service,Console</span><br><span class=\"line\"></span><br><span class=\"line\">#Console</span><br><span class=\"line\">log4j.appender.Console=org.apache.log4j.ConsoleAppender</span><br><span class=\"line\">log4j.appender.Console.layout=org.apache.log4j.PatternLayout</span><br><span class=\"line\">log4j.appender.Console.layout.ConversionPattern=%d&#123;dd\\u65e5 HH:mm:ss,SSS&#125; : %-5p %C&#123;1&#125;.%M() - %m%n</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"在Junit单元测试中利用profiles配置来区分不同环境\"><a href=\"#在Junit单元测试中利用profiles配置来区分不同环境\" class=\"headerlink\" title=\"在Junit单元测试中利用profiles配置来区分不同环境\"></a>在Junit单元测试中利用profiles配置来区分不同环境</h2><p>在上面的介绍中是通过profiles配置来区分不同环境方便打包发布，这里介绍通过profiles配置区分不同环境进行单元测试，确保系统在发布前不仅能通过本地环境的单元测试，还能够通过线上环境的单元测试。</p>\n<ul>\n<li><p>POM的profiles配置和上面的一样</p>\n</li>\n<li><p>在<code>build</code>节点下新增<code>testResources</code>，确保在本地执行<code>mvn test -Ptest</code> 的时候将profiles配置应用到<code>src/test/resources</code>目录下含有<code>${}</code>变量并执行Junit单元测试</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">testResources</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">testResource</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/test/resources<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>*/*<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>*<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">filtering</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">filtering</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">testResource</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">testResources</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在<code>src/test/resources</code>目录下新建<code>test</code>文件夹，将properties文件移到该目录下，Maven在执行单元测试的时候默认从该目录读取properties文件</p>\n</li>\n<li><p><strong>注意</strong>，在 Eclipse 中右键项目执行<code>Maven-&gt;Update Maven Project</code>后，需要右键项目在<code>Java Build Path</code>节点中选择<code>Source</code>选项卡，<br>选中<code>src/main/resources</code>和<code>src/test/resources</code>下的<code>Excluded</code>选项点击右边的<code>Remove</code>按钮，最后点击下面的<code>Ok</code>按钮，才能将相关资源文件编译到<code>target</code>目录下</p>\n</li>\n</ul>\n<h2 id=\"编写一个Spring-MVC的Controller层Junit单元测试\"><a href=\"#编写一个Spring-MVC的Controller层Junit单元测试\" class=\"headerlink\" title=\"编写一个Spring MVC的Controller层Junit单元测试\"></a>编写一个Spring MVC的Controller层Junit单元测试</h2><ul>\n<li><p>Controller层Junit单元测试与Service层有所不同，需要引入spring-test和spring-mock</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.2.8.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-mock<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.0.8<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Controller层代码如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\"><span class=\"meta\">@ApiOperation</span>(value = <span class=\"string\">\"获取用户信息\"</span>, notes = <span class=\"string\">\"获取用户信息\"</span>, response = JsonResponses.class)</span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/user_info\"</span>, method = RequestMethod.GET, produces = <span class=\"string\">\"application/json; charset=utf-8\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getUserInfo</span><span class=\"params\">(@ModelAttribute BasicInfoBean basicInfo, </span><br><span class=\"line\">\t\tHttpServletResponse response, HttpServletRequest request)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 验证uid是否存在</span></span><br><span class=\"line\">\tInteger uid = basicInfo.getUid();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (uid == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\tHttpUtil.returnJson(<span class=\"keyword\">new</span> JsonResponses(API.CODE.kCodeParamsError, API.MESSAGE.PARAM_FAILED.concat(<span class=\"string\">\":uid为空\"</span>)), response);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tUsers user = userServicebyUC.getUsersByUid(uid);</span><br><span class=\"line\">\t<span class=\"keyword\">final</span> Map&lt;String, Object&gt; dataMap = <span class=\"keyword\">new</span> LinkedHashMap&lt;&gt;();</span><br><span class=\"line\">\tsetUserModelMap(user, dataMap, basicInfo);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tHttpUtil.returnJson(<span class=\"keyword\">new</span> JsonResponses(API.CODE.kCodeSuccess, API.MESSAGE.SUCCESS, dataMap), response);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Junit代码如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class=\"line\"><span class=\"meta\">@WebAppConfiguration</span></span><br><span class=\"line\"><span class=\"meta\">@ContextConfiguration</span>(locations = &#123; <span class=\"string\">\"classpath:spring/*-config.xml\"</span>, <span class=\"string\">\"classpath:spring/*-servlet.xml\"</span> &#125;)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseController</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> String uid;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 加载配置文件</span></span><br><span class=\"line\">\t\tProperties config = <span class=\"keyword\">new</span> Properties();</span><br><span class=\"line\">\t\tInputStream input = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tinput = API.class.getClassLoader().getResourceAsStream(<span class=\"string\">\"test/test.properties\"</span>);</span><br><span class=\"line\">\t\t\tReader reader = <span class=\"keyword\">new</span> InputStreamReader(input, <span class=\"string\">\"UTF-8\"</span>);</span><br><span class=\"line\">\t\t\tconfig.load(reader);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tuid = config.getProperty(<span class=\"string\">\"uid\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != input) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\t\tinput.close();</span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// @Autowired</span></span><br><span class=\"line\">\t<span class=\"comment\">// private WebApplicationContext wac;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestUserController</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseController</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Logger logger = LoggerFactory.getLogger(<span class=\"keyword\">this</span>.getClass());</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Autowired</span></span><br><span class=\"line\">\t<span class=\"keyword\">protected</span> UserController userController;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">protected</span> MockMvc mockMvc;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Before</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setup</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tmockMvc = MockMvcBuilders.standaloneSetup(userController).build();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Test</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testFindPageUsers</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\tlogger.info(<span class=\"string\">\"uid is &#123;&#125;\"</span>, uid);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tResultActions ra = mockMvc.perform(MockMvcRequestBuilders.get(<span class=\"string\">\"/user/user_info\"</span>)</span><br><span class=\"line\">\t\t\t\t.accept(MediaType.APPLICATION_JSON).param(<span class=\"string\">\"test\"</span>, <span class=\"string\">\"1\"</span>).param(<span class=\"string\">\"uid\"</span>, uid));</span><br><span class=\"line\">\t\tMvcResult mr = ra.andReturn();</span><br><span class=\"line\">\t\tMockHttpServletResponse resp = mr.getResponse();</span><br><span class=\"line\">\t\tAssert.assertEquals(resp.getStatus(), <span class=\"number\">200</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tJSONObject obj = JSONObject.parseObject(resp.getContentAsString());</span><br><span class=\"line\">\t\tJSONObject dataObj = obj.getJSONObject(<span class=\"string\">\"data\"</span>);</span><br><span class=\"line\">\t\tAssert.assertEquals(StringUtil.getStr(dataObj.get(<span class=\"string\">\"uid\"</span>)), uid);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"如何去掉单元测试\"><a href=\"#如何去掉单元测试\" class=\"headerlink\" title=\"如何去掉单元测试\"></a>如何去掉单元测试</h2><ul>\n<li>在执行Maven命令的时候加上<code>-Dmaven.test.skip=true</code>即可，比如<code>clean install -Dmaven.test.skip=true</code>，这样就会在执行的过程中跳过单元测试 <code>[INFO] Tests are skipped.</code>，也可以在profiles的properties中增加<code>&lt;maven.test.skip&gt;true&lt;/maven.test.skip&gt;</code>，具体如下<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">profiles</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>dev<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">activation</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">activeByDefault</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">activeByDefault</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">activation</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">maven.test.skip</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">maven.test.skip</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">&lt;!-- 日志 --&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">log.root.level</span>&gt;</span>DEBUG<span class=\"tag\">&lt;/<span class=\"name\">log.root.level</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">log.root.name</span>&gt;</span>Service<span class=\"tag\">&lt;/<span class=\"name\">log.root.name</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">log.special</span>&gt;</span>Console<span class=\"tag\">&lt;/<span class=\"name\">log.special</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">maven.test.skip</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">maven.test.skip</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">&lt;!-- 日志 --&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">log.root.level</span>&gt;</span>DEBUG<span class=\"tag\">&lt;/<span class=\"name\">log.root.level</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">log.root.name</span>&gt;</span>Service<span class=\"tag\">&lt;/<span class=\"name\">log.root.name</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">log.special</span>&gt;</span>Console<span class=\"tag\">&lt;/<span class=\"name\">log.special</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">profiles</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"参考如下\"><a href=\"#参考如下\" class=\"headerlink\" title=\"参考如下\"></a>参考如下</h2><ul>\n<li><a href=\"https://maven.apache.org/guides/introduction/introduction-to-profiles.html\">Maven的profiles介绍</a></li>\n<li><a href=\"http://www.tmser.com/post-178.html\">MAVEN 属性定义与使用</a></li>\n<li><a href=\"http://www.open-open.com/lib/view/open1452138592011.html\">Maven的生命周期和插件</a></li>\n<li><a href=\"http://xigua366.iteye.com/blog/2080668?utm_source=tuicool&amp;utm_medium=referral\">利用maven中resources插件的copy-resources目标进行资源copy和过滤</a></li>\n</ul>\n"},{"title":"关于Java多线程在提升程序性能上的一些实践","title_url":"Java-Thread-Runnable-Executor-Practice","date":"2016-08-29T16:00:00.000Z","description":"关于Java多线程在提升程序性能上的一些实践","_content":"\n## 需要使用多个线程的背景以及约束\n\n- 多个任务并行，不分先后\n\n- 对资源没有争抢\n\n- 需要在所有任务都执行完毕后再返回给调用者\n\n在以上条件下无需过多考虑同步问题，能使用的线程数只取决于机器的性能。\n\n## 使用串行执行的方式带来的性能问题\n\n程序的执行逻辑是从上到下，从左到右。长期的编程习惯使我们想当然的在日常开发中使用串行的开发思维来编写程序，使本来可以通过多线程并行的方式来执行任务，由于习惯还是通过单线程串行的方式。具体如下。\n```java\n// 假设有10个任务，每个任务花费的时间如下\nprivate long[] spendTime = new long[] { 1000, 2000, 3000, 5000, 500, 100, 10, 9000, 1000, 6000 };\n\n/**\n * 在单线程的情况下\n */\n@SuppressWarnings(\"static-access\")\n@Test\npublic void TestWithoutExecuteService() {\n\tlong begin = System.currentTimeMillis();\n\tfor (long l : spendTime) {\n\t\ttry {\n\t\t\tThread.currentThread().sleep(l);\n\t\t} catch (InterruptedException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\tSystem.out.println(\"total spend : \" + (System.currentTimeMillis() - begin));\n}\n```\n\n## 通过 Thread 和 Runnable 来实现\n\n上面通过串行的方式执行任务，所花时间是所有任务执行时间之和。如果通过多个线程并行执行任务，那么在确保所有任务执行完毕，所花时间取决于耗时最长的那个任务。\n通过 Thread 和 Runnable 来实现需要维持一个变量来确保所有的任务都执行完毕了，引入同步变量增加了程序的复杂度，具体实现如下。\n```java\n/**\n * 使用一般的多线程来完成并行任务，也就是 Thread,Runnable\n */\n@Test\npublic void TestWithMultiThread() {\n\tlong begin = System.currentTimeMillis();\n\t// 通过一个同步的Map来确保所有的任务都执行完毕\n\tMap<String, String> result = Collections.synchronizedMap(new HashMap<String, String>());\n\n\tList<Thread> taskList = new ArrayList<Thread>();\n\tfor (long l : spendTime) {\n\t\tThread taskThread = new Thread(new TaskThread2(l, result));\n\t\ttaskList.add(taskThread);\n\t\ttaskThread.start();\n\t}\n\twhile (true) { // 这部分代码可以确保所有的线程都执行完毕了\n\t\tif (result.size() == taskList.size()) {\n\t\t\tbreak;\n\t\t}\n\t}\n\tfor (Iterator<String> it = result.keySet().iterator(); it.hasNext();) {\n\t\tString key = it.next();\n\t\tSystem.out.println(key + result.get(key));\n\t}\n\tSystem.out.println(\"total spend : \" + (System.currentTimeMillis() - begin));\n}\n\n/**\n * 使用Runnable来实现线程\n * \n * @author ck\n *\n */\nprivate class TaskThread2 implements Runnable {\n\n\tprivate long processTime;\n\tprivate Map<String, String> result;\n\n\tpublic TaskThread2(long processTime, Map<String, String> result) {\n\t\tthis.processTime = processTime;\n\t\tthis.result = result;\n\t}\n\n\t@SuppressWarnings(\"static-access\")\n\t@Override\n\tpublic void run() {\n\t\ttry {\n\t\t\tThread.currentThread().sleep(processTime);\n\t\t} catch (InterruptedException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\tresult.put(Thread.currentThread().getName(), \": SUCCESS, spend: \" + processTime);\n\t}\n\n}\n```\n\n## 通过ExecutorService来实现\n\n在传统的方法中需要引入同步的变量来确保所有的任务都执行完毕，增加了程序的复杂程度，因为线程在执行完毕后无法通知调用者是否执行完毕，缺少通知机制。如果通过ExecutorService来实现，那么在提交任务后，只需要调用invokeAll方法，调用者线程将会阻塞，直到所有的任务都执行完毕，调用者线程才能继续向下执行，大大简化了程度复杂度。具体如下。\n```java\n/**\n * 在使用 ExecuteService 的情况下，通过invokeAll确保所有的线程都执行完毕\n */\n@Test\npublic void TestWithExecuteService() {\n\tlong begin = System.currentTimeMillis();\n\n\tExecutorService executorService = Executors.newCachedThreadPool();\n\n\tList<TaskThread> taskList = new ArrayList<TaskThread>();\n\tfor (long l : spendTime) {\n\t\ttaskList.add(new TaskThread(l));\n\t}\n\ttry {\n\t\tList<Future<String>> taskResult = executorService.invokeAll(taskList); // 可以确保所有的线程都执行完成\n\t\tif (taskResult != null) {\n\t\t\tfor (Future<String> future : taskResult) {\n\t\t\t\tSystem.out.println(future.get()); // 获取线程的执行结果\n\t\t\t}\n\t\t}\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t} finally {\n\t\texecutorService.shutdown();\n\t}\n\n\tSystem.out.println(\"total spend : \" + (System.currentTimeMillis() - begin));\n}\n```\n\n## 总结\n\n`java.util.concurrent` 包下面还有很多有意思的类和接口方便多线程的开发，以后还会继续探索，以具体的例子和对比来显示使用和不使用这些类和接口带来的好处。关于Java多线程方面的知识，最近在看一本书，强烈推荐=>《Java并发编程实践》。\n关于本页面涉及到的所有的代码点击[这里](https://github.com/toulezu/play/tree/master/TestThread01)。\n\n","source":"_posts/关于Java多线程在提升程序性能上的一些实践.md","raw":"---\ntitle: 关于Java多线程在提升程序性能上的一些实践\ntitle_url: Java-Thread-Runnable-Executor-Practice\ndate: 2016-08-30\ntags: [Java,Thread,Runnable,Executor]\ncategories: 多线程\ndescription: 关于Java多线程在提升程序性能上的一些实践\n---\n\n## 需要使用多个线程的背景以及约束\n\n- 多个任务并行，不分先后\n\n- 对资源没有争抢\n\n- 需要在所有任务都执行完毕后再返回给调用者\n\n在以上条件下无需过多考虑同步问题，能使用的线程数只取决于机器的性能。\n\n## 使用串行执行的方式带来的性能问题\n\n程序的执行逻辑是从上到下，从左到右。长期的编程习惯使我们想当然的在日常开发中使用串行的开发思维来编写程序，使本来可以通过多线程并行的方式来执行任务，由于习惯还是通过单线程串行的方式。具体如下。\n```java\n// 假设有10个任务，每个任务花费的时间如下\nprivate long[] spendTime = new long[] { 1000, 2000, 3000, 5000, 500, 100, 10, 9000, 1000, 6000 };\n\n/**\n * 在单线程的情况下\n */\n@SuppressWarnings(\"static-access\")\n@Test\npublic void TestWithoutExecuteService() {\n\tlong begin = System.currentTimeMillis();\n\tfor (long l : spendTime) {\n\t\ttry {\n\t\t\tThread.currentThread().sleep(l);\n\t\t} catch (InterruptedException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\tSystem.out.println(\"total spend : \" + (System.currentTimeMillis() - begin));\n}\n```\n\n## 通过 Thread 和 Runnable 来实现\n\n上面通过串行的方式执行任务，所花时间是所有任务执行时间之和。如果通过多个线程并行执行任务，那么在确保所有任务执行完毕，所花时间取决于耗时最长的那个任务。\n通过 Thread 和 Runnable 来实现需要维持一个变量来确保所有的任务都执行完毕了，引入同步变量增加了程序的复杂度，具体实现如下。\n```java\n/**\n * 使用一般的多线程来完成并行任务，也就是 Thread,Runnable\n */\n@Test\npublic void TestWithMultiThread() {\n\tlong begin = System.currentTimeMillis();\n\t// 通过一个同步的Map来确保所有的任务都执行完毕\n\tMap<String, String> result = Collections.synchronizedMap(new HashMap<String, String>());\n\n\tList<Thread> taskList = new ArrayList<Thread>();\n\tfor (long l : spendTime) {\n\t\tThread taskThread = new Thread(new TaskThread2(l, result));\n\t\ttaskList.add(taskThread);\n\t\ttaskThread.start();\n\t}\n\twhile (true) { // 这部分代码可以确保所有的线程都执行完毕了\n\t\tif (result.size() == taskList.size()) {\n\t\t\tbreak;\n\t\t}\n\t}\n\tfor (Iterator<String> it = result.keySet().iterator(); it.hasNext();) {\n\t\tString key = it.next();\n\t\tSystem.out.println(key + result.get(key));\n\t}\n\tSystem.out.println(\"total spend : \" + (System.currentTimeMillis() - begin));\n}\n\n/**\n * 使用Runnable来实现线程\n * \n * @author ck\n *\n */\nprivate class TaskThread2 implements Runnable {\n\n\tprivate long processTime;\n\tprivate Map<String, String> result;\n\n\tpublic TaskThread2(long processTime, Map<String, String> result) {\n\t\tthis.processTime = processTime;\n\t\tthis.result = result;\n\t}\n\n\t@SuppressWarnings(\"static-access\")\n\t@Override\n\tpublic void run() {\n\t\ttry {\n\t\t\tThread.currentThread().sleep(processTime);\n\t\t} catch (InterruptedException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\tresult.put(Thread.currentThread().getName(), \": SUCCESS, spend: \" + processTime);\n\t}\n\n}\n```\n\n## 通过ExecutorService来实现\n\n在传统的方法中需要引入同步的变量来确保所有的任务都执行完毕，增加了程序的复杂程度，因为线程在执行完毕后无法通知调用者是否执行完毕，缺少通知机制。如果通过ExecutorService来实现，那么在提交任务后，只需要调用invokeAll方法，调用者线程将会阻塞，直到所有的任务都执行完毕，调用者线程才能继续向下执行，大大简化了程度复杂度。具体如下。\n```java\n/**\n * 在使用 ExecuteService 的情况下，通过invokeAll确保所有的线程都执行完毕\n */\n@Test\npublic void TestWithExecuteService() {\n\tlong begin = System.currentTimeMillis();\n\n\tExecutorService executorService = Executors.newCachedThreadPool();\n\n\tList<TaskThread> taskList = new ArrayList<TaskThread>();\n\tfor (long l : spendTime) {\n\t\ttaskList.add(new TaskThread(l));\n\t}\n\ttry {\n\t\tList<Future<String>> taskResult = executorService.invokeAll(taskList); // 可以确保所有的线程都执行完成\n\t\tif (taskResult != null) {\n\t\t\tfor (Future<String> future : taskResult) {\n\t\t\t\tSystem.out.println(future.get()); // 获取线程的执行结果\n\t\t\t}\n\t\t}\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t} finally {\n\t\texecutorService.shutdown();\n\t}\n\n\tSystem.out.println(\"total spend : \" + (System.currentTimeMillis() - begin));\n}\n```\n\n## 总结\n\n`java.util.concurrent` 包下面还有很多有意思的类和接口方便多线程的开发，以后还会继续探索，以具体的例子和对比来显示使用和不使用这些类和接口带来的好处。关于Java多线程方面的知识，最近在看一本书，强烈推荐=>《Java并发编程实践》。\n关于本页面涉及到的所有的代码点击[这里](https://github.com/toulezu/play/tree/master/TestThread01)。\n\n","slug":"关于Java多线程在提升程序性能上的一些实践","published":1,"updated":"2016-10-10T01:58:06.787Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj36mxs1p000hfwezp1pfnfhr","content":"<h2 id=\"需要使用多个线程的背景以及约束\"><a href=\"#需要使用多个线程的背景以及约束\" class=\"headerlink\" title=\"需要使用多个线程的背景以及约束\"></a>需要使用多个线程的背景以及约束</h2><ul>\n<li><p>多个任务并行，不分先后</p>\n</li>\n<li><p>对资源没有争抢</p>\n</li>\n<li><p>需要在所有任务都执行完毕后再返回给调用者</p>\n</li>\n</ul>\n<p>在以上条件下无需过多考虑同步问题，能使用的线程数只取决于机器的性能。</p>\n<h2 id=\"使用串行执行的方式带来的性能问题\"><a href=\"#使用串行执行的方式带来的性能问题\" class=\"headerlink\" title=\"使用串行执行的方式带来的性能问题\"></a>使用串行执行的方式带来的性能问题</h2><p>程序的执行逻辑是从上到下，从左到右。长期的编程习惯使我们想当然的在日常开发中使用串行的开发思维来编写程序，使本来可以通过多线程并行的方式来执行任务，由于习惯还是通过单线程串行的方式。具体如下。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 假设有10个任务，每个任务花费的时间如下</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">long</span>[] spendTime = <span class=\"keyword\">new</span> <span class=\"keyword\">long</span>[] &#123; <span class=\"number\">1000</span>, <span class=\"number\">2000</span>, <span class=\"number\">3000</span>, <span class=\"number\">5000</span>, <span class=\"number\">500</span>, <span class=\"number\">100</span>, <span class=\"number\">10</span>, <span class=\"number\">9000</span>, <span class=\"number\">1000</span>, <span class=\"number\">6000</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * 在单线程的情况下</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"static-access\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">TestWithoutExecuteService</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">long</span> begin = System.currentTimeMillis();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">long</span> l : spendTime) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tThread.currentThread().sleep(l);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"total spend : \"</span> + (System.currentTimeMillis() - begin));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"通过-Thread-和-Runnable-来实现\"><a href=\"#通过-Thread-和-Runnable-来实现\" class=\"headerlink\" title=\"通过 Thread 和 Runnable 来实现\"></a>通过 Thread 和 Runnable 来实现</h2><p>上面通过串行的方式执行任务，所花时间是所有任务执行时间之和。如果通过多个线程并行执行任务，那么在确保所有任务执行完毕，所花时间取决于耗时最长的那个任务。<br>通过 Thread 和 Runnable 来实现需要维持一个变量来确保所有的任务都执行完毕了，引入同步变量增加了程序的复杂度，具体实现如下。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * 使用一般的多线程来完成并行任务，也就是 Thread,Runnable</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">TestWithMultiThread</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">long</span> begin = System.currentTimeMillis();</span><br><span class=\"line\">\t<span class=\"comment\">// 通过一个同步的Map来确保所有的任务都执行完毕</span></span><br><span class=\"line\">\tMap&lt;String, String&gt; result = Collections.synchronizedMap(<span class=\"keyword\">new</span> HashMap&lt;String, String&gt;());</span><br><span class=\"line\"></span><br><span class=\"line\">\tList&lt;Thread&gt; taskList = <span class=\"keyword\">new</span> ArrayList&lt;Thread&gt;();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">long</span> l : spendTime) &#123;</span><br><span class=\"line\">\t\tThread taskThread = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> TaskThread2(l, result));</span><br><span class=\"line\">\t\ttaskList.add(taskThread);</span><br><span class=\"line\">\t\ttaskThread.start();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123; <span class=\"comment\">// 这部分代码可以确保所有的线程都执行完毕了</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (result.size() == taskList.size()) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (Iterator&lt;String&gt; it = result.keySet().iterator(); it.hasNext();) &#123;</span><br><span class=\"line\">\t\tString key = it.next();</span><br><span class=\"line\">\t\tSystem.out.println(key + result.get(key));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"total spend : \"</span> + (System.currentTimeMillis() - begin));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * 使用Runnable来实现线程</span><br><span class=\"line\"> * </span><br><span class=\"line\"> * <span class=\"doctag\">@author</span> ck</span><br><span class=\"line\"> *</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TaskThread2</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">long</span> processTime;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Map&lt;String, String&gt; result;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TaskThread2</span><span class=\"params\">(<span class=\"keyword\">long</span> processTime, Map&lt;String, String&gt; result)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.processTime = processTime;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.result = result;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"static-access\"</span>)</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tThread.currentThread().sleep(processTime);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tresult.put(Thread.currentThread().getName(), <span class=\"string\">\": SUCCESS, spend: \"</span> + processTime);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"通过ExecutorService来实现\"><a href=\"#通过ExecutorService来实现\" class=\"headerlink\" title=\"通过ExecutorService来实现\"></a>通过ExecutorService来实现</h2><p>在传统的方法中需要引入同步的变量来确保所有的任务都执行完毕，增加了程序的复杂程度，因为线程在执行完毕后无法通知调用者是否执行完毕，缺少通知机制。如果通过ExecutorService来实现，那么在提交任务后，只需要调用invokeAll方法，调用者线程将会阻塞，直到所有的任务都执行完毕，调用者线程才能继续向下执行，大大简化了程度复杂度。具体如下。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * 在使用 ExecuteService 的情况下，通过invokeAll确保所有的线程都执行完毕</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">TestWithExecuteService</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">long</span> begin = System.currentTimeMillis();</span><br><span class=\"line\"></span><br><span class=\"line\">\tExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class=\"line\"></span><br><span class=\"line\">\tList&lt;TaskThread&gt; taskList = <span class=\"keyword\">new</span> ArrayList&lt;TaskThread&gt;();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">long</span> l : spendTime) &#123;</span><br><span class=\"line\">\t\ttaskList.add(<span class=\"keyword\">new</span> TaskThread(l));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\tList&lt;Future&lt;String&gt;&gt; taskResult = executorService.invokeAll(taskList); <span class=\"comment\">// 可以确保所有的线程都执行完成</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (taskResult != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (Future&lt;String&gt; future : taskResult) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(future.get()); <span class=\"comment\">// 获取线程的执行结果</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\te.printStackTrace();</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t\texecutorService.shutdown();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"total spend : \"</span> + (System.currentTimeMillis() - begin));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><code>java.util.concurrent</code> 包下面还有很多有意思的类和接口方便多线程的开发，以后还会继续探索，以具体的例子和对比来显示使用和不使用这些类和接口带来的好处。关于Java多线程方面的知识，最近在看一本书，强烈推荐=&gt;《Java并发编程实践》。<br>关于本页面涉及到的所有的代码点击<a href=\"https://github.com/toulezu/play/tree/master/TestThread01\" target=\"_blank\" rel=\"external\">这里</a>。</p>\n","excerpt":"","more":"<h2 id=\"需要使用多个线程的背景以及约束\"><a href=\"#需要使用多个线程的背景以及约束\" class=\"headerlink\" title=\"需要使用多个线程的背景以及约束\"></a>需要使用多个线程的背景以及约束</h2><ul>\n<li><p>多个任务并行，不分先后</p>\n</li>\n<li><p>对资源没有争抢</p>\n</li>\n<li><p>需要在所有任务都执行完毕后再返回给调用者</p>\n</li>\n</ul>\n<p>在以上条件下无需过多考虑同步问题，能使用的线程数只取决于机器的性能。</p>\n<h2 id=\"使用串行执行的方式带来的性能问题\"><a href=\"#使用串行执行的方式带来的性能问题\" class=\"headerlink\" title=\"使用串行执行的方式带来的性能问题\"></a>使用串行执行的方式带来的性能问题</h2><p>程序的执行逻辑是从上到下，从左到右。长期的编程习惯使我们想当然的在日常开发中使用串行的开发思维来编写程序，使本来可以通过多线程并行的方式来执行任务，由于习惯还是通过单线程串行的方式。具体如下。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 假设有10个任务，每个任务花费的时间如下</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">long</span>[] spendTime = <span class=\"keyword\">new</span> <span class=\"keyword\">long</span>[] &#123; <span class=\"number\">1000</span>, <span class=\"number\">2000</span>, <span class=\"number\">3000</span>, <span class=\"number\">5000</span>, <span class=\"number\">500</span>, <span class=\"number\">100</span>, <span class=\"number\">10</span>, <span class=\"number\">9000</span>, <span class=\"number\">1000</span>, <span class=\"number\">6000</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * 在单线程的情况下</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"static-access\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">TestWithoutExecuteService</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">long</span> begin = System.currentTimeMillis();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">long</span> l : spendTime) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tThread.currentThread().sleep(l);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"total spend : \"</span> + (System.currentTimeMillis() - begin));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"通过-Thread-和-Runnable-来实现\"><a href=\"#通过-Thread-和-Runnable-来实现\" class=\"headerlink\" title=\"通过 Thread 和 Runnable 来实现\"></a>通过 Thread 和 Runnable 来实现</h2><p>上面通过串行的方式执行任务，所花时间是所有任务执行时间之和。如果通过多个线程并行执行任务，那么在确保所有任务执行完毕，所花时间取决于耗时最长的那个任务。<br>通过 Thread 和 Runnable 来实现需要维持一个变量来确保所有的任务都执行完毕了，引入同步变量增加了程序的复杂度，具体实现如下。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * 使用一般的多线程来完成并行任务，也就是 Thread,Runnable</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">TestWithMultiThread</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">long</span> begin = System.currentTimeMillis();</span><br><span class=\"line\">\t<span class=\"comment\">// 通过一个同步的Map来确保所有的任务都执行完毕</span></span><br><span class=\"line\">\tMap&lt;String, String&gt; result = Collections.synchronizedMap(<span class=\"keyword\">new</span> HashMap&lt;String, String&gt;());</span><br><span class=\"line\"></span><br><span class=\"line\">\tList&lt;Thread&gt; taskList = <span class=\"keyword\">new</span> ArrayList&lt;Thread&gt;();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">long</span> l : spendTime) &#123;</span><br><span class=\"line\">\t\tThread taskThread = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> TaskThread2(l, result));</span><br><span class=\"line\">\t\ttaskList.add(taskThread);</span><br><span class=\"line\">\t\ttaskThread.start();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123; <span class=\"comment\">// 这部分代码可以确保所有的线程都执行完毕了</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (result.size() == taskList.size()) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (Iterator&lt;String&gt; it = result.keySet().iterator(); it.hasNext();) &#123;</span><br><span class=\"line\">\t\tString key = it.next();</span><br><span class=\"line\">\t\tSystem.out.println(key + result.get(key));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"total spend : \"</span> + (System.currentTimeMillis() - begin));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * 使用Runnable来实现线程</span><br><span class=\"line\"> * </span><br><span class=\"line\"> * <span class=\"doctag\">@author</span> ck</span><br><span class=\"line\"> *</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TaskThread2</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">long</span> processTime;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Map&lt;String, String&gt; result;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TaskThread2</span><span class=\"params\">(<span class=\"keyword\">long</span> processTime, Map&lt;String, String&gt; result)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.processTime = processTime;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.result = result;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"static-access\"</span>)</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tThread.currentThread().sleep(processTime);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tresult.put(Thread.currentThread().getName(), <span class=\"string\">\": SUCCESS, spend: \"</span> + processTime);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"通过ExecutorService来实现\"><a href=\"#通过ExecutorService来实现\" class=\"headerlink\" title=\"通过ExecutorService来实现\"></a>通过ExecutorService来实现</h2><p>在传统的方法中需要引入同步的变量来确保所有的任务都执行完毕，增加了程序的复杂程度，因为线程在执行完毕后无法通知调用者是否执行完毕，缺少通知机制。如果通过ExecutorService来实现，那么在提交任务后，只需要调用invokeAll方法，调用者线程将会阻塞，直到所有的任务都执行完毕，调用者线程才能继续向下执行，大大简化了程度复杂度。具体如下。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * 在使用 ExecuteService 的情况下，通过invokeAll确保所有的线程都执行完毕</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">TestWithExecuteService</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">long</span> begin = System.currentTimeMillis();</span><br><span class=\"line\"></span><br><span class=\"line\">\tExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class=\"line\"></span><br><span class=\"line\">\tList&lt;TaskThread&gt; taskList = <span class=\"keyword\">new</span> ArrayList&lt;TaskThread&gt;();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">long</span> l : spendTime) &#123;</span><br><span class=\"line\">\t\ttaskList.add(<span class=\"keyword\">new</span> TaskThread(l));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\tList&lt;Future&lt;String&gt;&gt; taskResult = executorService.invokeAll(taskList); <span class=\"comment\">// 可以确保所有的线程都执行完成</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (taskResult != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (Future&lt;String&gt; future : taskResult) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(future.get()); <span class=\"comment\">// 获取线程的执行结果</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\te.printStackTrace();</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t\texecutorService.shutdown();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"total spend : \"</span> + (System.currentTimeMillis() - begin));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><code>java.util.concurrent</code> 包下面还有很多有意思的类和接口方便多线程的开发，以后还会继续探索，以具体的例子和对比来显示使用和不使用这些类和接口带来的好处。关于Java多线程方面的知识，最近在看一本书，强烈推荐=&gt;《Java并发编程实践》。<br>关于本页面涉及到的所有的代码点击<a href=\"https://github.com/toulezu/play/tree/master/TestThread01\">这里</a>。</p>\n"},{"title":"写在github上的第一篇博客","title_url":"blog-github-some-thinking","date":"2016-05-31T16:00:00.000Z","description":"关于技术和生活的一些感想","_content":"\n这是我的第一篇写在 github 上的博客，但不会是最后一篇。\n\n在这里，我将分享自己在技术学习上的心得，和一些读书笔记，以及在看过他人技术类博客之后的一些个人感想，总之，在这里将会展现我技术，人生成长的点点滴滴。\n\n- 关于技术，我的分享点将侧重于`Java`，`数据库`，`JavaScript`，`Android`，以及对一些开源技术的学习。\n\n- 关于人生，我将分享个人的技术成长心路，对技术发展的看法，对社会生活百态的感想，对爱情，家庭以及生活的感悟。\n","source":"_posts/写在github上的第一篇博客.md","raw":"---\ntitle: 写在github上的第一篇博客\ntitle_url: blog-github-some-thinking\ndate: 2016-06-01\ntags: 感想\ncategories: 生活\ndescription: 关于技术和生活的一些感想\n---\n\n这是我的第一篇写在 github 上的博客，但不会是最后一篇。\n\n在这里，我将分享自己在技术学习上的心得，和一些读书笔记，以及在看过他人技术类博客之后的一些个人感想，总之，在这里将会展现我技术，人生成长的点点滴滴。\n\n- 关于技术，我的分享点将侧重于`Java`，`数据库`，`JavaScript`，`Android`，以及对一些开源技术的学习。\n\n- 关于人生，我将分享个人的技术成长心路，对技术发展的看法，对社会生活百态的感想，对爱情，家庭以及生活的感悟。\n","slug":"写在github上的第一篇博客","published":1,"updated":"2016-10-10T01:58:06.791Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj36mxs1u000kfwezvm97n7gl","content":"<p>这是我的第一篇写在 github 上的博客，但不会是最后一篇。</p>\n<p>在这里，我将分享自己在技术学习上的心得，和一些读书笔记，以及在看过他人技术类博客之后的一些个人感想，总之，在这里将会展现我技术，人生成长的点点滴滴。</p>\n<ul>\n<li><p>关于技术，我的分享点将侧重于<code>Java</code>，<code>数据库</code>，<code>JavaScript</code>，<code>Android</code>，以及对一些开源技术的学习。</p>\n</li>\n<li><p>关于人生，我将分享个人的技术成长心路，对技术发展的看法，对社会生活百态的感想，对爱情，家庭以及生活的感悟。</p>\n</li>\n</ul>\n","excerpt":"","more":"<p>这是我的第一篇写在 github 上的博客，但不会是最后一篇。</p>\n<p>在这里，我将分享自己在技术学习上的心得，和一些读书笔记，以及在看过他人技术类博客之后的一些个人感想，总之，在这里将会展现我技术，人生成长的点点滴滴。</p>\n<ul>\n<li><p>关于技术，我的分享点将侧重于<code>Java</code>，<code>数据库</code>，<code>JavaScript</code>，<code>Android</code>，以及对一些开源技术的学习。</p>\n</li>\n<li><p>关于人生，我将分享个人的技术成长心路，对技术发展的看法，对社会生活百态的感想，对爱情，家庭以及生活的感悟。</p>\n</li>\n</ul>\n"},{"title":"在 Linux 上监控 Tomcat 是否关闭, 如果关闭自动重启","title_url":"Linux-monitor-Tomcat","date":"2017-05-14T16:00:00.000Z","description":"在 Linux 上监控 Tomcat 是否关闭, 如果关闭自动重启","_content":"\n## 新建cron文件`auto.cron`如下\n\n- 每分钟执行一次监控\n- 每天早上10点清理Tomcat的 catalina.out 文件\n\n```\n# auto restart tomcat\n*/1 * * * * sh /opt/AppData/cron/shell/tomcat_check_and_start.sh\n0 10 * * * cat /dev/null > /opt/AppData/tomcat/logs/catalina.out\n```\n\n## crontab的文件格式\n\n分 | 时 | 日 | 月 | 星期 | 要执行的命令\n---|---|---|---|---|---\n分钟0～59 | 小时0～23（0表示子夜）| 日1～31 | 月1～12 | 星期0～7（0和7表示星期天）| 要运行的命令\n\n## 监控tomcat进程脚本如下\n\n```\n#!/bin/bash\n# 首先找到tomcat根目录， 确保当前脚本在tomcat根目录下\ntomcat_path=/opt/AppData/tomcat-datamonitor\n\n# 找到tomcat的进程id\ntomcat_pid=$(ps -ef|grep $tomcat_path|gawk '$0 !~/grep/ {print $2}' |tr -s '\\n' ' ')\nif [ -z \"$tomcat_pid\" ];then\n  sh $tomcat_path/bin/startup.sh\n  echo tomcat is dead,restart at `date \"+%Y-%m-%d %H:%M:%S\"` >> $tomcat_path/tomcat_auto_restart.log\nfi\n```\n\n## 使定时监控生效\n\n```\ncrontab auto.cron\n```\n\n**注意:执行该命令前先执行下`crontab -l`看看已经存在的定时任务,以避免覆盖已经存在的定时任务**\n\n使用 `crontab -l`可以列出当前用户生效的定时任务\n\n## 参考\n\n- [linux下添加定时任务](http://blog.csdn.net/hi_kevin/article/details/8983746)\n- [crontab 定时任务](http://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/crontab.html)","source":"_posts/在 Linux 上监控 Tomcat 是否关闭, 如果关闭自动重启.md","raw":"---\ntitle: 在 Linux 上监控 Tomcat 是否关闭, 如果关闭自动重启\ntitle_url: Linux-monitor-Tomcat\ndate: 2017-05-15\ntags: [Linux,系统监控,Tomcat]\ncategories: 技术\ndescription: 在 Linux 上监控 Tomcat 是否关闭, 如果关闭自动重启\n---\n\n## 新建cron文件`auto.cron`如下\n\n- 每分钟执行一次监控\n- 每天早上10点清理Tomcat的 catalina.out 文件\n\n```\n# auto restart tomcat\n*/1 * * * * sh /opt/AppData/cron/shell/tomcat_check_and_start.sh\n0 10 * * * cat /dev/null > /opt/AppData/tomcat/logs/catalina.out\n```\n\n## crontab的文件格式\n\n分 | 时 | 日 | 月 | 星期 | 要执行的命令\n---|---|---|---|---|---\n分钟0～59 | 小时0～23（0表示子夜）| 日1～31 | 月1～12 | 星期0～7（0和7表示星期天）| 要运行的命令\n\n## 监控tomcat进程脚本如下\n\n```\n#!/bin/bash\n# 首先找到tomcat根目录， 确保当前脚本在tomcat根目录下\ntomcat_path=/opt/AppData/tomcat-datamonitor\n\n# 找到tomcat的进程id\ntomcat_pid=$(ps -ef|grep $tomcat_path|gawk '$0 !~/grep/ {print $2}' |tr -s '\\n' ' ')\nif [ -z \"$tomcat_pid\" ];then\n  sh $tomcat_path/bin/startup.sh\n  echo tomcat is dead,restart at `date \"+%Y-%m-%d %H:%M:%S\"` >> $tomcat_path/tomcat_auto_restart.log\nfi\n```\n\n## 使定时监控生效\n\n```\ncrontab auto.cron\n```\n\n**注意:执行该命令前先执行下`crontab -l`看看已经存在的定时任务,以避免覆盖已经存在的定时任务**\n\n使用 `crontab -l`可以列出当前用户生效的定时任务\n\n## 参考\n\n- [linux下添加定时任务](http://blog.csdn.net/hi_kevin/article/details/8983746)\n- [crontab 定时任务](http://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/crontab.html)","slug":"在 Linux 上监控 Tomcat 是否关闭, 如果关闭自动重启","published":1,"updated":"2017-05-27T01:59:30.690Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj36mxs1x000ofwezy8sfm7ot","content":"<h2 id=\"新建cron文件auto-cron如下\"><a href=\"#新建cron文件auto-cron如下\" class=\"headerlink\" title=\"新建cron文件auto.cron如下\"></a>新建cron文件<code>auto.cron</code>如下</h2><ul>\n<li>每分钟执行一次监控</li>\n<li>每天早上10点清理Tomcat的 catalina.out 文件</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># auto restart tomcat</span><br><span class=\"line\">*/1 * * * * sh /opt/AppData/cron/shell/tomcat_check_and_start.sh</span><br><span class=\"line\">0 10 * * * cat /dev/null &gt; /opt/AppData/tomcat/logs/catalina.out</span><br></pre></td></tr></table></figure>\n<h2 id=\"crontab的文件格式\"><a href=\"#crontab的文件格式\" class=\"headerlink\" title=\"crontab的文件格式\"></a>crontab的文件格式</h2><table>\n<thead>\n<tr>\n<th>分</th>\n<th>时</th>\n<th>日</th>\n<th>月</th>\n<th>星期</th>\n<th>要执行的命令</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>分钟0～59</td>\n<td>小时0～23（0表示子夜）</td>\n<td>日1～31</td>\n<td>月1～12</td>\n<td>星期0～7（0和7表示星期天）</td>\n<td>要运行的命令</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"监控tomcat进程脚本如下\"><a href=\"#监控tomcat进程脚本如下\" class=\"headerlink\" title=\"监控tomcat进程脚本如下\"></a>监控tomcat进程脚本如下</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"># 首先找到tomcat根目录， 确保当前脚本在tomcat根目录下</span><br><span class=\"line\">tomcat_path=/opt/AppData/tomcat-datamonitor</span><br><span class=\"line\"></span><br><span class=\"line\"># 找到tomcat的进程id</span><br><span class=\"line\">tomcat_pid=$(ps -ef|grep $tomcat_path|gawk &apos;$0 !~/grep/ &#123;print $2&#125;&apos; |tr -s &apos;\\n&apos; &apos; &apos;)</span><br><span class=\"line\">if [ -z &quot;$tomcat_pid&quot; ];then</span><br><span class=\"line\">  sh $tomcat_path/bin/startup.sh</span><br><span class=\"line\">  echo tomcat is dead,restart at `date &quot;+%Y-%m-%d %H:%M:%S&quot;` &gt;&gt; $tomcat_path/tomcat_auto_restart.log</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>\n<h2 id=\"使定时监控生效\"><a href=\"#使定时监控生效\" class=\"headerlink\" title=\"使定时监控生效\"></a>使定时监控生效</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crontab auto.cron</span><br></pre></td></tr></table></figure>\n<p><strong>注意:执行该命令前先执行下<code>crontab -l</code>看看已经存在的定时任务,以避免覆盖已经存在的定时任务</strong></p>\n<p>使用 <code>crontab -l</code>可以列出当前用户生效的定时任务</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"http://blog.csdn.net/hi_kevin/article/details/8983746\" target=\"_blank\" rel=\"external\">linux下添加定时任务</a></li>\n<li><a href=\"http://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/crontab.html\" target=\"_blank\" rel=\"external\">crontab 定时任务</a></li>\n</ul>\n","excerpt":"","more":"<h2 id=\"新建cron文件auto-cron如下\"><a href=\"#新建cron文件auto-cron如下\" class=\"headerlink\" title=\"新建cron文件auto.cron如下\"></a>新建cron文件<code>auto.cron</code>如下</h2><ul>\n<li>每分钟执行一次监控</li>\n<li>每天早上10点清理Tomcat的 catalina.out 文件</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># auto restart tomcat</span><br><span class=\"line\">*/1 * * * * sh /opt/AppData/cron/shell/tomcat_check_and_start.sh</span><br><span class=\"line\">0 10 * * * cat /dev/null &gt; /opt/AppData/tomcat/logs/catalina.out</span><br></pre></td></tr></table></figure>\n<h2 id=\"crontab的文件格式\"><a href=\"#crontab的文件格式\" class=\"headerlink\" title=\"crontab的文件格式\"></a>crontab的文件格式</h2><table>\n<thead>\n<tr>\n<th>分</th>\n<th>时</th>\n<th>日</th>\n<th>月</th>\n<th>星期</th>\n<th>要执行的命令</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>分钟0～59</td>\n<td>小时0～23（0表示子夜）</td>\n<td>日1～31</td>\n<td>月1～12</td>\n<td>星期0～7（0和7表示星期天）</td>\n<td>要运行的命令</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"监控tomcat进程脚本如下\"><a href=\"#监控tomcat进程脚本如下\" class=\"headerlink\" title=\"监控tomcat进程脚本如下\"></a>监控tomcat进程脚本如下</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"># 首先找到tomcat根目录， 确保当前脚本在tomcat根目录下</span><br><span class=\"line\">tomcat_path=/opt/AppData/tomcat-datamonitor</span><br><span class=\"line\"></span><br><span class=\"line\"># 找到tomcat的进程id</span><br><span class=\"line\">tomcat_pid=$(ps -ef|grep $tomcat_path|gawk &apos;$0 !~/grep/ &#123;print $2&#125;&apos; |tr -s &apos;\\n&apos; &apos; &apos;)</span><br><span class=\"line\">if [ -z &quot;$tomcat_pid&quot; ];then</span><br><span class=\"line\">  sh $tomcat_path/bin/startup.sh</span><br><span class=\"line\">  echo tomcat is dead,restart at `date &quot;+%Y-%m-%d %H:%M:%S&quot;` &gt;&gt; $tomcat_path/tomcat_auto_restart.log</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>\n<h2 id=\"使定时监控生效\"><a href=\"#使定时监控生效\" class=\"headerlink\" title=\"使定时监控生效\"></a>使定时监控生效</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crontab auto.cron</span><br></pre></td></tr></table></figure>\n<p><strong>注意:执行该命令前先执行下<code>crontab -l</code>看看已经存在的定时任务,以避免覆盖已经存在的定时任务</strong></p>\n<p>使用 <code>crontab -l</code>可以列出当前用户生效的定时任务</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"http://blog.csdn.net/hi_kevin/article/details/8983746\">linux下添加定时任务</a></li>\n<li><a href=\"http://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/crontab.html\">crontab 定时任务</a></li>\n</ul>\n"},{"title":"在Junit单元测试中通过@PropertySource来获取Bean中的@Value属性值","title_url":"Spring-Junit-PropertySource-Value","date":"2016-09-29T16:00:00.000Z","description":"在Junit单元测试中通过@PropertySource来获取Bean中的@Value属性值","_content":"\n## 使用场景说明\n\n- 在平时开发的时候，为了测试Spring中的一个Bean，通常要通过`@ContextConfiguration`注解来加载一些XML配置，问题是XML配置越来越多，现在要减少甚至去除XML配置，从而简化开发\n\n- 古老的项目由于历史问题没有使用Junit来测试Bean导致现在切换过来复杂\n\n- 有时候只想在Junit中测试几个Bean\n\n- 避免加载XML配置，直接从properties文件中获取@Value属性值\n\n## 使用说明\n\n- 使用`@Configuration`注解将XML配置转换成在Bean中完成，`@PropertySource`注解用于指定properties文件\n```Java\n/**\n * 通过该类可以代替在xml中如下的配置\n * \n * \n *\t\n  \t  <bean class=\"org.springframework.context.support.PropertySourcesPlaceholderConfigurer\">\n        <property name=\"ignoreUnresolvablePlaceholders\" value=\"true\"/>\n        <property name=\"locations\">\n          <list>\n            <value>classpath:jdbc.properties</value>\n          </list>\n        </property>\n      </bean>\n * @author chen_k\n *\n */\n@Configuration\n@PropertySource(value = { \"classpath:jdbc.properties\" })\npublic class SpringPropertiesConfigure {\n\n\t@Bean\n    public static PropertySourcesPlaceholderConfigurer propertySourcesPlaceholderConfigurer() {\n        return new PropertySourcesPlaceholderConfigurer();\n    }\n}\n```\n\n- 使用`@ContextConfiguration`的`classes`属性来加载相关的几个Bean。DBService类中几个字段通过`@Value`从properties文件获取值\n```Java\n@ContextConfiguration(classes = {DBService.class, SpringPropertiesConfigure.class})\npublic class TestDBService extends BaseTest {\n\n\t@Autowired\n\tprivate DBService dBService;\n\t\n\t@Test\n\tpublic void testGetDBInfo() {\n\t\tString dbInfo = dBService.toString();\n\t\tAssert.assertNotNull(dbInfo);\n\t\tSystem.out.println(dbInfo);\n\t}\n}\n```\n\n## 完整的代码\n\n- 点击*[这里](https://github.com/toulezu/play/tree/master/SpringBoot/testSpringBoot)*\n\n## 参考\n\n- [Populating Spring @Value during Unit Test](http://stackoverflow.com/questions/17353327/populating-spring-value-during-unit-test?noredirect=1&lq=1)\n- [Spring @PropertySource & @Value annotations example](http://websystique.com/spring/spring-propertysource-value-annotations-example/)\n- [使用RunWith注解改变JUnit的默认执行类，并实现自已的Listener](http://blog.csdn.net/fenglibing/article/details/8584602)\n- [Spring基于注解TestContext 测试框架使用详解](http://blog.csdn.net/yaerfeng/article/details/25368447)\n\n","source":"_posts/在Junit单元测试中通过@PropertySource来获取Bean中的@Value属性值.md","raw":"---\ntitle: 在Junit单元测试中通过@PropertySource来获取Bean中的@Value属性值\ntitle_url: Spring-Junit-PropertySource-Value\ndate: 2016-09-30\ntags: [Spring,Junit]\ncategories: Spring\ndescription: 在Junit单元测试中通过@PropertySource来获取Bean中的@Value属性值\n---\n\n## 使用场景说明\n\n- 在平时开发的时候，为了测试Spring中的一个Bean，通常要通过`@ContextConfiguration`注解来加载一些XML配置，问题是XML配置越来越多，现在要减少甚至去除XML配置，从而简化开发\n\n- 古老的项目由于历史问题没有使用Junit来测试Bean导致现在切换过来复杂\n\n- 有时候只想在Junit中测试几个Bean\n\n- 避免加载XML配置，直接从properties文件中获取@Value属性值\n\n## 使用说明\n\n- 使用`@Configuration`注解将XML配置转换成在Bean中完成，`@PropertySource`注解用于指定properties文件\n```Java\n/**\n * 通过该类可以代替在xml中如下的配置\n * \n * \n *\t\n  \t  <bean class=\"org.springframework.context.support.PropertySourcesPlaceholderConfigurer\">\n        <property name=\"ignoreUnresolvablePlaceholders\" value=\"true\"/>\n        <property name=\"locations\">\n          <list>\n            <value>classpath:jdbc.properties</value>\n          </list>\n        </property>\n      </bean>\n * @author chen_k\n *\n */\n@Configuration\n@PropertySource(value = { \"classpath:jdbc.properties\" })\npublic class SpringPropertiesConfigure {\n\n\t@Bean\n    public static PropertySourcesPlaceholderConfigurer propertySourcesPlaceholderConfigurer() {\n        return new PropertySourcesPlaceholderConfigurer();\n    }\n}\n```\n\n- 使用`@ContextConfiguration`的`classes`属性来加载相关的几个Bean。DBService类中几个字段通过`@Value`从properties文件获取值\n```Java\n@ContextConfiguration(classes = {DBService.class, SpringPropertiesConfigure.class})\npublic class TestDBService extends BaseTest {\n\n\t@Autowired\n\tprivate DBService dBService;\n\t\n\t@Test\n\tpublic void testGetDBInfo() {\n\t\tString dbInfo = dBService.toString();\n\t\tAssert.assertNotNull(dbInfo);\n\t\tSystem.out.println(dbInfo);\n\t}\n}\n```\n\n## 完整的代码\n\n- 点击*[这里](https://github.com/toulezu/play/tree/master/SpringBoot/testSpringBoot)*\n\n## 参考\n\n- [Populating Spring @Value during Unit Test](http://stackoverflow.com/questions/17353327/populating-spring-value-during-unit-test?noredirect=1&lq=1)\n- [Spring @PropertySource & @Value annotations example](http://websystique.com/spring/spring-propertysource-value-annotations-example/)\n- [使用RunWith注解改变JUnit的默认执行类，并实现自已的Listener](http://blog.csdn.net/fenglibing/article/details/8584602)\n- [Spring基于注解TestContext 测试框架使用详解](http://blog.csdn.net/yaerfeng/article/details/25368447)\n\n","slug":"在Junit单元测试中通过@PropertySource来获取Bean中的@Value属性值","published":1,"updated":"2017-05-27T01:39:06.683Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj36mxs1z000qfwezjnrqo0b3","content":"<h2 id=\"使用场景说明\"><a href=\"#使用场景说明\" class=\"headerlink\" title=\"使用场景说明\"></a>使用场景说明</h2><ul>\n<li><p>在平时开发的时候，为了测试Spring中的一个Bean，通常要通过<code>@ContextConfiguration</code>注解来加载一些XML配置，问题是XML配置越来越多，现在要减少甚至去除XML配置，从而简化开发</p>\n</li>\n<li><p>古老的项目由于历史问题没有使用Junit来测试Bean导致现在切换过来复杂</p>\n</li>\n<li><p>有时候只想在Junit中测试几个Bean</p>\n</li>\n<li><p>避免加载XML配置，直接从properties文件中获取@Value属性值</p>\n</li>\n</ul>\n<h2 id=\"使用说明\"><a href=\"#使用说明\" class=\"headerlink\" title=\"使用说明\"></a>使用说明</h2><ul>\n<li><p>使用<code>@Configuration</code>注解将XML配置转换成在Bean中完成，<code>@PropertySource</code>注解用于指定properties文件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * 通过该类可以代替在xml中如下的配置</span><br><span class=\"line\"> * </span><br><span class=\"line\"> * </span><br><span class=\"line\"> *\t</span><br><span class=\"line\">  \t  &lt;bean class=\"org.springframework.context.support.PropertySourcesPlaceholderConfigurer\"&gt;</span><br><span class=\"line\">        &lt;property name=\"ignoreUnresolvablePlaceholders\" value=\"true\"/&gt;</span><br><span class=\"line\">        &lt;property name=\"locations\"&gt;</span><br><span class=\"line\">          &lt;list&gt;</span><br><span class=\"line\">            &lt;value&gt;classpath:jdbc.properties&lt;/value&gt;</span><br><span class=\"line\">          &lt;/list&gt;</span><br><span class=\"line\">        &lt;/property&gt;</span><br><span class=\"line\">      &lt;/bean&gt;</span><br><span class=\"line\"> * <span class=\"doctag\">@author</span> chen_k</span><br><span class=\"line\"> *</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@PropertySource</span>(value = &#123; <span class=\"string\">\"classpath:jdbc.properties\"</span> &#125;)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SpringPropertiesConfigure</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> PropertySourcesPlaceholderConfigurer <span class=\"title\">propertySourcesPlaceholderConfigurer</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> PropertySourcesPlaceholderConfigurer();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用<code>@ContextConfiguration</code>的<code>classes</code>属性来加载相关的几个Bean。DBService类中几个字段通过<code>@Value</code>从properties文件获取值</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ContextConfiguration</span>(classes = &#123;DBService.class, SpringPropertiesConfigure.class&#125;)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestDBService</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Autowired</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> DBService dBService;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Test</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testGetDBInfo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tString dbInfo = dBService.toString();</span><br><span class=\"line\">\t\tAssert.assertNotNull(dbInfo);</span><br><span class=\"line\">\t\tSystem.out.println(dbInfo);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"完整的代码\"><a href=\"#完整的代码\" class=\"headerlink\" title=\"完整的代码\"></a>完整的代码</h2><ul>\n<li>点击<em><a href=\"https://github.com/toulezu/play/tree/master/SpringBoot/testSpringBoot\" target=\"_blank\" rel=\"external\">这里</a></em></li>\n</ul>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"http://stackoverflow.com/questions/17353327/populating-spring-value-during-unit-test?noredirect=1&amp;lq=1\" target=\"_blank\" rel=\"external\">Populating Spring @Value during Unit Test</a></li>\n<li><a href=\"http://websystique.com/spring/spring-propertysource-value-annotations-example/\" target=\"_blank\" rel=\"external\">Spring @PropertySource &amp; @Value annotations example</a></li>\n<li><a href=\"http://blog.csdn.net/fenglibing/article/details/8584602\" target=\"_blank\" rel=\"external\">使用RunWith注解改变JUnit的默认执行类，并实现自已的Listener</a></li>\n<li><a href=\"http://blog.csdn.net/yaerfeng/article/details/25368447\" target=\"_blank\" rel=\"external\">Spring基于注解TestContext 测试框架使用详解</a></li>\n</ul>\n","excerpt":"","more":"<h2 id=\"使用场景说明\"><a href=\"#使用场景说明\" class=\"headerlink\" title=\"使用场景说明\"></a>使用场景说明</h2><ul>\n<li><p>在平时开发的时候，为了测试Spring中的一个Bean，通常要通过<code>@ContextConfiguration</code>注解来加载一些XML配置，问题是XML配置越来越多，现在要减少甚至去除XML配置，从而简化开发</p>\n</li>\n<li><p>古老的项目由于历史问题没有使用Junit来测试Bean导致现在切换过来复杂</p>\n</li>\n<li><p>有时候只想在Junit中测试几个Bean</p>\n</li>\n<li><p>避免加载XML配置，直接从properties文件中获取@Value属性值</p>\n</li>\n</ul>\n<h2 id=\"使用说明\"><a href=\"#使用说明\" class=\"headerlink\" title=\"使用说明\"></a>使用说明</h2><ul>\n<li><p>使用<code>@Configuration</code>注解将XML配置转换成在Bean中完成，<code>@PropertySource</code>注解用于指定properties文件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * 通过该类可以代替在xml中如下的配置</span><br><span class=\"line\"> * </span><br><span class=\"line\"> * </span><br><span class=\"line\"> *\t</span><br><span class=\"line\">  \t  &lt;bean class=\"org.springframework.context.support.PropertySourcesPlaceholderConfigurer\"&gt;</span><br><span class=\"line\">        &lt;property name=\"ignoreUnresolvablePlaceholders\" value=\"true\"/&gt;</span><br><span class=\"line\">        &lt;property name=\"locations\"&gt;</span><br><span class=\"line\">          &lt;list&gt;</span><br><span class=\"line\">            &lt;value&gt;classpath:jdbc.properties&lt;/value&gt;</span><br><span class=\"line\">          &lt;/list&gt;</span><br><span class=\"line\">        &lt;/property&gt;</span><br><span class=\"line\">      &lt;/bean&gt;</span><br><span class=\"line\"> * <span class=\"doctag\">@author</span> chen_k</span><br><span class=\"line\"> *</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@PropertySource</span>(value = &#123; <span class=\"string\">\"classpath:jdbc.properties\"</span> &#125;)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SpringPropertiesConfigure</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> PropertySourcesPlaceholderConfigurer <span class=\"title\">propertySourcesPlaceholderConfigurer</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> PropertySourcesPlaceholderConfigurer();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用<code>@ContextConfiguration</code>的<code>classes</code>属性来加载相关的几个Bean。DBService类中几个字段通过<code>@Value</code>从properties文件获取值</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ContextConfiguration</span>(classes = &#123;DBService.class, SpringPropertiesConfigure.class&#125;)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestDBService</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Autowired</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> DBService dBService;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Test</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testGetDBInfo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tString dbInfo = dBService.toString();</span><br><span class=\"line\">\t\tAssert.assertNotNull(dbInfo);</span><br><span class=\"line\">\t\tSystem.out.println(dbInfo);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"完整的代码\"><a href=\"#完整的代码\" class=\"headerlink\" title=\"完整的代码\"></a>完整的代码</h2><ul>\n<li>点击<em><a href=\"https://github.com/toulezu/play/tree/master/SpringBoot/testSpringBoot\">这里</a></em></li>\n</ul>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"http://stackoverflow.com/questions/17353327/populating-spring-value-during-unit-test?noredirect=1&amp;lq=1\">Populating Spring @Value during Unit Test</a></li>\n<li><a href=\"http://websystique.com/spring/spring-propertysource-value-annotations-example/\">Spring @PropertySource &amp; @Value annotations example</a></li>\n<li><a href=\"http://blog.csdn.net/fenglibing/article/details/8584602\">使用RunWith注解改变JUnit的默认执行类，并实现自已的Listener</a></li>\n<li><a href=\"http://blog.csdn.net/yaerfeng/article/details/25368447\">Spring基于注解TestContext 测试框架使用详解</a></li>\n</ul>\n"},{"title":"Java 分段从文件中读取数据的一个例子","title_url":"java-read-file-piece","date":"2016-10-30T16:00:00.000Z","description":"Java 分段从文件中读取数据的一个例子","_content":"\n```java\n\n/**\n * 分段从文件中读取数据\n * \n * @author chen_k\n *\n */\n@Component\npublic class GrabDataService {\n\t\n\t/**\n\t * 每次从文件中读取的行数，默认 5000 行\n\t */\n\tpublic static final int LINE_COUNT = 5000;\n\t\n\t/**\n\t * 文件默认编码\n\t */\n\tpublic static final String FILE_ENCODING = \"UTF-8\";\n\n\tprivate static final Logger log = LoggerFactory.getLogger(GrabDataService.class);\n\t\n\t/**\n\t * 文件的唯一标识Map，用于记录从文件的哪一行开始读取\n\t */\n\tprivate Map<String, Integer> counterMap = Collections.synchronizedMap(new HashMap<String, Integer>());\n\t\n\t/**\n\t * 每次从文件中读取固定行数的记录\n\t * @param msgKey 文件的唯一标识\n\t * @param filePath 文件路径\n\t * @return List<Map<Integer, String>> 读取的文件内容\n\t */\n\tpublic List<Map<Integer, String>> getFileData(String msgKey, String filePath) {\n\t\tList<Map<Integer, String>> dataList = new ArrayList<>();\n\t\t\n\t\tint line = 0;\n\t\tif (counterMap.get(msgKey) == null) {\n\t\t\tcounterMap.put(msgKey, line);\n\t\t} else {\n\t\t\tline = counterMap.get(msgKey);\n\t\t}\n\t\t\n\t\ttry {\n\t\t\tFile file = new File(filePath);\n\t\t\tif (file.isFile() && file.exists()) { // 判断文件是否存在\n\t\t\t\tInputStreamReader read = new InputStreamReader(new FileInputStream(file), FILE_ENCODING);// 考虑到编码格式\n\t\t\t\tBufferedReader bufferedReader = new BufferedReader(read);\n\t\t\t\tString lineTxt = null;\n\t\t\t\t\n\t\t\t\tint index = 1;\n\t\t\t\twhile ((lineTxt = bufferedReader.readLine()) != null) {\n\t\t\t\t\t// 每次取的时候从上次最后的行开始\n\t\t\t\t\tif (index > line) {\n\t\t\t\t\t\tMap<Integer, String> data = new HashMap<>();\n\t\t\t\t\t\tdata.put(index, lineTxt);\n\t\t\t\t\t\tdataList.add(data);\n\t\t\t\t\t\t\n\t\t\t\t\t\t// 每次只取文件的 5000 条\n\t\t\t\t\t\tif ((index - line) == LINE_COUNT) {\n\t\t\t\t\t\t\tline = index;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tindex ++;\n\t\t\t\t}\n\t\t\t\t// 说明文件已经读完，插入一个读完的标记, file.renameTo(file) 用于判断当前文件是否被其他程序写入内容或占用\n\t\t\t\tif (lineTxt == null && file.renameTo(file)) {\n\t\t\t\t\tMap<Integer, String> data = new HashMap<>();\n\t\t\t\t\tdata.put(-1, \"END OF FILE\");\n\t\t\t\t\tdataList.add(data);\n\t\t\t\t\t\n\t\t\t\t\tline = index;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tread.close();\n\t\t\t\tbufferedReader.close();\n\t\t\t} else {\n\t\t\t\tlog.error(\"找不到指定的文件:{}\", new Object[]{filePath});\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\tlog.error(\"读取文件内容出现异常\", e);\n\t\t} finally {\n\t\t\t// 记录下一次从文件的哪一行开始读取\n\t\t\tcounterMap.put(msgKey, line);\n\t\t\tlog.info(\"msgKey={},filePath={},line={}\", new Object[]{msgKey,filePath,line});\n\t\t}\n\t\t\n\t\treturn dataList;\n\t}\n\t\n\t/**\n\t * 重置从文件的开始读取行数\n\t * \n\t * @param msgKey 文件的唯一标识\n\t * @param offset 开始读取行数\n\t */\n\tpublic void relocateTo(String msgKey, int offset) {\n\t\tcounterMap.put(msgKey, offset);\n\t}\n\t\n\tpublic GrabDataService() {\n\t}\n\n}\n```","source":"_posts/Java 分段从文件中读取数据的一个例子.md","raw":"---\ntitle: Java 分段从文件中读取数据的一个例子\ntitle_url: java-read-file-piece\ndate: 2016-10-31\ntags: [Java]\ncategories: 技术\ndescription: Java 分段从文件中读取数据的一个例子\n---\n\n```java\n\n/**\n * 分段从文件中读取数据\n * \n * @author chen_k\n *\n */\n@Component\npublic class GrabDataService {\n\t\n\t/**\n\t * 每次从文件中读取的行数，默认 5000 行\n\t */\n\tpublic static final int LINE_COUNT = 5000;\n\t\n\t/**\n\t * 文件默认编码\n\t */\n\tpublic static final String FILE_ENCODING = \"UTF-8\";\n\n\tprivate static final Logger log = LoggerFactory.getLogger(GrabDataService.class);\n\t\n\t/**\n\t * 文件的唯一标识Map，用于记录从文件的哪一行开始读取\n\t */\n\tprivate Map<String, Integer> counterMap = Collections.synchronizedMap(new HashMap<String, Integer>());\n\t\n\t/**\n\t * 每次从文件中读取固定行数的记录\n\t * @param msgKey 文件的唯一标识\n\t * @param filePath 文件路径\n\t * @return List<Map<Integer, String>> 读取的文件内容\n\t */\n\tpublic List<Map<Integer, String>> getFileData(String msgKey, String filePath) {\n\t\tList<Map<Integer, String>> dataList = new ArrayList<>();\n\t\t\n\t\tint line = 0;\n\t\tif (counterMap.get(msgKey) == null) {\n\t\t\tcounterMap.put(msgKey, line);\n\t\t} else {\n\t\t\tline = counterMap.get(msgKey);\n\t\t}\n\t\t\n\t\ttry {\n\t\t\tFile file = new File(filePath);\n\t\t\tif (file.isFile() && file.exists()) { // 判断文件是否存在\n\t\t\t\tInputStreamReader read = new InputStreamReader(new FileInputStream(file), FILE_ENCODING);// 考虑到编码格式\n\t\t\t\tBufferedReader bufferedReader = new BufferedReader(read);\n\t\t\t\tString lineTxt = null;\n\t\t\t\t\n\t\t\t\tint index = 1;\n\t\t\t\twhile ((lineTxt = bufferedReader.readLine()) != null) {\n\t\t\t\t\t// 每次取的时候从上次最后的行开始\n\t\t\t\t\tif (index > line) {\n\t\t\t\t\t\tMap<Integer, String> data = new HashMap<>();\n\t\t\t\t\t\tdata.put(index, lineTxt);\n\t\t\t\t\t\tdataList.add(data);\n\t\t\t\t\t\t\n\t\t\t\t\t\t// 每次只取文件的 5000 条\n\t\t\t\t\t\tif ((index - line) == LINE_COUNT) {\n\t\t\t\t\t\t\tline = index;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tindex ++;\n\t\t\t\t}\n\t\t\t\t// 说明文件已经读完，插入一个读完的标记, file.renameTo(file) 用于判断当前文件是否被其他程序写入内容或占用\n\t\t\t\tif (lineTxt == null && file.renameTo(file)) {\n\t\t\t\t\tMap<Integer, String> data = new HashMap<>();\n\t\t\t\t\tdata.put(-1, \"END OF FILE\");\n\t\t\t\t\tdataList.add(data);\n\t\t\t\t\t\n\t\t\t\t\tline = index;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tread.close();\n\t\t\t\tbufferedReader.close();\n\t\t\t} else {\n\t\t\t\tlog.error(\"找不到指定的文件:{}\", new Object[]{filePath});\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\tlog.error(\"读取文件内容出现异常\", e);\n\t\t} finally {\n\t\t\t// 记录下一次从文件的哪一行开始读取\n\t\t\tcounterMap.put(msgKey, line);\n\t\t\tlog.info(\"msgKey={},filePath={},line={}\", new Object[]{msgKey,filePath,line});\n\t\t}\n\t\t\n\t\treturn dataList;\n\t}\n\t\n\t/**\n\t * 重置从文件的开始读取行数\n\t * \n\t * @param msgKey 文件的唯一标识\n\t * @param offset 开始读取行数\n\t */\n\tpublic void relocateTo(String msgKey, int offset) {\n\t\tcounterMap.put(msgKey, offset);\n\t}\n\t\n\tpublic GrabDataService() {\n\t}\n\n}\n```","slug":"Java 分段从文件中读取数据的一个例子","published":1,"updated":"2017-05-27T01:38:56.392Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj36mxs23000tfwezpxb041em","content":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * 分段从文件中读取数据</span><br><span class=\"line\"> * </span><br><span class=\"line\"> * <span class=\"doctag\">@author</span> chen_k</span><br><span class=\"line\"> *</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GrabDataService</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/**</span><br><span class=\"line\">\t * 每次从文件中读取的行数，默认 5000 行</span><br><span class=\"line\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> LINE_COUNT = <span class=\"number\">5000</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/**</span><br><span class=\"line\">\t * 文件默认编码</span><br><span class=\"line\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String FILE_ENCODING = <span class=\"string\">\"UTF-8\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Logger log = LoggerFactory.getLogger(GrabDataService.class);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/**</span><br><span class=\"line\">\t * 文件的唯一标识Map，用于记录从文件的哪一行开始读取</span><br><span class=\"line\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Map&lt;String, Integer&gt; counterMap = Collections.synchronizedMap(<span class=\"keyword\">new</span> HashMap&lt;String, Integer&gt;());</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/**</span><br><span class=\"line\">\t * 每次从文件中读取固定行数的记录</span><br><span class=\"line\">\t * <span class=\"doctag\">@param</span> msgKey 文件的唯一标识</span><br><span class=\"line\">\t * <span class=\"doctag\">@param</span> filePath 文件路径</span><br><span class=\"line\">\t * <span class=\"doctag\">@return</span> List&lt;Map&lt;Integer, String&gt;&gt; 读取的文件内容</span><br><span class=\"line\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> List&lt;Map&lt;Integer, String&gt;&gt; getFileData(String msgKey, String filePath) &#123;</span><br><span class=\"line\">\t\tList&lt;Map&lt;Integer, String&gt;&gt; dataList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> line = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (counterMap.get(msgKey) == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tcounterMap.put(msgKey, line);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tline = counterMap.get(msgKey);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tFile file = <span class=\"keyword\">new</span> File(filePath);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (file.isFile() &amp;&amp; file.exists()) &#123; <span class=\"comment\">// 判断文件是否存在</span></span><br><span class=\"line\">\t\t\t\tInputStreamReader read = <span class=\"keyword\">new</span> InputStreamReader(<span class=\"keyword\">new</span> FileInputStream(file), FILE_ENCODING);<span class=\"comment\">// 考虑到编码格式</span></span><br><span class=\"line\">\t\t\t\tBufferedReader bufferedReader = <span class=\"keyword\">new</span> BufferedReader(read);</span><br><span class=\"line\">\t\t\t\tString lineTxt = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> index = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">while</span> ((lineTxt = bufferedReader.readLine()) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// 每次取的时候从上次最后的行开始</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (index &gt; line) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tMap&lt;Integer, String&gt; data = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">\t\t\t\t\t\tdata.put(index, lineTxt);</span><br><span class=\"line\">\t\t\t\t\t\tdataList.add(data);</span><br><span class=\"line\">\t\t\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"comment\">// 每次只取文件的 5000 条</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span> ((index - line) == LINE_COUNT) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\tline = index;</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\tindex ++;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 说明文件已经读完，插入一个读完的标记, file.renameTo(file) 用于判断当前文件是否被其他程序写入内容或占用</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (lineTxt == <span class=\"keyword\">null</span> &amp;&amp; file.renameTo(file)) &#123;</span><br><span class=\"line\">\t\t\t\t\tMap&lt;Integer, String&gt; data = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">\t\t\t\t\tdata.put(-<span class=\"number\">1</span>, <span class=\"string\">\"END OF FILE\"</span>);</span><br><span class=\"line\">\t\t\t\t\tdataList.add(data);</span><br><span class=\"line\">\t\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\tline = index;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t\t\t\tread.close();</span><br><span class=\"line\">\t\t\t\tbufferedReader.close();</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\tlog.error(<span class=\"string\">\"找不到指定的文件:&#123;&#125;\"</span>, <span class=\"keyword\">new</span> Object[]&#123;filePath&#125;);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\tlog.error(<span class=\"string\">\"读取文件内容出现异常\"</span>, e);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 记录下一次从文件的哪一行开始读取</span></span><br><span class=\"line\">\t\t\tcounterMap.put(msgKey, line);</span><br><span class=\"line\">\t\t\tlog.info(<span class=\"string\">\"msgKey=&#123;&#125;,filePath=&#123;&#125;,line=&#123;&#125;\"</span>, <span class=\"keyword\">new</span> Object[]&#123;msgKey,filePath,line&#125;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> dataList;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/**</span><br><span class=\"line\">\t * 重置从文件的开始读取行数</span><br><span class=\"line\">\t * </span><br><span class=\"line\">\t * <span class=\"doctag\">@param</span> msgKey 文件的唯一标识</span><br><span class=\"line\">\t * <span class=\"doctag\">@param</span> offset 开始读取行数</span><br><span class=\"line\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">relocateTo</span><span class=\"params\">(String msgKey, <span class=\"keyword\">int</span> offset)</span> </span>&#123;</span><br><span class=\"line\">\t\tcounterMap.put(msgKey, offset);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">GrabDataService</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * 分段从文件中读取数据</span><br><span class=\"line\"> * </span><br><span class=\"line\"> * <span class=\"doctag\">@author</span> chen_k</span><br><span class=\"line\"> *</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GrabDataService</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/**</span><br><span class=\"line\">\t * 每次从文件中读取的行数，默认 5000 行</span><br><span class=\"line\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> LINE_COUNT = <span class=\"number\">5000</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/**</span><br><span class=\"line\">\t * 文件默认编码</span><br><span class=\"line\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String FILE_ENCODING = <span class=\"string\">\"UTF-8\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Logger log = LoggerFactory.getLogger(GrabDataService.class);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/**</span><br><span class=\"line\">\t * 文件的唯一标识Map，用于记录从文件的哪一行开始读取</span><br><span class=\"line\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Map&lt;String, Integer&gt; counterMap = Collections.synchronizedMap(<span class=\"keyword\">new</span> HashMap&lt;String, Integer&gt;());</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/**</span><br><span class=\"line\">\t * 每次从文件中读取固定行数的记录</span><br><span class=\"line\">\t * <span class=\"doctag\">@param</span> msgKey 文件的唯一标识</span><br><span class=\"line\">\t * <span class=\"doctag\">@param</span> filePath 文件路径</span><br><span class=\"line\">\t * <span class=\"doctag\">@return</span> List&lt;Map&lt;Integer, String&gt;&gt; 读取的文件内容</span><br><span class=\"line\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> List&lt;Map&lt;Integer, String&gt;&gt; getFileData(String msgKey, String filePath) &#123;</span><br><span class=\"line\">\t\tList&lt;Map&lt;Integer, String&gt;&gt; dataList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> line = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (counterMap.get(msgKey) == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tcounterMap.put(msgKey, line);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tline = counterMap.get(msgKey);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tFile file = <span class=\"keyword\">new</span> File(filePath);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (file.isFile() &amp;&amp; file.exists()) &#123; <span class=\"comment\">// 判断文件是否存在</span></span><br><span class=\"line\">\t\t\t\tInputStreamReader read = <span class=\"keyword\">new</span> InputStreamReader(<span class=\"keyword\">new</span> FileInputStream(file), FILE_ENCODING);<span class=\"comment\">// 考虑到编码格式</span></span><br><span class=\"line\">\t\t\t\tBufferedReader bufferedReader = <span class=\"keyword\">new</span> BufferedReader(read);</span><br><span class=\"line\">\t\t\t\tString lineTxt = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> index = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">while</span> ((lineTxt = bufferedReader.readLine()) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// 每次取的时候从上次最后的行开始</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (index &gt; line) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tMap&lt;Integer, String&gt; data = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">\t\t\t\t\t\tdata.put(index, lineTxt);</span><br><span class=\"line\">\t\t\t\t\t\tdataList.add(data);</span><br><span class=\"line\">\t\t\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"comment\">// 每次只取文件的 5000 条</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span> ((index - line) == LINE_COUNT) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\tline = index;</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\tindex ++;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 说明文件已经读完，插入一个读完的标记, file.renameTo(file) 用于判断当前文件是否被其他程序写入内容或占用</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (lineTxt == <span class=\"keyword\">null</span> &amp;&amp; file.renameTo(file)) &#123;</span><br><span class=\"line\">\t\t\t\t\tMap&lt;Integer, String&gt; data = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">\t\t\t\t\tdata.put(-<span class=\"number\">1</span>, <span class=\"string\">\"END OF FILE\"</span>);</span><br><span class=\"line\">\t\t\t\t\tdataList.add(data);</span><br><span class=\"line\">\t\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\tline = index;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t\t\t\tread.close();</span><br><span class=\"line\">\t\t\t\tbufferedReader.close();</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\tlog.error(<span class=\"string\">\"找不到指定的文件:&#123;&#125;\"</span>, <span class=\"keyword\">new</span> Object[]&#123;filePath&#125;);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\tlog.error(<span class=\"string\">\"读取文件内容出现异常\"</span>, e);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 记录下一次从文件的哪一行开始读取</span></span><br><span class=\"line\">\t\t\tcounterMap.put(msgKey, line);</span><br><span class=\"line\">\t\t\tlog.info(<span class=\"string\">\"msgKey=&#123;&#125;,filePath=&#123;&#125;,line=&#123;&#125;\"</span>, <span class=\"keyword\">new</span> Object[]&#123;msgKey,filePath,line&#125;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> dataList;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/**</span><br><span class=\"line\">\t * 重置从文件的开始读取行数</span><br><span class=\"line\">\t * </span><br><span class=\"line\">\t * <span class=\"doctag\">@param</span> msgKey 文件的唯一标识</span><br><span class=\"line\">\t * <span class=\"doctag\">@param</span> offset 开始读取行数</span><br><span class=\"line\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">relocateTo</span><span class=\"params\">(String msgKey, <span class=\"keyword\">int</span> offset)</span> </span>&#123;</span><br><span class=\"line\">\t\tcounterMap.put(msgKey, offset);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">GrabDataService</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"对 Spring 中一些常见的 Annotation 的理解","title_url":"Spring-Annotation","date":"2017-05-22T16:00:00.000Z","description":"对 Spring 中一些常见的 Annotation 的理解","_content":"\n## `@Service`\n\n作用于类上,自动根据bean的类名实例化一个首写字母为小写的bean，如果需要自己改名字则:`@Service(\"你自己改的bean名\")`, 默认是单例模式(singleton),用于业务层.\n\n## `@Component`\n\n功能和 `@Service` 类似,用于一些功能组件,或者帮助类.\n\n## `@Repository`\n\n功能和 `@Service` 类似,用于持久层(Dao)\n\n## `@Controller`\n\n功能和 `@Service` 类似,用于控制层(Controller),或者Web层\n\n## `@Autowired` 和 `@Resource`\n\n- 都作用于类成员变量、方法及构造函数上,用于成员变量自动注入\n- 只不过 `@Resource` 默认按 byName 自动注入,而 `@Autowired` 默认安装 byType 而已.\n- `@Resource` 可以带上 `@Resource(name=\"myCar\")` 或者 `@Resource(type=Car.class)` 来区分是通过 byName 还是 byType 自动注入.\n\n## `@Qualifier`\n- 对于 `@Autowired` 如果容器中有多个类型相同而名称不同的类型需要自动注入,需要多加一个 `@Qualifier(\"office\")` 来区分不同的类型\n```\npublic class Boss {  \n\n    @Autowired  \n    @Qualifier(\"office\")  \n    private Office office;  \n    …  \n} \n```\n这种情况如果都通过注解来定义Bean是不会存在的.\n\n## `@PostConstruct` 和 `@PreDestroy`\n这两个注释只能应用于方法上。标注了 `@PostConstruct` 注释的方法将在类实例化后调用，而标注了 `@PreDestroy` 的方法将在类销毁之前调用。  \n\n## 关于 context:annotation-config\n\n使用以上注解都必须在 Spring 的核心配置文件中加入如下配置\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>  \n<beans xmlns=\"http://www.springframework.org/schema/beans\"  \n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"  \n     xmlns:context=\"http://www.springframework.org/schema/context\"  \n     xsi:schemaLocation=\"http://www.springframework.org/schema/beans   \n http://www.springframework.org/schema/beans/spring-beans-2.5.xsd  \n http://www.springframework.org/schema/context   \n http://www.springframework.org/schema/context/spring-context-2.5.xsd\">  \n   \n    <context:annotation-config/>\n    \n    <bean id=\"boss\" class=\"com.test.Boss\"/>  \n    <bean id=\"office\" class=\"com.test.Office\">  \n        <property name=\"officeNo\" value=\"001\"/>  \n    </bean>  \n    <bean id=\"car\" class=\"com.test.Car\" scope=\"singleton\">  \n        <property name=\"brand\" value=\" 红旗 CA72\"/>  \n        <property name=\"price\" value=\"2000\"/>\n    </bean>  \n</beans>  \n```\n\n`<context:annotation-config/>` 将隐式地向 Spring 容器注册 AutowiredAnnotationBeanPostProcessor、CommonAnnotationBeanPostProcessor、PersistenceAnnotationBeanPostProcessor 以及 equiredAnnotationBeanPostProcessor 这 4 个 BeanPostProcessor。  \n该配置将处理容器中已有的Bean的依赖注入问题,在容器初始化的时候将容器中的实体中含有 `@Autowired` 或者 `@Resource` 的Bean自动注入相应的依赖Bean\n\n## 关于 context:component-scan\n\n这个配置更强大,不但启用了对类包进行扫描以实现注解驱动的**Bean定义**的功能，同时还启用了注解驱动的**依赖注入**的功能（即还隐式地在内部注册了 AutowiredAnnotationBeanPostProcessor 和 CommonAnnotationBeanPostProcessor），因此当使用 `<context:component-scan/>` 后，就可以将 `<context:annotation-config/>` 移除了。 \n最终的配置可以简化成如下的样子\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>  \n<beans xmlns=\"http://www.springframework.org/schema/beans\"  \n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"  \n     xmlns:context=\"http://www.springframework.org/schema/context\"  \n     xsi:schemaLocation=\"http://www.springframework.org/schema/beans   \n http://www.springframework.org/schema/beans/spring-beans-2.5.xsd  \n http://www.springframework.org/schema/context   \n http://www.springframework.org/schema/context/spring-context-2.5.xsd\">  \n   \n    <context:component-scan base-package=\"com.test\"/>\n    \n</beans>\n```\n\n## 参考\n\n- [使用Spring2.5的Autowired实现注释型的IOC](http://crabboy.iteye.com/blog/339840)\n- [Spring @Qualifier 注释](http://wiki.jikexueyuan.com/project/spring/annotation-based-configuration/spring-qualifier-annotation.html)","source":"_posts/对 Spring 中一些常见的 Annotation 的理解.md","raw":"---\ntitle: 对 Spring 中一些常见的 Annotation 的理解\ntitle_url: Spring-Annotation\ndate: 2017-05-23\ntags: [Spring,Annotation]\ncategories: 技术\ndescription: 对 Spring 中一些常见的 Annotation 的理解\n---\n\n## `@Service`\n\n作用于类上,自动根据bean的类名实例化一个首写字母为小写的bean，如果需要自己改名字则:`@Service(\"你自己改的bean名\")`, 默认是单例模式(singleton),用于业务层.\n\n## `@Component`\n\n功能和 `@Service` 类似,用于一些功能组件,或者帮助类.\n\n## `@Repository`\n\n功能和 `@Service` 类似,用于持久层(Dao)\n\n## `@Controller`\n\n功能和 `@Service` 类似,用于控制层(Controller),或者Web层\n\n## `@Autowired` 和 `@Resource`\n\n- 都作用于类成员变量、方法及构造函数上,用于成员变量自动注入\n- 只不过 `@Resource` 默认按 byName 自动注入,而 `@Autowired` 默认安装 byType 而已.\n- `@Resource` 可以带上 `@Resource(name=\"myCar\")` 或者 `@Resource(type=Car.class)` 来区分是通过 byName 还是 byType 自动注入.\n\n## `@Qualifier`\n- 对于 `@Autowired` 如果容器中有多个类型相同而名称不同的类型需要自动注入,需要多加一个 `@Qualifier(\"office\")` 来区分不同的类型\n```\npublic class Boss {  \n\n    @Autowired  \n    @Qualifier(\"office\")  \n    private Office office;  \n    …  \n} \n```\n这种情况如果都通过注解来定义Bean是不会存在的.\n\n## `@PostConstruct` 和 `@PreDestroy`\n这两个注释只能应用于方法上。标注了 `@PostConstruct` 注释的方法将在类实例化后调用，而标注了 `@PreDestroy` 的方法将在类销毁之前调用。  \n\n## 关于 context:annotation-config\n\n使用以上注解都必须在 Spring 的核心配置文件中加入如下配置\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>  \n<beans xmlns=\"http://www.springframework.org/schema/beans\"  \n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"  \n     xmlns:context=\"http://www.springframework.org/schema/context\"  \n     xsi:schemaLocation=\"http://www.springframework.org/schema/beans   \n http://www.springframework.org/schema/beans/spring-beans-2.5.xsd  \n http://www.springframework.org/schema/context   \n http://www.springframework.org/schema/context/spring-context-2.5.xsd\">  \n   \n    <context:annotation-config/>\n    \n    <bean id=\"boss\" class=\"com.test.Boss\"/>  \n    <bean id=\"office\" class=\"com.test.Office\">  \n        <property name=\"officeNo\" value=\"001\"/>  \n    </bean>  \n    <bean id=\"car\" class=\"com.test.Car\" scope=\"singleton\">  \n        <property name=\"brand\" value=\" 红旗 CA72\"/>  \n        <property name=\"price\" value=\"2000\"/>\n    </bean>  \n</beans>  \n```\n\n`<context:annotation-config/>` 将隐式地向 Spring 容器注册 AutowiredAnnotationBeanPostProcessor、CommonAnnotationBeanPostProcessor、PersistenceAnnotationBeanPostProcessor 以及 equiredAnnotationBeanPostProcessor 这 4 个 BeanPostProcessor。  \n该配置将处理容器中已有的Bean的依赖注入问题,在容器初始化的时候将容器中的实体中含有 `@Autowired` 或者 `@Resource` 的Bean自动注入相应的依赖Bean\n\n## 关于 context:component-scan\n\n这个配置更强大,不但启用了对类包进行扫描以实现注解驱动的**Bean定义**的功能，同时还启用了注解驱动的**依赖注入**的功能（即还隐式地在内部注册了 AutowiredAnnotationBeanPostProcessor 和 CommonAnnotationBeanPostProcessor），因此当使用 `<context:component-scan/>` 后，就可以将 `<context:annotation-config/>` 移除了。 \n最终的配置可以简化成如下的样子\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>  \n<beans xmlns=\"http://www.springframework.org/schema/beans\"  \n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"  \n     xmlns:context=\"http://www.springframework.org/schema/context\"  \n     xsi:schemaLocation=\"http://www.springframework.org/schema/beans   \n http://www.springframework.org/schema/beans/spring-beans-2.5.xsd  \n http://www.springframework.org/schema/context   \n http://www.springframework.org/schema/context/spring-context-2.5.xsd\">  \n   \n    <context:component-scan base-package=\"com.test\"/>\n    \n</beans>\n```\n\n## 参考\n\n- [使用Spring2.5的Autowired实现注释型的IOC](http://crabboy.iteye.com/blog/339840)\n- [Spring @Qualifier 注释](http://wiki.jikexueyuan.com/project/spring/annotation-based-configuration/spring-qualifier-annotation.html)","slug":"对 Spring 中一些常见的 Annotation 的理解","published":1,"updated":"2017-05-27T02:06:15.573Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj36mxs6w001zfwezw99wuehn","content":"<h2 id=\"Service\"><a href=\"#Service\" class=\"headerlink\" title=\"@Service\"></a><code>@Service</code></h2><p>作用于类上,自动根据bean的类名实例化一个首写字母为小写的bean，如果需要自己改名字则:<code>@Service(&quot;你自己改的bean名&quot;)</code>, 默认是单例模式(singleton),用于业务层.</p>\n<h2 id=\"Component\"><a href=\"#Component\" class=\"headerlink\" title=\"@Component\"></a><code>@Component</code></h2><p>功能和 <code>@Service</code> 类似,用于一些功能组件,或者帮助类.</p>\n<h2 id=\"Repository\"><a href=\"#Repository\" class=\"headerlink\" title=\"@Repository\"></a><code>@Repository</code></h2><p>功能和 <code>@Service</code> 类似,用于持久层(Dao)</p>\n<h2 id=\"Controller\"><a href=\"#Controller\" class=\"headerlink\" title=\"@Controller\"></a><code>@Controller</code></h2><p>功能和 <code>@Service</code> 类似,用于控制层(Controller),或者Web层</p>\n<h2 id=\"Autowired-和-Resource\"><a href=\"#Autowired-和-Resource\" class=\"headerlink\" title=\"@Autowired 和 @Resource\"></a><code>@Autowired</code> 和 <code>@Resource</code></h2><ul>\n<li>都作用于类成员变量、方法及构造函数上,用于成员变量自动注入</li>\n<li>只不过 <code>@Resource</code> 默认按 byName 自动注入,而 <code>@Autowired</code> 默认安装 byType 而已.</li>\n<li><code>@Resource</code> 可以带上 <code>@Resource(name=&quot;myCar&quot;)</code> 或者 <code>@Resource(type=Car.class)</code> 来区分是通过 byName 还是 byType 自动注入.</li>\n</ul>\n<h2 id=\"Qualifier\"><a href=\"#Qualifier\" class=\"headerlink\" title=\"@Qualifier\"></a><code>@Qualifier</code></h2><ul>\n<li>对于 <code>@Autowired</code> 如果容器中有多个类型相同而名称不同的类型需要自动注入,需要多加一个 <code>@Qualifier(&quot;office&quot;)</code> 来区分不同的类型<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Boss &#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    @Autowired  </span><br><span class=\"line\">    @Qualifier(&quot;office&quot;)  </span><br><span class=\"line\">    private Office office;  </span><br><span class=\"line\">    …  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这种情况如果都通过注解来定义Bean是不会存在的.</p>\n<h2 id=\"PostConstruct-和-PreDestroy\"><a href=\"#PostConstruct-和-PreDestroy\" class=\"headerlink\" title=\"@PostConstruct 和 @PreDestroy\"></a><code>@PostConstruct</code> 和 <code>@PreDestroy</code></h2><p>这两个注释只能应用于方法上。标注了 <code>@PostConstruct</code> 注释的方法将在类实例化后调用，而标注了 <code>@PreDestroy</code> 的方法将在类销毁之前调用。  </p>\n<h2 id=\"关于-context-annotation-config\"><a href=\"#关于-context-annotation-config\" class=\"headerlink\" title=\"关于 context:annotation-config\"></a>关于 context:annotation-config</h2><p>使用以上注解都必须在 Spring 的核心配置文件中加入如下配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;  </span><br><span class=\"line\">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;  </span><br><span class=\"line\">    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;  </span><br><span class=\"line\">     xmlns:context=&quot;http://www.springframework.org/schema/context&quot;  </span><br><span class=\"line\">     xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans   </span><br><span class=\"line\"> http://www.springframework.org/schema/beans/spring-beans-2.5.xsd  </span><br><span class=\"line\"> http://www.springframework.org/schema/context   </span><br><span class=\"line\"> http://www.springframework.org/schema/context/spring-context-2.5.xsd&quot;&gt;  </span><br><span class=\"line\">   </span><br><span class=\"line\">    &lt;context:annotation-config/&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &lt;bean id=&quot;boss&quot; class=&quot;com.test.Boss&quot;/&gt;  </span><br><span class=\"line\">    &lt;bean id=&quot;office&quot; class=&quot;com.test.Office&quot;&gt;  </span><br><span class=\"line\">        &lt;property name=&quot;officeNo&quot; value=&quot;001&quot;/&gt;  </span><br><span class=\"line\">    &lt;/bean&gt;  </span><br><span class=\"line\">    &lt;bean id=&quot;car&quot; class=&quot;com.test.Car&quot; scope=&quot;singleton&quot;&gt;  </span><br><span class=\"line\">        &lt;property name=&quot;brand&quot; value=&quot; 红旗 CA72&quot;/&gt;  </span><br><span class=\"line\">        &lt;property name=&quot;price&quot; value=&quot;2000&quot;/&gt;</span><br><span class=\"line\">    &lt;/bean&gt;  </span><br><span class=\"line\">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></p>\n<p><code>&lt;context:annotation-config/&gt;</code> 将隐式地向 Spring 容器注册 AutowiredAnnotationBeanPostProcessor、CommonAnnotationBeanPostProcessor、PersistenceAnnotationBeanPostProcessor 以及 equiredAnnotationBeanPostProcessor 这 4 个 BeanPostProcessor。<br>该配置将处理容器中已有的Bean的依赖注入问题,在容器初始化的时候将容器中的实体中含有 <code>@Autowired</code> 或者 <code>@Resource</code> 的Bean自动注入相应的依赖Bean</p>\n<h2 id=\"关于-context-component-scan\"><a href=\"#关于-context-component-scan\" class=\"headerlink\" title=\"关于 context:component-scan\"></a>关于 context:component-scan</h2><p>这个配置更强大,不但启用了对类包进行扫描以实现注解驱动的<strong>Bean定义</strong>的功能，同时还启用了注解驱动的<strong>依赖注入</strong>的功能（即还隐式地在内部注册了 AutowiredAnnotationBeanPostProcessor 和 CommonAnnotationBeanPostProcessor），因此当使用 <code>&lt;context:component-scan/&gt;</code> 后，就可以将 <code>&lt;context:annotation-config/&gt;</code> 移除了。<br>最终的配置可以简化成如下的样子</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;  </span><br><span class=\"line\">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;  </span><br><span class=\"line\">    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;  </span><br><span class=\"line\">     xmlns:context=&quot;http://www.springframework.org/schema/context&quot;  </span><br><span class=\"line\">     xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans   </span><br><span class=\"line\"> http://www.springframework.org/schema/beans/spring-beans-2.5.xsd  </span><br><span class=\"line\"> http://www.springframework.org/schema/context   </span><br><span class=\"line\"> http://www.springframework.org/schema/context/spring-context-2.5.xsd&quot;&gt;  </span><br><span class=\"line\">   </span><br><span class=\"line\">    &lt;context:component-scan base-package=&quot;com.test&quot;/&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"http://crabboy.iteye.com/blog/339840\" target=\"_blank\" rel=\"external\">使用Spring2.5的Autowired实现注释型的IOC</a></li>\n<li><a href=\"http://wiki.jikexueyuan.com/project/spring/annotation-based-configuration/spring-qualifier-annotation.html\" target=\"_blank\" rel=\"external\">Spring @Qualifier 注释</a></li>\n</ul>\n","excerpt":"","more":"<h2 id=\"Service\"><a href=\"#Service\" class=\"headerlink\" title=\"@Service\"></a><code>@Service</code></h2><p>作用于类上,自动根据bean的类名实例化一个首写字母为小写的bean，如果需要自己改名字则:<code>@Service(&quot;你自己改的bean名&quot;)</code>, 默认是单例模式(singleton),用于业务层.</p>\n<h2 id=\"Component\"><a href=\"#Component\" class=\"headerlink\" title=\"@Component\"></a><code>@Component</code></h2><p>功能和 <code>@Service</code> 类似,用于一些功能组件,或者帮助类.</p>\n<h2 id=\"Repository\"><a href=\"#Repository\" class=\"headerlink\" title=\"@Repository\"></a><code>@Repository</code></h2><p>功能和 <code>@Service</code> 类似,用于持久层(Dao)</p>\n<h2 id=\"Controller\"><a href=\"#Controller\" class=\"headerlink\" title=\"@Controller\"></a><code>@Controller</code></h2><p>功能和 <code>@Service</code> 类似,用于控制层(Controller),或者Web层</p>\n<h2 id=\"Autowired-和-Resource\"><a href=\"#Autowired-和-Resource\" class=\"headerlink\" title=\"@Autowired 和 @Resource\"></a><code>@Autowired</code> 和 <code>@Resource</code></h2><ul>\n<li>都作用于类成员变量、方法及构造函数上,用于成员变量自动注入</li>\n<li>只不过 <code>@Resource</code> 默认按 byName 自动注入,而 <code>@Autowired</code> 默认安装 byType 而已.</li>\n<li><code>@Resource</code> 可以带上 <code>@Resource(name=&quot;myCar&quot;)</code> 或者 <code>@Resource(type=Car.class)</code> 来区分是通过 byName 还是 byType 自动注入.</li>\n</ul>\n<h2 id=\"Qualifier\"><a href=\"#Qualifier\" class=\"headerlink\" title=\"@Qualifier\"></a><code>@Qualifier</code></h2><ul>\n<li>对于 <code>@Autowired</code> 如果容器中有多个类型相同而名称不同的类型需要自动注入,需要多加一个 <code>@Qualifier(&quot;office&quot;)</code> 来区分不同的类型<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Boss &#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    @Autowired  </span><br><span class=\"line\">    @Qualifier(&quot;office&quot;)  </span><br><span class=\"line\">    private Office office;  </span><br><span class=\"line\">    …  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这种情况如果都通过注解来定义Bean是不会存在的.</p>\n<h2 id=\"PostConstruct-和-PreDestroy\"><a href=\"#PostConstruct-和-PreDestroy\" class=\"headerlink\" title=\"@PostConstruct 和 @PreDestroy\"></a><code>@PostConstruct</code> 和 <code>@PreDestroy</code></h2><p>这两个注释只能应用于方法上。标注了 <code>@PostConstruct</code> 注释的方法将在类实例化后调用，而标注了 <code>@PreDestroy</code> 的方法将在类销毁之前调用。  </p>\n<h2 id=\"关于-context-annotation-config\"><a href=\"#关于-context-annotation-config\" class=\"headerlink\" title=\"关于 context:annotation-config\"></a>关于 context:annotation-config</h2><p>使用以上注解都必须在 Spring 的核心配置文件中加入如下配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;  </span><br><span class=\"line\">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;  </span><br><span class=\"line\">    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;  </span><br><span class=\"line\">     xmlns:context=&quot;http://www.springframework.org/schema/context&quot;  </span><br><span class=\"line\">     xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans   </span><br><span class=\"line\"> http://www.springframework.org/schema/beans/spring-beans-2.5.xsd  </span><br><span class=\"line\"> http://www.springframework.org/schema/context   </span><br><span class=\"line\"> http://www.springframework.org/schema/context/spring-context-2.5.xsd&quot;&gt;  </span><br><span class=\"line\">   </span><br><span class=\"line\">    &lt;context:annotation-config/&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &lt;bean id=&quot;boss&quot; class=&quot;com.test.Boss&quot;/&gt;  </span><br><span class=\"line\">    &lt;bean id=&quot;office&quot; class=&quot;com.test.Office&quot;&gt;  </span><br><span class=\"line\">        &lt;property name=&quot;officeNo&quot; value=&quot;001&quot;/&gt;  </span><br><span class=\"line\">    &lt;/bean&gt;  </span><br><span class=\"line\">    &lt;bean id=&quot;car&quot; class=&quot;com.test.Car&quot; scope=&quot;singleton&quot;&gt;  </span><br><span class=\"line\">        &lt;property name=&quot;brand&quot; value=&quot; 红旗 CA72&quot;/&gt;  </span><br><span class=\"line\">        &lt;property name=&quot;price&quot; value=&quot;2000&quot;/&gt;</span><br><span class=\"line\">    &lt;/bean&gt;  </span><br><span class=\"line\">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></p>\n<p><code>&lt;context:annotation-config/&gt;</code> 将隐式地向 Spring 容器注册 AutowiredAnnotationBeanPostProcessor、CommonAnnotationBeanPostProcessor、PersistenceAnnotationBeanPostProcessor 以及 equiredAnnotationBeanPostProcessor 这 4 个 BeanPostProcessor。<br>该配置将处理容器中已有的Bean的依赖注入问题,在容器初始化的时候将容器中的实体中含有 <code>@Autowired</code> 或者 <code>@Resource</code> 的Bean自动注入相应的依赖Bean</p>\n<h2 id=\"关于-context-component-scan\"><a href=\"#关于-context-component-scan\" class=\"headerlink\" title=\"关于 context:component-scan\"></a>关于 context:component-scan</h2><p>这个配置更强大,不但启用了对类包进行扫描以实现注解驱动的<strong>Bean定义</strong>的功能，同时还启用了注解驱动的<strong>依赖注入</strong>的功能（即还隐式地在内部注册了 AutowiredAnnotationBeanPostProcessor 和 CommonAnnotationBeanPostProcessor），因此当使用 <code>&lt;context:component-scan/&gt;</code> 后，就可以将 <code>&lt;context:annotation-config/&gt;</code> 移除了。<br>最终的配置可以简化成如下的样子</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;  </span><br><span class=\"line\">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;  </span><br><span class=\"line\">    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;  </span><br><span class=\"line\">     xmlns:context=&quot;http://www.springframework.org/schema/context&quot;  </span><br><span class=\"line\">     xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans   </span><br><span class=\"line\"> http://www.springframework.org/schema/beans/spring-beans-2.5.xsd  </span><br><span class=\"line\"> http://www.springframework.org/schema/context   </span><br><span class=\"line\"> http://www.springframework.org/schema/context/spring-context-2.5.xsd&quot;&gt;  </span><br><span class=\"line\">   </span><br><span class=\"line\">    &lt;context:component-scan base-package=&quot;com.test&quot;/&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"http://crabboy.iteye.com/blog/339840\">使用Spring2.5的Autowired实现注释型的IOC</a></li>\n<li><a href=\"http://wiki.jikexueyuan.com/project/spring/annotation-based-configuration/spring-qualifier-annotation.html\">Spring @Qualifier 注释</a></li>\n</ul>\n"},{"title":"总结一下关于Spring中bean的scope属性","title_url":"Spring-bean-scope-usage","date":"2016-07-12T16:00:00.000Z","description":"总结一下关于Spring中bean的scope属性，主要是Controller的singleton和prototype的区别，并举例说明","_content":"\n## 关于Spring bean的scope属性\n\n- Spring的bean默认是singleton-单例模式的，即Spring容器只存在一个共享的bean实例\n\n- 对于singleton-单例模式，如果有共享变量会导致线程不安全\n\n- 如果为prototype-原型模式，那么每次对bean的请求都会创建一个新的bean实例\n\n- prototype-原型模式是线程安全的，Spring中的Controller默认是singleton\n\n- 可以在类上面通过`@Scope(\"prototype\")`设置为多例，或者在xml中设置`scope=\"prototype\"`\n\n- singleton-单例模式相对prototype-原型模式性能更高，因为不会每次对bean的请求都会创建一个新的bean实例\n\n- 二者选择的原则：有状态的bean都使用prototype，而对无状态的bean则应该使用singleton\n\n- 有无状态是指bean中有无成员变量\n\n- Struts2的Action默认是多例的，原因在于Struts2将表单数据作为Action的成员变量\n\n- scope还可以设置成request、session和global session\n\n## 举例说明Controller的singleton和prototype的区别\n\n- TestController如下\n```java\n@Controller\n@RequestMapping(\"/test\")\n@Api(basePath = \"/test\", value = \"test\", description = \"测试相关接口\", position = 8)\npublic class TestController {\n\t\n\tprivate Map<String, String> cacheData = Collections.synchronizedMap(new HashMap<String, String>());\n\n\t@ResponseBody\n\t@RequestMapping(value = \"/test_cache\", method = RequestMethod.GET, produces = \"application/json; charset=utf-8\")\n\t@ApiOperation(value = \"测试scope\", notes = \"测试scope\", response = KVBean.class, responseContainer = \"List\")\n\tpublic List<KVBean> getTestCache(@RequestParam String key, @RequestParam String value) throws Exception {\n\t\t\n\t\tSystem.out.println(Thread.currentThread().getName());\n\t\tcacheData.put(key, value);\n\t\t\n\t\tList<KVBean> data = new ArrayList<KVBean>();\n\t\tfor (Entry<String, String> it : cacheData.entrySet()) {\n\t\t\tdata.add(new KVBean(it.getKey(), it.getValue()));\n\t\t}\n\t\t\n\t\treturn data;\n\t}\n\t\n}\n```\n\n- 第一次在浏览器中输入\n`http://localhost:8080/plainWebApi/test/test_cache?key=1&value=1`\n返回\n`[{\"key\":\"1\",\"value\":\"1\",\"next\":null}]`\n第二次在浏览器中输入\n`http://localhost:8080/plainWebApi/test/test_cache?key=2&value=2`\n返回\n`[{\"key\":\"1\",\"value\":\"1\",\"next\":null},{\"key\":\"2\",\"value\":\"2\",\"next\":null}]`\n可见对于两次请求cacheData都是同一个对象，TestController当然也没有被new。\n\n- 增加`@Scope(value = \"prototype\")`的TestController如下\n```java\n@Controller\n@RequestMapping(\"/test\")\n@Api(basePath = \"/test\", value = \"test\", description = \"测试相关接口\", position = 8)\n@Scope(value = \"prototype\")\npublic class TestController {\n\t\n\tprivate Map<String, String> cacheData = Collections.synchronizedMap(new HashMap<String, String>());\n\n\t@ResponseBody\n\t@RequestMapping(value = \"/test_cache\", method = RequestMethod.GET, produces = \"application/json; charset=utf-8\")\n\t@ApiOperation(value = \"测试scope\", notes = \"测试scope\", response = KVBean.class, responseContainer = \"List\")\n\tpublic List<KVBean> getTestCache(@RequestParam String key, @RequestParam String value) throws Exception {\n\t\t\n\t\tSystem.out.println(Thread.currentThread().getName());\n\t\tcacheData.put(key, value);\n\t\t\n\t\tList<KVBean> data = new ArrayList<KVBean>();\n\t\tfor (Entry<String, String> it : cacheData.entrySet()) {\n\t\t\tdata.add(new KVBean(it.getKey(), it.getValue()));\n\t\t}\n\t\t\n\t\treturn data;\n\t}\n\t\n}\n```\n\n- 同样第一次在浏览器中输入\n`http://localhost:8080/plainWebApi/test/test_cache?key=1&value=1`\n返回\n`[{\"key\":\"1\",\"value\":\"1\",\"next\":null}]`\n第二次在浏览器中输入\n`http://localhost:8080/plainWebApi/test/test_cache?key=2&value=2`\n返回\n`[{\"key\":\"2\",\"value\":\"2\",\"next\":null}]`\n可见对于两次请求cacheData都是不是一个对象，TestController当然也不是同一个。\n\n## 例子的详细代码\n\n- [点这里](https://github.com/toulezu/play/tree/master/plainWebApi)\n\n## 参考：\n- [Struts action的单例与多例](http://my.oschina.net/davidzhang/blog/67429)\n- [在spring来管理实例对象prototype和singleton的选择.针对action如何使用](http://www.cnblogs.com/shipengzhi/articles/2099694.html)\n- [Spring MVC Controller单例陷阱](http://lavasoft.blog.51cto.com/62575/1394669)\n- [struts+spring action应配置为scope=\"prototype\"](http://www.cnblogs.com/JemBai/archive/2010/11/10/1873954.html)\n- [struts2 Action获取表单数据](http://blog.csdn.net/lsh6688/article/details/7863322)\n","source":"_posts/总结一下Spring中Bean的单例和多例.md","raw":"---\ntitle: 总结一下关于Spring中bean的scope属性\ntitle_url: Spring-bean-scope-usage\ndate: 2016-07-13\ntags: Spring\ncategories: 技术\ndescription: 总结一下关于Spring中bean的scope属性，主要是Controller的singleton和prototype的区别，并举例说明\n---\n\n## 关于Spring bean的scope属性\n\n- Spring的bean默认是singleton-单例模式的，即Spring容器只存在一个共享的bean实例\n\n- 对于singleton-单例模式，如果有共享变量会导致线程不安全\n\n- 如果为prototype-原型模式，那么每次对bean的请求都会创建一个新的bean实例\n\n- prototype-原型模式是线程安全的，Spring中的Controller默认是singleton\n\n- 可以在类上面通过`@Scope(\"prototype\")`设置为多例，或者在xml中设置`scope=\"prototype\"`\n\n- singleton-单例模式相对prototype-原型模式性能更高，因为不会每次对bean的请求都会创建一个新的bean实例\n\n- 二者选择的原则：有状态的bean都使用prototype，而对无状态的bean则应该使用singleton\n\n- 有无状态是指bean中有无成员变量\n\n- Struts2的Action默认是多例的，原因在于Struts2将表单数据作为Action的成员变量\n\n- scope还可以设置成request、session和global session\n\n## 举例说明Controller的singleton和prototype的区别\n\n- TestController如下\n```java\n@Controller\n@RequestMapping(\"/test\")\n@Api(basePath = \"/test\", value = \"test\", description = \"测试相关接口\", position = 8)\npublic class TestController {\n\t\n\tprivate Map<String, String> cacheData = Collections.synchronizedMap(new HashMap<String, String>());\n\n\t@ResponseBody\n\t@RequestMapping(value = \"/test_cache\", method = RequestMethod.GET, produces = \"application/json; charset=utf-8\")\n\t@ApiOperation(value = \"测试scope\", notes = \"测试scope\", response = KVBean.class, responseContainer = \"List\")\n\tpublic List<KVBean> getTestCache(@RequestParam String key, @RequestParam String value) throws Exception {\n\t\t\n\t\tSystem.out.println(Thread.currentThread().getName());\n\t\tcacheData.put(key, value);\n\t\t\n\t\tList<KVBean> data = new ArrayList<KVBean>();\n\t\tfor (Entry<String, String> it : cacheData.entrySet()) {\n\t\t\tdata.add(new KVBean(it.getKey(), it.getValue()));\n\t\t}\n\t\t\n\t\treturn data;\n\t}\n\t\n}\n```\n\n- 第一次在浏览器中输入\n`http://localhost:8080/plainWebApi/test/test_cache?key=1&value=1`\n返回\n`[{\"key\":\"1\",\"value\":\"1\",\"next\":null}]`\n第二次在浏览器中输入\n`http://localhost:8080/plainWebApi/test/test_cache?key=2&value=2`\n返回\n`[{\"key\":\"1\",\"value\":\"1\",\"next\":null},{\"key\":\"2\",\"value\":\"2\",\"next\":null}]`\n可见对于两次请求cacheData都是同一个对象，TestController当然也没有被new。\n\n- 增加`@Scope(value = \"prototype\")`的TestController如下\n```java\n@Controller\n@RequestMapping(\"/test\")\n@Api(basePath = \"/test\", value = \"test\", description = \"测试相关接口\", position = 8)\n@Scope(value = \"prototype\")\npublic class TestController {\n\t\n\tprivate Map<String, String> cacheData = Collections.synchronizedMap(new HashMap<String, String>());\n\n\t@ResponseBody\n\t@RequestMapping(value = \"/test_cache\", method = RequestMethod.GET, produces = \"application/json; charset=utf-8\")\n\t@ApiOperation(value = \"测试scope\", notes = \"测试scope\", response = KVBean.class, responseContainer = \"List\")\n\tpublic List<KVBean> getTestCache(@RequestParam String key, @RequestParam String value) throws Exception {\n\t\t\n\t\tSystem.out.println(Thread.currentThread().getName());\n\t\tcacheData.put(key, value);\n\t\t\n\t\tList<KVBean> data = new ArrayList<KVBean>();\n\t\tfor (Entry<String, String> it : cacheData.entrySet()) {\n\t\t\tdata.add(new KVBean(it.getKey(), it.getValue()));\n\t\t}\n\t\t\n\t\treturn data;\n\t}\n\t\n}\n```\n\n- 同样第一次在浏览器中输入\n`http://localhost:8080/plainWebApi/test/test_cache?key=1&value=1`\n返回\n`[{\"key\":\"1\",\"value\":\"1\",\"next\":null}]`\n第二次在浏览器中输入\n`http://localhost:8080/plainWebApi/test/test_cache?key=2&value=2`\n返回\n`[{\"key\":\"2\",\"value\":\"2\",\"next\":null}]`\n可见对于两次请求cacheData都是不是一个对象，TestController当然也不是同一个。\n\n## 例子的详细代码\n\n- [点这里](https://github.com/toulezu/play/tree/master/plainWebApi)\n\n## 参考：\n- [Struts action的单例与多例](http://my.oschina.net/davidzhang/blog/67429)\n- [在spring来管理实例对象prototype和singleton的选择.针对action如何使用](http://www.cnblogs.com/shipengzhi/articles/2099694.html)\n- [Spring MVC Controller单例陷阱](http://lavasoft.blog.51cto.com/62575/1394669)\n- [struts+spring action应配置为scope=\"prototype\"](http://www.cnblogs.com/JemBai/archive/2010/11/10/1873954.html)\n- [struts2 Action获取表单数据](http://blog.csdn.net/lsh6688/article/details/7863322)\n","slug":"总结一下Spring中Bean的单例和多例","published":1,"updated":"2016-10-10T01:58:06.795Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj36mxs700021fwezv2ee838m","content":"<h2 id=\"关于Spring-bean的scope属性\"><a href=\"#关于Spring-bean的scope属性\" class=\"headerlink\" title=\"关于Spring bean的scope属性\"></a>关于Spring bean的scope属性</h2><ul>\n<li><p>Spring的bean默认是singleton-单例模式的，即Spring容器只存在一个共享的bean实例</p>\n</li>\n<li><p>对于singleton-单例模式，如果有共享变量会导致线程不安全</p>\n</li>\n<li><p>如果为prototype-原型模式，那么每次对bean的请求都会创建一个新的bean实例</p>\n</li>\n<li><p>prototype-原型模式是线程安全的，Spring中的Controller默认是singleton</p>\n</li>\n<li><p>可以在类上面通过<code>@Scope(&quot;prototype&quot;)</code>设置为多例，或者在xml中设置<code>scope=&quot;prototype&quot;</code></p>\n</li>\n<li><p>singleton-单例模式相对prototype-原型模式性能更高，因为不会每次对bean的请求都会创建一个新的bean实例</p>\n</li>\n<li><p>二者选择的原则：有状态的bean都使用prototype，而对无状态的bean则应该使用singleton</p>\n</li>\n<li><p>有无状态是指bean中有无成员变量</p>\n</li>\n<li><p>Struts2的Action默认是多例的，原因在于Struts2将表单数据作为Action的成员变量</p>\n</li>\n<li><p>scope还可以设置成request、session和global session</p>\n</li>\n</ul>\n<h2 id=\"举例说明Controller的singleton和prototype的区别\"><a href=\"#举例说明Controller的singleton和prototype的区别\" class=\"headerlink\" title=\"举例说明Controller的singleton和prototype的区别\"></a>举例说明Controller的singleton和prototype的区别</h2><ul>\n<li><p>TestController如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/test\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@Api</span>(basePath = <span class=\"string\">\"/test\"</span>, value = <span class=\"string\">\"test\"</span>, description = <span class=\"string\">\"测试相关接口\"</span>, position = <span class=\"number\">8</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestController</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Map&lt;String, String&gt; cacheData = Collections.synchronizedMap(<span class=\"keyword\">new</span> HashMap&lt;String, String&gt;());</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">\t<span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/test_cache\"</span>, method = RequestMethod.GET, produces = <span class=\"string\">\"application/json; charset=utf-8\"</span>)</span><br><span class=\"line\">\t<span class=\"meta\">@ApiOperation</span>(value = <span class=\"string\">\"测试scope\"</span>, notes = <span class=\"string\">\"测试scope\"</span>, response = KVBean.class, responseContainer = <span class=\"string\">\"List\"</span>)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> List&lt;KVBean&gt; <span class=\"title\">getTestCache</span><span class=\"params\">(@RequestParam String key, @RequestParam String value)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(Thread.currentThread().getName());</span><br><span class=\"line\">\t\tcacheData.put(key, value);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tList&lt;KVBean&gt; data = <span class=\"keyword\">new</span> ArrayList&lt;KVBean&gt;();</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (Entry&lt;String, String&gt; it : cacheData.entrySet()) &#123;</span><br><span class=\"line\">\t\t\tdata.add(<span class=\"keyword\">new</span> KVBean(it.getKey(), it.getValue()));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> data;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>第一次在浏览器中输入<br><code>http://localhost:8080/plainWebApi/test/test_cache?key=1&amp;value=1</code><br>返回<br><code>[{&quot;key&quot;:&quot;1&quot;,&quot;value&quot;:&quot;1&quot;,&quot;next&quot;:null}]</code><br>第二次在浏览器中输入<br><code>http://localhost:8080/plainWebApi/test/test_cache?key=2&amp;value=2</code><br>返回<br><code>[{&quot;key&quot;:&quot;1&quot;,&quot;value&quot;:&quot;1&quot;,&quot;next&quot;:null},{&quot;key&quot;:&quot;2&quot;,&quot;value&quot;:&quot;2&quot;,&quot;next&quot;:null}]</code><br>可见对于两次请求cacheData都是同一个对象，TestController当然也没有被new。</p>\n</li>\n<li><p>增加<code>@Scope(value = &quot;prototype&quot;)</code>的TestController如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/test\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@Api</span>(basePath = <span class=\"string\">\"/test\"</span>, value = <span class=\"string\">\"test\"</span>, description = <span class=\"string\">\"测试相关接口\"</span>, position = <span class=\"number\">8</span>)</span><br><span class=\"line\"><span class=\"meta\">@Scope</span>(value = <span class=\"string\">\"prototype\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestController</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Map&lt;String, String&gt; cacheData = Collections.synchronizedMap(<span class=\"keyword\">new</span> HashMap&lt;String, String&gt;());</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">\t<span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/test_cache\"</span>, method = RequestMethod.GET, produces = <span class=\"string\">\"application/json; charset=utf-8\"</span>)</span><br><span class=\"line\">\t<span class=\"meta\">@ApiOperation</span>(value = <span class=\"string\">\"测试scope\"</span>, notes = <span class=\"string\">\"测试scope\"</span>, response = KVBean.class, responseContainer = <span class=\"string\">\"List\"</span>)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> List&lt;KVBean&gt; <span class=\"title\">getTestCache</span><span class=\"params\">(@RequestParam String key, @RequestParam String value)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(Thread.currentThread().getName());</span><br><span class=\"line\">\t\tcacheData.put(key, value);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tList&lt;KVBean&gt; data = <span class=\"keyword\">new</span> ArrayList&lt;KVBean&gt;();</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (Entry&lt;String, String&gt; it : cacheData.entrySet()) &#123;</span><br><span class=\"line\">\t\t\tdata.add(<span class=\"keyword\">new</span> KVBean(it.getKey(), it.getValue()));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> data;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>同样第一次在浏览器中输入<br><code>http://localhost:8080/plainWebApi/test/test_cache?key=1&amp;value=1</code><br>返回<br><code>[{&quot;key&quot;:&quot;1&quot;,&quot;value&quot;:&quot;1&quot;,&quot;next&quot;:null}]</code><br>第二次在浏览器中输入<br><code>http://localhost:8080/plainWebApi/test/test_cache?key=2&amp;value=2</code><br>返回<br><code>[{&quot;key&quot;:&quot;2&quot;,&quot;value&quot;:&quot;2&quot;,&quot;next&quot;:null}]</code><br>可见对于两次请求cacheData都是不是一个对象，TestController当然也不是同一个。</p>\n</li>\n</ul>\n<h2 id=\"例子的详细代码\"><a href=\"#例子的详细代码\" class=\"headerlink\" title=\"例子的详细代码\"></a>例子的详细代码</h2><ul>\n<li><a href=\"https://github.com/toulezu/play/tree/master/plainWebApi\" target=\"_blank\" rel=\"external\">点这里</a></li>\n</ul>\n<h2 id=\"参考：\"><a href=\"#参考：\" class=\"headerlink\" title=\"参考：\"></a>参考：</h2><ul>\n<li><a href=\"http://my.oschina.net/davidzhang/blog/67429\" target=\"_blank\" rel=\"external\">Struts action的单例与多例</a></li>\n<li><a href=\"http://www.cnblogs.com/shipengzhi/articles/2099694.html\" target=\"_blank\" rel=\"external\">在spring来管理实例对象prototype和singleton的选择.针对action如何使用</a></li>\n<li><a href=\"http://lavasoft.blog.51cto.com/62575/1394669\" target=\"_blank\" rel=\"external\">Spring MVC Controller单例陷阱</a></li>\n<li><a href=\"http://www.cnblogs.com/JemBai/archive/2010/11/10/1873954.html\" target=\"_blank\" rel=\"external\">struts+spring action应配置为scope=”prototype”</a></li>\n<li><a href=\"http://blog.csdn.net/lsh6688/article/details/7863322\" target=\"_blank\" rel=\"external\">struts2 Action获取表单数据</a></li>\n</ul>\n","excerpt":"","more":"<h2 id=\"关于Spring-bean的scope属性\"><a href=\"#关于Spring-bean的scope属性\" class=\"headerlink\" title=\"关于Spring bean的scope属性\"></a>关于Spring bean的scope属性</h2><ul>\n<li><p>Spring的bean默认是singleton-单例模式的，即Spring容器只存在一个共享的bean实例</p>\n</li>\n<li><p>对于singleton-单例模式，如果有共享变量会导致线程不安全</p>\n</li>\n<li><p>如果为prototype-原型模式，那么每次对bean的请求都会创建一个新的bean实例</p>\n</li>\n<li><p>prototype-原型模式是线程安全的，Spring中的Controller默认是singleton</p>\n</li>\n<li><p>可以在类上面通过<code>@Scope(&quot;prototype&quot;)</code>设置为多例，或者在xml中设置<code>scope=&quot;prototype&quot;</code></p>\n</li>\n<li><p>singleton-单例模式相对prototype-原型模式性能更高，因为不会每次对bean的请求都会创建一个新的bean实例</p>\n</li>\n<li><p>二者选择的原则：有状态的bean都使用prototype，而对无状态的bean则应该使用singleton</p>\n</li>\n<li><p>有无状态是指bean中有无成员变量</p>\n</li>\n<li><p>Struts2的Action默认是多例的，原因在于Struts2将表单数据作为Action的成员变量</p>\n</li>\n<li><p>scope还可以设置成request、session和global session</p>\n</li>\n</ul>\n<h2 id=\"举例说明Controller的singleton和prototype的区别\"><a href=\"#举例说明Controller的singleton和prototype的区别\" class=\"headerlink\" title=\"举例说明Controller的singleton和prototype的区别\"></a>举例说明Controller的singleton和prototype的区别</h2><ul>\n<li><p>TestController如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/test\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@Api</span>(basePath = <span class=\"string\">\"/test\"</span>, value = <span class=\"string\">\"test\"</span>, description = <span class=\"string\">\"测试相关接口\"</span>, position = <span class=\"number\">8</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestController</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Map&lt;String, String&gt; cacheData = Collections.synchronizedMap(<span class=\"keyword\">new</span> HashMap&lt;String, String&gt;());</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">\t<span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/test_cache\"</span>, method = RequestMethod.GET, produces = <span class=\"string\">\"application/json; charset=utf-8\"</span>)</span><br><span class=\"line\">\t<span class=\"meta\">@ApiOperation</span>(value = <span class=\"string\">\"测试scope\"</span>, notes = <span class=\"string\">\"测试scope\"</span>, response = KVBean.class, responseContainer = <span class=\"string\">\"List\"</span>)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> List&lt;KVBean&gt; <span class=\"title\">getTestCache</span><span class=\"params\">(@RequestParam String key, @RequestParam String value)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(Thread.currentThread().getName());</span><br><span class=\"line\">\t\tcacheData.put(key, value);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tList&lt;KVBean&gt; data = <span class=\"keyword\">new</span> ArrayList&lt;KVBean&gt;();</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (Entry&lt;String, String&gt; it : cacheData.entrySet()) &#123;</span><br><span class=\"line\">\t\t\tdata.add(<span class=\"keyword\">new</span> KVBean(it.getKey(), it.getValue()));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> data;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>第一次在浏览器中输入<br><code>http://localhost:8080/plainWebApi/test/test_cache?key=1&amp;value=1</code><br>返回<br><code>[{&quot;key&quot;:&quot;1&quot;,&quot;value&quot;:&quot;1&quot;,&quot;next&quot;:null}]</code><br>第二次在浏览器中输入<br><code>http://localhost:8080/plainWebApi/test/test_cache?key=2&amp;value=2</code><br>返回<br><code>[{&quot;key&quot;:&quot;1&quot;,&quot;value&quot;:&quot;1&quot;,&quot;next&quot;:null},{&quot;key&quot;:&quot;2&quot;,&quot;value&quot;:&quot;2&quot;,&quot;next&quot;:null}]</code><br>可见对于两次请求cacheData都是同一个对象，TestController当然也没有被new。</p>\n</li>\n<li><p>增加<code>@Scope(value = &quot;prototype&quot;)</code>的TestController如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/test\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@Api</span>(basePath = <span class=\"string\">\"/test\"</span>, value = <span class=\"string\">\"test\"</span>, description = <span class=\"string\">\"测试相关接口\"</span>, position = <span class=\"number\">8</span>)</span><br><span class=\"line\"><span class=\"meta\">@Scope</span>(value = <span class=\"string\">\"prototype\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestController</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Map&lt;String, String&gt; cacheData = Collections.synchronizedMap(<span class=\"keyword\">new</span> HashMap&lt;String, String&gt;());</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">\t<span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/test_cache\"</span>, method = RequestMethod.GET, produces = <span class=\"string\">\"application/json; charset=utf-8\"</span>)</span><br><span class=\"line\">\t<span class=\"meta\">@ApiOperation</span>(value = <span class=\"string\">\"测试scope\"</span>, notes = <span class=\"string\">\"测试scope\"</span>, response = KVBean.class, responseContainer = <span class=\"string\">\"List\"</span>)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> List&lt;KVBean&gt; <span class=\"title\">getTestCache</span><span class=\"params\">(@RequestParam String key, @RequestParam String value)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(Thread.currentThread().getName());</span><br><span class=\"line\">\t\tcacheData.put(key, value);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tList&lt;KVBean&gt; data = <span class=\"keyword\">new</span> ArrayList&lt;KVBean&gt;();</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (Entry&lt;String, String&gt; it : cacheData.entrySet()) &#123;</span><br><span class=\"line\">\t\t\tdata.add(<span class=\"keyword\">new</span> KVBean(it.getKey(), it.getValue()));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> data;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>同样第一次在浏览器中输入<br><code>http://localhost:8080/plainWebApi/test/test_cache?key=1&amp;value=1</code><br>返回<br><code>[{&quot;key&quot;:&quot;1&quot;,&quot;value&quot;:&quot;1&quot;,&quot;next&quot;:null}]</code><br>第二次在浏览器中输入<br><code>http://localhost:8080/plainWebApi/test/test_cache?key=2&amp;value=2</code><br>返回<br><code>[{&quot;key&quot;:&quot;2&quot;,&quot;value&quot;:&quot;2&quot;,&quot;next&quot;:null}]</code><br>可见对于两次请求cacheData都是不是一个对象，TestController当然也不是同一个。</p>\n</li>\n</ul>\n<h2 id=\"例子的详细代码\"><a href=\"#例子的详细代码\" class=\"headerlink\" title=\"例子的详细代码\"></a>例子的详细代码</h2><ul>\n<li><a href=\"https://github.com/toulezu/play/tree/master/plainWebApi\">点这里</a></li>\n</ul>\n<h2 id=\"参考：\"><a href=\"#参考：\" class=\"headerlink\" title=\"参考：\"></a>参考：</h2><ul>\n<li><a href=\"http://my.oschina.net/davidzhang/blog/67429\">Struts action的单例与多例</a></li>\n<li><a href=\"http://www.cnblogs.com/shipengzhi/articles/2099694.html\">在spring来管理实例对象prototype和singleton的选择.针对action如何使用</a></li>\n<li><a href=\"http://lavasoft.blog.51cto.com/62575/1394669\">Spring MVC Controller单例陷阱</a></li>\n<li><a href=\"http://www.cnblogs.com/JemBai/archive/2010/11/10/1873954.html\">struts+spring action应配置为scope=”prototype”</a></li>\n<li><a href=\"http://blog.csdn.net/lsh6688/article/details/7863322\">struts2 Action获取表单数据</a></li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cj36mxs170005fwez6g7rfbdi","category_id":"cj36mxs150003fwezyztz10wl","_id":"cj36mxs1h000bfwezrf3mmfj2"},{"post_id":"cj36mxs0u0000fwezkprdxwe9","category_id":"cj36mxs150003fwezyztz10wl","_id":"cj36mxs1p000gfwez36z7om4q"},{"post_id":"cj36mxs1b0007fwez3i3hdhby","category_id":"cj36mxs150003fwezyztz10wl","_id":"cj36mxs1t000jfwezz328w0ss"},{"post_id":"cj36mxs1e000afwezftuqrfgs","category_id":"cj36mxs150003fwezyztz10wl","_id":"cj36mxs1x000nfweztzgylavt"},{"post_id":"cj36mxs0z0001fwez44tzs592","category_id":"cj36mxs150003fwezyztz10wl","_id":"cj36mxs1y000pfwezefwcyv7f"},{"post_id":"cj36mxs1h000cfwezkis8yc0a","category_id":"cj36mxs150003fwezyztz10wl","_id":"cj36mxs23000sfwezgyc81ulz"},{"post_id":"cj36mxs160004fwezmtgt1srz","category_id":"cj36mxs150003fwezyztz10wl","_id":"cj36mxs25000wfwezqnlx6tng"},{"post_id":"cj36mxs1x000ofwezy8sfm7ot","category_id":"cj36mxs150003fwezyztz10wl","_id":"cj36mxs27000yfwezojn12zzv"},{"post_id":"cj36mxs1p000hfwezp1pfnfhr","category_id":"cj36mxs1w000mfwez9xf4elks","_id":"cj36mxs280012fwezi97f0ry5"},{"post_id":"cj36mxs23000tfwezpxb041em","category_id":"cj36mxs150003fwezyztz10wl","_id":"cj36mxs290013fwezvmdz21b0"},{"post_id":"cj36mxs1u000kfwezvm97n7gl","category_id":"cj36mxs25000ufwezumj6anxh","_id":"cj36mxs2a0015fwez8g8gh4kx"},{"post_id":"cj36mxs1z000qfwezjnrqo0b3","category_id":"cj36mxs280010fwez58q4l90x","_id":"cj36mxs2a0016fwezwla0rehy"},{"post_id":"cj36mxs6w001zfwezw99wuehn","category_id":"cj36mxs150003fwezyztz10wl","_id":"cj36mxs790026fweze3buu38t"},{"post_id":"cj36mxs700021fwezv2ee838m","category_id":"cj36mxs150003fwezyztz10wl","_id":"cj36mxs7a0027fwez4uyj6igw"}],"PostTag":[{"post_id":"cj36mxs0u0000fwezkprdxwe9","tag_id":"cj36mxs120002fwezf8uws7ln","_id":"cj36mxs1e0009fwezdtjy2ncq"},{"post_id":"cj36mxs1e000afwezftuqrfgs","tag_id":"cj36mxs1a0006fwezk2loureb","_id":"cj36mxs1p000ffwez7j61kvdg"},{"post_id":"cj36mxs0z0001fwez44tzs592","tag_id":"cj36mxs1a0006fwezk2loureb","_id":"cj36mxs1s000ifwezpnq2ug8n"},{"post_id":"cj36mxs160004fwezmtgt1srz","tag_id":"cj36mxs1o000efwezsx5mot9b","_id":"cj36mxs25000vfwezc2peoi60"},{"post_id":"cj36mxs160004fwezmtgt1srz","tag_id":"cj36mxs1w000lfwez2ddduph2","_id":"cj36mxs27000xfwezozr7a0t7"},{"post_id":"cj36mxs23000tfwezpxb041em","tag_id":"cj36mxs1a0006fwezk2loureb","_id":"cj36mxs280011fwezwg0ac4f4"},{"post_id":"cj36mxs170005fwez6g7rfbdi","tag_id":"cj36mxs22000rfwezd9tej9yq","_id":"cj36mxs2b0018fwez5g04teqq"},{"post_id":"cj36mxs170005fwez6g7rfbdi","tag_id":"cj36mxs27000zfwezlg95kr6y","_id":"cj36mxs2b0019fwez77i7ao8e"},{"post_id":"cj36mxs170005fwez6g7rfbdi","tag_id":"cj36mxs290014fweztkklc02n","_id":"cj36mxs2c001bfwezbwfe6cyc"},{"post_id":"cj36mxs1b0007fwez3i3hdhby","tag_id":"cj36mxs2a0017fwezeq5oinnt","_id":"cj36mxs2c001cfwez3wm04fl2"},{"post_id":"cj36mxs1h000cfwezkis8yc0a","tag_id":"cj36mxs2b001afweza71h8f51","_id":"cj36mxs2d001ffweztfc3navc"},{"post_id":"cj36mxs1h000cfwezkis8yc0a","tag_id":"cj36mxs2c001dfwezxuzwqd20","_id":"cj36mxs2g001gfwezdabpeoqe"},{"post_id":"cj36mxs1p000hfwezp1pfnfhr","tag_id":"cj36mxs1a0006fwezk2loureb","_id":"cj36mxs2i001kfwezhxn82ie2"},{"post_id":"cj36mxs1p000hfwezp1pfnfhr","tag_id":"cj36mxs2d001efwezckh2urt7","_id":"cj36mxs2i001lfwezf0gwxsdc"},{"post_id":"cj36mxs1p000hfwezp1pfnfhr","tag_id":"cj36mxs2h001hfwezlo89jcpv","_id":"cj36mxs2j001nfwez2sua1tc3"},{"post_id":"cj36mxs1p000hfwezp1pfnfhr","tag_id":"cj36mxs2h001ifwezry0pui6i","_id":"cj36mxs2j001ofwezq9dkxkqb"},{"post_id":"cj36mxs1u000kfwezvm97n7gl","tag_id":"cj36mxs2i001jfwezybn2ay2b","_id":"cj36mxs2k001qfwezw70vga57"},{"post_id":"cj36mxs1x000ofwezy8sfm7ot","tag_id":"cj36mxs22000rfwezd9tej9yq","_id":"cj36mxs2l001tfwezq0j81smm"},{"post_id":"cj36mxs1x000ofwezy8sfm7ot","tag_id":"cj36mxs2j001pfwezu735nmoz","_id":"cj36mxs2m001ufweza011hzv2"},{"post_id":"cj36mxs1x000ofwezy8sfm7ot","tag_id":"cj36mxs2k001rfwezoljltfdc","_id":"cj36mxs2m001wfwez5s2jn3d9"},{"post_id":"cj36mxs1z000qfwezjnrqo0b3","tag_id":"cj36mxs2l001sfwez5etqe4e8","_id":"cj36mxs2n001xfwezx3jz0i2i"},{"post_id":"cj36mxs1z000qfwezjnrqo0b3","tag_id":"cj36mxs2c001dfwezxuzwqd20","_id":"cj36mxs2n001yfwezfm8ktqcd"},{"post_id":"cj36mxs700021fwezv2ee838m","tag_id":"cj36mxs2l001sfwez5etqe4e8","_id":"cj36mxs790025fwezin7z1ezr"},{"post_id":"cj36mxs6w001zfwezw99wuehn","tag_id":"cj36mxs2l001sfwez5etqe4e8","_id":"cj36mxs7a0028fwezt8ep65zp"},{"post_id":"cj36mxs6w001zfwezw99wuehn","tag_id":"cj36mxs760023fwez7x8vh94h","_id":"cj36mxs7b0029fwezeel6evem"}],"Tag":[{"name":"ELK","_id":"cj36mxs120002fwezf8uws7ln"},{"name":"Java","_id":"cj36mxs1a0006fwezk2loureb"},{"name":"Log4j","_id":"cj36mxs1o000efwezsx5mot9b"},{"name":"Logstash","_id":"cj36mxs1w000lfwez2ddduph2"},{"name":"Linux","_id":"cj36mxs22000rfwezd9tej9yq"},{"name":"MariaDB","_id":"cj36mxs27000zfwezlg95kr6y"},{"name":"MySql","_id":"cj36mxs290014fweztkklc02n"},{"name":"自动部署","_id":"cj36mxs2a0017fwezeq5oinnt"},{"name":"Maven","_id":"cj36mxs2b001afweza71h8f51"},{"name":"Junit","_id":"cj36mxs2c001dfwezxuzwqd20"},{"name":"Thread","_id":"cj36mxs2d001efwezckh2urt7"},{"name":"Runnable","_id":"cj36mxs2h001hfwezlo89jcpv"},{"name":"Executor","_id":"cj36mxs2h001ifwezry0pui6i"},{"name":"感想","_id":"cj36mxs2i001jfwezybn2ay2b"},{"name":"系统监控","_id":"cj36mxs2j001pfwezu735nmoz"},{"name":"Tomcat","_id":"cj36mxs2k001rfwezoljltfdc"},{"name":"Spring","_id":"cj36mxs2l001sfwez5etqe4e8"},{"name":"Annotation","_id":"cj36mxs760023fwez7x8vh94h"}]}}