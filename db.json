{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/wechatpay.jpg","path":"images/wechatpay.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1521291993099},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1521291993099},{"_id":"themes/next/.gitignore","hash":"ee0b13c268cc8695d3883a5da84930af02d4ed08","modified":1521295023628},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1471962406394},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1471962406396},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1471962406396},{"_id":"themes/next/.travis.yml","hash":"6674fbdfe0d0c03b8a04527ffb8ab66a94253acd","modified":1521295023630},{"_id":"themes/next/README.cn.md","hash":"87950c415dd162ff78e98b41f1148b85462103e2","modified":1521295023632},{"_id":"themes/next/README.md","hash":"927f82cfeb5969a89b815b5ec3a3f2881e3b1bb4","modified":1521295023635},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1521291993102},{"_id":"themes/next/bower.json","hash":"486ebd72068848c97def75f36b71cbec9bb359c5","modified":1521295023638},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1521291993101},{"_id":"themes/next/_config.yml","hash":"6f625cb4376f7f64b05879b021782d25e787cbe8","modified":1521347308038},{"_id":"themes/next/package.json","hash":"3963ad558a24c78a3fd4ef23cf5f73f421854627","modified":1521295023702},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1521291993104},{"_id":"source/_posts/AngularJS 知识点积累.md","hash":"21aa2db96d2fc392d2ba6c3691811cab89576127","modified":1514811341279},{"_id":"source/_posts/Java 分段从文件中读取数据的一个例子.md","hash":"87b9ad154fa14f9ff203190aeb330ac1eb9bb364","modified":1495809061382},{"_id":"source/_posts/Java 动态代理的应用.md","hash":"a7f7940f163752c4f7b2792705d5b1e694f644eb","modified":1521282981903},{"_id":"source/_posts/JavaScript 中对闭包和匿名函数的理解.md","hash":"49546686142dd9798ba3125848bf98cb91b6cfb9","modified":1514811341283},{"_id":"source/_posts/ELK：安装.md","hash":"5f2e685181557ec0ab6cafd94abfb01a619128a0","modified":1471959810703},{"_id":"themes/next/.javascript_ignore","hash":"cd250ad74ca22bd2c054476456a73d9687f05f87","modified":1521295023629},{"_id":"source/_posts/Java中的 synchronizd 关键字用法.md","hash":"51f607820bdb4ba3fbf07215ec453e6dff75846b","modified":1471959810704},{"_id":"source/_posts/Log4j向Logstash发送日志实践.md","hash":"57bfd219a21bc89610b2b020c9865409cd87e395","modified":1471959810704},{"_id":"source/_posts/MariaDB 在 RedHat Linux 上的安装过程以及 MySQL 相关命令的使用.md","hash":"07297aa5a447c60462c333775726b0587bc7b0fa","modified":1497967873891},{"_id":"source/_posts/PHP 基本语法.md","hash":"b27f6f8199b3eae01b3467bbab3f148593a19086","modified":1500736594039},{"_id":"source/_posts/Phabricator 在 Windows 环境上的部署与二次开发.md","hash":"df2d47fa8fd0cbc4cbc6dfb6bf7442e2c893044d","modified":1500944191532},{"_id":"source/_posts/Phabricator form 渲染的过程.txt","hash":"46d4a22e4a5aa150f9e05b5fef86efb9e041f3b2","modified":1514811341321},{"_id":"source/_posts/Phabricator 基本介绍.txt","hash":"831901f1b9ba01a2822f2365b70a0f18ba2d4edb","modified":1514811341342},{"_id":"source/_posts/Phabricator 在创建项目的时候自动创建一个 Herald 规则.md","hash":"e49e762c0a85e94e92d60c56d1f5ba1337e69cc3","modified":1500736209944},{"_id":"source/_posts/Phabricator 的任务 Maniphest 列表渲染过程.txt","hash":"d3e9409d81cf05a42ec90bc7cde095667e36f030","modified":1514811341362},{"_id":"source/_posts/Phabricator 的 conduit API 使用说明.md","hash":"ff1e253cd417889a97433356739dfd0bc40e3e85","modified":1514811341358},{"_id":"source/_posts/Swagger2 在 SpringMVC 项目中的应用.md","hash":"f440450cc5188634fcbfde2e7023ebde9ecb2233","modified":1497967873923},{"_id":"source/_posts/hexo的一些使用记录.txt","hash":"e19da419affd4dbce2faa1605571917b11be0d61","modified":1471959810705},{"_id":"source/_posts/mybatis-generator 学习笔记.txt","hash":"6d64bf683e96208cbfa0fd662b5738c4a3e441b6","modified":1471959810705},{"_id":"source/_posts/php 安装遇到的一些问题.txt","hash":"1f063c596153b3351e39ea77e62e22fb0e3d250f","modified":1514811341394},{"_id":"source/_posts/windows下自动上传war到Linux服务器，自动部署，自动重启Tomcat的系列脚本.md","hash":"e7f094e6a7a286904ca68ba96d0db2e499e290e2","modified":1497967873937},{"_id":"source/_posts/一个从 Jar 文件中获取所有的类路径的工具类.md","hash":"70123de55606a233f848f4718f8dbd9247edab6f","modified":1495809331154},{"_id":"source/_posts/web框架设计.txt","hash":"e6846e349ab2509144111c650833f1114335ef52","modified":1514811341401},{"_id":"source/_posts/一次恢复误删除 git 提交的经历.md","hash":"05d178b9a967eac26658c92d648f025a47fd3757","modified":1521282981903},{"_id":"source/_posts/使用Maven的profile和testResource进行Junit单元测试.md","hash":"c12844f062eace40453ae6d9f17817e3e3623d1d","modified":1471959810705},{"_id":"source/_posts/关于Java多线程在提升程序性能上的一些实践.md","hash":"04c5ac9fff38ed7068f848080fa4edeb16d61160","modified":1472963377309},{"_id":"source/_posts/关于分布式计算的一些猜想.txt","hash":"1591ed8984abaa4425a0fd911b817768aee2c0e4","modified":1497967873972},{"_id":"source/_posts/写在github上的第一篇博客.md","hash":"23acd9bfcf6e1c15d48e69bf97bf5cbe22fee3d6","modified":1471959810706},{"_id":"source/_posts/在 Java 中通过注解处理器来生成源代码-第一部分_注解类型.txt","hash":"19f7e410a4b9c22cfc7f6da82dfd12322f58f4a1","modified":1514811341469},{"_id":"source/_posts/在 Linux 上监控 Tomcat 是否关闭, 如果关闭自动重启.md","hash":"b3e94fead9850c663a0d1b2fa5b42480d50c3f0e","modified":1497967873974},{"_id":"source/_posts/在 Phabricator workborad 的卡片上显示开始和结束时间.md","hash":"50a77c9a340fabb1c3dd5d5fa9a3cdf191b97383","modified":1514811341541},{"_id":"source/_posts/在 Phabricator 中控制不同类型的任务表单 status 字段显示不同的选项列表.md","hash":"6d53844a0b1aa9afe1f8f628060d508ac6f04d60","modified":1514811341560},{"_id":"source/_posts/在 Phabricator 任务详情页右边增加创建子任务的快捷链接.md","hash":"5d2e129938ce2224a91b94e447f621cb32163066","modified":1514811341575},{"_id":"source/_posts/在 Phabricator 项目列表中增加任务数和最新任务的链接.md","hash":"0e2b5d3d48f52c04368e7ec364c2f99776d38bd8","modified":1500944377189},{"_id":"source/_posts/在Junit单元测试中通过@PropertySource来获取Bean中的@Value属性值.md","hash":"2f6d5c993ca032f8c5f0f341b6d8362a15277f65","modified":1497967873992},{"_id":"source/_posts/基于通过不同数据库之间数据对比来验证业务逻辑是否正常的测试技术.txt","hash":"d661608b6c75bd54685855fa17d6e757d37470a9","modified":1514811341579},{"_id":"source/_posts/对 Spring 中一些常见的 Annotation 的理解.md","hash":"7934d521aac4df2adcfc0930a3248383404e9c79","modified":1497967874004},{"_id":"source/_posts/对于缓存的一些认识.txt","hash":"14208c99da46c9eb501ee72d3b8e73aa88594337","modified":1471959810706},{"_id":"source/_posts/对循环冗余校验码CRC的理解.md","hash":"3b7df4e9e907f3de0508fd014c3a1ba391d35ca6","modified":1514811341586},{"_id":"source/_posts/对锁的理解.md","hash":"6cb74f30625825c262459a62c889261e206a3e6a","modified":1497967874006},{"_id":"source/_posts/总结 git 中有关远端仓库和本地仓库的命令.md","hash":"800160034b8a28e2fca9d3b81878cadb7c072c0e","modified":1523364693936},{"_id":"source/_posts/总结一下Spring中Bean的单例和多例.md","hash":"51fbc3b37c73acf343a7bb0089fb7b0851f83e29","modified":1471959810706},{"_id":"source/about/index.md","hash":"ef2c387edddc3d940ac288021f4c4fa42006e4da","modified":1521282981951},{"_id":"source/categories/index.md","hash":"d84141743ecdebfbbfa470778b7bb54c27714119","modified":1472910579410},{"_id":"themes/next/.git/HEAD","hash":"c67f2d1036a124632afbc0f59a27e2a30128f22c","modified":1521295023811},{"_id":"themes/next/.git/ORIG_HEAD","hash":"4036989c0aea84d2b33d84e5f7e3607aed3bda6b","modified":1521294529203},{"_id":"themes/next/.git/config","hash":"a0c1851398e394e5f216a4de1144013d0e3a1b18","modified":1521346821870},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1471961871586},{"_id":"themes/next/.git/FETCH_HEAD","hash":"b0bb17e0a18d32645345e0d38d4e5a66648ec56f","modified":1521374639752},{"_id":"themes/next/.git/index","hash":"76660bd7299ea746affa1f2330c5c7b3cff176a3","modified":1521346813870},{"_id":"themes/next/.git/packed-refs","hash":"5299dd07c22750af4a0d99f89ea2c8e2d52787e3","modified":1471962406360},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5adfad3ef1b870063e621bc0838268eb2c7c697a","modified":1521291993100},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"b1ec000babd42bb7ffd26f5ad8aac9b5bec79ae5","modified":1521295023624},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1228506a940114288d61812bfe60c045a0abeac1","modified":1521295023624},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1521295023625},{"_id":"themes/next/.git/sourcetreeconfig","hash":"b4898cfc65a6578220149b8ecddf7f2c53568011","modified":1521450755477},{"_id":"themes/next/languages/de.yml","hash":"fd02d9c2035798d5dc7c1a96b4c3e24b05b31a47","modified":1521295023639},{"_id":"themes/next/.git/COMMIT_EDITMSG","hash":"4f262355952656f51006d23d9e8c14abb1723acf","modified":1521346813874},{"_id":"themes/next/languages/default.yml","hash":"b3bcd8934327448a43d9bfada5dd11b1b8c1402e","modified":1521295023642},{"_id":"themes/next/languages/id.yml","hash":"dccae33e2a5b3c9f11c0e05ec4a7201af1b25745","modified":1521295023652},{"_id":"themes/next/languages/en.yml","hash":"2f4b4776ca1a08cc266a19afb0d1350a3926f42c","modified":1521295023650},{"_id":"themes/next/languages/it.yml","hash":"a215d016146b1bd92cef046042081cbe0c7f976f","modified":1521295023653},{"_id":"themes/next/languages/fr-FR.yml","hash":"efeeb55d5c4add54ad59a612fc0630ee1300388c","modified":1521295023651},{"_id":"themes/next/languages/ko.yml","hash":"dc8f3e8c64eb7c4bb2385025b3006b8efec8b31d","modified":1521295023656},{"_id":"themes/next/languages/nl-NL.yml","hash":"213e7a002b82fb265f69dabafbbc382cfd460030","modified":1521295023658},{"_id":"themes/next/languages/pt.yml","hash":"2efcd240c66ab1a122f061505ca0fb1e8819877b","modified":1521295023662},{"_id":"themes/next/languages/ja.yml","hash":"37f954e47a3bc669620ca559e3edb3b0072a4be5","modified":1521295023654},{"_id":"themes/next/languages/ru.yml","hash":"e33ee44e80f82e329900fc41eb0bb6823397a4d6","modified":1521295023663},{"_id":"themes/next/languages/pt-BR.yml","hash":"568d494a1f37726a5375b11452a45c71c3e2852d","modified":1521295023662},{"_id":"themes/next/languages/zh-Hans.yml","hash":"66b9b42f143c3cb2f782a94abd4c4cbd5fd7f55f","modified":1521295023665},{"_id":"themes/next/languages/zh-hk.yml","hash":"fe0d45807d015082049f05b54714988c244888da","modified":1521295023666},{"_id":"themes/next/languages/vi.yml","hash":"a9b89ebd3e5933033d1386c7c56b66c44aca299a","modified":1521295023664},{"_id":"themes/next/layout/_layout.swig","hash":"2164570bb05db11ee4bcfbbb5d183a759afe9d07","modified":1521295023668},{"_id":"themes/next/layout/archive.swig","hash":"9a2c14874a75c7085d2bada5e39201d3fc4fd2b4","modified":1521295023691},{"_id":"themes/next/layout/category.swig","hash":"3cbb3f72429647411f9e85f2544bdf0e3ad2e6b2","modified":1521295023692},{"_id":"themes/next/layout/index.swig","hash":"555a357ecf17128db4e29346c92bb6298e66547a","modified":1521295023693},{"_id":"themes/next/languages/zh-tw.yml","hash":"432463b481e105073accda16c3e590e54c8e7b74","modified":1521295023667},{"_id":"themes/next/layout/post.swig","hash":"7a6ce102ca82c3a80f776e555dddae1a9981e1ed","modified":1521295023695},{"_id":"themes/next/layout/schedule.swig","hash":"87ad6055df01fa2e63e51887d34a2d8f0fbd2f5a","modified":1521295023700},{"_id":"themes/next/scripts/merge-configs.js","hash":"38d86aab4fc12fb741ae52099be475196b9db972","modified":1521295023703},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1521291993268},{"_id":"themes/next/layout/tag.swig","hash":"34e1c016cbdf94a31f9c5d494854ff46b2a182e9","modified":1521295023701},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1471962406534},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1471962406534},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1471962406535},{"_id":"source/tags/index.md","hash":"001dd6f79652a835368f5279aa9983ceb9565307","modified":1472910665889},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1471962406473},{"_id":"themes/next/layout/page.swig","hash":"e8fcaa641d46930237675d2ad4b56964d9e262e9","modified":1521295023694},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1471961871587},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1471961871587},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1471961871588},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1471961871588},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1471961871589},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1471961871589},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1471961871590},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1471961871588},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1471961871590},{"_id":"themes/next/.git/logs/HEAD","hash":"fdfd5f322e86f8171858fe209096a1c671ac744b","modified":1521346813894},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1471961871587},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1521291993110},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1521291993111},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1521291993111},{"_id":"themes/next/layout/_macro/reward.swig","hash":"357d86ec9586705bfbb2c40a8c7d247a407db21a","modified":1521295023672},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"9c7343fd470e0943ebd75f227a083a980816290b","modified":1521295023673},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"e2e4eae391476da994045ed4c7faf5e05aca2cd7","modified":1521295023673},{"_id":"themes/next/layout/_macro/post.swig","hash":"4ba938822d56c597490f0731893eaa2443942e0f","modified":1521295023670},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4adc65a602d1276615da3b887dcbf2ac68e7382b","modified":1521295023674},{"_id":"themes/next/layout/_partials/footer.swig","hash":"26e93336dc57a39590ba8dc80564a1d2ad5ff93b","modified":1521295023675},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1521291993115},{"_id":"themes/next/layout/_partials/header.swig","hash":"c54b32263bc8d75918688fb21f795103b3f57f03","modified":1521295023677},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"f83befdc740beb8dc88805efd7fbb0fef9ed19be","modified":1521295023669},{"_id":"themes/next/layout/_partials/head.swig","hash":"f14a39dad1ddd98e6d3ceb25dda092ba80d391b5","modified":1521295023676},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1521291993115},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1471962406415},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1471962406415},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1521291993251},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9be624634703be496a5d2535228bc568a8373af9","modified":1521295023679},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1521291993251},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"fa882641da3bd83d9a58a8a97f9d4c62a9ee7b5c","modified":1521295023690},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1521291993251},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1521291993251},{"_id":"themes/next/scripts/tags/button.js","hash":"eddbb612c15ac27faf11c59c019ce188f33dec2c","modified":1521295023704},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1471962406429},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1521291993269},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1521291993269},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1471962406430},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1521291993252},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1521291993269},{"_id":"themes/next/scripts/tags/tabs.js","hash":"aa7fc94a5ec27737458d9fe1a75c0db7593352fd","modified":1521295023706},{"_id":"themes/next/scripts/tags/label.js","hash":"6f00952d70aadece844ce7fd27adc52816cc7374","modified":1521295023704},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1471962406410},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1471962406473},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1521295023779},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1471962406474},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1521295023778},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1521291993252},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1471962406475},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1471962406475},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1471962406476},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1471962406476},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1471962406474},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1521295023779},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1521295023780},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1471962406477},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1471962406477},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1471962406477},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1471962406478},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1471962406478},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1521295023783},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1471962406479},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1471962406479},{"_id":"themes/next/scripts/tags/note.js","hash":"f7eae135f35cdab23728e9d0d88b76e00715faa0","modified":1521295023705},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1471962406417},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1471962406417},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1471962406458},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1471962406458},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1471962406459},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1471962406471},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1471962406472},{"_id":"themes/next/.git/objects/00/7a6bf1cd0051c904d7491c5ef40276e1e91115","hash":"2072ccd9425fdec1958c0f7c5718ad463207778a","modified":1521292047000},{"_id":"themes/next/.git/objects/00/265601d71a6cff7a8a9167a591f965ae3c7fd3","hash":"81c422aba8de1a724975bc2099bdf88d3157c7b6","modified":1514800538766},{"_id":"themes/next/.git/objects/00/4e1b2e0df9618190a00647b3a45dc6faca61c9","hash":"8c080c72fe9bf0169468d3086dbce97b7257e332","modified":1514105914817},{"_id":"themes/next/.git/objects/01/ddd51100a89be32193a2868c7c19ce75881704","hash":"a1b81dbe5de0d342103d3c4c09720482ce445070","modified":1500944095607},{"_id":"themes/next/.git/objects/00/e245f6b6b4948b32e2107d241bef507c876790","hash":"47ec8b8121ec2d504250d17d380e55bad7bf322c","modified":1502528144542},{"_id":"themes/next/.git/objects/02/1c635123f51bf6720f8cb8ac4753bcfbfca533","hash":"8a8254427027ce1f4c09148a4941825f12d8f013","modified":1520752471564},{"_id":"themes/next/.git/objects/02/2fed6cfdaece89f9e90a109991dea9457d7c7c","hash":"f4f4892273f96ff15ee6354eeb3dbaef65c6870d","modified":1503448901970},{"_id":"themes/next/.git/objects/00/b1d8eb2a9374727d1563b318f24d75c9c9dc53","hash":"535a3c4f011213092e13dc8b2b239f607d38897a","modified":1500944095629},{"_id":"themes/next/.git/objects/02/ada816ceb1639625bedb3274e85be105d17912","hash":"59f81604a03552fce40770950b46f1a23c136ac9","modified":1521292047000},{"_id":"themes/next/.git/objects/02/49c5c48c9860469d76c14487101d06702b167d","hash":"8ea00b280be279e6d581b83e35ebe8820382ee3a","modified":1500944095589},{"_id":"themes/next/.git/objects/02/c79d6e2abfabac5976a0bf91b4da8e4d9e8090","hash":"f29258226286b4c974e51a8fdea4e945c9c8002d","modified":1521291751000},{"_id":"themes/next/.git/objects/02/8fe5deab4d5a11be4c7035421c66bfd1b49d40","hash":"0cb09b1016e0b650f38257d3c3bec07fb4699ed6","modified":1502528144758},{"_id":"themes/next/.git/objects/03/ec627b9328c636fa2cc7db40ba7ce1f7b13899","hash":"1fb163752426d8668e11d2415093cca33ae87614","modified":1500944095712},{"_id":"themes/next/.git/objects/04/0f84b2ec588d48459950f2b257b0378762cdab","hash":"671336d17239e010f637363877797826f6afb685","modified":1504014817620},{"_id":"themes/next/.git/objects/04/9ec23e1a453579244009c60221c490fa3e0a39","hash":"9fbf616dc4e95685dc04b7000bc8f02e8af2cccc","modified":1520752471564},{"_id":"themes/next/.git/objects/05/2daf1c6eceb3ba0d48648ceb2aee99be080ffa","hash":"54c303854216a48cf302c1bf72d775e2c0ce8d9f","modified":1502528144665},{"_id":"themes/next/.git/objects/06/4d2fe5ecc66c2fa1cd92ac83403684a687e88d","hash":"7a849db44e9e5b077b38cf10efd81d225501f9f9","modified":1514800538789},{"_id":"themes/next/.git/objects/03/9b11a6c1f7fb18725b9133e1685c438c671893","hash":"44e7272e17f1c557bf1a7283c46a0e44c9becf8c","modified":1521292179418},{"_id":"themes/next/.git/objects/07/64b629c56fccf4d2dec9065b18f2ff6297c429","hash":"47494131daea1ce8dde27f5e8780ecacd96f648d","modified":1503825378368},{"_id":"themes/next/.git/objects/09/1b1b0fe978fdb9317ce1c795100e18c80cdc02","hash":"bc4137c435c08f7c64791d8371d67de7ed3747cd","modified":1503825378277},{"_id":"themes/next/.git/objects/07/4bd04fcefc75ddc5df094abe906cb5eb32b443","hash":"d7f28328d0b41614bc515cf3c206470c11c2902f","modified":1503448901718},{"_id":"themes/next/.git/objects/09/ef52e0ca3257c6492c62a194e58348c162705d","hash":"60a662156f892734cd3ab627b3918757986ff628","modified":1514800538763},{"_id":"themes/next/.git/objects/08/dbb09b5871821dc9885694ddce2b1364c40522","hash":"8db03dfb8c55e46bf7ce89d89a8da68b4139dc87","modified":1503825378294},{"_id":"themes/next/.git/objects/0a/85325fa522730f67c096c6c882eca1526ab38f","hash":"d96b2ecea8a834f543956a386cebc817feacc26a","modified":1520752472624},{"_id":"themes/next/.git/objects/0a/94e31004262d2f68f3c37bcdc950ebe8f24f1d","hash":"1f4a0920cc836585b3cc5d83f55d944cf67637c9","modified":1514105914922},{"_id":"themes/next/.git/objects/0a/9fc489f84636ef8713d3b823c549e34fe2eabb","hash":"d2dc6ab5ce9158a9b430a0b449a4416e7f382d69","modified":1500944095672},{"_id":"themes/next/.git/objects/0a/fa7fadac3952c9e1e0a796b31cb87fc1fce92b","hash":"3e56c2840fb032e3c8215bb5e2c7de69a9efed5a","modified":1520752472617},{"_id":"themes/next/.git/objects/0b/e37e77e84ced62bce966456c202a69dd8efe28","hash":"190869c95af622ff320a58a5ef3e50733563f0c0","modified":1502528144569},{"_id":"themes/next/.git/objects/0b/937e9e9dbc247075174c420f741abf5621d516","hash":"bde884f58172d6a8c32ff14ce43df9aed9c5c24f","modified":1500944095581},{"_id":"themes/next/.git/objects/0c/496ad8f9c86fc775562b133dd9e0b8c95ac0b4","hash":"c145bd42cc0965146aa3ad45038d6352656aa124","modified":1503448901950},{"_id":"themes/next/.git/objects/0c/ba32d5f9b0800f293c1d887ab56e5f6c12ffeb","hash":"9144b4356c52f97a783fa8c00c7606126866be9c","modified":1500944095627},{"_id":"themes/next/.git/objects/0c/bd330f0dc8461da39abfc26ca4abc741c6b754","hash":"f38148d037e1167fe9d1d57a61a51959b4c9d8d2","modified":1502528144685},{"_id":"themes/next/.git/objects/0d/68e8957974eb4b6d7962c9f3a964ab393595fc","hash":"7c3ef04037f6a16c97f0dae054faee7b96651d6a","modified":1500944095713},{"_id":"themes/next/.git/objects/0d/eb6bf03bd44985eefcbdf7c210c210fb5c7dca","hash":"5b8154b82242d290ae14c55271b6d928db86906b","modified":1503825378379},{"_id":"themes/next/.git/objects/0e/7c7d5f8ac96bd7a39233a9764a2cf6ffcf0ac6","hash":"72fae3405a7731aa54bedbb6bb0701c89c8d759b","modified":1502528144760},{"_id":"themes/next/.git/objects/0f/36819aacbbfe81c2e202f5a43cf72a52af1f2f","hash":"0b806ac52fbb3875fd49a2b22028aba1074623d0","modified":1520752472551},{"_id":"themes/next/.git/objects/0f/578aef4aa44c21d4ca3ee9c5af546d3a749b69","hash":"47fa6e8b8bb142fc72cf5e1301f964fe29c06c55","modified":1500944095591},{"_id":"themes/next/.git/objects/0f/6087967325135afcdd451f771c771279eafb78","hash":"2af6c2ab646baccc6fc129d0a1bc978110998f11","modified":1503825378432},{"_id":"themes/next/.git/objects/10/1fdc47024e84adeb7931b5f5dcc52ecc6e5e6a","hash":"913c7c88df8f60a44c6ec130b0ec4e9929f97fee","modified":1514105914727},{"_id":"themes/next/.git/objects/10/c1eb6e1777954207b4da55e7537c7402272713","hash":"5c2e7198e06e31fdd212fe2dc05760d8dd3ca4bf","modified":1514807153622},{"_id":"themes/next/.git/objects/00/b48fe11fb19f811665b9a255a0f67900e42a66","hash":"22ab9a564e043731b6e3bb5e8b11892b3ea1d16f","modified":1503448901902},{"_id":"themes/next/.git/objects/10/da0b7429333e18a79724045857409647023edb","hash":"3b083ddef6b893762e7c2b84bfe1dcab3352574b","modified":1502528144766},{"_id":"themes/next/.git/objects/10/686c35ebb383c467872d0af04e2a98714c2f0b","hash":"1a41f77429a82d303e7dc1e97389f22096ae9a2c","modified":1504102726476},{"_id":"themes/next/.git/objects/10/e682bf763b0cf945f7d4161b1426e9393c4ae1","hash":"8def946f8111c988adb4a5e9b76a5d7316283475","modified":1500944095671},{"_id":"themes/next/.git/objects/10/f5c496c6f06ac0ee5190a428277f46d5e290e8","hash":"dd0ab7d407446b4c927decb87071769b1fef35bc","modified":1502528144540},{"_id":"themes/next/.git/objects/11/8cc49af60f72b86fef3aa9fdbde6e0fb5fe6fa","hash":"b27590acbf8b8200c61ce6389567a2dfd90d7220","modified":1504102726413},{"_id":"themes/next/.git/objects/11/ae578362d5d97179712065ce64f83f07101fea","hash":"5d7343ae6596c53056e77c7608ca196f03e8aac6","modified":1514800538859},{"_id":"themes/next/.git/objects/12/8d447a115b433584ba7737121af7106bd857ab","hash":"d723301e12753b10befabe153bf91a0f12fa4651","modified":1514800538837},{"_id":"themes/next/.git/objects/12/b874777e44741fe825968481751e31615cde3a","hash":"ac3e603483827360a9ed9cda54e5e1d65033f81e","modified":1500944095691},{"_id":"themes/next/.git/objects/12/c66c8aea248bc9ea1ed228707fdb3aa53962b7","hash":"29908682920c65c83f5ddd81d93b3243cfc80cea","modified":1503448901909},{"_id":"themes/next/.git/objects/13/bb25c8f6b2d6a72fa6647c9221ef0e1275dc04","hash":"288904135b20c8e5633d20c82245003d63feee84","modified":1514105914971},{"_id":"themes/next/.git/objects/14/6e9b43b903fc1069fbeea5d8a6a68d6ab90c7f","hash":"0e70c1cc794026be269464fb83c45f217c80d38c","modified":1500944095625},{"_id":"themes/next/.git/objects/14/65797dd187ef95ef4897bb035b1158fe3b37f6","hash":"db374a52bbb03a6509a28a2504fc15a0c2c328bd","modified":1503448901868},{"_id":"themes/next/.git/objects/14/846e7da1fee49739a6c316d9efc986303e3222","hash":"71296a504503625cc3b58447e6da3bc36c738f03","modified":1503825378226},{"_id":"themes/next/.git/objects/15/a5e57031993d11e0cfafeb44c95b94d4e40d4e","hash":"6d240b49de26852f53e2378e09eade91b167282f","modified":1503825378246},{"_id":"themes/next/.git/objects/17/128668961a1fd1e7838244acd0749f4a00cf9a","hash":"82f7f7ca7fd53ffb8fdca210d50d1ff6bd906bad","modified":1503825378460},{"_id":"themes/next/.git/objects/18/40c080b8b679a458c4d6e335e157811cc8a8e5","hash":"c07ba1b3aff2ad8db8a882fdd717417a01249f16","modified":1504102726356},{"_id":"themes/next/.git/objects/1b/fb0a5b1145e1e3f972015fe03ebf2246d46dff","hash":"09bc444d4712053bba385d729fa575f07e31953f","modified":1521292047000},{"_id":"themes/next/.git/objects/18/e668663a9b960a899c9c2cbd782529f1c1c7db","hash":"35ee8d5d9df434f78e1c81393c1cf4ce702a4962","modified":1503825378394},{"_id":"themes/next/.git/objects/1a/40a6ac9d13906d98df4cfa611a96377e1b8ae3","hash":"9cf324d29a89d173855400ea34fd991e3bdac5e6","modified":1503825378301},{"_id":"themes/next/.git/objects/1c/720f1fe1fdf8a1c9a8fb3e299bf669b3ac35ad","hash":"cb71cf8565321cc7abfdf5080a54a7cee4d1c210","modified":1500944095583},{"_id":"themes/next/.git/objects/1a/da1656f16b23651ae9fbadb422ca7765349bd6","hash":"d57a9fa56bc7c3edcde07fbfc807161d49278463","modified":1520752471000},{"_id":"themes/next/.git/objects/1d/1d3521d446eaa365663a4d7b9d50be0bc9098f","hash":"15ab8c0d2b051a0ea7c6150d51f7d86180c14b38","modified":1520752472625},{"_id":"themes/next/.git/objects/1d/819e615a46cc4d59ef2dab22d8ada27bb90712","hash":"497bcc12d7dc68edc44a42c99efb0a7410529774","modified":1520752472550},{"_id":"themes/next/.git/objects/1d/b69f45483e88c5bdd3e816fed8126ec146f72c","hash":"ee35e2db2cff8414d85465c6afbf6f4ce110b2f7","modified":1502528144783},{"_id":"themes/next/.git/objects/1d/c2ade14fd33ebac8f539cfb504de8fd83f2b56","hash":"9c0c95e1f108d886a4d7f56a122b2ae20944319f","modified":1520752471596},{"_id":"themes/next/.git/objects/1d/46c266906e2067b06b4d39cce9cdd4994ac226","hash":"a4a2719cd33520789d01caa160689a005fa6746f","modified":1514105914906},{"_id":"themes/next/.git/objects/11/20c5201dbf513b32126faf61a8d6afac3d94a4","hash":"27607a86b80c1f1db11060d5a5f3f07a7fc6b336","modified":1514800543825},{"_id":"themes/next/.git/objects/1d/c4900c7e6628823aca34fcab099a30a768ff89","hash":"8e49616b197970d47912aa9519a0b91b005aab3d","modified":1502528144573},{"_id":"themes/next/.git/objects/1d/e8710c1bced1c6e3dcfaa0f7b79be16bec314b","hash":"c6937fc562f272d74fdf0a3a24daadf69a006407","modified":1514807152317},{"_id":"themes/next/.git/objects/21/964ef276086b439303d7c44798adf1252117f5","hash":"b51ce9fd143f7feb888dddb3bcb4bd2f2b765c9b","modified":1503825378291},{"_id":"themes/next/.git/objects/21/20a98c01800ccae14968a4336933075981d5f7","hash":"cb9c2a71966fc2de0af5b7d79fd80745163f146d","modified":1502528144658},{"_id":"themes/next/.git/objects/21/a80a0d962e3c370d19a87af3c2867af0c4e8de","hash":"319776ca27d57bedfb7a1c4b9b01a05debe8237c","modified":1504102726359},{"_id":"themes/next/.git/objects/22/9a98c6ca5f9e88eb90a0f57fafa0d2f9f57c06","hash":"76c35bcefe7592aaa2f1d3021d23154996f1fe5c","modified":1504102726364},{"_id":"themes/next/.git/objects/20/837462f7afadd87753ce170604c3c46c39c74f","hash":"b68b8c0d53ba09084df265d25c4e0fcef54f33c0","modified":1503825378231},{"_id":"themes/next/.git/objects/23/80ca69601f4ae81b4cd732b307efd70a50c8c7","hash":"122513de61a4b179deddfbc31948f64861f6e96b","modified":1503825378285},{"_id":"themes/next/.git/objects/1e/fdaf7175b7cd17e6ff3a9c10068c92d07e67fa","hash":"f564ab6383a261b0410826e528bfcf09e7aa858f","modified":1503448901941},{"_id":"themes/next/.git/objects/24/a1de344d0109dca48bfa1055045d96df2bad07","hash":"67dc555e66580c794125f8eaa6c4c5d49e7afaaf","modified":1514105914925},{"_id":"themes/next/.git/objects/25/fad9cf188c679a92ae048f35c5bad534e60ae1","hash":"b9ad7f814f993e065494f8ae4c85d33d388d325d","modified":1502528144607},{"_id":"themes/next/.git/objects/22/ea8f8527d46e38aaa2ac1e5db7600a59675fb2","hash":"95fc61dd9a2f915f9b3ef5bdc6e915e4002e20de","modified":1502528144635},{"_id":"themes/next/.git/objects/26/1a3481759f2f9e94ba2de3ec2265c90651325f","hash":"d43c071318fe08a4f7fd1da3506a9e93a40284da","modified":1503825378356},{"_id":"themes/next/.git/objects/23/f63b9023a2da94ce47fc12221bb1ecdbd69986","hash":"1434418023ac0dbee747a7d3fcd39fb723aafcfe","modified":1514800538765},{"_id":"themes/next/.git/objects/27/bd157dc3d02fc09642ef44d14b28ddce5fa3db","hash":"7fd14308509df0581c9099866ee9d74acf8de494","modified":1502528144730},{"_id":"themes/next/.git/objects/25/e7e8bc40d8783e754641986f046b16b488501a","hash":"8dc2569ce8635735421fb9ed94294e84ec0328df","modified":1521292047000},{"_id":"themes/next/.git/objects/28/aa5f9478a451e2eeb29df4bbd3a85a3ae2f6bb","hash":"9f3cd46484c9bf5ae1b61f3ad4181c9876d91804","modified":1514800543798},{"_id":"themes/next/.git/objects/26/ed0bf550d09279c048ea9fb3125359dd9c7b04","hash":"d6aadf3d1705b02abc73fecb036a2efb210449c4","modified":1504102726375},{"_id":"themes/next/.git/objects/29/c753eafb74ec88615f947d25acb4659340747d","hash":"5d0cc15f306cc2c34a9107c6aeb3576b90343956","modified":1500944095695},{"_id":"themes/next/.git/objects/27/e15f0ef90cb6486c49896bb408c4f4085e490d","hash":"6f97ba9227190a6b2f037e658c9a9f7550a48906","modified":1514800538859},{"_id":"themes/next/.git/objects/2a/732cc1a98f5f31556a3e7b75c02530c472f880","hash":"56c0b6c8a822b7198200c48b6f20c52993d2550d","modified":1503448901871},{"_id":"themes/next/.git/objects/29/2bd92759f2bf6744778e81b2fd1abe6a007f68","hash":"ea67f834ed803ad5777f0860ab6c5e062589ee14","modified":1504102726442},{"_id":"themes/next/.git/objects/2c/53a99fb9790b31f5034718dca1ab18fd1e19ac","hash":"d9d6cc859e54f77c95808957590521f05521b319","modified":1500944095692},{"_id":"themes/next/.git/objects/2a/0eff10fc052635885a0a8755dd254e33c37a94","hash":"be5bd2c5e352ce8a9962dc8b73c01be84ff2f49e","modified":1521292047000},{"_id":"themes/next/.git/objects/21/b8018054c81344f728165765a3177643a044d5","hash":"793851781ad3747ba505d6c10c1e2d0b46d71f57","modified":1514800543779},{"_id":"themes/next/.git/objects/2c/582fc3be1d54b82c7d6fa09e56265f479a8d59","hash":"fcf32797b9ada5484288414871aaa408c909cdfa","modified":1503825378395},{"_id":"themes/next/.git/objects/2a/803e4c033b1125f0c804c0ffde97995f855e0e","hash":"e7b710328309998d9e7814adde8157b0f240f1fa","modified":1502528144718},{"_id":"themes/next/.git/objects/2b/88c828e61fcef6e8416f6aadb4ed6af963aec3","hash":"3e9232d16a44508674b67c7fe5418bfb7294fbdc","modified":1514105914717},{"_id":"themes/next/.git/objects/2c/fbbdccfa3ae923ea8386d0eb203c92c2ca52a6","hash":"07689e24e48c88a85d888eafa4df511d8f3e52ce","modified":1514800538865},{"_id":"themes/next/.git/objects/2e/91ac6e59fea692a8ca503c258aee22a34e7b3e","hash":"57aa5a71235becc6ba44e76713351cd07b0704ca","modified":1504014817621},{"_id":"themes/next/.git/objects/2c/a4b1b2547f5f710d3248af1ae478ad7901d423","hash":"facb0b66c282db68fe43766ad992566d18cbe157","modified":1504014817573},{"_id":"themes/next/.git/objects/2d/eb7eaeebf2b6027d3795af39dd7ed738f05b3e","hash":"d925c7fbbcc5dfb012c47a01bb778d7eb966d23b","modified":1514800543779},{"_id":"themes/next/.git/objects/2f/12b20270cb185e6d781a2eb30eb54f55be505c","hash":"7537cedaf3d63785d754922b6f637fd077431640","modified":1521292047000},{"_id":"themes/next/.git/objects/30/9d7bdd7eee2a549011c3b74277b7f80c6e1947","hash":"ce4120c794c10296499d8366b2a033f28578450f","modified":1514105914823},{"_id":"themes/next/.git/objects/2f/b23882034b824eebf1c25e0987e25cc4bf0bdf","hash":"e2446f8a59013d994852d81f128af7edda1a8011","modified":1502528144608},{"_id":"themes/next/.git/objects/2e/1dd757a971e8fab65ae01b8593377c37e2dda4","hash":"2db45f990005bdbf21c4bd08dec2f1cffc2f1d02","modified":1500944095643},{"_id":"themes/next/.git/objects/30/3a8fd21baa4b1c04c17f03fc96e675f24f97ec","hash":"d7a8f35390875563affd5011a9f44d0186560ac6","modified":1500944095589},{"_id":"themes/next/.git/objects/34/394438e133dea981f3f96ae09bd5a413d6beba","hash":"d21edc2318215abdaf1df4f58b0893bfceb8c359","modified":1503448901968},{"_id":"themes/next/.git/objects/35/dc66bcab9a951658d4cef08e061401cadc0ffb","hash":"65338fd7c0a6c453e297d171387c124f861bc5d8","modified":1502528144778},{"_id":"themes/next/.git/objects/2f/6e386ddbd738a862097cb291a2622784c2634f","hash":"20b2bebf5e49dce39b6ca5099bd4c9f2df285bad","modified":1502528144751},{"_id":"themes/next/.git/objects/09/6847e4f2050455cf31c7877879e20e257ed0e2","hash":"624562325cc9bd3db2d84128ba31e819562997a4","modified":1514105914791},{"_id":"themes/next/.git/objects/32/03645ba6c21dba7256e017548ef08587c4e5ef","hash":"6fccacd9b4bd41704487bdb6700750d80f67d95a","modified":1504014817576},{"_id":"themes/next/.git/objects/34/543b17a31a8c64ace9cb6087b46d897c986d66","hash":"657a29e69d1f20d71a3422d7e454db699f87eb66","modified":1502528144776},{"_id":"themes/next/.git/objects/37/db03a25e1f36d4c809c8363706bb517be898bb","hash":"8fa7ac2262f6eb787af6ff280b96bd487aefaf06","modified":1503448901921},{"_id":"themes/next/.git/objects/36/cbc3b71c8c6cb02b5a6ad23b6ba21b01732536","hash":"947fcbbd5b28a9e78a67d69415a724b85dfbb3bc","modified":1514105914964},{"_id":"themes/next/.git/objects/37/eaa858d9d78c634c38fe51e11faad6c8af22d2","hash":"527fd078c93642ccf7f08d6eda9683bf630aa3c2","modified":1521292167263},{"_id":"themes/next/.git/objects/39/273f8ce4759cc829b81b41d0807e4c0ea30bd5","hash":"749492be3a097e73536e79733cb3f423b195bc72","modified":1520752472623},{"_id":"themes/next/.git/objects/38/5dd85b73aa3baaccf7bf98443efcac29b24bf6","hash":"2629d8c8557e6a1134a15f91f1e786f50cacb86d","modified":1503448901899},{"_id":"themes/next/.git/objects/36/cc2f6fa94ce8304dfa5b043624586189f41ab1","hash":"c36a0f2d13574eb4cc862b8d5a355624a6e0812c","modified":1502528144715},{"_id":"themes/next/.git/objects/37/34b752797ddaa19b53654916af9dea37297c24","hash":"c22706b1cc74825ca5372c62d5af12d9d9db4f51","modified":1502528144731},{"_id":"themes/next/.git/objects/38/b6a638b507892ccd915655d12b4500b0432794","hash":"c63b69e3de67eda8b497b41f993f8b41629a4a70","modified":1500944095652},{"_id":"themes/next/.git/objects/3b/34a28cd6ea62a7fb084952f5c4fac0e03304f1","hash":"7698ef9f7000a5162a0c31427fa34c175f7cef97","modified":1514105914897},{"_id":"themes/next/.git/objects/39/e4cc8247a6a47f935238a1b15cc5d7bfddab66","hash":"6f378bc88b0d2eb0b93ed35b1e3e9388f970f323","modified":1502528144725},{"_id":"themes/next/.git/objects/3b/ec7cc292a48fbbfe5786c716b97d8b1f47e119","hash":"f19d6363158a25aac6b3aa856a5d1c09d9b0d1e7","modified":1504102726365},{"_id":"themes/next/.git/objects/3b/922fba053a8f81fdcca4caa8f224012987a2d2","hash":"9c915ab04fbdf331bf76f8ec6dac525c70b74018","modified":1502528144691},{"_id":"themes/next/.git/objects/3c/46932117e1a127de29019794a43091019de362","hash":"6b95c33eb1a7e5cc264f4a5f21466550c35866a7","modified":1503448901889},{"_id":"themes/next/.git/objects/3a/2e41b0dfd485e762d26a0da9cfaff0fc3822e0","hash":"0a5286b5b7c7f2732d3425b390485efdaad33207","modified":1503448901898},{"_id":"themes/next/.git/objects/3e/a6ab54b2bfbfe8d8f070d33e17d1bb26a5c7f5","hash":"c6ce0fab3f4b411ebfcef29e602ab23e453e8abf","modified":1521292047000},{"_id":"themes/next/.git/objects/3c/d4f09a089d5420902241f52372a63a8067db82","hash":"bab8fa9f7870e169a1e364c4079618a64e65a151","modified":1503825378328},{"_id":"themes/next/.git/objects/3f/2dff84013150e98e66369b6acb465ac1e6f738","hash":"f754d118d37c424e7dbb83128aee597f547b0761","modified":1502528144595},{"_id":"themes/next/.git/objects/3c/95747386d35962f60d615be805ec572cab5d7c","hash":"25d6bb7c71feca4461e9df2c149f1222087ff3cf","modified":1500944095688},{"_id":"themes/next/.git/objects/39/f789686a0bf01bbb67be13059920d81b1ad8d3","hash":"eb9ae31073d4666f5343a0c419b2f88812e888dc","modified":1514105914728},{"_id":"themes/next/.git/objects/40/7b065a69b5a5522dc21b48f923e90e4195c2a0","hash":"69ce4371246c38a26bb40eefb21646022b212c79","modified":1500944095583},{"_id":"themes/next/.git/objects/3d/40173f54e7cc1ccaaf2c594a089dbe07d55a7b","hash":"ab0e652d8835eecda48f9f40b8fb79b3e0a1c177","modified":1520752472620},{"_id":"themes/next/.git/objects/41/4ea4b84e4d9c682b5d0e18b2fc975d7e9b8189","hash":"210afe331af600b8e0c1ccf457463c1c27a38bf4","modified":1503448901922},{"_id":"themes/next/.git/objects/42/994d515bcf19c78fcbac53f6a075d791267e5e","hash":"51f57c00227dbcc339edd308c16624491a571fdc","modified":1521292047000},{"_id":"themes/next/.git/objects/3d/a82ea881d512cf7fd33ff15bff4b61aaa77bbd","hash":"562685ae43468121dae5b05ee55f3ab2a66446d1","modified":1514105914966},{"_id":"themes/next/.git/objects/42/b4daf6fbb6d5cf04f1aa2f36eaf18a33f0e397","hash":"e3cbcef5518f8874b6b3064a8a393b1d0412130c","modified":1514800538870},{"_id":"themes/next/.git/objects/41/3b9a1c826476f8ab1e405e294097b3132b17c7","hash":"cafda4c5adf0ef536479d0fa237cdd2cf35fec60","modified":1520752471562},{"_id":"themes/next/.git/objects/43/a4ec35c485e9fea058d591076740de49a59c68","hash":"6d8b57bb5095ce74e7b1f650b3a2bd132846c073","modified":1514105914710},{"_id":"themes/next/.git/objects/43/34841796bab58d21504c344ded77ec5bfee511","hash":"4d021c81b24919bd2b7e07a78a687a2916b73fb2","modified":1503825378227},{"_id":"themes/next/.git/objects/41/b49efd45655cee4f23a4be0a3fc3084a98d358","hash":"f985fa87eaa13ca14393a4e950d588e5c5f22ff6","modified":1504014817631},{"_id":"themes/next/.git/objects/43/200ce3ed3516ee80be6237d03969a600250dc2","hash":"8ef2e6eb4f9597a6d2abf8f5b1ce9e368f418f53","modified":1502528144659},{"_id":"themes/next/.git/objects/44/31a23b148d5e0eff28ed718af7aac90b41ff48","hash":"d31acde8b3f7d937607d136f68596920c9275dc1","modified":1504014817636},{"_id":"themes/next/.git/objects/46/830f6f6bd37a5170127a85a89c8c7e0f62ab38","hash":"3ed5d587a8fb146c3f01af1fe37670fb49d2daf5","modified":1521292047000},{"_id":"themes/next/.git/objects/44/20f27e809171a1bb4ed25a1c4bb94fffb99a46","hash":"c41f9d07f4cc3114fd53c5a1dc7b1dcc6e007870","modified":1503448901887},{"_id":"themes/next/.git/objects/47/9f1eb3d7e720555ac8f0df2df959b926359780","hash":"c336aba4cf9b3575ad52eb34a3671861d3eba7bc","modified":1514807153619},{"_id":"themes/next/.git/objects/44/626972ee7eaa99b26bb42707b0b3f4b9b278e5","hash":"ee84b4c2997c67db44764a6e2f7a8c5a6389ec0b","modified":1521346803159},{"_id":"themes/next/.git/objects/47/c1fbc2e9ba31b431f398bab9eaf6fd86662b91","hash":"b8535b8c0720349ae9a19226a69a9a1366a70107","modified":1502528144637},{"_id":"themes/next/.git/objects/48/dfec1a2cd2476567211cc5ce95642372e1811d","hash":"da52bfaa95db4cae2375edcfdf5aba69407c2709","modified":1503825378425},{"_id":"themes/next/.git/objects/47/c1dd43842a6bf233423552f8f880504407916f","hash":"d01709ba5f37dc7729f24f5a9988407c101126bb","modified":1514105914938},{"_id":"themes/next/.git/objects/44/8f9d5e466761df031623aa940bef4854a67926","hash":"bcde4f6791232bcbbffda86c6f92e33bbfc3100a","modified":1502528144748},{"_id":"themes/next/.git/objects/49/a9a2b2304b100554c24050c949111270b67004","hash":"9b36a2f0a762bb4f17395890631084f5fdc801d4","modified":1514105914898},{"_id":"themes/next/.git/objects/48/82fbaf31ee9b9f78392e54d32cae143e69f63f","hash":"947d0592025db6f2577e79495a846346035befe9","modified":1514105914949},{"_id":"themes/next/.git/objects/4a/5f77e96ccb35d37b3b9f66edf540c5915cc362","hash":"d4af7c4410a785769b69fe9cc890c0ad17710fbb","modified":1500944095645},{"_id":"themes/next/.git/objects/49/14b3bbc5051686445012e3adbea69b08265252","hash":"76c651913a1a23853bf117494fd5e2e631cbd2fb","modified":1514105914714},{"_id":"themes/next/.git/objects/4a/0e56b95a08585ce85e9899742ad26c2c2f17bd","hash":"f7bb9b71682f0cb6f091a113586f0f76977ef897","modified":1503825378276},{"_id":"themes/next/.git/objects/4a/9f30f09418d980139c47ade5e0942888795987","hash":"d2835e44a3ad9188208c5b542b1523264f2c044b","modified":1514105914782},{"_id":"themes/next/.git/objects/48/e44d6f0fd7c1aaf08bf52c993b0d826f24f840","hash":"2799328ee42f8f1a88f3fbd18d7f14fa0835f17d","modified":1520752471582},{"_id":"themes/next/.git/objects/4b/499e2d13c15003119d2a3c772cd6b11826ba8a","hash":"2d1ff161672611df39b462a4f722c1a248069465","modified":1514105914952},{"_id":"themes/next/.git/objects/4c/0f0aa2682d494911a5555a39d65ea2869ddc4b","hash":"d4c84c76749d5c89fc9671e14106fe8265a44a50","modified":1502528144568},{"_id":"themes/next/.git/objects/4c/835d82d7e381970afcd961d92b76f3516298dd","hash":"bdf37a0e28c12523a1ff7b4e5309632765f24bf8","modified":1504102726354},{"_id":"themes/next/.git/objects/4a/615612c2393b3e9841f89c280cbaa51ec9c3af","hash":"b26e229d674fe7bcec4faef2c4c062fb5036d61f","modified":1500944095670},{"_id":"themes/next/.git/objects/4b/a569648edfd60ac7ec4c09ad4ff883d0642996","hash":"5a6c939f0a5e6b71ffb1933213efdbe5df432c00","modified":1503825378507},{"_id":"themes/next/.git/objects/4b/6ca72e2ceb19e9fc978a99fd909e7708d3f2dd","hash":"c90f5aba3c1889fa43f6633757c00f0d4133ccf4","modified":1502528144648},{"_id":"themes/next/.git/objects/4d/475664e104eb30700a39db9af012111e83092c","hash":"3212d75bd7ec28ae1dd1c92e186dbcb4bb62a994","modified":1503825378278},{"_id":"themes/next/.git/objects/4d/85031581dd607bfa251827cc15828b9e138a7f","hash":"9a8f1cb12f0811ff2374e4792e4405a69bd50811","modified":1500944095604},{"_id":"themes/next/.git/objects/50/59e6f258976e234d42c0a3c62fa585d03b840f","hash":"846692eee40dc09f27a987bc9da83c5997a4d7af","modified":1514800538816},{"_id":"themes/next/.git/objects/4f/4c20f5a66be58764422e5aa0b7d80f08a51d7c","hash":"21bab16c98b773e617cd1f5004add1fafd08222f","modified":1502528144554},{"_id":"themes/next/.git/objects/4d/842f95e32520f2659208e9c3b5ee76a27f2811","hash":"3f0d332ec81e5560ca89e6ae112c36d0c7a8cd7d","modified":1520752472619},{"_id":"themes/next/.git/objects/51/721b0d09fb32b4489ee74587569c66175383b0","hash":"ffaffaf983a507a4510ea0e27c077f0e270a7ed7","modified":1520752472622},{"_id":"themes/next/.git/objects/52/4e0e6491252961315d6e75692582285da3a313","hash":"11b0370f506f1f3991935a3f7bc7f23169a2c6e8","modified":1500944095668},{"_id":"themes/next/.git/objects/52/d43281fb9a61205b7e0febc01484900b0eed8c","hash":"b8bad3cb7780846aea72cb2056d2762bf1dda786","modified":1514105914946},{"_id":"themes/next/.git/objects/51/521f80a3960bbe78674a6fc82d7b8807d59cc1","hash":"a943db3a8cbdf7f3ce1d5ac7fc49925e7a36ba97","modified":1502528144739},{"_id":"themes/next/.git/objects/4f/75fe5ee9145b1c37e7a7e2372865396d64b7b4","hash":"f65c142e0eaa44ce23684ef87ea1d7465373d305","modified":1514807152314},{"_id":"themes/next/.git/objects/50/c7338550297fa5c01b8a84ec49229528d6049e","hash":"911db3991d8806cb8d966058ff2e5c9fba2126b7","modified":1514800543802},{"_id":"themes/next/.git/objects/54/0d0a1954f527999ce2b5deff425060276d2223","hash":"4c77b4491f2f77230dc7d424bc7313b25644cbda","modified":1500944095690},{"_id":"themes/next/.git/objects/55/d185a4abf1395e5df5d4cbb016d5338c16abc4","hash":"dfaf9cd9e5dac957e897e0285c405bc066795249","modified":1504014817648},{"_id":"themes/next/.git/objects/4d/00450edd4686a93036a87f0a640d34677b0a58","hash":"e2e6f5730eb1275c5a1b2e5fb7a4060ac4b8a46a","modified":1503825378260},{"_id":"themes/next/.git/objects/51/c240a9161967a6b8c63f014a9b30afb29a3fc5","hash":"515151ea6cd3ad86b8a4d0192a43d502bf5f437e","modified":1503825378463},{"_id":"themes/next/.git/objects/56/11bff46d30ec871de2773333f205ce72ddfb06","hash":"af6345e3a22a0dc2ca620aa3336217e9330be361","modified":1514105914722},{"_id":"themes/next/.git/objects/54/206d6e3053bbf40d24a0946bef3d67ea51a1a1","hash":"e2d9b106d8b068d6aed1be27009ba85bbf620465","modified":1514105914705},{"_id":"themes/next/.git/objects/55/b618173ebf7d7f94e2da2e76a886e1802c2efd","hash":"591c3fcb1de3cede6400fd858be2da03bbbdbf11","modified":1514105914945},{"_id":"themes/next/.git/objects/58/86531724f515ad7d4c911e82ea5ae103b002b8","hash":"70ce37dfde90cac745c718584a74c800323292fd","modified":1502528144596},{"_id":"themes/next/.git/objects/56/c098cd623ba918533582af31d49b6fd5d5a9a9","hash":"84dc47f4787d1f33e36bce0b98f9665f87e776e6","modified":1502528144724},{"_id":"themes/next/.git/objects/56/68c83aa86b009426a4b39862ff806ddb2140bd","hash":"6d903095b42dc9d41175d2926584a17f4b47422d","modified":1500944095642},{"_id":"themes/next/.git/objects/59/31f8fe80853bfb3087cf9c405d0be10c8a04ba","hash":"de67952d8b4e9f943d17147ce633be25c1fb67d9","modified":1503448901924},{"_id":"themes/next/source/images/wechatpay.jpg","hash":"018d79d52a02bba08af0e27a74b7e9deb423375f","modified":1521294096934},{"_id":"themes/next/.git/objects/59/a64495ca928261e27cb4f49419f1f8d08ebe5a","hash":"c2c65be7552c4f52e3fdd05ebeaf06f3e4616f20","modified":1520752472635},{"_id":"themes/next/.git/objects/59/aa5cde20bb30c7fdb3b8261adb5f86b3fb9668","hash":"93c2f44a01c7127e085150f252ef08114e02a47d","modified":1503448901863},{"_id":"themes/next/.git/objects/5c/74c0a47658e5c7a22a52efa2d4e75bbcb7df61","hash":"b1506e45399afb556b0ff6660b7c228c79b517ef","modified":1500944095590},{"_id":"themes/next/.git/objects/57/a950ed42ef10a497b465078ef395972f340e7c","hash":"eec4b4f69ab52cd3d64a32ca8662e12ec649abf5","modified":1502528144558},{"_id":"themes/next/.git/objects/56/a8d620e48c072aba86aacb4c1399389e39e38b","hash":"28e83448cf8dd416e5e7604d03ac61ea2cf08c69","modified":1502528144567},{"_id":"themes/next/.git/objects/5c/d25e834303eb2c219c2e44a7d1ff4f217b76f1","hash":"4a4a1c47105b3a2cec04917faabcfb317d67b897","modified":1503825378396},{"_id":"themes/next/.git/objects/5b/f56ead864e551b626aa78b02f82c1b1ebb3a63","hash":"42ef079d00f474254acb8ac5b9986c38615f0ad5","modified":1503825378443},{"_id":"themes/next/.git/objects/5f/5d29df515383928fbce398de3f0dbea9e060a0","hash":"19050459605d5c52e3c5a8d297fc411c07adf948","modified":1521292047000},{"_id":"themes/next/.git/objects/5c/cc4513cbd25d9980d6f2db36ce7a7707931b18","hash":"3bff72509def119c674c2972e98296f30d9e2195","modified":1503825378236},{"_id":"themes/next/.git/objects/5d/496d8aba8a42a3b33f8e42b98ea195c3246f5a","hash":"ae93c2cafd45ae02dcf42d0fab3cacb3afd3af8b","modified":1502528144639},{"_id":"themes/next/.git/objects/5d/1aa3e918ee65e80b3dbde95f0df39d98c651ab","hash":"10124da386ffeff7effcd2d0057a7e7f5a48d2a2","modified":1503825378367},{"_id":"themes/next/.git/objects/60/711f9de5d9c10986f91b5c2922b9d7b894db34","hash":"2581c17115ea921b8e5868036e4f54276d98ad83","modified":1514800538764},{"_id":"themes/next/.git/objects/60/a00f45077b80b13329403fdf0dd8e18913fab6","hash":"c17ee304c31778e13be3d4c688812c6672c8ab89","modified":1514105914775},{"_id":"themes/next/.git/objects/60/cd524cd4ca5e2d4c19842e1f021e477548516a","hash":"82c62e047333d58dcebad41b6b11c3c38c7bfa70","modified":1514105914887},{"_id":"themes/next/.git/objects/61/3ec447407867d97effe7144b90bdc30b94ebc4","hash":"90f47dcfab399217b9857aa6edd60f136ea2d81a","modified":1503825378234},{"_id":"themes/next/.git/objects/63/2268bc2463fbe1063abab6489295d1ce9a2749","hash":"9f0eb4d0fa789ed5367575aab623ba36a54788d2","modified":1504014817665},{"_id":"themes/next/.git/objects/61/1075b2e73a247f6376cd1678269ac4318c57d4","hash":"63199a50f2a324db7927627a800ff7243d94a988","modified":1502528144579},{"_id":"themes/next/.git/objects/63/65f9cdb08fe9279df39d62c1e06892b8b22a75","hash":"06539628b70a94acacdc3cab05bb017c60db42c6","modified":1521292179417},{"_id":"themes/next/.git/objects/65/0896037d3ba766f8d6b49cfa2fb4bdb53b9a72","hash":"3895324325d0bc6576c4db1110f7b63a956dc34b","modified":1514105914726},{"_id":"themes/next/.git/objects/62/63435adc7bf7702532a2e6e341f6b99f5732c7","hash":"f89a48b28c846e051cd839ce9d68c2d6ba75d7df","modified":1514800538840},{"_id":"themes/next/.git/objects/65/6c935a257747330d449e180c8d7b50a59c2909","hash":"ed9896ec75e9f919f129ddaebe73f816526c0edc","modified":1514105914713},{"_id":"themes/next/.git/objects/67/140e6b95f745b1d4482943172249c897f1cdfc","hash":"bc9dcf4809ff9e8b473af89836e1222501e30912","modified":1514800538861},{"_id":"themes/next/.git/objects/64/fbf0495e87d526ff4263e7ed9c53af390862bc","hash":"2a8b6cce67bc25bac8027f9ecc94ae90f561a4b9","modified":1500944095626},{"_id":"themes/next/.git/objects/62/adc200274bae7b0fc3ef041bd6c9df8b76e3fc","hash":"edf11ebe938067103dd6311ed802f9b539c99a59","modified":1520752471577},{"_id":"themes/next/.git/objects/67/acfed211ba9c1c99f4c505d267f9c8299cc5fd","hash":"ca072d8def9f7cbde7cb36fcf1479e5b078eebd9","modified":1503825378475},{"_id":"themes/next/.git/objects/65/cf438220790efb9ef4def2570267bad6bdf7e0","hash":"15074fbc5effe2ab76adfab93f7651013ab8d547","modified":1520752472000},{"_id":"themes/next/.git/objects/65/31ed3d3c62c47a699f604b05bffe81db10ddad","hash":"c1ca0862e0f499164d64242bd5e7005a648fbec5","modified":1514800543824},{"_id":"themes/next/.git/objects/66/8eba09e1b32a3aed52e7c384336d9395d03ac3","hash":"6f6ed1e8032c64247cb2d2309fccdb0478fda02d","modified":1502528144696},{"_id":"themes/next/.git/objects/68/2bc4df9220f429e9ca1c27848f2d99f57d2711","hash":"8b2f0a7536c626f82c1b50d86d65473062b59356","modified":1514105914764},{"_id":"themes/next/.git/objects/67/cf010b162f1d33d40709345da90e43f83dfcb8","hash":"4b96d20d7bc3d546bd9f0f8103e5b159c95f5b27","modified":1514105914873},{"_id":"themes/next/.git/objects/68/30b0dd19101a9c93d3b9aeb8428a0dbad0e80a","hash":"a588fd9a36b18247074f47ba97cae47fccda0623","modified":1504014817625},{"_id":"themes/next/.git/objects/66/c5e15d446316d4a6eb3539bdcfd1a103faf000","hash":"b0568b9c8b21f00a5e173602fc1a26c52fcdc57c","modified":1521292047000},{"_id":"themes/next/.git/objects/68/8505b7fab4b0ee90e0d76ff33c42169939a0ac","hash":"cf39a785b80403bcea2091c0333d19cc9f8a9917","modified":1502528144733},{"_id":"themes/next/.git/objects/69/bda65da5ec3138b9762c478e6e0dd471e0dd31","hash":"3f0a10bfb872f624c3509ca68348113c261da227","modified":1502528144767},{"_id":"themes/next/.git/objects/6a/2a59e89b17dc4747413161162ec89b85d18af7","hash":"0390b0c8a23b318921bca9b71bc1fe6699ab6413","modified":1503448901900},{"_id":"themes/next/.git/objects/69/81a3eb7e2361f6dd748613b8017354c2a068ff","hash":"9c297bb3b8577c47e2e9fd45c5a336baf8a418ae","modified":1504102726357},{"_id":"themes/next/.git/objects/6a/484763811accb0539191e4a772d8ec9fd21149","hash":"e873977668861ec57104cfa70c2c173cedaa2a7a","modified":1502528144779},{"_id":"themes/next/.git/objects/6a/ed650a0e79955af24065688c040efdfb9f0485","hash":"ad0df0e958ac4fb604e4e2aa81176ab8262d16db","modified":1521292047000},{"_id":"themes/next/.git/objects/69/159c88293667e208c9ff51ece36c362484beae","hash":"2d164ea520f1066b4317b16a0fbb40766f352540","modified":1502528144561},{"_id":"themes/next/.git/objects/6a/36b00aff424a9ddfe3c0e6902dd4d32413d691","hash":"4525387d18351d738771bfd7455e67b2dcffc985","modified":1514105914879},{"_id":"themes/next/.git/objects/6b/d94635181ae1f79f14c3499114007cd99a6e05","hash":"977df9f9d3f6c35a7715eb9ae923ec293b5e8116","modified":1514800538759},{"_id":"themes/next/.git/objects/6a/69f95ec1f8c928fb3da77e15364eec4400915d","hash":"9255cc71a1a95b634c599199113a70db6c905842","modified":1514105914891},{"_id":"themes/next/.git/objects/6c/83adb9ab40f1be05b9a94957ac7f3d7706c4c5","hash":"9b3eb21bd98a2a259b6d96585e8d3327acd08772","modified":1502528144636},{"_id":"themes/next/.git/objects/6e/8a1fe1d7796e37076619a88fe9469fa29a3f12","hash":"283305c4416e7c140a6d3f1cefb494a1f5238008","modified":1520752471583},{"_id":"themes/next/.git/objects/6d/efa2ad4fd863d29b90fe454bf22f6ca4adb8b9","hash":"a0820f99aea0ef91a8c364b83c1b5b42bca10ebf","modified":1502528144562},{"_id":"themes/next/.git/objects/70/b57e031e87fe85b8b1f06383ae86e73b8e8993","hash":"c16f60ee62e4eb000b95197f6ff790b053e1a46d","modified":1514105914958},{"_id":"themes/next/.git/objects/6e/d5115fe384152e7afbf93225d508bac6a16d54","hash":"5eff99f21ba1e9d9d8671ece487b81bd8891e8d8","modified":1500944095588},{"_id":"themes/next/.git/objects/6d/3b5133cd3f94048a88848c539ae8873776985b","hash":"d7837de19b1b7dd5c235300f264121f7f5284b56","modified":1500944095663},{"_id":"themes/next/.git/objects/6f/bb3283e1be7211c7b02154a0e6c647600503f8","hash":"329050cc57fcbb9d0fd1c52ff0e472009e64a70e","modified":1503825378224},{"_id":"themes/next/.git/objects/71/9d8249c920a95b5f1bb22f412efafe9e34e43f","hash":"3ab68cecf204071f3770b559b6d283eee2299b18","modified":1521292047000},{"_id":"themes/next/.git/objects/71/facae9846ce0e61a2e0f40905d56511d2e616b","hash":"f9296aa0cd54d3eafb180f005510240314fee486","modified":1514800538814},{"_id":"themes/next/.git/objects/6e/131a59629e11141b09ea7fd14a389f3712cc99","hash":"1213092e70978503c815ad0d869fc80431b50ad0","modified":1514105914960},{"_id":"themes/next/.git/objects/73/6dbb4b203b460f07067ae5d790d9f6c8aebcad","hash":"96e27511cdbc7cc2d6c01c7f5982c674eed29a95","modified":1502528144553},{"_id":"themes/next/.git/objects/6f/1f653854bdf2415f6ce4dd45200325248e91d3","hash":"4f2225a442a523af5bf5255fad6701c6b6cd89bd","modified":1514105914948},{"_id":"themes/next/.git/objects/73/f23a3987098ca7ccff61b3205982fbebcd21a0","hash":"833d764f071720620175154bf4d60f47ca017796","modified":1521292047000},{"_id":"themes/next/.git/objects/73/c21e4f8f5ae52d67d3282b92c02e1d52b41584","hash":"a7df41015a8b9adb412d3e608342619efb7cd72d","modified":1520752472765},{"_id":"themes/next/.git/objects/71/9798dfc1e3febcff40d1e1d9d94994081ab217","hash":"ad72f81398c59bf1373f1f98a40a1bbc0475a526","modified":1502528144643},{"_id":"themes/next/.git/objects/75/15ce8c0954582f904439fc267cdf4e0078e281","hash":"f840ab35992963b992f6539f1df60c21ff0b3a89","modified":1514105914829},{"_id":"themes/next/.git/objects/74/c77e32973c0945b453697c50b51fd4b50f9804","hash":"dfe2bc325df1fb9416e5515576a2068b1262390e","modified":1504014817664},{"_id":"themes/next/.git/objects/72/363bcafe6bda9f8377d7f0d588954c6a7fa5b9","hash":"55320542043ee910e6e4594a9b69f7bd639ee3f4","modified":1503448901939},{"_id":"themes/next/.git/objects/75/4e92c35b6f99524a539a68e032f1138d7bf0e2","hash":"34cff57f32e2147b9df0f62b6c2b9e193ca3fb7c","modified":1500944095605},{"_id":"themes/next/.git/objects/76/53309bc534f0e3c3c9ad594744c24f054ddf79","hash":"550fc3befa4f59dcf295ae8df533545a05363002","modified":1503825378421},{"_id":"themes/next/.git/objects/75/9c20d27c9d78ffb2a25d03407295a26124e7d6","hash":"1de777c724f89c83eaf13ec912af557fe1155d7d","modified":1514800538868},{"_id":"themes/next/.git/objects/76/79ddfcf81838b3c68479a23038d6868f6c89d9","hash":"0ee53b338cf16a45ffd6cb4bae09095ed3f827a0","modified":1500944095674},{"_id":"themes/next/.git/objects/77/50d7864499ba2b5e10dc5665a2ebd55231c46c","hash":"872edfc86111b6939157b9d24fec159d03294b3d","modified":1503448901964},{"_id":"themes/next/.git/objects/77/bda17e290ec30303a668de4dad3fcb6fa43489","hash":"a9b2fd3cada7e7dbd813a23115f273861de9d4f1","modified":1520752472553},{"_id":"themes/next/.git/objects/77/5922d96b85c73b6885c7eceddfd4ac1d5ca28b","hash":"32608d3dc039307159c4e9f9fd731820883fdf7c","modified":1503825378561},{"_id":"themes/next/.git/objects/76/f7986b4a0e55d9d54ceeef2decb97e4363cf91","hash":"f6637de59ffc7b9baebdf8b02ff75a7f2cea4e2e","modified":1514105914951},{"_id":"themes/next/.git/objects/77/b050d863a77af1bd186bc177329161d7dd0183","hash":"5dc5abc5fe8b84428216ef089c910e6e8c4d8609","modified":1514800543804},{"_id":"themes/next/.git/objects/77/70b94a1778c3b75a1cd96992930be027ee3b2a","hash":"19fc29ad4d97bda2e7769da27546e7254563c5ae","modified":1514105914732},{"_id":"themes/next/.git/objects/78/34f1341dd0597801a9170ceaff9c5cc66ff513","hash":"942a350fb860ff66d23c689704a4f12dd191d01d","modified":1514105914930},{"_id":"themes/next/.git/objects/7b/dd715069a1bd4a282975ad0488b232c6aafbb0","hash":"1638ffacf0c2fafb9e0e97c40d68bd3f15e724fb","modified":1502528144640},{"_id":"themes/next/.git/objects/77/d74138b148ffcd3c0e964011cf12576b4a30a9","hash":"474cdcecf1b5784514deb18cb776ed394c9b9417","modified":1503825378563},{"_id":"themes/next/.git/objects/78/ae38eecb42d382a66e6bf3a5956465cca08969","hash":"1a17e7fe28c0ec28ccf2f015d5936cf0b20b323b","modified":1502528144773},{"_id":"themes/next/.git/objects/7d/17770ff6905df84fd0dada6b8b1134cfc5fa23","hash":"9050e3b9164a3d7e0001a813109f59f0fb6f84f7","modified":1500944095581},{"_id":"themes/next/.git/objects/7e/9b4de0b06b7aeead783fb5fa58dcfe33704729","hash":"080d1a90d635d79e016341ef5d68704872cdab9a","modified":1514105914719},{"_id":"themes/next/.git/objects/7a/afd6261728f83f1cd2b4601cf15f01fa7af66e","hash":"57be9980c0f17a4391eef86f538341e3034963f8","modified":1514105914716},{"_id":"themes/next/.git/objects/7e/feee9e23e71ca323f11f9ea35d56c5ed342114","hash":"b88e9c493fceaf87c3d72f31d39ce017b1c66c1f","modified":1521292047000},{"_id":"themes/next/.git/objects/7e/b1c5c3aa9e31bc589a20d2b1df659b8cfe74d1","hash":"405442c9791c69b649fc4484e4f32a8eecdf1fc0","modified":1514105914871},{"_id":"themes/next/.git/objects/7c/df89210d3fe762bc97a0ca7718115d1105f734","hash":"fc00d782dafec5239543f8d704bf1377c8b8215e","modified":1503825378242},{"_id":"themes/next/.git/objects/7e/b5a97f9ef1d9c8738e387e17a2221a5cb0ebb4","hash":"3cf6894350d4089f1c615813c35d3f84c2e4d1a5","modified":1503448901866},{"_id":"themes/next/.git/objects/82/154ac09ab15aefb5ce98dd235a6e5781bdcaca","hash":"df424bd07f3b02cf49d574f31b2ac820f643e894","modified":1503448901932},{"_id":"themes/next/.git/objects/82/ba9e5a409fbbb539c36c535e2e0946d46ffcef","hash":"4a85a832ea2dcb9c0f234d9e6a6f6b6053b2175d","modified":1500944095691},{"_id":"themes/next/.git/objects/7f/4f5d2500e6cd3f6bb7b073c6270dda38955cf0","hash":"e24927641fdecd9ea19296f210bdddd1279ea995","modified":1503825378244},{"_id":"themes/next/.git/objects/81/324f2592928ea0a5cd349dfe26056d4a815b4a","hash":"e554486343a07dc230e7fba15e3f3670d580355d","modified":1503448901919},{"_id":"themes/next/.git/objects/81/d5d74613a1845a017be00edaed5990f8526d2f","hash":"1e365430270ae5936b200d0c2e3dcdf36e6cce28","modified":1504014817646},{"_id":"themes/next/.git/objects/83/76c5db3e6810fb9b76227c3d1b58599767e6b7","hash":"90a2db896fcadf33c8eb71dc007e1e69ce56e994","modified":1504102726441},{"_id":"themes/next/.git/objects/82/f9b1ecb6a201cc5e94b585f529aafbf8054f89","hash":"3da7b54f03caa0099b12d6ee635a632f4f7e8e6c","modified":1514105914709},{"_id":"themes/next/.git/objects/84/b0c7501e8ac16c61548b1914fe3d3e2c00019b","hash":"a1a63615fb736339b167184e81bfe2b488bfb1d5","modified":1514105914968},{"_id":"themes/next/.git/objects/83/c2b84ed4a312a63bf102842ff9ee6ae30b45a2","hash":"e3baebd18d99641d09a67195270df4a087c5e366","modified":1502528144560},{"_id":"themes/next/.git/objects/85/ca71b6c0568c25cf55b384db3cdb34d4ac825c","hash":"888283a46886bb8d1fa86cca37b0408ede25db17","modified":1504014817641},{"_id":"themes/next/.git/objects/84/42a5291e2292eafa7c1261addb96400c09b0ef","hash":"245ad8c96ebf55fe7f14f286b601b1ee9cf8ceb2","modified":1521292179434},{"_id":"themes/next/.git/objects/87/64743cf0b932fe928b5f2705d986d6a034215e","hash":"1f9cb24ccda8a5f2768ee3f40df0a8aefb200645","modified":1521292047000},{"_id":"themes/next/.git/objects/86/a56da75dee88c8558f0fb5f899ecbdff8309cb","hash":"0f7e8080f6c00fd6f559865ff666e9c60e8647a6","modified":1514105914888},{"_id":"themes/next/.git/objects/84/cf27af5a0d5ad2f065f622945bd0491428ba95","hash":"ebd4ce1a7b424c4c14648c76623cdd95c4bc815b","modified":1504014817658},{"_id":"themes/next/.git/objects/88/aea255dc8eb948b79cfe26347398f68f4c79c7","hash":"3fbf7d258d9ab889a7dce8283810ebbe792962c6","modified":1503448901869},{"_id":"themes/next/.git/objects/89/e727f8ab32b27cba3e2160b41ae1d676273601","hash":"bf0a678b7a9b4e9b738a62161a2013ece6239abf","modified":1514105914723},{"_id":"themes/next/.git/objects/8b/d15891faa7551450ad9ad5985595d60ed73a7b","hash":"0fb42545950014c0d8fa8e6d30f19257fc434ea4","modified":1502528144642},{"_id":"themes/next/.git/objects/8b/fb810ae5d204bd933751049f2445b30fdbecfe","hash":"9efcdefc575147a3b101e213dbf180dabf283f31","modified":1503825378292},{"_id":"themes/next/.git/objects/8a/1363d68461b9ff77b43c4778a46e84731ada16","hash":"2aef0230cf3eed0a90b78e1422fd1f70d40df5aa","modified":1503825378617},{"_id":"themes/next/.git/objects/87/7981121a359f747f4cf6240a1bdf6120b856f8","hash":"a15a8150fd25f56440b08a345529edfbeef0a5e6","modified":1502528144747},{"_id":"themes/next/.git/objects/89/fafe105182af3a42a7596644ae9cd7f56c71b8","hash":"b4e8bfebd0ffd078bd7a7896765d35a888b7a32a","modified":1500944095594},{"_id":"themes/next/.git/objects/8c/ed4cf7404660db3ab3fccebf67ab0e51855df0","hash":"e909870b4d6de20b4648d0581ad92547dba51a68","modified":1520752472611},{"_id":"themes/next/.git/objects/8e/fcf2c7ffc62430d171721b2491b46adeec89f5","hash":"2b91800288bb3329723a7729eae11baacfe65f85","modified":1521292047000},{"_id":"themes/next/.git/objects/8c/2cef6cf87b3cc93b7354fb1f4ecb0c09af5b26","hash":"4232fcaf19af6363bf9300fd8ccf30732793172c","modified":1503825378279},{"_id":"themes/next/.git/objects/8f/1229a56595e6835421be8872ddce6fb4b53639","hash":"010ecb0057838e2560e6d808c5779dc8e5e8508c","modified":1514800538846},{"_id":"themes/next/.git/objects/8f/ab8cc608d25d06f4553351d26ea76df93a8c9d","hash":"0ef48d7ed41a3a603b08a50ba8a532c3399a0b3b","modified":1503825378397},{"_id":"themes/next/.git/objects/8f/dfa90b2ae2f1a17f738fc3b0dac9938c10324f","hash":"3b2f0c09d7010e1e0f831dd8d10801f73038a39f","modified":1503825378232},{"_id":"themes/next/.git/objects/8e/98994d2fe84a87f274f239ac18e4b844ec7234","hash":"2600466394abaed55abde4cfb6eb3b72507fef54","modified":1514105914731},{"_id":"themes/next/.git/objects/8d/e10902c36fa0e2d988fd7b58f9294c9b978606","hash":"7ffeef7a5134260da356dd7e7526e35dbfa334eb","modified":1514807153621},{"_id":"themes/next/.git/objects/91/eb2d272500993ccad1d15968a1beff9aaf3f03","hash":"59aa71d0b726922a3a8494a26cbc49c5e1eab776","modified":1503448901864},{"_id":"themes/next/.git/objects/92/457adbbdc08c0d17bac52fb5e49ae4f145b111","hash":"7bfcfd9f41163ce48e5550770438113c8e351079","modified":1504102726414},{"_id":"themes/next/.git/objects/8f/42aa2953d5aae0b2ec501a85d64f5a5dff29f8","hash":"8472b7c1bbb22816e1e0e62b1bc4fab95d50e3f4","modified":1520752471000},{"_id":"themes/next/.git/objects/90/db421feddebbf0eaad91065ea00e779c54aded","hash":"6bcde85cb807a658e7cfb64ed044a3fbf978d29e","modified":1502528144628},{"_id":"themes/next/.git/objects/92/906b6e0c90e750e26a973ae67410911d96dd76","hash":"5d208ad396ff375734fa1b29b680d3ee4dcfc433","modified":1504014817647},{"_id":"themes/next/.git/objects/92/f29c58c56a9c14101600ea815e9403f84cbb27","hash":"fc4d1bebef11b859a6b57457b7aeff76fd7ef1fc","modified":1514800538805},{"_id":"themes/next/.git/objects/93/5debc26e3615734ee095be78c1da612a008fab","hash":"3f0a9ed40115dc22b5dd2b6296ecb10945a453fb","modified":1520752471000},{"_id":"themes/next/.git/objects/92/954a236306baf046f51b1b37f2617adf008d45","hash":"0b0fc24548d1abe1f8b5515bb243a26401fc51a6","modified":1503448901878},{"_id":"themes/next/.git/objects/94/38b6168f698e0d53b64676c4e413d20eb528de","hash":"0f087eb0255f25d60502b227d740ac9de79b78ff","modified":1503825378233},{"_id":"themes/next/.git/objects/95/992e106debb715821364c834a767fdfd17cfb7","hash":"7901bab84fd29dc74abbda8cf4a7207d827046d2","modified":1502528144777},{"_id":"themes/next/.git/objects/93/907843b3712e72876710a8bf02dcca20fb3ee1","hash":"2ef982440fb56778e1de9f3f0c9f9edb0284fdc3","modified":1503825378299},{"_id":"themes/next/.git/objects/97/0491fab879670f6d185ee0962e2a969a80d658","hash":"5423c72eebf1154c685c6fe75c2ac3834b3d6573","modified":1503825378473},{"_id":"themes/next/.git/objects/97/501292dacaa7150c9743b10adc00153f99c520","hash":"e49546126823a5c0a5268e65a00f7ec8839a5822","modified":1503825378363},{"_id":"themes/next/.git/objects/99/157c21deaa5634dcff83e16cc4f58fda3293fa","hash":"48f1f6b902724bac0bc9e0c65df5628c58f0c9c2","modified":1514105914712},{"_id":"themes/next/.git/objects/97/eb7af693132c7bb469621742db6ca5e213adcc","hash":"eb1ecc0a7f0c5c100b20f0c56d18bc4f27a57015","modified":1502528144690},{"_id":"themes/next/.git/objects/93/3e33dfaf398fb3426511e078c35ac4b0fa4bc1","hash":"f8d05399537b84b9a3cf9babfdb7d448107252c8","modified":1500944095675},{"_id":"themes/next/.git/objects/99/ab3177aebf9d564706d1fc71728913b46477a6","hash":"7c39c29c64ff1cf7577c54a2735482233e9ce75f","modified":1502528144571},{"_id":"themes/next/.git/objects/97/0852ec5a43c7c6d5fbda27a28c85bae6b8154d","hash":"15fe520b27fb0ae9d0e8151692bf430d4ae1ce88","modified":1514105914708},{"_id":"themes/next/.git/objects/99/5c28a868515bbca5406dee8b20da410c946dc3","hash":"6fc1c009a917b0a6fc5bedb4c923cae830ff54c4","modified":1503825378474},{"_id":"themes/next/.git/objects/99/ababb3f59dd8e6c455a7620d6225242cc230fa","hash":"128e21cb2cfc86101a5676b606f5224c1bb054d1","modified":1503448901969},{"_id":"themes/next/.git/objects/9a/7b25bd7fafc130d1bdcc4c18d147c65df0ba09","hash":"4e42f8d6c2bf90d3371a43214b6f8402a9c769f5","modified":1514105914718},{"_id":"themes/next/.git/objects/99/78450633472b406ef08544aaebe1806176699c","hash":"fd8df2b71a1a50ef50aea7dbdd665adaad7c70a4","modified":1504102726357},{"_id":"themes/next/.git/objects/9b/33ac8e61bc9d317d71304fb30b5d8d48796c23","hash":"d00a5bc388aa49da5aa58e38497665e8ebff7a14","modified":1514105914924},{"_id":"themes/next/.git/objects/9b/e209d9f6df1a198a5182ff5e3d26fa6fdf9390","hash":"4d4993ffa679583ed7c747457657a0cb936f20ac","modified":1502528144799},{"_id":"themes/next/.git/objects/9b/afab6ef59ce585cbc456d03770e167d2a3c9e2","hash":"32c4243f56b9334f340559d9e7bb7140aadb5959","modified":1500944095693},{"_id":"themes/next/.git/objects/9a/d982a0c5df57372af384486cbd8015c1a97638","hash":"bc35d2f54fcda383e3dc04c6a0d37dce1c89652d","modified":1514105914815},{"_id":"themes/next/.git/objects/9c/7ea1a5fa2e8b99c59cd04ba7da16cc20a121d7","hash":"4fe2ae341796f98b0c2795f2bc959fd0c880a073","modified":1502528144543},{"_id":"themes/next/.git/objects/9b/f56633d4f67014d3a603d1225df0263d68b9cd","hash":"67b33ce8efa58749b63c4002c89dfc65ce5ba782","modified":1514105914972},{"_id":"themes/next/.git/objects/9a/dfb55a257735c64f586b7680545d928ff3c979","hash":"3a2ebe556d09fe6c29b26253e4ab053622370e31","modified":1514800543807},{"_id":"themes/next/.git/objects/9e/2491ac0f70416d97c87435f6f06e2782e29ed6","hash":"317cab9892955950c1ab8b56100ea13bacda44d3","modified":1503448901977},{"_id":"themes/next/.git/objects/9d/0568f4edf8821d850ccf064fb0427ec2c0c6bf","hash":"aaa860642c2fec578292e6af1ff6d3f22e3cde93","modified":1503825378322},{"_id":"themes/next/.git/objects/9e/7b65a5d6dd087e43b7d0fb7dad599606c2638a","hash":"599b7dc04f2ef46aeada0a6764751ee5858404a3","modified":1514800538788},{"_id":"themes/next/.git/objects/9e/3adb1540e4134c9ef54c531d24c74a057b7627","hash":"042242c53473fb3a50c47edf8aa46f83bc8ff505","modified":1503825378391},{"_id":"themes/next/.git/objects/9e/88d8d71a002d2b7fb21be8b00446e368545190","hash":"eeb388285bf184efe74626900120a7209c03f402","modified":1503825378294},{"_id":"themes/next/.git/objects/9f/245fa8aa5150f294177b5e41d296854028f2ac","hash":"d78d2dfa10b02f7087bd1b1f4df969d20f8702c3","modified":1503448901720},{"_id":"themes/next/.git/objects/9f/1e747472d6dca7fbe20258c4bbc1638a89864f","hash":"f43731f2be7603a7e7165b83877a43397b095396","modified":1520752472553},{"_id":"themes/next/.git/objects/9e/9b5b4731cb0a4523aedf24539ca3e0ae130b74","hash":"de901860c2360ee3cbfbd7b2e3dfee469fd5e6fe","modified":1504014817576},{"_id":"themes/next/.git/objects/9d/529b6d9345af6230ac09599882a6cecb603f1f","hash":"6beee0810d6cb6139ada726b378d7db61dad2247","modified":1520752472550},{"_id":"themes/next/.git/objects/9f/622183db7c6342edc0b2ef6c2986bdaaa0d1da","hash":"e0d05f809385d9e1b016ca8771e7d88c270b220c","modified":1504014817570},{"_id":"themes/next/.git/objects/a0/cb368aac0e3b25c5f1ea7d49f8c603ba6d47c9","hash":"fdd48412238e773630c605cc195261e2ee36aef9","modified":1520752472575},{"_id":"themes/next/.git/objects/9e/78b80be06bfd26cf5a736c394ffd513a06e06d","hash":"e1fb0a0f9cf6332ea3ae198690b6b9b768c5a0c2","modified":1514105914737},{"_id":"themes/next/.git/objects/a0/c52c1cf6f1f17bd12a3fed036eb133b32f949e","hash":"e36a5bb6188a543022945c9a8d0be5cee33d4df2","modified":1514105914955},{"_id":"themes/next/.git/objects/a1/c839297032cb603481a526278d91e539ac3554","hash":"c21ef6c2510b2033f897539248979a55e6e67064","modified":1500944095687},{"_id":"themes/next/.git/objects/a2/72f341614faee56a735fa6f7a850c8e6b1b370","hash":"a4193161e54a26b515802c1122312e4919cdbc13","modified":1504102726376},{"_id":"themes/next/.git/objects/a2/3cc9345675359ca6887efb8b4542742c2f9fb0","hash":"eca50885f0132834bf04a13c4de01c38428539fc","modified":1521346813868},{"_id":"themes/next/.git/objects/a2/d5bf17c15cc2705b97fe4a70a7f32dedb07f7f","hash":"6dd4484d56c14dc38138bf37c699b18180b33740","modified":1504014817670},{"_id":"themes/next/.git/objects/a3/569fc1fa990a6e0023b743bfe311ac8b1ba386","hash":"c2451cafeb9084f325b10a2511041b9812f6a38d","modified":1500944095634},{"_id":"themes/next/.git/objects/a3/5c300ea11e30a6bae5506d65d4f180238c1d1d","hash":"11e1517ed087f082a539d2383843a3db6d7bacab","modified":1520752471565},{"_id":"themes/next/.git/objects/9f/9b736faf9cc508afe5d37879ee8c9ddd8153c8","hash":"a4d271a056e4bcc9151038727e3646e0c6229f0b","modified":1500944095696},{"_id":"themes/next/.git/objects/a3/8cf7245e04c675093fe35d3165ae4458d43ff4","hash":"3a2adb1eb9bb33d13b8deac841f93be75f76627e","modified":1502528144722},{"_id":"themes/next/.git/objects/a3/a1ea56aa55905801a72554a772e6bffcd8773d","hash":"d34535ea0c07f0de88aa7dbf800580b02c59b27b","modified":1503825378433},{"_id":"themes/next/.git/objects/a1/fba373c45a71a4be47921b7b8a16bbdfa9f80b","hash":"51aecf515772cd96f792437365f5a39bccbb2b12","modified":1503825378247},{"_id":"themes/next/.git/objects/9f/97ad7e4c39a8dfeab8892d30937c1c4d52b7b3","hash":"f042428ed8865b53fb0f6d52505ea653f4b9e756","modified":1502528144781},{"_id":"themes/next/.git/objects/a4/e43e40f11aa2aed2f789ff4fc20b10ea650332","hash":"3ca1173d38f5b44a779b9c7bc180341a909e3401","modified":1500944095595},{"_id":"themes/next/.git/objects/a4/cd57f4356923ec3072e786fbc6f832e4cbd1a6","hash":"b0cb84a0b770f2b71c17ac7c84a40b5251f0e472","modified":1502528144570},{"_id":"themes/next/.git/objects/a4/4c7cb4b3150c2cac4ebe7ff7533ef9b72f6515","hash":"58c928e5fdeea59298f0d002652066a1235edc55","modified":1502528144749},{"_id":"themes/next/.git/objects/a5/96b68d8c4f990b4c9d061cd19d058d3f781aa6","hash":"939dfeda063f9b6fbb51d99d6f86fe21f0e415ec","modified":1500944095640},{"_id":"themes/next/.git/objects/a8/83bc69d253d1f4136c447a0a6667538c903f93","hash":"06f7dbf55db533b98efd2568f7060ef6ad7b6af3","modified":1503448901931},{"_id":"themes/next/.git/objects/a7/17ddfac18c0d935d49c16bc2227685f2ab32e1","hash":"7ca41c4eb50a8d6bf5acd8e95295d754976c1ba1","modified":1521346813875},{"_id":"themes/next/.git/objects/a5/b6cd4ea899a4d20d69973de11ae2f9b7ea8d09","hash":"06a999935869814a6e259c901b875432a7e822d6","modified":1514800543780},{"_id":"themes/next/.git/objects/a5/89351594a355aa94f0a7531722a3d6ee670a24","hash":"7326e7ebc82bcaed32d304bdc4ddc963960734e7","modified":1520752472552},{"_id":"themes/next/.git/objects/a9/b726ea43bd583c035c5d05c9016d7aa0488a9a","hash":"4a61d2e8aff631a3c841a68102dc3ceca1b0d33d","modified":1514105914947},{"_id":"themes/next/.git/objects/a9/cc49d9a0c66d0c69d50f8af62ae3a688ad3d0b","hash":"212eeb40fe903162860dd692a332029f2a12201a","modified":1514800538762},{"_id":"themes/next/.git/objects/aa/3f16ef19dd47917e949d13e55f9cecb420f869","hash":"4013d765dad35024e30f0e50eecc68fa2162b727","modified":1502528144732},{"_id":"themes/next/.git/objects/ab/4ac7d09e11752e4b24f4d9a9fde447232e429e","hash":"ec673882a7e4ee69dd2736f83566368c2f621857","modified":1520752472766},{"_id":"themes/next/.git/objects/a5/db045274b48a7c796002e971a50f973c89213b","hash":"978851c8a2827c96448f325f1c13c8c4d6b646d1","modified":1502528144544},{"_id":"themes/next/.git/objects/a9/c21b4b6657c71036ce23756671b1f2f3903bc2","hash":"a95d17746d999d226013bdcd23fae01b35bab191","modified":1504014817569},{"_id":"themes/next/.git/objects/ab/2d0241a3c5c3c3f6febce3d532f4ad2a14f80f","hash":"a7ed7b9b2caad4591e950a24f74c6fbb50031ebb","modified":1502528144565},{"_id":"themes/next/.git/objects/a6/7fa6c8e3172b45c44131dd8e4159aba026d73d","hash":"d8b045f7d893a7f646aa696dcb6dc5205524cec8","modified":1503825378239},{"_id":"themes/next/.git/objects/ac/3f7bdacbdbd777834c22994741b44239a67729","hash":"3b75cb1f32fd08dba8c299e013b67df310693ca7","modified":1521292047000},{"_id":"themes/next/.git/objects/ab/638b539ebd53498826f11bfa4162b379a63a53","hash":"ff99efcb50fdbc3bf093ab5186206a6cd07254e3","modified":1514105914936},{"_id":"themes/next/.git/objects/a9/26804dfe94137aed3c8bdfeef5a86e97d401a7","hash":"9187bfcbbf9228b248f69a6ca85a71be92006632","modified":1521292047000},{"_id":"themes/next/.git/objects/ac/2ccd5809d1b69c35d26194ebd684b16f255313","hash":"f81dbb5c23dd490b7906bbdc97774d9500d848e7","modified":1504102726466},{"_id":"themes/next/.git/objects/ad/343ceae944d8541afe25090f820b1f3f2cd568","hash":"714912039af562716ee4598e5ef7965d04c6fdbb","modified":1500944095606},{"_id":"themes/next/.git/objects/ad/b66ae2698c4580c6083d21866061813064feef","hash":"33f4b2dbe6621377d95ad56d5e0e0ebbcfb124a3","modified":1502528144741},{"_id":"themes/next/.git/objects/ad/bb2053111218a6560ba47c7bfb348efbcba076","hash":"a2076f8afe1ebee0a4b442910ade528cf4ab8e37","modified":1502528144589},{"_id":"themes/next/.git/objects/ac/de60881cc4d5617ef43793a2a52de6d18d8f03","hash":"83ea6840020c19bfaa5ad9462db2d6ed7067ae76","modified":1502528144601},{"_id":"themes/next/.git/objects/ab/c5f8d614276b8b0270d038026456a98a0bf9f7","hash":"f33e72a0f85091a1bcdc3c691e13135692961d97","modified":1503825378516},{"_id":"themes/next/.git/objects/ae/60dfd49fd5d3c89d30285d91d3f613c3781bc3","hash":"2000070baf60d65a9b56d12f32af3c738b4315ec","modified":1502528144572},{"_id":"themes/next/.git/objects/ae/2a240dbb2f66bff5db2f82e9e56a60e3f513db","hash":"0c8e92b04568112737a344687e40df7cc9e607cc","modified":1521292047000},{"_id":"themes/next/.git/objects/af/168a4d70d0ffdf6f6518ec8a8f2ac69124aad6","hash":"9bda43988e50babce0369d85117d4c06412ded47","modified":1514800538838},{"_id":"themes/next/.git/objects/b0/371c2fffc74aeea94ef16a1d635051d7b81bdc","hash":"50a42be66bdc5112d9ad1484d91eb9c66f05ac9c","modified":1503825378458},{"_id":"themes/next/.git/objects/b1/5e93937ad5e5dd135b4556941df160ab5c08f1","hash":"d7ecc9c445761df94fd5c322376d61fae228f8f5","modified":1520752472000},{"_id":"themes/next/.git/objects/b1/786ed4eb5478642b6255cba57891527a0ddb9e","hash":"30898abeb5fdbb53679b55019a8c958f8d270978","modified":1503457307116},{"_id":"themes/next/.git/objects/af/1f704dc6b10c08ca6cf48fc2fcc1883934ebbf","hash":"beb365f3f0dff2649c3097e4f55f855098a5084f","modified":1502528144563},{"_id":"themes/next/.git/objects/b3/2f255c84a89ee58da6437f88fe5b7d11088ff7","hash":"4cd2b0e340e36c6d81a467843f4682eeba4b8a8d","modified":1500944095674},{"_id":"themes/next/.git/objects/b3/3d53f0fdd9bedf3df265b7acf93eed4bb370d0","hash":"162c355106484f5a92efb774aa56ebf05318a185","modified":1503825378465},{"_id":"themes/next/.git/objects/b3/5ddd58722ccd5ba4b065f231a9302e43b9efcf","hash":"46286cd1cdad46385ab413a20b0b276b30acd613","modified":1520752472554},{"_id":"themes/next/.git/objects/b3/a5583f3f4f0af5e3820c473231462e28c3a71a","hash":"d1ae13498d41fd0cb563b0d47b57827c61f3b10a","modified":1514807152315},{"_id":"themes/next/.git/objects/b0/d4def49250c2820984080e821b6155c0842802","hash":"160870249090abcc9458e787ffeee8f9005b8cbc","modified":1502528144734},{"_id":"themes/next/.git/objects/b5/c998021ff6acaba90455e230eceba5a2f31724","hash":"902773c5d3a8d46ec1018a612ec57374eea4836f","modified":1500944095689},{"_id":"themes/next/.git/objects/b4/9ed289613a1549f4cd7b2372dbea989108597e","hash":"2853055471daf4978ac3913215aca909887e975a","modified":1502528144548},{"_id":"themes/next/.git/objects/ae/cff012157d282dcb92d0d80d6f40f903797c38","hash":"306d227157e7e80bcb70a7ca4790fe186c65de70","modified":1502528144551},{"_id":"themes/next/.git/objects/b6/77e6868be2396264156be6cc60de123126ff1f","hash":"993b38fcbb0d28043331944a0a833730e6e742be","modified":1502528144775},{"_id":"themes/next/.git/objects/b8/61f1f91d582830164dca0122b268fe0454145a","hash":"8c0a92b40318020a81efd1a781087a3e1309e58a","modified":1504014817653},{"_id":"themes/next/.git/objects/b6/44169b3ab05920c19e137a6bf3c7a904eacb2e","hash":"825619f0275bd2c4f6b79b9e2ab069b73d82ac48","modified":1520752472554},{"_id":"themes/next/.git/objects/b6/e61af599f8c52a9a6cee14b970f4916719ce74","hash":"cafcd3c28f0e04249e4a844442de32585dd84953","modified":1514105914719},{"_id":"themes/next/.git/objects/b6/42944871fce1cb32abe5e087268ac368768387","hash":"e003e71d3a03afbd6cd47cdcca221e742932d272","modified":1514105914814},{"_id":"themes/next/.git/objects/b8/be20983fc4ded5f84c8ef38435ec02c0df0518","hash":"4e2db8fb666b2ee5119e68ccdfe444cbf78ce54f","modified":1503825378286},{"_id":"themes/next/.git/objects/b7/1ac4f899d457ec9ec15c1eb09a69f3297fe35c","hash":"440013fd97d7d86e3caa9e6c5b09663ec329e6a5","modified":1514105914959},{"_id":"themes/next/.git/objects/ba/1a73c009d838d144d8feb88b8068b2118810c7","hash":"d030cea8aac35554995e31e441927aafcf6dc5af","modified":1503825378330},{"_id":"themes/next/.git/objects/b9/601298737e2d13d2ab766aba37e72bfbec6f28","hash":"7e5fdebea2ae1cce28e2cbd42d920fcf5d79ea20","modified":1502528144764},{"_id":"themes/next/.git/objects/ba/842f52bf783bdce37ede0dc5f7c8c29c52e48f","hash":"a161e538aeaccfd2ed084d3de90d1ca87edaa213","modified":1504102726355},{"_id":"themes/next/.git/objects/bb/3532f1d10361032ee15f0100eaf92516c75408","hash":"ad271787c0e5d957ccdd8d3c99d071b307f5cc53","modified":1514105914961},{"_id":"themes/next/.git/objects/bb/aeb84c0d09cb4ac3ceff5f665c95558167f93b","hash":"5177ae568ce582874a8f1672eaba255d5d0d3534","modified":1520752471580},{"_id":"themes/next/.git/objects/bc/58a097b3b25cb2176bb931ab2720efd6e18fb9","hash":"d3eafedb8c1161f402f3e04b562b8276375c0a5e","modified":1514800538760},{"_id":"themes/next/.git/objects/bc/6cd2668f8c7dd3b9381efcd2f6c868ec2d5cee","hash":"45510231127bdbae8193e4591f316e132ff412be","modified":1500944095641},{"_id":"themes/next/.git/objects/bc/a235ca4718194d3651030ccc0ec1acc1e5ea79","hash":"e02f97cd148bff0d9c3df33a7956539802338cb5","modified":1514105914730},{"_id":"themes/next/.git/objects/bc/a4842bcd43fe5ddb700ad1891b2f823a23f133","hash":"7ed0cb262ee750e20d21ae083a827bf8e716e761","modified":1520752472618},{"_id":"themes/next/.git/objects/bd/364a7c0f66a17693fc307ae80ec17153db9e1b","hash":"bf980fc8df520e598043289be20719d9156dc72c","modified":1514800538782},{"_id":"themes/next/.git/objects/bd/96a5f5edd90274f027c19d9a95fb7385199066","hash":"246259f49d4d5ae379611dbe6d5fc372d0c03661","modified":1514105914813},{"_id":"themes/next/.git/objects/be/b503e3bc0b35a9255cd6135e47a746c9d6073f","hash":"f3bc2362542e6e946db0d22d1ca1610eb29a077f","modified":1514105914967},{"_id":"themes/next/.git/objects/bf/931dc08346ced5f5089da50d6821a29e06fad4","hash":"6b48b93c13df0bc0fb77e8fa507a90ad3f79ce8c","modified":1503825378230},{"_id":"themes/next/.git/objects/be/e0674f281ae23f7c661edbf14bb73caacdf061","hash":"605c9df2fbd72828956a20872538154eaab5fca3","modified":1521291751953},{"_id":"themes/next/.git/objects/be/e212f976f11bd2f39e3fa301a6bd466bc03677","hash":"b5fa9618eba1d66e220ffed40ca8096843042d31","modified":1514105914735},{"_id":"themes/next/.git/objects/bf/74da67ab7efccebb3f403a1709923ab6e843ec","hash":"05e282f2ace6dd0fd17061f13cbddcd7c1f072d9","modified":1503448901965},{"_id":"themes/next/.git/objects/bb/ef66cedc59f4dc90bc8cad2642cb4f4097b9ae","hash":"a9aca5f0ff44029448345ae30b7ed3399834decc","modified":1503825378293},{"_id":"themes/next/.git/objects/c0/1ee89d06d37445f8f0b72973ac5b3e0bfe3d78","hash":"3f7307e2d8b1be3bee2040756497794e4e291c66","modified":1514105914732},{"_id":"themes/next/.git/objects/c0/6669cff6fa7609cbcceb6c3a4b4efb31085e94","hash":"764eddb9b20b704dd0c882fcba4792ea102ef05d","modified":1514800543814},{"_id":"themes/next/.git/objects/c0/35747418b5b3fdd105bd53afcd8808900faf5d","hash":"ca9721c275fa59e26f5c69da6016aa19947bb77e","modified":1500944095683},{"_id":"themes/next/.git/objects/c0/778d923a7e23c762b9bc034f659bf1f001abf1","hash":"a3403d3e9de4b28d06d5e71aa7d551442b50556d","modified":1504014817574},{"_id":"themes/next/.git/objects/c1/621ef4875413658c7e1e854d441e3f898e2422","hash":"c693f362fdc60fa785fb2304005428fffccd1fc7","modified":1514800543810},{"_id":"themes/next/.git/objects/bf/b7a3ba4b94812411f478b52a97268ef7c75ced","hash":"6df288db5ba7a6e4b7c3d96752ab64f3911f3358","modified":1520752471563},{"_id":"themes/next/.git/objects/c0/a5e25e825e77da3bae16b1c747b2ab910e8c4e","hash":"82f2ab1b155030f3aa9c72498c35426d39ae2da4","modified":1500944095612},{"_id":"themes/next/.git/objects/c0/d2e37215a9b04a6afff4d632e740a3c2d29999","hash":"fe70196af849284661fde7a4d112fb1a1e1f11cb","modified":1504102726373},{"_id":"themes/next/.git/objects/c3/38e71b35448c60d29a615a7a956c20b8250bbd","hash":"40719b010b4c2c8b06e156a0bb568ca740bd7ba8","modified":1500944095585},{"_id":"themes/next/.git/objects/c1/b4b649dc125661bed0e577ed1f043fda73e138","hash":"5b600902791b9f8eb653b1f3ada409f44364decf","modified":1514800538845},{"_id":"themes/next/.git/objects/c2/ecbe8d0bc535e83975b3a1da0f525cdabfbd40","hash":"44baeafe0b54c01e91d7f9dd06004b2d80e67207","modified":1520752472612},{"_id":"themes/next/.git/objects/c3/8bf182c4eed8e86e2c632f10ae3e1febfb2b97","hash":"6db560ad2586142ddf3a79084a63eee3f95e4c09","modified":1514800538819},{"_id":"themes/next/.git/objects/c4/1fe1fb09ed35c0e344ef2de810ca1beaaca626","hash":"1015a047800d64eb4613998cc201817b4eec33e0","modified":1514105914957},{"_id":"themes/next/.git/objects/c4/99bca7a7352f6c51ef758509919bc0847e50b6","hash":"40ca88daeb0df58d6bcee2aaf4faac1a2c8cf58d","modified":1504102726436},{"_id":"themes/next/.git/objects/c4/adb4c9a11be1b1f471512437b990dc9155c5d8","hash":"ddf3c1832376ec184fe82222b57aa7832f605957","modified":1502528144653},{"_id":"themes/next/.git/objects/c5/b75e7cb73d2a98c9030b9f0ffd37adc1c13cb2","hash":"e343f4eeee5293150119698c3e78efd8f430baee","modified":1520752472577},{"_id":"themes/next/.git/objects/c5/c55a12a4d7dfe0c1d5378fc9d39fda6c82a1a7","hash":"d7b20ffbaf8156926e2d1494e87ea0fd0faa1420","modified":1514105914937},{"_id":"themes/next/.git/objects/c6/1386deaa17e4a435ef9226f27b959033fabb83","hash":"d310990da0fa9a4510759f1bcc7a19fa6593b917","modified":1503825378240},{"_id":"themes/next/.git/objects/c6/264fc89755fa4b5c9684fa2ddae102013f9586","hash":"16e5593730ee41611183044a37e15d8252e16166","modified":1502528144556},{"_id":"themes/next/.git/objects/c6/b255c0c1926c35ebe17b067d8d464a3fa21f9f","hash":"b63f3c27d446882b3e3c8371fda217d526a0e422","modified":1503457307087},{"_id":"themes/next/.git/objects/c7/5a3e86e5cc5dfef9a4383de1978a0d0b4637b7","hash":"4a3ee14821772e69bbb2afda032b295fb89e1872","modified":1503825378422},{"_id":"themes/next/.git/objects/c7/5cbc4061e55af49e1b9db147d041cdff07cbb7","hash":"22679cbc69132e1b18a6b8db044078169757576e","modified":1514105914734},{"_id":"themes/next/.git/objects/c7/c4ea1f61c81235cfdec21cb2fab3f9573b8757","hash":"46181e2b67c654356fdd04cdc0a1929ebbd71085","modified":1502528144606},{"_id":"themes/next/.git/objects/c8/6c3be357f4470f9a0ce36b78b541418a7a5429","hash":"b59fa75f77f26530d00b13169106a397ef9df8bb","modified":1502528144745},{"_id":"themes/next/.git/objects/c8/16b8bc849e766dfc09c9d6a4786472f42ce64b","hash":"060369e36329bfe206e5ff1a3ad699701aca89b2","modified":1503825378284},{"_id":"themes/next/.git/objects/c8/a01eb222a54baa0eeb492bc668f4b0d90732eb","hash":"8d5f4edcd1e324d022fa299be361ea6f429ae636","modified":1514105914950},{"_id":"themes/next/.git/objects/c8/e6c4b6937857bb843c59ff1b92198513ab13fe","hash":"5cdb96a431e8bf8fcc0f67ce6f7eef3da977ac93","modified":1514105914729},{"_id":"themes/next/.git/objects/c9/43b3e7ec37ad39e5b1e33204d6b2c7537c4412","hash":"b029ccef7e8a06f9889aaa1b8af29c50c062cead","modified":1514105914956},{"_id":"themes/next/.git/objects/c9/7bd708e5ed835d71070036f469dc32fb1fde47","hash":"a5a372a3474daa8db13d523fecd013bb75678f33","modified":1502528144786},{"_id":"themes/next/.git/objects/cb/682b44c33716d22e1b0499dc3c3215d9563c90","hash":"ba2d212776cb87456d1b04dc8053e5d711034d90","modified":1521292047000},{"_id":"themes/next/.git/objects/c1/70a1e6ce201e3c07d568257294f82af9b586a8","hash":"0f204aedae8fbaf10b73fb817f0f290425317b2f","modified":1514105914835},{"_id":"themes/next/.git/objects/cc/ba0d924a7b9cbd43efc2b4c7dbdc218d5893f2","hash":"d4da6c2e22cf23cb29424a4ca4bab4dfc8775208","modified":1514800543795},{"_id":"themes/next/.git/objects/cb/1c200721a9e9a83f6019bd49264bb714c1a6ab","hash":"0da6449d183a67fabb8434939bd883826e621178","modified":1520752472549},{"_id":"themes/next/.git/objects/cd/82c5d8c752e53377a79749119fd2a0fa0b1fb2","hash":"3178bd7f4659e363cc43925659a013d1120696bf","modified":1521292179418},{"_id":"themes/next/.git/objects/c9/eb9a8085e2d63d98946f4e7ce1f9ec892ee511","hash":"8f5342990daed61fc834855043c9339b7251f6c7","modified":1514105914781},{"_id":"themes/next/.git/objects/cc/e365fa386233b8f5a1567f000d42abf69ad96e","hash":"f4594c535b0d975044e0fa3b94f6a01d1aee628f","modified":1500944095628},{"_id":"themes/next/.git/objects/ce/a6e54682d8a34d74fb2d6f6ce01bf3b985c01e","hash":"aab8e1aa1ed52a5850cb29535ed74912407df390","modified":1503448901976},{"_id":"themes/next/.git/objects/ce/4b03809568f821e4ccc2578fba67bc729e7510","hash":"682b4abed4719c32de56dc1a42da49e07cf2499b","modified":1514800543819},{"_id":"themes/next/.git/objects/ce/2a976d5e2955f58545b43880d5ddd9696a9ab1","hash":"95ed8a5ffac1b1e11847b39150df1bc314334d55","modified":1500944095679},{"_id":"themes/next/.git/objects/cf/73946d67cab4dbc5cd2a1f1cd7181f5064f30b","hash":"2f265db3c4b379edfee32bbbd09761253d1f05ee","modified":1500944095644},{"_id":"themes/next/.git/objects/ce/bbc8ee424e62f3788498e039c668890934cc2f","hash":"51c5e812a74a15f082474f9f6cbc1c2ef4391c0e","modified":1503448901885},{"_id":"themes/next/.git/objects/d0/191930e84a4d26e26e6b401308b69c33c0e70c","hash":"71a9bdbe991d90ca0cfd9f4af263e7fe5137f0b6","modified":1504102726419},{"_id":"themes/next/.git/objects/d1/b8b3f05908c4118d4ec1853f682e30383e6438","hash":"bcef8735da8087b11522b8b0cdcb48c3a63b8409","modified":1504102726443},{"_id":"themes/next/.git/objects/d0/e253c70004e2d0016018f7005a54738cc31fa0","hash":"438ca9d035bb48d512dcefc6f617fbc3928a372a","modified":1514800538838},{"_id":"themes/next/.git/objects/d0/f38f235aa4ebde5aab7900bc1de63b2878f6e5","hash":"17100f87cf54baa6e98c07aa33ebd7aebaff0d26","modified":1514800538787},{"_id":"themes/next/.git/objects/d2/1947cdad00a44d44e0b4c9e11393b2f4c6e0b9","hash":"8f0b8fea008c2ae717039fa0639f5676e7482e17","modified":1520752471579},{"_id":"themes/next/.git/objects/d2/6232d56b30b08655850338fff3d7d624f2a189","hash":"cc8afa2370be8b348a868423ff00d3504b2b9ab0","modified":1503448901948},{"_id":"themes/next/.git/objects/d3/4dbaf869af10febc15f3abde189781d7f05a17","hash":"b4ee8aefc721e001fe1f02f3b0502bde5c8db7c9","modified":1514105914961},{"_id":"themes/next/.git/objects/d4/b2abac27ddaa89dbd5b461b472e7abf7fe356b","hash":"497fdd651e8d86d246011e890efb5bbbbc1b3d62","modified":1503457307089},{"_id":"themes/next/.git/objects/d3/658d329529acfa7c1b827b5650cc92fdb1ea8b","hash":"2e9350ecd6d874ddd179d9df6eb2798b12d940d7","modified":1504102726471},{"_id":"themes/next/.git/objects/d6/07b0b3309360f029d83aa5449e6566269abe3b","hash":"26f458d80ec28d63460d1bdbcb73814e20aee819","modified":1504102726462},{"_id":"themes/next/.git/objects/d4/bff88c7fcfa89aa606754a47cc970f6c7ca109","hash":"b1eb5df1314a6d92e8b2a072f79202a1979ea236","modified":1503448901867},{"_id":"themes/next/.git/objects/d8/210e3884c2bcf31d38cb745732e53a531b11ec","hash":"bcd8fedf55fbf19e65483bfe2dd8824c2e1be1d4","modified":1514800538798},{"_id":"themes/next/.git/objects/d8/274e50a606b394921786c9eab45ad924079ca4","hash":"260e597a3c88d6ac147bfd8090d97e63ec8acb55","modified":1504102726353},{"_id":"themes/next/.git/objects/d8/3cbc85c09671aa04fab18f68527ea81d1f5b6f","hash":"5fec3eb8ad07372a3aa53c4579bc5176138628b4","modified":1520752472555},{"_id":"themes/next/.git/objects/d8/68d67dae3884e2aa38d6570ac241e917f44c4e","hash":"9cde663ba535fc30119856f9352511fd642c7949","modified":1502528144660},{"_id":"themes/next/.git/objects/d8/6d0b03ea7a25b29c377bd04400092caedfae78","hash":"53d5de27ae12d29d3b433ecd2d79565a548f8f06","modified":1502528144546},{"_id":"themes/next/.git/objects/d1/e3960319d0e0be311efc4e4381b57cafeab6ba","hash":"a035373a57b439879617ea1956e1f515a038096c","modified":1500944095599},{"_id":"themes/next/.git/objects/d9/76a22fa7135e039213e5e38feb090b20cda1ae","hash":"60e8301d72d1f7e18edfde13357847ed2bfc7d0b","modified":1500944095596},{"_id":"themes/next/.git/objects/d8/7ddf9092c62fb2bd84fe8da1809e661973e0f1","hash":"bf1b4a24adca4ffa105723a1d265908745ec189d","modified":1514105914944},{"_id":"themes/next/.git/objects/d9/c33ed0fc4a505873e0c7b6baaf0963eb6515df","hash":"11b76cdca5efea97feaa886e8713310a4b68118a","modified":1503825378477},{"_id":"themes/next/.git/objects/db/87b252fa10ac6040bb8f31abeb0f12d2422085","hash":"a58cf296aae5133e06daa85ba53b44745a99d157","modified":1514105914736},{"_id":"themes/next/.git/objects/d9/95e4c6ddbdbc136eddadf86ed4a8496365f5da","hash":"af9ed14a1a727f993c1f3ace90e42919b2a56852","modified":1502528144609},{"_id":"themes/next/.git/objects/db/748740c8abc730822fec88b3f850d4afea7e81","hash":"2b4ce08bb0b497c16d67de50fecdef4850a1f6e2","modified":1504102726408},{"_id":"themes/next/.git/objects/d8/84845eab89ac5c6797e5b2e4ba918c9b832d8d","hash":"3f984e18ed733e30ff7893f316e3f8d010e56c26","modified":1514807153620},{"_id":"themes/next/.git/objects/de/f9ca4167cd7fe7a38e254329d9b5f8a244c9b1","hash":"6ca8b96b8784f70555cd0348e8f9e12d848a2475","modified":1514105914963},{"_id":"themes/next/.git/objects/de/7b4d6694064734334117f4f99fa81ffc338891","hash":"81d679297f91172773e2faaa7e3a77ddf6497e7c","modified":1504102726448},{"_id":"themes/next/.git/objects/de/f08829e7ebffcceb36c681c19b685aefc8c84b","hash":"acdc9dae6df9e8a43d8bd41382af75fec35870a1","modified":1502528144566},{"_id":"themes/next/.git/objects/e1/2ad62c6f071006c3d8c6a1b7518a24f8ead2b0","hash":"8ac0b11e4c4ffaa3c468a4ace89da0230f7afc75","modified":1503825378417},{"_id":"themes/next/.git/objects/e0/0d3544cf37f824739e121c53c7ba1029f22aef","hash":"063ff7978732d9189709d5b790c69fbda469cd32","modified":1514800538788},{"_id":"themes/next/.git/objects/e1/085c5e4a25ad1be034e052e128a0f9ed415dcb","hash":"d2803e4300f8e1c86595d6f69f781209fe83a827","modified":1503448901967},{"_id":"themes/next/.git/objects/e1/3a35421092b361b1b4c829385ba1910a2bd72a","hash":"52f77eeebe2478fd46f74cb7bf4b83253f19534d","modified":1520752472000},{"_id":"themes/next/.git/objects/e1/98d1f5ffb29cf3289ccbceff6804659e69eb7f","hash":"5bcbb9e9212b748e177d32dc3b75becbf798d533","modified":1500944095608},{"_id":"themes/next/.git/objects/e1/5f0fa740e61ae2956b5a672942ad144a912047","hash":"928a8f4369e5733f0557b83a9e3951c0651aaa68","modified":1514105914863},{"_id":"themes/next/.git/objects/e4/2deadc20d260da1fc62c183c523ec868dba390","hash":"9204368921267ddabe0a73abc110ef365a8beb4e","modified":1514105914953},{"_id":"themes/next/.git/objects/e2/9f53beb6a4c075773805c9324b3e0daed001fb","hash":"e7025ae3a6970e72f845b4df09c92e38959381aa","modified":1520752472556},{"_id":"themes/next/.git/objects/dd/371247a569bb5dc13e02e01f0be392c4e21ca4","hash":"cfa27ad7f1eda70dc2f2ac65492e2f436a1de4c5","modified":1514105914725},{"_id":"themes/next/.git/objects/e4/9a653ca7ee5525ca3c2be3ad2bb1c7f769a64b","hash":"3a50688a6032cacc55a45ae276a3c8e834c31c3d","modified":1500944095673},{"_id":"themes/next/.git/objects/e4/56ec81794758844f4b8ec7ebd7cc64b930e214","hash":"aa4c6631bbfafbe56ccede7c3e7cf9a7d52a58e2","modified":1514105914943},{"_id":"themes/next/.git/objects/e4/f65fa97a17cb25598bc56cf1159b79359134bc","hash":"1d38a37712ff5ef467f35af04dca090637bf525b","modified":1502528144697},{"_id":"themes/next/.git/objects/e4/f4c82e61838cb6b20f4862f678801888fa91d0","hash":"c865bcf0a7618c2157d58b4d552a3adbcb7f2f7e","modified":1502528144574},{"_id":"themes/next/.git/objects/e6/ba772b9524b27100da023f154d19278eed4404","hash":"ad7056fe9c47da5b04f7efb28faac31077b4d1c1","modified":1504014817582},{"_id":"themes/next/.git/objects/e6/fbc37c7287f42c059bd220752b9e598a1a626d","hash":"fb90230ab092dd59c045361c2cdf1a9e1f76da30","modified":1514105914694},{"_id":"themes/next/.git/objects/e6/ffedcf7295e6ad0326a65c7997e7b13cf389e3","hash":"320c86187727c4607c945e8e81577d22f166cf5b","modified":1500944095563},{"_id":"themes/next/.git/objects/e7/c31ce8f15b37346896ee8296919606ae1dbbb5","hash":"bb0c03ce6c191a0f13104b025ba6f1275bded4fd","modified":1502528144638},{"_id":"themes/next/.git/objects/e8/690ec31577ffb79a60aea13fe4cc578263423f","hash":"8bae625b1a1c8972ec76c224b34819dd41276673","modified":1503825378434},{"_id":"themes/next/.git/objects/e7/755b30b0457c4ce234a27af07a687ff8a86242","hash":"f758fcbc05c3c2f766dc5444df5ea429b4b50086","modified":1503825378385},{"_id":"themes/next/.git/objects/e9/ea66b32152c6da1a70146f1a56b72a4efe97a2","hash":"45edfd4ab3f7176585b54297707becb4fdbbf2b4","modified":1514105914904},{"_id":"themes/next/.git/objects/e9/a115a3b4ddd0e35aee41c5d43b8dbcc0243d55","hash":"15b508c6b1df7d85ad64b37a08e68576e2ae5071","modified":1514105914724},{"_id":"themes/next/.git/objects/e6/fe21e6d347aab80d9d1640df94b98f5b5cb41d","hash":"787df370a7c350d38879556d80ff0ae3f82c8a41","modified":1514105914811},{"_id":"themes/next/.git/objects/e9/8614c41c822c8dd310852ceb03e47d6d16573e","hash":"b462230f7baf6bdd0f25a9279f5e9225e0c1d4ea","modified":1503448901917},{"_id":"themes/next/.git/objects/ea/f112c522fac8cd81fc695652ae1becf7be9660","hash":"482753350c0528c977016757d5408804ee6601e0","modified":1514105914733},{"_id":"themes/next/.git/objects/eb/02a5b4fcd16773457a24c2d082ea5a18b13aa4","hash":"88f2fa618a7210358af12cc6611cf26aee476b86","modified":1502528144594},{"_id":"themes/next/.git/objects/eb/a55e0be9d60de4285e186b35e81c54d8b3cb84","hash":"6185a9ef4a467e66f5b229181910cca3475f9aba","modified":1514800538814},{"_id":"themes/next/.git/objects/eb/f8b09898af9858440b937691676ae1426a2b2b","hash":"cd9b8a54c7fb9c589440c21a1a19f758820bc2ae","modified":1514105914695},{"_id":"themes/next/.git/objects/ec/c811a23a675b0588e17b16691055f4efbc0c80","hash":"b54309708d82a720710e2c08c44d3f7b030d8ecc","modified":1500944095584},{"_id":"themes/next/.git/objects/ec/a00352324054d9b13dd6fa0149b85981f294c8","hash":"a81610daa14cc0d67b9e046429eb670d5b9e8970","modified":1503825378351},{"_id":"themes/next/.git/objects/ec/d02de6921754012469a752229799fbf9aedb6a","hash":"c7f5ccec12cb87ed3ef7f5288a6ea34d55b09b80","modified":1514105914803},{"_id":"themes/next/.git/objects/ed/7c207c7a8b6943c81451f524513ce1a357801f","hash":"ac5da5cb337e9404e99c6217b5d0f87d5daa570c","modified":1502528144633},{"_id":"themes/next/.git/objects/ec/ff5682888f912543907c20b3a9844bfbb4bbe2","hash":"59aefffc1a7cd7967d975231c86b6195f222ef88","modified":1500944095641},{"_id":"themes/next/.git/objects/ef/1f33b372f48286c1c60343f39801dec3971a67","hash":"cbbfebc5ae49a06720511ccb73010a651e4d360a","modified":1520752471560},{"_id":"themes/next/.git/objects/ee/7700357a9964b1f1659d9c05a832f1e859d01f","hash":"6fdd955470a3a6c067b28ad375943af624ba05c9","modified":1520752471581},{"_id":"themes/next/.git/objects/ef/213e57899cbf6d6f80e73c6532c5a3ab7b0efe","hash":"d576d7b7c213c731b8c9471a3cc9080f83fd3546","modified":1521292047000},{"_id":"themes/next/.git/objects/e6/1ca075cfb1aeaeb016b645906fc20504b572ab","hash":"8be406629ec60eb9f42febf488e708dacd5c8aa4","modified":1514105914864},{"_id":"themes/next/.git/objects/f0/82b3e8615bf1a4c12006d1f670c5a54e80d15e","hash":"1e5612095a2ef3d11db02537929b22ebfeacbb09","modified":1502528144753},{"_id":"themes/next/.git/objects/f0/b32682d723b01ad669ca5ffbf20358b6712394","hash":"7d609cc5d7f1a24bce61c07c27c922019d56deb7","modified":1514800538764},{"_id":"themes/next/.git/objects/ef/466e1d42082010107841d30b67720efac9c2f3","hash":"5d878ac4400c825cd6ab635cf8418ada0f3a6b2b","modified":1503825378435},{"_id":"themes/next/.git/objects/f1/55f454743632190bcb6d468925287d6737c70d","hash":"dfa71c682a7a48f4b1ecff7a434579c046288d9c","modified":1514105914798},{"_id":"themes/next/.git/objects/f2/150bc1f263e16dbe18a8a4ec9f8d349e898cc3","hash":"20850d79127efb58575baa4d9b2bd8d3c15c8766","modified":1520752471583},{"_id":"themes/next/.git/objects/f2/10902e0548201c0b026345e56e7dc30fc2da1a","hash":"115796cff40d58fb97658f7c26bafe6d2aa141e6","modified":1514800543778},{"_id":"themes/next/.git/objects/f1/5a88264c9cb9ef0b82d0f9533c8e416e9f3146","hash":"e8202fa777b75a3de8ea323762305b5c76f8c983","modified":1514105914706},{"_id":"themes/next/.git/objects/f2/5302a8d7ec8d4a88d9dce77581b41dc99222ee","hash":"37caa509de4d407a80978935d724250087b017ef","modified":1514800543805},{"_id":"themes/next/.git/objects/eb/f84af2f8d63ac6656f1ff61f515655aed71927","hash":"679659897544829e7abe702b437f4cc852284698","modified":1503825378391},{"_id":"themes/next/.git/objects/f3/6f00c482a315e73fb80b121f62a048bc415e4d","hash":"4bf5afb0e5037d0455732d97a07bedc938944147","modified":1503448901859},{"_id":"themes/next/.git/objects/f3/64bc0ddbd40d734d3cf9fe26c78150f58db226","hash":"4e0f5240fe1a70b1caca8e09b49bc5c02881152f","modified":1514105914965},{"_id":"themes/next/.git/objects/f4/17744dca9584917b34aaad4e7e3289b660b5ba","hash":"cd46043d636ebd4381f00a3c20e96b38bb397ab0","modified":1503448901861},{"_id":"themes/next/.git/objects/f4/7e84d039e52983732150b855fee3719fe465a5","hash":"f987210d6a2266c98f09f69d6fbe8e03d7e8fac8","modified":1514105914721},{"_id":"themes/next/.git/objects/f5/b6658cf37414ab0afe8e944e57eb1254b46089","hash":"320715f24662442410ea7dcb4a3895c5bacb9080","modified":1521284485000},{"_id":"themes/next/.git/objects/f7/7bee614d71db71b158d653bd09bcb248d6b512","hash":"1c536b5e516ea97087bb0663a6cedeb316e4a375","modified":1503448901890},{"_id":"themes/next/.git/objects/f7/c3907fef9f7e41430d9b885c087d680a7ce1ee","hash":"b8d64858c95a99b58527c0d669c9ac6ad1782463","modified":1503825378228},{"_id":"themes/next/.git/objects/f8/392ffed5569aaede7891db47c47ebeef5117eb","hash":"e00fd95b2a0be6c1ed3e62f18343cfa81d16892a","modified":1500944095707},{"_id":"themes/next/.git/objects/f7/f4138feb3202be1566e383624885b2b2f3634b","hash":"7c7877458c6615370124f28fea9396737b349c12","modified":1514800538867},{"_id":"themes/next/.git/objects/f9/52fc546970f8e877f67167f5c6a2b7325704d3","hash":"1add94f064c39cf9785cefa91cab925e01345da6","modified":1504014817671},{"_id":"themes/next/.git/objects/f2/a40490d974c5490a13e4666c5910011342bc15","hash":"7bf7171d0e4bbac291168891d9d9e28a43a223ed","modified":1502528144772},{"_id":"themes/next/.git/objects/fb/3c6f8cfe6d6460f2e5105c074aa4313fdb4bbc","hash":"b936277de3786dae47fec5e0e5fe515812086c0c","modified":1503825378571},{"_id":"themes/next/.git/objects/fb/87922761a1e9666006c8130d3d3f4ba85472ee","hash":"3e0fd8cbd3e576f392058cc8cd16ab558d369dfa","modified":1504102726358},{"_id":"themes/next/.git/objects/fb/d6d43111a10783950c39750b7012f77badfa91","hash":"dc923414b1b2016e349c4eddf4ad6722a4753214","modified":1502528144782},{"_id":"themes/next/.git/objects/fc/f28349ac448333ce826a2eaacd9ea1d5c323b9","hash":"2379d562e1595c690a31420c0dc11c6404ca170a","modified":1514105914710},{"_id":"themes/next/.git/objects/pack/pack-64e83ac2c89feffe2aee633ddf092ea0240ce2d7.idx","hash":"68d58f05e10832cf3acd94d67bd6b940f4ba456a","modified":1510406959651},{"_id":"themes/next/.git/objects/pack/pack-6d50a2c2ef6e3ece7a3294edfd7a8c3bdda62850.idx","hash":"3c3e82c66b9f6062da69e9f4eb7cbe69f953dce2","modified":1501986885139},{"_id":"themes/next/.git/objects/pack/pack-cf6ef54e5ee4707133dc7116d96871b24a38befe.idx","hash":"f6b47547c9bdd51ea31e95d82a60bdf213b8693c","modified":1506348263087},{"_id":"themes/next/.git/objects/pack/pack-f87164ada1b63564b3a21db0c8accaf31ab9a706.idx","hash":"49c32104010ebb50373981181048a8ca2e47491b","modified":1503146860306},{"_id":"themes/next/.git/refs/heads/master","hash":"f4d9f6f8bc79e9bc071cf29324a74a1d78158ab9","modified":1521291993375},{"_id":"themes/next/.git/objects/fd/dc0af05ffe298d407b0319d16408b78442c222","hash":"8c6ce569dde61778c306ae714059af275a20697b","modified":1500944095648},{"_id":"themes/next/.git/refs/heads/master-ckjava","hash":"9328c03e4051fa86ee20781b206d0af4c87c2a30","modified":1521346813894},{"_id":"themes/next/.git/refs/tags/v5.1.0","hash":"7ec0539e56966d1eaf8b88c1d27165c1f7dfacf5","modified":1500736330295},{"_id":"themes/next/.git/refs/tags/v5.1.1","hash":"3caf2cc30e2bc17ce7c8decb48064104d4845453","modified":1500736330300},{"_id":"themes/next/.git/refs/tags/v5.1.3","hash":"5eec1427a836e6e34c81dc784bafb33c2ccf48f9","modified":1510406960104},{"_id":"themes/next/.git/refs/tags/v5.1.2","hash":"75173e2dd18a6221ff84742ff53d01ac5c6e04b0","modified":1502027085607},{"_id":"themes/next/.git/refs/tags/v5.1.4","hash":"8c214326fd06f2e936c94c48de6573d52522639b","modified":1514800544322},{"_id":"themes/next/.git/objects/fe/6f2570b51efcff6961a5248ae3fedc15899d5b","hash":"ad8ee3b3b7b0d698f98313b809e718bef5222a51","modified":1504102726407},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1521291993114},{"_id":"themes/next/.git/objects/5b/2268bd48e7bca5425b66372450fc66dc76a733","hash":"da372aae04daeccef1c79033d162793d9347c4af","modified":1520752471564},{"_id":"themes/next/.git/objects/cf/85025602a7eb5e9d80e6bb68a6497d47bf1880","hash":"06ff0c45cf1dc62791dc0dab06b3718e61062b57","modified":1502528144584},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1471962406410},{"_id":"themes/next/.git/objects/f4/0602acdf6c1c1cb6cb6e9b0fe031e702f121ee","hash":"3c2e6954d20e82b59c5f15fddf524472625981af","modified":1514800538844},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1471962406412},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1471962406412},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1471962406413},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1521291993116},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1521291993116},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"0a9cdd6958395fcdffc80ab60f0c6301b63664a5","modified":1521295023677},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1471962406417},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1521291993116},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1521295023680},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1521291993120},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1521291993245},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1521291993245},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1471962406416},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1521291993246},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1521295023678},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1521295023682},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1521295023683},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1521291993246},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1521291993247},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1521291993247},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"ccc443b22bd4f8c7ac4145664686c756395b90e0","modified":1521295023683},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e6d10ee4fb70b3ae1cd37e9e36e000306734aa2e","modified":1521295023684},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1521291993247},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1521291993248},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1521291993248},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1521291993249},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"493bd5999a1061b981922be92d8277a0f9152447","modified":1521295023686},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1521291993248},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"9246162d4bc7e949ce1d12d135cbbaf5dc3024ec","modified":1521295023688},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4050553d44ba1396174161c9a6bb0f89fa779eca","modified":1521295023689},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1521291993253},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"4dcc3213c033994d342d02b800b6229295433d30","modified":1521295023685},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1521291993253},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"7e65ff8fe586cd655b0e9d1ad2912663ff9bd36c","modified":1521295023690},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1471962406457},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1521291993253},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1521291993254},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"7896c3ee107e1a8b9108b6019f1c070600a1e8cc","modified":1521295023769},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0e55cbd93852dc3f8ccb44df74d35d9918f847e0","modified":1521295023769},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1521295023775},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4069f918ccc312da86db6c51205fc6c6eaabb116","modified":1521295023776},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1471962406480},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0289031200c3d4c2bdd801ee10fff13bb2c353e4","modified":1521295023785},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1521291993293},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1521291993294},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1521291993294},{"_id":"themes/next/source/js/src/motion.js","hash":"885176ed51d468f662fbf0fc09611f45c7e5a3b1","modified":1521295023786},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1471962406481},{"_id":"themes/next/source/css/_variables/base.styl","hash":"b1f6ea881a4938a54603d68282b0f8efb4d7915d","modified":1521295023777},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1521291993295},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1471962406484},{"_id":"themes/next/source/js/src/post-details.js","hash":"93a18271b4123dd8f94f09d1439b47c3c19a8712","modified":1521295023788},{"_id":"themes/next/source/js/src/utils.js","hash":"b3e9eca64aba59403334f3fa821f100d98d40337","modified":1521295023790},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1521291993302},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1521291993321},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1521295023768},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1521291993322},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"58e7dd5947817d9fc30770712fc39b2f52230d1e","modified":1521295023774},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1521291993322},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1521291993329},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1521291993329},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1521291993330},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1521291993331},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1521291993331},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1521291993332},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1521291993332},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1521291993352},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1521291993353},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1521291993354},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1521291993355},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1521291993354},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1521291993354},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"b02737510e9b89aeed6b54f89f602a9c24b06ff2","modified":1521295023794},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1521291993355},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1521291993332},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1521291993329},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"e33aa8fa48b6639d8d8b937d13261597dd473b3a","modified":1521295023800},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1521291993358},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1521291993357},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1521291993358},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1521291993359},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1521291993359},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1521291993359},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"2ce5f3bf15c523b9bfc97720d8884bb22602a454","modified":1521295023801},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1521291993360},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1521291993359},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1521291993360},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1521291993360},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1521291993361},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1521291993361},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"14264a210bf94232d58d7599ea2ba93bfa4fb458","modified":1521295023795},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1521291993362},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1521291993362},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1521291993368},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1521291993369},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1521291993371},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1521291993371},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1521291993372},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1521291993360},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1521291993363},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1521291993361},{"_id":"themes/next/.git/objects/90/71e9bd4609cfe2a918f5be2cef8cacd91f337f","hash":"bd6fb6464deb8ad3f37b33f0a72ef85551e169e6","modified":1520752472517},{"_id":"themes/next/.git/objects/pack/pack-32d08a5c700cffb6a166dd8964dc69f1c237373e.idx","hash":"3e504c93fdd02c9c9a0052f1bf52666dd4bf6b4e","modified":1500736330060},{"_id":"themes/next/.git/objects/pack/pack-f87164ada1b63564b3a21db0c8accaf31ab9a706.pack","hash":"2fa60ace2c34b376f5f0d77fc2288374ef4ab9a8","modified":1521292047000},{"_id":"themes/next/.git/objects/pack/pack-cf6ef54e5ee4707133dc7116d96871b24a38befe.pack","hash":"88c0026fdd4fd24e91a21a3c2d1d3994b145d9b0","modified":1521292047000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1521291993353},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"316d8b5107e85fca6be1f02794ac3529c206fee9","modified":1521291993376},{"_id":"themes/next/.git/logs/refs/heads/master-ckjava","hash":"801976fa6dd3db54a0c58fd49414955821a69b20","modified":1521346813895},{"_id":"themes/next/.git/objects/pack/pack-302df316ecce271b6f4e6a41e488dce8621d02b1.idx","hash":"c532d45cf4b95ca70060967ae49a69d834ac1726","modified":1471962406153},{"_id":"themes/next/.git/objects/pack/pack-6d50a2c2ef6e3ece7a3294edfd7a8c3bdda62850.pack","hash":"6e71d816b5172e1e24667c85d02516daa3a9f15e","modified":1521292047000},{"_id":"themes/next/.git/refs/remotes/hexo-theme-next/dev","hash":"9d2c0a9ea0a9e1d5378f6aff74f50a11fe3bd73e","modified":1500736961980},{"_id":"themes/next/.git/refs/remotes/hexo-theme-next/master-ckjava","hash":"9328c03e4051fa86ee20781b206d0af4c87c2a30","modified":1521346821877},{"_id":"themes/next/.git/refs/remotes/hexo-theme-next/master","hash":"4036989c0aea84d2b33d84e5f7e3607aed3bda6b","modified":1521345460253},{"_id":"themes/next/.git/refs/remotes/hexo-theme-next/servant","hash":"ee903ee2112907f4498fdb13674a640c685e95fb","modified":1500736961996},{"_id":"themes/next/.git/refs/remotes/hexo-theme-next/testing","hash":"15660a56eaab85fc3fd3324de8d61dbc2b09b42a","modified":1500736961999},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1471962406363},{"_id":"themes/next/.git/refs/remotes/origin/dev","hash":"c9abcffd1f03a6a76afa09334100c5003cf895a0","modified":1510406960025},{"_id":"themes/next/.git/refs/remotes/origin/master","hash":"f4d9f6f8bc79e9bc071cf29324a74a1d78158ab9","modified":1520752475320},{"_id":"themes/next/.git/refs/remotes/origin/servant","hash":"ee903ee2112907f4498fdb13674a640c685e95fb","modified":1500736330256},{"_id":"themes/next/.git/refs/remotes/origin/button-refactor","hash":"fb495f16a68c230584ab7ce8aa719b0999b96e0b","modified":1510406960013},{"_id":"themes/next/.git/refs/remotes/origin/testing","hash":"15660a56eaab85fc3fd3324de8d61dbc2b09b42a","modified":1500736330262},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1521291993252},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1521295023707},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"8f86f694c0749a18ab3ad6f6df75466ca137a4bc","modified":1521295023707},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1521291993252},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1521291993271},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1471962406432},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1471962406448},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1471962406454},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1521295023708},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"24ee4b356ff55fc6e58f26a929fa07750002cf29","modified":1521295023762},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1521291993284},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"91ca75492cd51f2553f4d294ed2f48239fcd55eb","modified":1521295023762},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1521295023767},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1471962406456},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1471962406457},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1521295023712},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1471962406460},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1471962406461},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1471962406461},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1471962406462},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"9c99034f8e00d47e978b3959f51eb4a9ded0fcc8","modified":1521295023771},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"60fa84aa7731760f05f52dd7d8f79b5f74ac478d","modified":1521295023770},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1471962406465},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1521291993287},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1471962406463},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1471962406466},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1521291993288},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"e695e58f714129ca292c2e54cd62c251aca7f7fe","modified":1521295023772},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1471962406466},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1521291993288},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1521291993289},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1471962406462},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"f1d0b5d7af32c423eaa8bb93ab6a0b45655645dc","modified":1521295023789},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1521291993290},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"ad2dcedf393ed1f3f5afd2508d24969c916d02fc","modified":1521295023773},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1521291993301},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1521291993322},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1521291993323},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1521291993323},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1521291993324},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1521291993325},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1521291993324},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"6d586bfcfb7ae48f1b12f76eec82d3ad31947501","modified":1521295023793},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1521291993328},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1521291993328},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1521291993330},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1521291993331},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1521291993327},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1521291993333},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1521291993334},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"6c26cdb36687d4f0a11dabf5290a909c3506be5c","modified":1521295023792},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1521291993333},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1471962406469},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1521291993368},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1521291993368},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1521291993300},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1521291993370},{"_id":"themes/next/.git/logs/refs/remotes/hexo-theme-next/master-ckjava","hash":"e0cfe37d102f0766f4e45830d05291f217ebdc24","modified":1521346821879},{"_id":"themes/next/.git/logs/refs/remotes/hexo-theme-next/servant","hash":"7f6d88c3fe4debbae3a4bf32cbe7f45839dfe416","modified":1500736961996},{"_id":"themes/next/.git/logs/refs/remotes/hexo-theme-next/testing","hash":"748ec63bd2ea74fb5dfa20e2849af627bac118fc","modified":1500736961999},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"144df22cf89fd10efe58db439a03898a22617061","modified":1471962406363},{"_id":"themes/next/.git/logs/refs/remotes/origin/button-refactor","hash":"de88098b31518520c97416f89100e86effbdbd28","modified":1510406960014},{"_id":"themes/next/.git/logs/refs/remotes/origin/dev","hash":"f1781c589a762ee1a076aeae6dc4bae3e046a64a","modified":1510406960026},{"_id":"themes/next/.git/logs/refs/remotes/origin/master","hash":"4e6fc714d3ef83b6ff7be92736f858454ba69053","modified":1520752475321},{"_id":"themes/next/.git/logs/refs/remotes/origin/servant","hash":"d8a166e21ec3fdee1b51e942f2fccc2e5d446cdd","modified":1500736330256},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1521291993352},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1521291993351},{"_id":"themes/next/.git/logs/refs/remotes/origin/testing","hash":"696724776a4a306138efb1d8211ff510a538eb1d","modified":1500736330263},{"_id":"themes/next/.git/logs/refs/remotes/hexo-theme-next/dev","hash":"4409099ad3e01a3d0f0c78f13724b01e556bd887","modified":1500736961982},{"_id":"themes/next/.git/logs/refs/remotes/hexo-theme-next/master","hash":"a10f01943628591fa2a664d60ee10946f415d173","modified":1521345460267},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1471962406434},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1471962406434},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1471962406435},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1521291993272},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"b6f3a06a94a6ee5470c956663164d58eda818a64","modified":1521295023711},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1471962406439},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1521291993274},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1471962406436},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1521291993272},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"50450d9fdc8a2b2be8cfca51e3e1a01ffd636c0b","modified":1521295023710},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1521295023713},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1521291993273},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1521291993275},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1521291993275},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"a6c6eb8adba0a090ad1f4b9124e866887f20d10d","modified":1521295023714},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1471962406440},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d0d7a5c90d62b685520d2b47fea8ba6019ff5402","modified":1521295023722},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1471962406441},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1521291993274},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1521291993276},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ca88ea6999a61fb905eb6e72eba5f92d4ee31e6e","modified":1521295023723},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1521295023724},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1471962406443},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"ccb34c52be8adba5996c6b94f9e723bd07d34c16","modified":1521295023725},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1471962406444},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"7968343e41f8b94b318c36289dff1196c3eb1791","modified":1521295023726},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"39f04c4c7237a4e10acd3002331992b79945d241","modified":1521295023730},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1471962406445},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"89d6c3b697efc63de42afd2e89194b1be14152af","modified":1521295023728},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1471962406447},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1521295023732},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1471962406446},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"5ef6343835f484a2c0770bd1eb9cc443609e4c39","modified":1521295023738},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"9f73c4696f0907aa451a855444f88fc0698fa472","modified":1521295023709},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1521295023737},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1471962406448},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1521291993280},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"f825da191816eef69ea8efb498a7f756d5ebb498","modified":1521295023739},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1521295023740},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1471962406450},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"b7076e58d647265ee0ad2b461fe8ce72c9373bc5","modified":1521295023740},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1521295023733},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1521295023741},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1471962406438},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"c8fe49a4bc014c24dead05b782a7082411a4abc5","modified":1521295023736},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1521295023742},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1521291993281},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1471962406451},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1521291993282},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"874278147115601d2abf15987f5f7a84ada1ac6b","modified":1521295023751},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1471962406452},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1471962406449},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1471962406453},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1521291993282},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9c8196394a89dfa40b87bf0019e80144365a9c93","modified":1521295023758},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1521295023752},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1471962406463},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1521291993287},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1521291993286},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1521291993297},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1521291993298},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1521295023751},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1521291993298},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1521291993325},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1521291993325},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1521291993326},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1521291993326},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1521291993297},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1521291993327},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1521291993338},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1521291993340},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1521291993350},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1521291993282},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1521295023791},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1521291993326},{"_id":"themes/next/.git/objects/pack/pack-64e83ac2c89feffe2aee633ddf092ea0240ce2d7.pack","hash":"a87b98d74be65449edafacd7d6f406a2a977a04e","modified":1521292047000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1521291993320},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1521291993367},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1521291993347},{"_id":"themes/next/.git/objects/pack/pack-32d08a5c700cffb6a166dd8964dc69f1c237373e.pack","hash":"771bc96b16c1fc35eb246de7a8f546a15ce11c0c","modified":1521292179000},{"_id":"themes/next/.git/objects/pack/pack-302df316ecce271b6f4e6a41e488dce8621d02b1.pack","hash":"f150f345b13aab12109f73c22c2d43d4d5159361","modified":1521292179000},{"_id":"public/atom.xml","hash":"831c93f6f01e7254215974e320a33f59f08aeb8e","modified":1523364726114},{"_id":"public/sitemap.xml","hash":"c081c75ce754ea4733bf6fba1d7d9903c447166c","modified":1523364726114},{"_id":"public/about/index.html","hash":"128e4dbf973bb2b8acf42310885e6eb7247f266a","modified":1523364726181},{"_id":"public/categories/AngularJS/index.html","hash":"bc6379ae1695aacd217e02e8bef96d383bd54794","modified":1523364726181},{"_id":"public/categories/Java/index.html","hash":"fe1cbe40c5c12e55fef42e4d79b6c7cb0691d5f1","modified":1523364726181},{"_id":"public/categories/技术/page/2/index.html","hash":"4834a311e7f9561fc492c4de79064033a6754640","modified":1523364726181},{"_id":"public/categories/JavaScript/index.html","hash":"0305135283c4e209d5972ba7e939a649fc67c1c8","modified":1523364726181},{"_id":"public/categories/PHP/index.html","hash":"44cef16644cfe9f60e41e6345859e0556b8bfe9b","modified":1523364726181},{"_id":"public/categories/git/index.html","hash":"8b1a41818a4628c237e8efa3b4f6f263337a6003","modified":1523364726182},{"_id":"public/categories/生活/index.html","hash":"90008c08b4bc3cab75fa63a219ee3f07991576a8","modified":1523364726182},{"_id":"public/categories/多线程/index.html","hash":"7865f5eb07416040fb58e78ccf3f5c621dbcc583","modified":1523364726182},{"_id":"public/categories/Spring/index.html","hash":"07e07214411b370e264ad1ee1a6cb8522dd02435","modified":1523364726182},{"_id":"public/categories/计算机网络/index.html","hash":"56beba934a0f91e3d313d877a9ec3283f365bc1d","modified":1523364726182},{"_id":"public/tags/AngularJS/index.html","hash":"c75d79d08d074c88bee390f764680da1d0bc8007","modified":1523364726182},{"_id":"public/tags/JavaScript/index.html","hash":"b1ff3a8b2cb13faaae1641e3cbfeddd1026e4b02","modified":1523364726182},{"_id":"public/tags/ELK/index.html","hash":"2993dbcb84dc14646cb4dcbb79c5111bf4cfd759","modified":1523364726182},{"_id":"public/tags/Log4j/index.html","hash":"1ee0260c71a153b5d6fe765d4abd74c98c08189e","modified":1523364726182},{"_id":"public/tags/Logstash/index.html","hash":"8db60dc557c5feb6031fc1139d76ccdbc9028561","modified":1523364726182},{"_id":"public/tags/MariaDB/index.html","hash":"8dd3b44651de6702ffea213d854f0a16edd87318","modified":1523364726182},{"_id":"public/tags/MySql/index.html","hash":"6c926a4013820082cf21742235c826453bcde6ae","modified":1523364726182},{"_id":"public/tags/Linux/index.html","hash":"98d0e2cd03ec11e0c41c8de459397885e437a109","modified":1523364726182},{"_id":"public/tags/PHP/index.html","hash":"bb91ccd7b5612086cd11bc89518738e2e221a311","modified":1523364726182},{"_id":"public/tags/Swagger2/index.html","hash":"84af5ce579b5a50d4678f1b1950039e778d9cc4b","modified":1523364726183},{"_id":"public/tags/SpringMVC/index.html","hash":"51b8695c8ebc15b6077ffa63d62277dbf699e1fd","modified":1523364726183},{"_id":"public/tags/自动部署/index.html","hash":"428cfd5b05aab16bbaeb4f23aef7b386912eaa99","modified":1523364726183},{"_id":"public/tags/git/index.html","hash":"0dfe0a8eb815d83657ec3900e5d215ffa9feeeb0","modified":1523364726183},{"_id":"public/tags/Maven/index.html","hash":"6d8d423ae2d6c9c8e367a6b6f163c47fa68c382c","modified":1523364726183},{"_id":"public/tags/Junit/index.html","hash":"eef28f1450765d7165f0991e0a44cf31ee4e0744","modified":1523364726183},{"_id":"public/tags/感想/index.html","hash":"4ee89739c3995476057c90f67096946522692162","modified":1523364726183},{"_id":"public/tags/Thread/index.html","hash":"ef6cd4644cae08bf74699bbfb6da78f5eaf028fc","modified":1523364726183},{"_id":"public/tags/Runnable/index.html","hash":"678eaa5fe10baa54414e578273a3802ceb789b26","modified":1523364726183},{"_id":"public/tags/Executor/index.html","hash":"69ccd27c9139f0dee91fc2fb3d17e07020da1fa7","modified":1523364726183},{"_id":"public/tags/系统监控/index.html","hash":"987d7a4a237f383f9c1fbf282e14ee9dd17a7fba","modified":1523364726184},{"_id":"public/tags/Tomcat/index.html","hash":"c30af75e4ca10268c7a284c774320ce4b7c7dc7f","modified":1523364726184},{"_id":"public/tags/Annotation/index.html","hash":"66df0c24976ec3c7bcc8a5c71382ce340ef2a003","modified":1523364726184},{"_id":"public/tags/计算机网络/index.html","hash":"3f2abc18dc49b03c13a0608e79e88675e38ebeaa","modified":1523364726184},{"_id":"public/tags/synchronized/index.html","hash":"ba9e4d0f2a5933faabdee19b76c6f67e2ff410e0","modified":1523364726184},{"_id":"public/tags/volatile/index.html","hash":"985bc530bac988909bb35807735871f54f01681b","modified":1523364726185},{"_id":"public/tags/锁/index.html","hash":"da7c9442b9aa65f159bf0085505d889d71b15f08","modified":1523364726185},{"_id":"public/categories/index.html","hash":"38f1ac8e15d0aa9f7f8496a776528504d608dc22","modified":1523364726185},{"_id":"public/tags/index.html","hash":"ae342b01999c78c6d20945a76ce0dd9d12cdf3df","modified":1523364726185},{"_id":"public/2018/04/10/git-remote-branch-command/index.html","hash":"2ccc95d61004bf53d17cbce4db6d9038c68cbb29","modified":1523364726185},{"_id":"public/2018/01/15/java-dynamic-apply/index.html","hash":"078429381de768712836b84af3683e3e2307ed55","modified":1523364726185},{"_id":"public/2018/01/11/git-commit-recovery/index.html","hash":"11f653d82894f8da24cfde3792fd98ac4256e0a8","modified":1523364726185},{"_id":"public/2017/11/29/understand-JavaScript-closure-anonymous-function/index.html","hash":"3895864642a439fd4d6d3e53e1551c4a1c2ac2a8","modified":1523364726185},{"_id":"public/2017/09/15/AngularJS-basic/index.html","hash":"8c7133d741c795343b0ced35609dcaf5a22c0f23","modified":1523364726185},{"_id":"public/2017/09/11/understand-crc/index.html","hash":"e1275df8a56502472cb1682619fbf79ebcf57c63","modified":1523364726185},{"_id":"public/2017/08/15/Phabricator-conduit-API-Java/index.html","hash":"b4f144051444308431cf167b6f9790fec41315f5","modified":1523364726185},{"_id":"public/2017/08/11/Phabricator-task-subType/index.html","hash":"598ae1644694a7f85d7ff2eda0b37b8919f99a17","modified":1523364726185},{"_id":"public/2017/08/01/Phabricator-subtask/index.html","hash":"7d2e7fa613d302eed684363535dbe294d31375bb","modified":1523364726185},{"_id":"public/2017/07/25/Phabricator-list-item-task/index.html","hash":"f0b335fa4e0ea5046edc2d5e865deab781225e37","modified":1523364726186},{"_id":"public/2017/07/25/Phabricator-workborad-card-task/index.html","hash":"de96c3c1a57e31772e110751493075a3b7115dc2","modified":1523364726186},{"_id":"public/2017/07/22/Phabricator-project-Herald/index.html","hash":"069450582160ea3130ede0954c17df91f5b1e2a6","modified":1523364726186},{"_id":"public/2017/07/03/Phabricator-Windows-setup/index.html","hash":"0bfb1a2f9fc01fbe74f2a475ee07ccde38c9a727","modified":1523364726186},{"_id":"public/2017/07/03/PHP-basic/index.html","hash":"e5dd17271ac20a9c16feab456b6ad6e7b213c88a","modified":1523364726186},{"_id":"public/2017/06/14/Swagger2-SpringMVC/index.html","hash":"7cef831c3e7621191dbbaafcccf74cf216b29052","modified":1523364726186},{"_id":"public/2017/06/09/lock-synchronized-volatile/index.html","hash":"73463121986b198f901cc5bc050488e0121fbe2c","modified":1523364726186},{"_id":"public/2017/05/23/Spring-Annotation/index.html","hash":"217f6256796688de089cc924ea9efb4a150c41e3","modified":1523364726186},{"_id":"public/2017/05/15/Linux-monitor-Tomcat/index.html","hash":"d7640921983edfe02e86b67c8327f1c1bc66a3c6","modified":1523364726186},{"_id":"public/2017/05/15/Linux-MariaDB-setup-MySql/index.html","hash":"8060bf68db4761053c64c31dbf8a78c2ae5dd406","modified":1523364726186},{"_id":"public/2016/12/20/Windows-auto-deploy-war-to-Linux/index.html","hash":"391faa49b81e6af7a0ffce678f8c4c05ed5221cc","modified":1523364726186},{"_id":"public/2016/11/17/load-jar-file-class/index.html","hash":"304b4ef451fe68502b8565f2230e80ed28f58445","modified":1523364726187},{"_id":"public/2016/10/31/java-read-file-piece/index.html","hash":"651291aec1cdb8e1c7a6caf6722b5a5ced6e85eb","modified":1523364726187},{"_id":"public/2016/09/30/Spring-Junit-PropertySource-Value/index.html","hash":"8612561e4a10e0f7bb11dae3a0a140fd12a79fcd","modified":1523364726187},{"_id":"public/2016/08/30/Java-Thread-Runnable-Executor-Practice/index.html","hash":"bfb1f7997552174a7e6c4839eeb1a2167cc848ce","modified":1523364726187},{"_id":"public/2016/07/13/Spring-bean-scope-usage/index.html","hash":"21424501751ccaf68902a31c271008803588de66","modified":1523364726187},{"_id":"public/2016/07/11/Maven-profiles-testResource-Junit/index.html","hash":"9537cff6be6027c728675964575691e2ef606e1e","modified":1523364726187},{"_id":"public/2016/07/05/log4j-logstash-practice/index.html","hash":"ffd7de18f41c4c065beb5df26d8b19ee20eb44f6","modified":1523364726187},{"_id":"public/2016/06/10/ELK-introduce-setup/index.html","hash":"80ad716d5dda78f838f7294d705a2e036829a877","modified":1523364726187},{"_id":"public/2016/06/07/Java-synchronizd-usage/index.html","hash":"89b7d05b6a010030d7ef7195b3b7f2cdf4f60194","modified":1523364726187},{"_id":"public/2016/06/01/blog-github-some-thinking/index.html","hash":"4c23bdd40e6d4e702eb51d11566bfdd7241913f1","modified":1523364726187},{"_id":"public/archives/index.html","hash":"2c04b6ced92d6e7691fd7f84c80788d7d5d32159","modified":1523364726187},{"_id":"public/categories/技术/index.html","hash":"ef056419f699d760611dd0753b7c348be99ba733","modified":1523364726187},{"_id":"public/categories/Phabricator/index.html","hash":"02ca643bdc086ae30a179703ea55dae30096019c","modified":1523364726188},{"_id":"public/categories/Phabricator/PHP/index.html","hash":"ed5ad1aaef89a226b44543065a15752bf90deb71","modified":1523364726188},{"_id":"public/index.html","hash":"c4c3ef507a37eb5c2f8a4cac486bb58d912ba30c","modified":1523364726188},{"_id":"public/page/2/index.html","hash":"9275ac25add910d8cc8ebfbf13670615fc9e87df","modified":1523364726188},{"_id":"public/page/3/index.html","hash":"0a14fe90bd2c1bdb291088d0f6ab80b85473f681","modified":1523364726188},{"_id":"public/tags/Java/index.html","hash":"2d16db8d57e23ef33c43c7ce3e6ae2c27fd594e9","modified":1523364726188},{"_id":"public/tags/Phabricator/index.html","hash":"b70c47603ffb43e8e24cdda3c8ab0be701414303","modified":1523364726188},{"_id":"public/tags/Spring/index.html","hash":"c50d474391f2d23d1d6ebc7acfdaab145604d025","modified":1523364726189},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1523364726259},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1523364726259},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1523364726259},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1523364726259},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1523364726259},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1523364726259},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1523364726259},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1523364726260},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1523364726260},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1523364726260},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1523364726260},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1523364726260},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1523364726260},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1523364726260},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1523364726260},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1523364726260},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1523364726260},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1523364726260},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1523364726260},{"_id":"public/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1523364726260},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1523364726260},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1523364726261},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1523364726261},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1523364726261},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1523364726261},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1523364726261},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1523364726261},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1523364726261},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1523364726261},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1523364726261},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1523364726261},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1523364726261},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1523364726261},{"_id":"public/images/wechatpay.jpg","hash":"018d79d52a02bba08af0e27a74b7e9deb423375f","modified":1523364727459},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1523364727463},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1523364727481},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1523364727494},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1523364727494},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1523364727494},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1523364727494},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1523364727495},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1523364727495},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1523364727496},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1523364727496},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1523364727496},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1523364727496},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1523364727496},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1523364727496},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1523364727496},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1523364727496},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1523364727497},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1523364727497},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1523364727498},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1523364727498},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1523364727498},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1523364727498},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1523364727498},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1523364727498},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1523364727498},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1523364727499},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1523364727499},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1523364727499},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1523364727499},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1523364727499},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1523364727499},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1523364727499},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1523364727499},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1523364727499},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1523364727499},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1523364727499},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1523364727499},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1523364727499},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1523364727499},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1523364727499},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1523364727499},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1523364727499},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1523364727499},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1523364727499},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1523364727500},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1523364727500},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1523364727500},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1523364727500},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1523364727500},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1523364727500},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1523364727500},{"_id":"public/css/main.css","hash":"0289386ed08414a3241aa34aa6b4730254d6fb98","modified":1523364727500},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1523364727500},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1523364727500},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1523364727500},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1523364727501},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1523364727501},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1523364727501},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1523364727501},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1523364727501},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1523364727501},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1523364727501},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1523364727501},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1523364727501},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1523364727501},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1523364727502},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1523364727502},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1523364727502},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1523364727502},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1523364727502},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1523364727502},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1523364727502},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1523364727502},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1523364727502},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1523364727502},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1523364727577}],"Category":[{"name":"AngularJS","_id":"cjfto0q6u000518c7nidpcgmn"},{"name":"Java","_id":"cjfto0q72000a18c7n8he85yh"},{"name":"技术","_id":"cjfto0q7d000g18c7uc0haa3m"},{"name":"JavaScript","_id":"cjfto0q7l000n18c7rrtxyu0m"},{"name":"PHP","_id":"cjfto0q8d001c18c735573xil"},{"name":"Phabricator","_id":"cjfto0q8n001l18c7pgx6pyfq"},{"name":"git","_id":"cjfto0q96002318c7ad6bsw5g"},{"name":"生活","_id":"cjfto0q9c002918c7pv5gaqkh"},{"name":"多线程","_id":"cjfto0q9l002i18c7984cw0qd"},{"name":"PHP","parent":"cjfto0q8n001l18c7pgx6pyfq","_id":"cjfto0q9n002m18c75nmjdx9i"},{"name":"Spring","_id":"cjfto0q9z003a18c757rvgfbk"},{"name":"计算机网络","_id":"cjfto0qa6003i18c70czav9iq"}],"Data":[],"Page":[{"title":"关于我","layout":"categories","date":"2016-07-14T02:59:34.000Z","comments":0,"_content":"\n姓名: 陈奎\n\n主要编程语言: Java, JavaScript\n\n个人首页: http://ckjava.com/\n\nGitHub: https://github.com/toulezu\n\n目前工作在: [携程](http://www.ctrip.com/)\n\n联系: svsechen#163.com","source":"about/index.md","raw":"---\ntitle: 关于我\nlayout: categories\ndate: 2016-07-14 10:59:34\ncomments: false\n---\n\n姓名: 陈奎\n\n主要编程语言: Java, JavaScript\n\n个人首页: http://ckjava.com/\n\nGitHub: https://github.com/toulezu\n\n目前工作在: [携程](http://www.ctrip.com/)\n\n联系: svsechen#163.com","updated":"2018-03-17T10:36:21.951Z","path":"about/index.html","_id":"cjfto0q6l000118c7l88cje97","content":"<p>姓名: 陈奎</p>\n<p>主要编程语言: Java, JavaScript</p>\n<p>个人首页: <a href=\"http://ckjava.com/\">http://ckjava.com/</a></p>\n<p>GitHub: <a href=\"https://github.com/toulezu\" target=\"_blank\" rel=\"external\">https://github.com/toulezu</a></p>\n<p>目前工作在: <a href=\"http://www.ctrip.com/\" target=\"_blank\" rel=\"external\">携程</a></p>\n<p>联系: svsechen#163.com</p>\n","excerpt":"","more":"<p>姓名: 陈奎</p>\n<p>主要编程语言: Java, JavaScript</p>\n<p>个人首页: <a href=\"http://ckjava.com/\">http://ckjava.com/</a></p>\n<p>GitHub: <a href=\"https://github.com/toulezu\">https://github.com/toulezu</a></p>\n<p>目前工作在: <a href=\"http://www.ctrip.com/\">携程</a></p>\n<p>联系: svsechen#163.com</p>\n"},{"title":"分类","date":"2016-07-14T02:59:22.000Z","layout":"categories","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2016-07-14 10:59:22\nlayout: categories\ntype: \"categories\"\ncomments: false\n---\n","updated":"2016-09-03T13:49:39.410Z","path":"categories/index.html","_id":"cjfto0q6q000318c7tqw32v5t","content":"","excerpt":"","more":""},{"title":"标签","layout":"tags","date":"2016-06-08T10:14:15.000Z","type":"tags","comments":0,"_content":"\n","source":"tags/index.md","raw":"---\ntitle: 标签\nlayout: tags\ndate: 2016-06-08 18:14:15\ntype: \"tags\"\ncomments: false\n---\n\n","updated":"2016-09-03T13:51:05.889Z","path":"tags/index.html","_id":"cjfto0qpq004w18c753fgvwlm","content":"","excerpt":"","more":""}],"Post":[{"title":"AngularJS 知识点积累","title_url":"AngularJS-basic","date":"2017-09-14T16:00:00.000Z","description":"AngularJS 知识点积累","_content":"\n## [如何动态插入删除dom节点](http://yijiebuyi.com/blog/7702aba213aec9de43b129b3d2f3b30c.html)\n```\n$('div[name=father]').html(\n  $compile('<input type=\"text\" ng-model=\"person.name\" /> <input type=\"input\" ng-model=\"person.age\" value=\"{{person.age}}\" /><a ng-show=\"$index!=0\" style=\"color:red;\" ng-click=\"del($index)\">移除</a>'\n  )($scope)\n);\n```\n\n- [HTML Compiler](https://docs.angularjs.org/guide/compiler)\n\n## [ng-click 如何获取触发事件对象或者this](http://blog.csdn.net/a576736858/article/details/62039286)\n\n`ng-click=\"addPackage($event,111)\"` 传递一个$event对象\n通过事件对象 `$event.target`  获取事件源\n```\n//动态添加数据  \n$scope.addPackage = function(myevent,deviceType){  \n    //获取item对象  \n    var htmlObj = $(myevent.target).closest(\".float_left\");  \n    var deviceName = htmlObj.find(\"div.font_16\").html();  \n    var jsonObj = {  \n        \"deviceType\":deviceType,//设备类型，唯一标识，用于判断是否已经添加  \n        \"deviceName\":deviceName //设备的名称  \n    };  \n    //判断数据是否已经选中了  \n    if(!this.hasDevice(deviceType)){  \n        //给$scope.lists添加数据  \n        this.lists.push(jsonObj);  \n    }  \n};  \n```\n\n## [如何在页面加载的时候执行一个方法](https://stackoverflow.com/questions/15458609/how-to-execute-angular-controller-function-on-page-load)\n\n使用 [`ng-init`](https://docs.angularjs.org/api/ng/directive/ngInit) 指令\n\n```\n// register controller in html\n<div data-ng-controller=\"myCtrl\" data-ng-init=\"init()\"></div>\n\n// in controller\n$scope.init = function () {\n    // check if there is query in url\n    // and fire search in case its value is not empty\n};\n```\n\n## [使用 `ng-repeat` 来实现增加一行/删除一行的效果](http://lib.csdn.net/article/angularjs/33158)\n\n```javascript\n$scope.printInfo = function () {\n        for (var i = 0; i < $scope.showVBs.length; i++) {\n            console.log($scope.showVBs[i]);\n        }\n    };\n\n$scope.showVBs = [{\n    \"Tag\": \"Tag1\",\n    \"NO\": \"No1\",\n    \"remarks\": \"remarks1\"\n}, {\n    \"Tag\": \"Tag2\",\n    \"NO\": \"No2\",\n    \"remarks\": \"remarks2\"\n}];\n$scope.BDetailsAdd = function () {\n    $scope.showVBs.push({});\n};\n$scope.BDetailsDel = function (Count) {\n    $scope.showVBs.splice(Count, 1);\n};\n\n```\n\n```html\n<form role=\"form\" name=\"editForm\">\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <div class=\"row  panel panel-default panel-body\">\n                <div class=\"col-md-offset-1 panel panel-default\">\n                    <label>{{'Details'}}</label>\n                    <input type=\"button\" class=\"btn btn-info\" value=\"增加\" ng-click=\"BDetailsAdd()\">\n                    <input type=\"button\" class=\"btn btn-danger\" value=\"打印信息\" ng-click=\"printInfo()\">\n                </div>\n                <div class=\"vBaggages\" ng-repeat=\"vba in showVBs\">\n                    <div class=\"form-group col-md-2 col-md-offset-1\">\n                        <input type=\"button\" class=\"btn btn-info\" value=\"删\" ng-click=\"BDetailsDel($index)\">\n                        <input type=\"text\" class=\"form-control pull-right\" ng-model=\"vba.Tag\"\n                               placeholder=\"Tag\" style=\"width:70%\">\n                    </div>\n                    <div class=\"form-group col-md-2 col-md-offset-1\">\n                        <input type=\"text\" class=\"form-control pull-right\" ng-model=\"vba.NO\"\n                               placeholder=\"No.\">\n                    </div>\n                    <div class=\"form-group col-md-5 col-md-offset-1\">\n                        <input type=\"text\" class=\"form-control pull-right\" ng-model=\"vba.remarks\"\n                               placeholder=\"Remarks\">\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</form>\n```\n\n## [如何构建一个 SpringBoot + angularJS web 应用](http://websystique.com/spring-boot/spring-boot-angularjs-spring-data-jpa-crud-app-example/)\n\n## [如何安装 AngularJS 的 ngStorage 模块](http://blog.legacyteam.info/2014/12/ngstorage-localstorage-module-for-angularjs/)\n\n错误提示如下\n\n```\nError: [$injector:modulerr] Failed to instantiate module ngStorage due to:\nError: [$injector:nomod] Module 'ngStorage' is not available! You either misspelled the module name or forgot to load it. If registering a module ensure that you specify the dependencies as the second argument.\n```\n\n解决方法如下\n\n在项目根目录下执行安装(uninstall 是卸载)\n\n```\nbower install ngstorage\n```\n```\nbower ngstorage#*               cached https://github.com/gsklee/ngStorage.git#0.3.11\nbower ngstorage#*             validate 0.3.11 against https://github.com/gsklee/ngStorage.git#*\nbower ngstorage#^0.3.11        install ngstorage#0.3.11\n\nngstorage#0.3.11 bower_components\\ngstorage\n└── angular#1.5.11\n\n```\n然后在项目中的 bower.json 文件中添加相关依赖\n\n```\n\"dependencies\": {\n    \"ng-js-tree\": \"~0.0.7\",\n    \"angular-ui-select\": \"^0.19.6\",\n    \"ngstorage\": \"0.3.11\"\n  },\n```\n\n## [AngularJS 如何跨域访问 SpringBoot API](https://stackoverflow.com/questions/19825946/how-to-add-a-filter-class-in-spring-boot)\n\n错误描述如下\n\n```\nXMLHttpRequest cannot load http://localhost:8011/api/task_main. No 'Access-Control-Allow-Origin' header is present on the requested resource. Origin 'http://localhost:3000' is therefore not allowed access.\n```\n\n解决方法\n\n添加一个 Filter 配置\n\n```java\nimport javax.servlet.Filter;\n\nimport org.springframework.boot.web.servlet.FilterRegistrationBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.servlet.config.annotation.EnableWebMvc;\nimport org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;\n\nimport com.ctrip.payment.filter.RemoteAccessFilter;\n\n@Configuration\n@EnableWebMvc\npublic class WebAppConfig extends WebMvcConfigurerAdapter {\n\n\t@Bean\n\tpublic FilterRegistrationBean someFilterRegistration() {\n\t    FilterRegistrationBean registration = new FilterRegistrationBean();\n\t    registration.setFilter(remoteAccessFilter());\n\t    registration.addUrlPatterns(\"/api/*\");\n\t    //registration.addInitParameter(\"paramName\", \"paramValue\");\n\t    registration.setName(\"remoteAccessFilter\");\n\t    registration.setOrder(1);\n\t    return registration;\n\t} \n\n\tpublic Filter remoteAccessFilter() {\n\t    return new RemoteAccessFilter();\n\t}\n}\n```\n\n具体 Filter 如下\n\n```java\nimport java.io.IOException;\n\nimport javax.servlet.Filter;\nimport javax.servlet.FilterChain;\nimport javax.servlet.FilterConfig;\nimport javax.servlet.ServletException;\nimport javax.servlet.ServletRequest;\nimport javax.servlet.ServletResponse;\nimport javax.servlet.http.HttpServletResponse;\n\npublic class RemoteAccessFilter implements Filter {\n\t@Override\n\tpublic void init(FilterConfig filterConfig) throws ServletException {\n\n\t}\n\n\t@Override\n\tpublic void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)\n\t\t\tthrows IOException, ServletException {\n\t\t\n\t\t// ref:http://www.cnblogs.com/1000px/p/4666247.html\n\t\tHttpServletResponse resp = (HttpServletResponse) response;\n\t\tresp.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n\t\tresp.setHeader(\"Access-Control-Allow-Methods\", \"GET,POST,PUT\");\n\t\tresp.setHeader(\"Access-Control-Allow-Headers\", \"Accept,x-requested-with,content-type\");\n\t\t\n\t\tchain.doFilter(request, response);\n\t}\n\n\t@Override\n\tpublic void destroy() {\n\t}\n\n}\n```\n\n- [AngularJS跨域请求](http://www.cnblogs.com/1000px/p/4666247.html)\n\n## AngularJS 如何判断字符串或者对象是否为空\n\n在 AngularJs 中判断对象是否为空，可以使用 angular.equals，如下\n\n```\nif (obj == null || angular.equals({}, obj)) {\n // 为空\n}\n```\n\n如果是一个字段\n\n```\nif (obj == null || angular.equals('', obj.trim())) {\n // 为空\n}\n```\n\n## [关于 datePicker 和 timePicker 的组合使用](https://angular-ui.github.io/bootstrap/)\n\n- html\n\n```\n<div class=\"row datepicker\">\n\t<div class=\"col-md-2\">\n\t   <label>开始时间</label>\n\t   <p class=\"input-group\">\n\t\t  <input type=\"text\" readonly class=\"form-control\" uib-datepicker-popup=\"yyyy-MM-dd\" datepicker-options=\"datePickerOptions\" ng-model=\"clogDateTime.clogFromDate\" is-open=\"fromDateStatus.isOpen\" close-text=\"Close\" />\n\t\t  <span class=\"input-group-btn\">\n\t\t\t <button type=\"button\" class=\"btn btn-default\" ng-click=\"fromDateOpen()\"><i class=\"glyphicon glyphicon-calendar\"></i></button>\n\t\t  </span>\n\t   </p>\n\t</div>\n\t<div class=\"col-md-2\">\n\t   <uib-timepicker show-seconds=\"true\" ng-change=\"clogFromTimeChanged()\" ng-model=\"clogDateTime.clogFromTime\" show-meridian=\"false\"></uib-timepicker> {{ (clogDateTime.clogFromDate != null && clogDateTime.clogFromTime != null) ? (taskSubInfo.fromDate = (clogDateTime.clogFromDate | date:'yyyy-MM-dd')  + ' ' + (clogDateTime.clogFromTime | date:'HH:mm:ss')) : null }}\n\t</div>\n\t<div class=\"col-md-2\">\n\t   <button type=\"button\" class=\"btn btn-sm btn-danger\" ng-click=\"resetFromDateTime()\">重置开始时间</button>\n\t</div>\n\t<div class=\"col-md-2\">\n\t   <label>结束时间</label>\n\t   <p class=\"input-group\">\n\t\t  <input type=\"text\" readonly class=\"form-control\" uib-datepicker-popup=\"yyyy-MM-dd\" datepicker-options=\"datePickerOptions\" ng-model=\"clogDateTime.clogToDate\" is-open=\"toDateStatus.isOpen\" close-text=\"Close\" />\n\t\t  <span class=\"input-group-btn\">\n\t\t\t <button type=\"button\" class=\"btn btn-default\" ng-click=\"toDateOpen()\"><i class=\"glyphicon glyphicon-calendar\"></i></button>\n\t\t  </span>\n\t   </p>\n\t</div>\n\t<div class=\"col-md-2\">\n\t   <uib-timepicker show-seconds=\"true\" ng-change=\"clogToTimeChanged()\" ng-model=\"clogDateTime.clogToTime\" show-meridian=\"false\"></uib-timepicker> {{ (clogDateTime.clogToDate != null && clogDateTime.clogToTime != null) ? (taskSubInfo.toDate = (clogDateTime.clogToDate | date:'yyyy-MM-dd')  + ' ' + (clogDateTime.clogToTime | date:'HH:mm:ss')) : null }}\n\t</div>\n\t<div class=\"col-md-2\">\n\t   <button type=\"button\" class=\"btn btn-sm btn-danger\" ng-click=\"resetToDateTime()\">重置结束时间</button>\n\t</div>\n</div>\n```\n\n- js\n\n```\n// 将日期和时间作为对象进行考虑\n$scope.clogDateTime = {};\n\n$scope.resetFromDateTime = function () {\n  $scope.clogDateTime.clogFromDate = null;\n  $scope.clogDateTime.clogFromTime = null;\n  $scope.taskSubInfo.fromDate = null;\n};\n\n$scope.resetToDateTime = function () {\n  $scope.clogDateTime.clogToDate = null;\n  $scope.clogDateTime.clogToTime = null;\n  $scope.taskSubInfo.toDate = null;\n};\n\t  \n// 提交的时候\nif ($scope.taskSubInfo.fromDate == null || angular.equals($scope.taskSubInfo.fromDate.trim(), '')) {\n  $scope.taskSubInfo.fromDate = null;\n}\nif ($scope.taskSubInfo.toDate == null || angular.equals($scope.taskSubInfo.toDate.trim(), '')) {\n  $scope.taskSubInfo.toDate = null;\n}\n\n// 加载的时候\t  \nvar dateTimeReg = /^(?:19|20)[0-9][0-9]-(?:(?:0[1-9])|(?:1[0-2]))-(?:(?:[0-2][1-9])|(?:[1-3][0-1])) (?:(?:[0-2][0-3])|(?:[0-1][0-9])):[0-5][0-9]:[0-5][0-9]$/;\n\nif ($scope.taskSubInfo.fromDate != null\n  && !angular.equals($scope.taskSubInfo.fromDate.trim(), '')\n  && dateTimeReg.test($scope.taskSubInfo.fromDate)) {\n  try {\n\t  $scope.clogDateTime.clogFromDate = new Date($scope.taskSubInfo.fromDate);\n\t  $scope.clogDateTime.clogFromTime = new Date($scope.taskSubInfo.fromDate);\n  } catch (e) {\n\t  console.log('invalid fromDate:'+$scope.taskSubInfo.fromDate);\n  }\n}\nif ($scope.taskSubInfo.toDate != null\n  && !angular.equals($scope.taskSubInfo.toDate.trim(), '')\n  && dateTimeReg.test($scope.taskSubInfo.toDate)) {\n  try {\n\t  $scope.clogDateTime.clogToDate = new Date($scope.taskSubInfo.toDate);\n\t  $scope.clogDateTime.clogToTime = new Date($scope.taskSubInfo.toDate);\n  } catch (e) {\n\t  console.log('invalid fromDate:'+$scope.taskSubInfo.fromDate);\n  }\n}\n\n/*$scope.clogFromDate = new Date($filter('date')(new Date($scope.taskSubInfo.fromDate),'yyyy-MM-dd'));\n$scope.clogToDate = new Date($filter('date')(new Date($scope.taskSubInfo.toDate),'yyyy-MM-dd'));\n$scope.clogFromTime = new Date($filter('date')(new Date($scope.taskSubInfo.fromDate),'HH:mm:ss'));\n$scope.clogToTime = new Date($filter('date')(new Date($scope.taskSubInfo.toDate),'HH:mm:ss'));*/\n```\n\n## 如何在 ngRepeat 中设置 name 属性的 $index\n\n具体如下\n\n```\n<div class=\"form-group\"\n     ng-class=\"{'has-error': taskSubForm['variableName_'+$index].$invalid && (taskSubForm['variableName_'+$index].$dirty || taskSubForm.$submitted)}\">\n    <label>变量名称</label>\n    <input type=\"text\" class=\"form-control\" name=\"variableName_{{$index}}\" placeholder=\"变量名称 必填\" ng-model=\"taskSubvariable.variableName\" required>\n    <span class=\"help-block error-block basic-block\">此字段必填</span>\n</div>\n```\n\n- [angular ngRepeat $index in name attribute](https://stackoverflow.com/questions/21631456/angular-ngrepeat-index-in-name-attribute)\n\n## [如何知道 $http 请求成功了](http://www.cnblogs.com/xing901022/p/4928147.html)\n\n```\n<script type=\"text/javascript\">\n     var myAppModule = angular.module(\"myApp\",[]);\n     myAppModule.controller(\"myctrl\",[\"$scope\",\"$q\",function($scope, $ q ){\n        $scope.test = 1;//这个只是用来测试angularjs是否正常的，没其他的作用\n\n        var defer1 = $q.defer();\n        var promise1 = defer1.promise;\n\n        promise1\n        .then(function(value){\n            console.log(\"in promise1 ---- success\");\n            console.log(value);\n        },function(value){\n            console.log(\"in promise1 ---- error\");\n            console.log(value);\n        },function(value){\n            console.log(\"in promise1 ---- notify\");\n            console.log(value);\n        })\n        .catch(function(e){\n            console.log(\"in promise1 ---- catch\");\n            console.log(e);\n        })\n        .finally(function(value){\n            console.log('in promise1 ---- finally');\n            console.log(value);\n        });\n\n        defer1.resolve(\"hello\");\n        // defer1.reject(\"sorry,reject\");\n     }]);\n</script>\n```\n\n也可以简写成如下方式\n\n```\npromise1\n.then(function(value){\n    console.log(\"in promise1 ---- success\");\n    console.log(value);\n},function(value){\n    console.log(\"in promise1 ---- error\");\n    console.log(value);\n});\n```\n\n或者\n\n```\npromise1\n.then(function(value){\n    console.log(\"in promise1 ---- success\");\n    console.log(value);\n});\n```\n\n- [AngularJS 中的Promise --- $q服务详解](http://www.cnblogs.com/xing901022/p/4928147.html)\n\n## [Modal 弹出框如何传值](http://www.cnblogs.com/acmilan/p/3672184.html)\n\n- 通过 resolve\n\n```\nangular.module('modaltest')\n.controller('testModalTestController',function($scope,$modal){\n        $scope.addModal = function () {\n            var newWarn = $modal.open({\n                templateUrl: 'views/part/add.html',\n                controller: 'C_add_Warn',\n                resolve:{\n                    header : function() { return angular.copy(\"新增\"); },\n                    msg : function() { return angular.copy(\"这是消息\"); }\n                }\n            });\n        }  \n}) \n.controller('C_add_Warn',function($scope,header,msg){\n       $scope.header = header;\n       $scope.msg = msg;\n})\n```\n\n- 通过 scope 传递\n\n```\nangular.module('modaltest')\n .controller('testModalTestController',function($rootScope,$scope,$modal){\n          var scope = $rootScope.$new();\n           scope.data = {\n                msg:\"test\",\n                header:\"header\"\n           }\n          $scope.addModal = function () {\n              var newWarn = $modal.open({\n                  templateUrl: 'views/part/add.html',\n                  controller: 'C_add_Warn',\n                  scope:scope\n             });\n         }  \n }) \n .controller('C_add_Warn',function($scope){\n        var data = $scope.data;\n\n })\n```\n\n## [Controller 之间如何跳转](https://yehuang.me/angularjs/2015/11/01/how-to-pass-parameters-in-angularjs/)\n\n- 在AngularJS的app.js中用ui-router定义路由，比如现在有两个页面，一个页面producers.html放置了多个producers，点击其中一个目标，页面跳转到对应的producer.html页，同时将producerId这个参数传过去。\n\n```\n//定义producers状态\n.state('producers', {\n    url: '/producers',\n    templateUrl: 'views/producers.html',\n    controller: 'ProducersCtrl'\n})\n//定义producer状态\n.state('producer', {\n    url: '/producer/:producerId',\n    templateUrl: 'views/producer.html',\n    controller: 'ProducerCtrl'\n})\n```\n- 在producers.html中，定义点击事件，比如ng-click=”toProducer(producerId)”，在ProducersCtrl中，定义页面跳转函数 (使用ui-router的$state.go接口)：\n\n```\n.controller('ProducersCtrl', function ($scope, $state) {\n    $scope.toProducer = function (producerId) {\n        $state.go('producer', {producerId: producerId});\n    };\n});\n```\n\n- 在 ProducerCtrl 中，通过 ui-router 的 $stateParams 获取参数 producerId，譬如：\n\n```\n .controller('ProducerCtrl', function ($scope, $state, $stateParams) {\n   var producerId = $stateParams.producerId;\n});\n```\n\n- [AngularJS - 页面跳转传参](https://yehuang.me/angularjs/2015/11/01/how-to-pass-parameters-in-angularjs/)\n\n## [如何截取字符串(filter的使用介绍)](https://stackoverflow.com/questions/18095727/limit-the-length-of-a-string-with-angularjs)\n\n在模块中定义 cut filter\n\n```\nangular.module('ng').filter('cut', function () {\n        return function (value, wordwise, max, tail) {\n            if (!value) return '';\n\n            max = parseInt(max, 10);\n            if (!max) return value;\n            if (value.length <= max) return value;\n\n            value = value.substr(0, max);\n            if (wordwise) {\n                var lastspace = value.lastIndexOf(' ');\n                if (lastspace !== -1) {\n                  //Also remove . and , so its gives a cleaner result.\n                  if (value.charAt(lastspace-1) === '.' || value.charAt(lastspace-1) === ',') {\n                    lastspace = lastspace - 1;\n                  }\n                  value = value.substr(0, lastspace);\n                }\n            }\n\n            return value + (tail || ' …');\n        };\n    });\n```\n\n使用如下\n\n```\n{{some_text | cut:true:100:' ...'}}\n```\n\n参数说明\n\n- wordwise (boolean) - if true, cut only by words bounds,\n- max (integer) - max length of the text, cut to this number of chars,\n- tail (string, default: ' …') - add this string to the input string if the string was cut.\n\n## [checkbox 中的 ng-model 不起作用了](https://stackoverflow.com/questions/18642371/checkbox-not-binding-to-scope-in-angularjs)\n\n先看看下面错误的做法\n\n- html\n\n```\n<label class=\"checkbox-inline custom-checkbox nowrap\">\n    <input type=\"checkbox\" ng-model=\"checkJobAll\" ng-click=\"checkAllJob(checkJobAll)\">\n    <span></span>\n</label>\n```\n\n- js\n\n```\n$scope.checkJobAll = false;\n\n$scope.checkJobAll = true;\n```\n\n当 ng-model 绑定的是一个普通变量的时候, Controller 中的变量无法和页面上的变量值同步,只有改成对象的形式才可以,正确的做法如下\n\n- html\n\n```\n<label class=\"checkbox-inline custom-checkbox nowrap\">\n    <input type=\"checkbox\" ng-model=\"checkJobAll.flag\" ng-click=\"checkAllJob(checkJobAll.flag)\">\n    <span></span>\n</label>\n```\n\n- js\n\n```\n$scope.checkJobAll = { 'flag':false };\n\n$scope.checkJobAll.flag = true;\n```\n\n## [Modal 弹出框如何使用](https://angular-ui.github.io/bootstrap/#!#modal) \n\n点击页面上的按钮弹出一个 Modal 对话框\n\n- html \n\n```\n<input type=\"button\" ng-disabled=\"(item.status == 'EXECUTING' ? false : true) || showLoading\" ng-click=\"openStopModal('app/pages/job/modal/stopJobModal.html', 'md', item.id)\" class=\"btn btn-danger btn-sm\" value=\"停止\">\n```\n\n- js\n\n```javaScript\n// 打开停止job的对话框\n$scope.openStopModal = function (page, size, id) {\n    $scope.showLoading = true;\n    $scope.stopJobExecuteId = id;\n\n    // 弹出是否关闭job的对话框 ///////////////////////////////////////////////////////////////////////\n    var modalInstance = $uibModal.open({\n        animation: true,\n        templateUrl: page,\n        scope: $scope,\n        //controller: 'StopJobModalInstanceCtrl',\n        size: size\n    });\n\n    modalInstance.result.then(function () { // close\n        console.log('modal close');\n        $scope.showLoading = false;\n\n        // 后台调用 stopJob 服务\n        JobExecuteService.stopJob($scope.stopJobExecuteId).then( // 点击确定关闭job 按钮的回调\n            function (response) {\n                console.log(\" stopJobExecute response = \"  + JSON.stringify(response));\n\n                $scope.stopJobDetail = response.data.stopDetail;\n\n                // 关闭job成功后的modal //////////////////////////////////////////////////////////////////////////////////////////////\n                var successModalInstance = $uibModal.open({\n                    animation: true,\n                    templateUrl: 'app/pages/job/modal/stopJobSuccessModal.html',\n                    scope: $scope, // 控制弹出的 Modal 框使用同样的 $scope\n                    size: 'md'\n                });\n\n                successModalInstance.result.then(function () { // close\n                },function () { // dismiss或者Modal框消失\n                    // 刷新列表数据\n                    $scope.callServer($scope.jobExecuteTableState);\n                });\n                /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n            },\n            function (errResponse) {\n                console.error('Error while getJobExecute ' + id + ', Error :' + errResponse.data);\n                toastr.error('Error while getJobExecute ' + id + ', Error :' + errResponse.data, '提示', $scope.notificationConfig);\n            }\n\n        );\n\n    }, function () { // dismiss\n        console.log('modal dismiss');\n        $scope.showLoading = false;\n    });\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n};\n```\n\n## [关于 form 的使用, 涉及 $submitted 和 $setPristine() 应用 ](https://code.angularjs.org/1.5.8/docs/api/ng/directive/form)\n\n- html\n\n```\n<div ba-panel\n     ba-panel-class=\"with-scroll\">\n\n    <form name=\"taskMainForm\" ng-submit=\"submit()\" ng-init=\"initForm()\" novalidate>\n        <div class=\"form-group has-feedback\"\n             ng-class=\"{'has-error': taskMainForm.taskName.$invalid && (taskMainForm.taskName.$dirty || taskMainForm.$submitted)}\">\n            <label>任务名称</label>\n            <input type=\"text\" class=\"form-control\" name=\"taskName\" placeholder=\"任务名称 必填\" ng-model=\"taskMainInfo.taskName\" required>\n            <span class=\"help-block error-block basic-block\">必填</span>\n        </div>\n        \n        <div class=\"form-group\">\n            <label>备注</label>\n            <textarea placeholder=\"填写备注\" class=\"form-control\" ng-model=\"taskMainInfo.remarks\"></textarea>\n        </div>\n\n        <div class=\"form-group\">\n            <input type=\"submit\" ng-disabled=\"taskMainForm.$submitted && submitFlag\" value=\"{{!taskMainInfo.id ? '添加' : '修改'}}\" class=\"btn btn-primary btn-sm\">\n            <button type=\"button\" ng-click=\"initForm(taskMainForm)\" class=\"btn btn-warning btn-sm\">重置</button>\n        </div>\n\n    </form>\n\n</div>\n\n```\n\n- js\n\n```javaScript\n// 重置form\n$scope.initForm = function (form) {\n  if (form != null && typeof form !== 'undefined') {\n      form.$setPristine();\n  }\n\n  $scope.taskMainInfo = {};\n  $scope.taskSubs = [];\n  $scope.deleteTaskSubs = [];\n  $scope.taskMainInfo.executeType = '0';\n  $scope.taskMainInfo.taskStatus = '0';\n\n  $scope.taskSubAdd();\n  // 2 所有, 用于创建主任务模块\n  $scope.loadAllTaskSubDict($scope.loadTaskSubFlag);\n\n  console.log('init form success');\n};\n```\n\n```\n$scope.taskMainForm = {}\n\n$scope.submitFlag = true;\n$scope.submit = function() {\n      $scope.submitFlag = true;\n      if (this.taskMainForm.$invalid) { // this.taskMainForm 表示当前操作的form\n          $scope.submitFlag = false;\n          return;\n      }\n\n      $scope.taskMainForm = this.taskMainForm; // 把当前 form 作为全局的 form 来看\n\n      // 保存成功\n      if (createSuccess) {\n        $scope.initForm($scope.taskMainForm);    \n      }\n      // 修改成功\n      if (updateSuccess) {\n        $scope.initForm($scope.taskMainForm);    \n      }\n      \n  };\n```\n\n在 form submit 后 $submitted 会变成 true 并禁用 submit 按钮, 然后再调用上面的 initForm 方法来将 $submitted 状态重置为 false.\n\n关键在于点击提交按钮后通过 ng-submit 中定义的 submit 函数中的 `this.taskMainForm` 来获取到当前的 form 对象, 在保存或者修改成功后再调用 `form.$setPristine()` 将 $submitted 状态重置为 false.\n\n- 参考 [Angular $setPristine() not working](https://stackoverflow.com/questions/32029889/angular-setpristine-not-working)\n\n\n## [如何给一组 CheckBox 绑定值](https://stackoverflow.com/questions/14514461/how-do-i-bind-to-list-of-checkbox-values-with-angularjs)\n\n```\n<div ng-controller=\"MainCtrl\">\n  <label ng-repeat=\"(color,enabled) in colors\">\n      <input type=\"checkbox\" ng-model=\"colors[color]\" /> {{color}} \n  </label>\n  <p>colors: {{colors}}</p>\n</div>\n\n<script>\n  var app = angular.module('plunker', []);\n\n  app.controller('MainCtrl', function($scope) {\n      $scope.colors = {Blue: true, Orange: true};\n  });\n</script>\n```","source":"_posts/AngularJS 知识点积累.md","raw":"---\ntitle: AngularJS 知识点积累\ntitle_url: AngularJS-basic\ndate: 2017-09-15\ntags: AngularJS\ncategories: [AngularJS]\ndescription: AngularJS 知识点积累\n---\n\n## [如何动态插入删除dom节点](http://yijiebuyi.com/blog/7702aba213aec9de43b129b3d2f3b30c.html)\n```\n$('div[name=father]').html(\n  $compile('<input type=\"text\" ng-model=\"person.name\" /> <input type=\"input\" ng-model=\"person.age\" value=\"{{person.age}}\" /><a ng-show=\"$index!=0\" style=\"color:red;\" ng-click=\"del($index)\">移除</a>'\n  )($scope)\n);\n```\n\n- [HTML Compiler](https://docs.angularjs.org/guide/compiler)\n\n## [ng-click 如何获取触发事件对象或者this](http://blog.csdn.net/a576736858/article/details/62039286)\n\n`ng-click=\"addPackage($event,111)\"` 传递一个$event对象\n通过事件对象 `$event.target`  获取事件源\n```\n//动态添加数据  \n$scope.addPackage = function(myevent,deviceType){  \n    //获取item对象  \n    var htmlObj = $(myevent.target).closest(\".float_left\");  \n    var deviceName = htmlObj.find(\"div.font_16\").html();  \n    var jsonObj = {  \n        \"deviceType\":deviceType,//设备类型，唯一标识，用于判断是否已经添加  \n        \"deviceName\":deviceName //设备的名称  \n    };  \n    //判断数据是否已经选中了  \n    if(!this.hasDevice(deviceType)){  \n        //给$scope.lists添加数据  \n        this.lists.push(jsonObj);  \n    }  \n};  \n```\n\n## [如何在页面加载的时候执行一个方法](https://stackoverflow.com/questions/15458609/how-to-execute-angular-controller-function-on-page-load)\n\n使用 [`ng-init`](https://docs.angularjs.org/api/ng/directive/ngInit) 指令\n\n```\n// register controller in html\n<div data-ng-controller=\"myCtrl\" data-ng-init=\"init()\"></div>\n\n// in controller\n$scope.init = function () {\n    // check if there is query in url\n    // and fire search in case its value is not empty\n};\n```\n\n## [使用 `ng-repeat` 来实现增加一行/删除一行的效果](http://lib.csdn.net/article/angularjs/33158)\n\n```javascript\n$scope.printInfo = function () {\n        for (var i = 0; i < $scope.showVBs.length; i++) {\n            console.log($scope.showVBs[i]);\n        }\n    };\n\n$scope.showVBs = [{\n    \"Tag\": \"Tag1\",\n    \"NO\": \"No1\",\n    \"remarks\": \"remarks1\"\n}, {\n    \"Tag\": \"Tag2\",\n    \"NO\": \"No2\",\n    \"remarks\": \"remarks2\"\n}];\n$scope.BDetailsAdd = function () {\n    $scope.showVBs.push({});\n};\n$scope.BDetailsDel = function (Count) {\n    $scope.showVBs.splice(Count, 1);\n};\n\n```\n\n```html\n<form role=\"form\" name=\"editForm\">\n    <div class=\"row\">\n        <div class=\"col-md-12\">\n            <div class=\"row  panel panel-default panel-body\">\n                <div class=\"col-md-offset-1 panel panel-default\">\n                    <label>{{'Details'}}</label>\n                    <input type=\"button\" class=\"btn btn-info\" value=\"增加\" ng-click=\"BDetailsAdd()\">\n                    <input type=\"button\" class=\"btn btn-danger\" value=\"打印信息\" ng-click=\"printInfo()\">\n                </div>\n                <div class=\"vBaggages\" ng-repeat=\"vba in showVBs\">\n                    <div class=\"form-group col-md-2 col-md-offset-1\">\n                        <input type=\"button\" class=\"btn btn-info\" value=\"删\" ng-click=\"BDetailsDel($index)\">\n                        <input type=\"text\" class=\"form-control pull-right\" ng-model=\"vba.Tag\"\n                               placeholder=\"Tag\" style=\"width:70%\">\n                    </div>\n                    <div class=\"form-group col-md-2 col-md-offset-1\">\n                        <input type=\"text\" class=\"form-control pull-right\" ng-model=\"vba.NO\"\n                               placeholder=\"No.\">\n                    </div>\n                    <div class=\"form-group col-md-5 col-md-offset-1\">\n                        <input type=\"text\" class=\"form-control pull-right\" ng-model=\"vba.remarks\"\n                               placeholder=\"Remarks\">\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</form>\n```\n\n## [如何构建一个 SpringBoot + angularJS web 应用](http://websystique.com/spring-boot/spring-boot-angularjs-spring-data-jpa-crud-app-example/)\n\n## [如何安装 AngularJS 的 ngStorage 模块](http://blog.legacyteam.info/2014/12/ngstorage-localstorage-module-for-angularjs/)\n\n错误提示如下\n\n```\nError: [$injector:modulerr] Failed to instantiate module ngStorage due to:\nError: [$injector:nomod] Module 'ngStorage' is not available! You either misspelled the module name or forgot to load it. If registering a module ensure that you specify the dependencies as the second argument.\n```\n\n解决方法如下\n\n在项目根目录下执行安装(uninstall 是卸载)\n\n```\nbower install ngstorage\n```\n```\nbower ngstorage#*               cached https://github.com/gsklee/ngStorage.git#0.3.11\nbower ngstorage#*             validate 0.3.11 against https://github.com/gsklee/ngStorage.git#*\nbower ngstorage#^0.3.11        install ngstorage#0.3.11\n\nngstorage#0.3.11 bower_components\\ngstorage\n└── angular#1.5.11\n\n```\n然后在项目中的 bower.json 文件中添加相关依赖\n\n```\n\"dependencies\": {\n    \"ng-js-tree\": \"~0.0.7\",\n    \"angular-ui-select\": \"^0.19.6\",\n    \"ngstorage\": \"0.3.11\"\n  },\n```\n\n## [AngularJS 如何跨域访问 SpringBoot API](https://stackoverflow.com/questions/19825946/how-to-add-a-filter-class-in-spring-boot)\n\n错误描述如下\n\n```\nXMLHttpRequest cannot load http://localhost:8011/api/task_main. No 'Access-Control-Allow-Origin' header is present on the requested resource. Origin 'http://localhost:3000' is therefore not allowed access.\n```\n\n解决方法\n\n添加一个 Filter 配置\n\n```java\nimport javax.servlet.Filter;\n\nimport org.springframework.boot.web.servlet.FilterRegistrationBean;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.servlet.config.annotation.EnableWebMvc;\nimport org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;\n\nimport com.ctrip.payment.filter.RemoteAccessFilter;\n\n@Configuration\n@EnableWebMvc\npublic class WebAppConfig extends WebMvcConfigurerAdapter {\n\n\t@Bean\n\tpublic FilterRegistrationBean someFilterRegistration() {\n\t    FilterRegistrationBean registration = new FilterRegistrationBean();\n\t    registration.setFilter(remoteAccessFilter());\n\t    registration.addUrlPatterns(\"/api/*\");\n\t    //registration.addInitParameter(\"paramName\", \"paramValue\");\n\t    registration.setName(\"remoteAccessFilter\");\n\t    registration.setOrder(1);\n\t    return registration;\n\t} \n\n\tpublic Filter remoteAccessFilter() {\n\t    return new RemoteAccessFilter();\n\t}\n}\n```\n\n具体 Filter 如下\n\n```java\nimport java.io.IOException;\n\nimport javax.servlet.Filter;\nimport javax.servlet.FilterChain;\nimport javax.servlet.FilterConfig;\nimport javax.servlet.ServletException;\nimport javax.servlet.ServletRequest;\nimport javax.servlet.ServletResponse;\nimport javax.servlet.http.HttpServletResponse;\n\npublic class RemoteAccessFilter implements Filter {\n\t@Override\n\tpublic void init(FilterConfig filterConfig) throws ServletException {\n\n\t}\n\n\t@Override\n\tpublic void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)\n\t\t\tthrows IOException, ServletException {\n\t\t\n\t\t// ref:http://www.cnblogs.com/1000px/p/4666247.html\n\t\tHttpServletResponse resp = (HttpServletResponse) response;\n\t\tresp.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n\t\tresp.setHeader(\"Access-Control-Allow-Methods\", \"GET,POST,PUT\");\n\t\tresp.setHeader(\"Access-Control-Allow-Headers\", \"Accept,x-requested-with,content-type\");\n\t\t\n\t\tchain.doFilter(request, response);\n\t}\n\n\t@Override\n\tpublic void destroy() {\n\t}\n\n}\n```\n\n- [AngularJS跨域请求](http://www.cnblogs.com/1000px/p/4666247.html)\n\n## AngularJS 如何判断字符串或者对象是否为空\n\n在 AngularJs 中判断对象是否为空，可以使用 angular.equals，如下\n\n```\nif (obj == null || angular.equals({}, obj)) {\n // 为空\n}\n```\n\n如果是一个字段\n\n```\nif (obj == null || angular.equals('', obj.trim())) {\n // 为空\n}\n```\n\n## [关于 datePicker 和 timePicker 的组合使用](https://angular-ui.github.io/bootstrap/)\n\n- html\n\n```\n<div class=\"row datepicker\">\n\t<div class=\"col-md-2\">\n\t   <label>开始时间</label>\n\t   <p class=\"input-group\">\n\t\t  <input type=\"text\" readonly class=\"form-control\" uib-datepicker-popup=\"yyyy-MM-dd\" datepicker-options=\"datePickerOptions\" ng-model=\"clogDateTime.clogFromDate\" is-open=\"fromDateStatus.isOpen\" close-text=\"Close\" />\n\t\t  <span class=\"input-group-btn\">\n\t\t\t <button type=\"button\" class=\"btn btn-default\" ng-click=\"fromDateOpen()\"><i class=\"glyphicon glyphicon-calendar\"></i></button>\n\t\t  </span>\n\t   </p>\n\t</div>\n\t<div class=\"col-md-2\">\n\t   <uib-timepicker show-seconds=\"true\" ng-change=\"clogFromTimeChanged()\" ng-model=\"clogDateTime.clogFromTime\" show-meridian=\"false\"></uib-timepicker> {{ (clogDateTime.clogFromDate != null && clogDateTime.clogFromTime != null) ? (taskSubInfo.fromDate = (clogDateTime.clogFromDate | date:'yyyy-MM-dd')  + ' ' + (clogDateTime.clogFromTime | date:'HH:mm:ss')) : null }}\n\t</div>\n\t<div class=\"col-md-2\">\n\t   <button type=\"button\" class=\"btn btn-sm btn-danger\" ng-click=\"resetFromDateTime()\">重置开始时间</button>\n\t</div>\n\t<div class=\"col-md-2\">\n\t   <label>结束时间</label>\n\t   <p class=\"input-group\">\n\t\t  <input type=\"text\" readonly class=\"form-control\" uib-datepicker-popup=\"yyyy-MM-dd\" datepicker-options=\"datePickerOptions\" ng-model=\"clogDateTime.clogToDate\" is-open=\"toDateStatus.isOpen\" close-text=\"Close\" />\n\t\t  <span class=\"input-group-btn\">\n\t\t\t <button type=\"button\" class=\"btn btn-default\" ng-click=\"toDateOpen()\"><i class=\"glyphicon glyphicon-calendar\"></i></button>\n\t\t  </span>\n\t   </p>\n\t</div>\n\t<div class=\"col-md-2\">\n\t   <uib-timepicker show-seconds=\"true\" ng-change=\"clogToTimeChanged()\" ng-model=\"clogDateTime.clogToTime\" show-meridian=\"false\"></uib-timepicker> {{ (clogDateTime.clogToDate != null && clogDateTime.clogToTime != null) ? (taskSubInfo.toDate = (clogDateTime.clogToDate | date:'yyyy-MM-dd')  + ' ' + (clogDateTime.clogToTime | date:'HH:mm:ss')) : null }}\n\t</div>\n\t<div class=\"col-md-2\">\n\t   <button type=\"button\" class=\"btn btn-sm btn-danger\" ng-click=\"resetToDateTime()\">重置结束时间</button>\n\t</div>\n</div>\n```\n\n- js\n\n```\n// 将日期和时间作为对象进行考虑\n$scope.clogDateTime = {};\n\n$scope.resetFromDateTime = function () {\n  $scope.clogDateTime.clogFromDate = null;\n  $scope.clogDateTime.clogFromTime = null;\n  $scope.taskSubInfo.fromDate = null;\n};\n\n$scope.resetToDateTime = function () {\n  $scope.clogDateTime.clogToDate = null;\n  $scope.clogDateTime.clogToTime = null;\n  $scope.taskSubInfo.toDate = null;\n};\n\t  \n// 提交的时候\nif ($scope.taskSubInfo.fromDate == null || angular.equals($scope.taskSubInfo.fromDate.trim(), '')) {\n  $scope.taskSubInfo.fromDate = null;\n}\nif ($scope.taskSubInfo.toDate == null || angular.equals($scope.taskSubInfo.toDate.trim(), '')) {\n  $scope.taskSubInfo.toDate = null;\n}\n\n// 加载的时候\t  \nvar dateTimeReg = /^(?:19|20)[0-9][0-9]-(?:(?:0[1-9])|(?:1[0-2]))-(?:(?:[0-2][1-9])|(?:[1-3][0-1])) (?:(?:[0-2][0-3])|(?:[0-1][0-9])):[0-5][0-9]:[0-5][0-9]$/;\n\nif ($scope.taskSubInfo.fromDate != null\n  && !angular.equals($scope.taskSubInfo.fromDate.trim(), '')\n  && dateTimeReg.test($scope.taskSubInfo.fromDate)) {\n  try {\n\t  $scope.clogDateTime.clogFromDate = new Date($scope.taskSubInfo.fromDate);\n\t  $scope.clogDateTime.clogFromTime = new Date($scope.taskSubInfo.fromDate);\n  } catch (e) {\n\t  console.log('invalid fromDate:'+$scope.taskSubInfo.fromDate);\n  }\n}\nif ($scope.taskSubInfo.toDate != null\n  && !angular.equals($scope.taskSubInfo.toDate.trim(), '')\n  && dateTimeReg.test($scope.taskSubInfo.toDate)) {\n  try {\n\t  $scope.clogDateTime.clogToDate = new Date($scope.taskSubInfo.toDate);\n\t  $scope.clogDateTime.clogToTime = new Date($scope.taskSubInfo.toDate);\n  } catch (e) {\n\t  console.log('invalid fromDate:'+$scope.taskSubInfo.fromDate);\n  }\n}\n\n/*$scope.clogFromDate = new Date($filter('date')(new Date($scope.taskSubInfo.fromDate),'yyyy-MM-dd'));\n$scope.clogToDate = new Date($filter('date')(new Date($scope.taskSubInfo.toDate),'yyyy-MM-dd'));\n$scope.clogFromTime = new Date($filter('date')(new Date($scope.taskSubInfo.fromDate),'HH:mm:ss'));\n$scope.clogToTime = new Date($filter('date')(new Date($scope.taskSubInfo.toDate),'HH:mm:ss'));*/\n```\n\n## 如何在 ngRepeat 中设置 name 属性的 $index\n\n具体如下\n\n```\n<div class=\"form-group\"\n     ng-class=\"{'has-error': taskSubForm['variableName_'+$index].$invalid && (taskSubForm['variableName_'+$index].$dirty || taskSubForm.$submitted)}\">\n    <label>变量名称</label>\n    <input type=\"text\" class=\"form-control\" name=\"variableName_{{$index}}\" placeholder=\"变量名称 必填\" ng-model=\"taskSubvariable.variableName\" required>\n    <span class=\"help-block error-block basic-block\">此字段必填</span>\n</div>\n```\n\n- [angular ngRepeat $index in name attribute](https://stackoverflow.com/questions/21631456/angular-ngrepeat-index-in-name-attribute)\n\n## [如何知道 $http 请求成功了](http://www.cnblogs.com/xing901022/p/4928147.html)\n\n```\n<script type=\"text/javascript\">\n     var myAppModule = angular.module(\"myApp\",[]);\n     myAppModule.controller(\"myctrl\",[\"$scope\",\"$q\",function($scope, $ q ){\n        $scope.test = 1;//这个只是用来测试angularjs是否正常的，没其他的作用\n\n        var defer1 = $q.defer();\n        var promise1 = defer1.promise;\n\n        promise1\n        .then(function(value){\n            console.log(\"in promise1 ---- success\");\n            console.log(value);\n        },function(value){\n            console.log(\"in promise1 ---- error\");\n            console.log(value);\n        },function(value){\n            console.log(\"in promise1 ---- notify\");\n            console.log(value);\n        })\n        .catch(function(e){\n            console.log(\"in promise1 ---- catch\");\n            console.log(e);\n        })\n        .finally(function(value){\n            console.log('in promise1 ---- finally');\n            console.log(value);\n        });\n\n        defer1.resolve(\"hello\");\n        // defer1.reject(\"sorry,reject\");\n     }]);\n</script>\n```\n\n也可以简写成如下方式\n\n```\npromise1\n.then(function(value){\n    console.log(\"in promise1 ---- success\");\n    console.log(value);\n},function(value){\n    console.log(\"in promise1 ---- error\");\n    console.log(value);\n});\n```\n\n或者\n\n```\npromise1\n.then(function(value){\n    console.log(\"in promise1 ---- success\");\n    console.log(value);\n});\n```\n\n- [AngularJS 中的Promise --- $q服务详解](http://www.cnblogs.com/xing901022/p/4928147.html)\n\n## [Modal 弹出框如何传值](http://www.cnblogs.com/acmilan/p/3672184.html)\n\n- 通过 resolve\n\n```\nangular.module('modaltest')\n.controller('testModalTestController',function($scope,$modal){\n        $scope.addModal = function () {\n            var newWarn = $modal.open({\n                templateUrl: 'views/part/add.html',\n                controller: 'C_add_Warn',\n                resolve:{\n                    header : function() { return angular.copy(\"新增\"); },\n                    msg : function() { return angular.copy(\"这是消息\"); }\n                }\n            });\n        }  \n}) \n.controller('C_add_Warn',function($scope,header,msg){\n       $scope.header = header;\n       $scope.msg = msg;\n})\n```\n\n- 通过 scope 传递\n\n```\nangular.module('modaltest')\n .controller('testModalTestController',function($rootScope,$scope,$modal){\n          var scope = $rootScope.$new();\n           scope.data = {\n                msg:\"test\",\n                header:\"header\"\n           }\n          $scope.addModal = function () {\n              var newWarn = $modal.open({\n                  templateUrl: 'views/part/add.html',\n                  controller: 'C_add_Warn',\n                  scope:scope\n             });\n         }  \n }) \n .controller('C_add_Warn',function($scope){\n        var data = $scope.data;\n\n })\n```\n\n## [Controller 之间如何跳转](https://yehuang.me/angularjs/2015/11/01/how-to-pass-parameters-in-angularjs/)\n\n- 在AngularJS的app.js中用ui-router定义路由，比如现在有两个页面，一个页面producers.html放置了多个producers，点击其中一个目标，页面跳转到对应的producer.html页，同时将producerId这个参数传过去。\n\n```\n//定义producers状态\n.state('producers', {\n    url: '/producers',\n    templateUrl: 'views/producers.html',\n    controller: 'ProducersCtrl'\n})\n//定义producer状态\n.state('producer', {\n    url: '/producer/:producerId',\n    templateUrl: 'views/producer.html',\n    controller: 'ProducerCtrl'\n})\n```\n- 在producers.html中，定义点击事件，比如ng-click=”toProducer(producerId)”，在ProducersCtrl中，定义页面跳转函数 (使用ui-router的$state.go接口)：\n\n```\n.controller('ProducersCtrl', function ($scope, $state) {\n    $scope.toProducer = function (producerId) {\n        $state.go('producer', {producerId: producerId});\n    };\n});\n```\n\n- 在 ProducerCtrl 中，通过 ui-router 的 $stateParams 获取参数 producerId，譬如：\n\n```\n .controller('ProducerCtrl', function ($scope, $state, $stateParams) {\n   var producerId = $stateParams.producerId;\n});\n```\n\n- [AngularJS - 页面跳转传参](https://yehuang.me/angularjs/2015/11/01/how-to-pass-parameters-in-angularjs/)\n\n## [如何截取字符串(filter的使用介绍)](https://stackoverflow.com/questions/18095727/limit-the-length-of-a-string-with-angularjs)\n\n在模块中定义 cut filter\n\n```\nangular.module('ng').filter('cut', function () {\n        return function (value, wordwise, max, tail) {\n            if (!value) return '';\n\n            max = parseInt(max, 10);\n            if (!max) return value;\n            if (value.length <= max) return value;\n\n            value = value.substr(0, max);\n            if (wordwise) {\n                var lastspace = value.lastIndexOf(' ');\n                if (lastspace !== -1) {\n                  //Also remove . and , so its gives a cleaner result.\n                  if (value.charAt(lastspace-1) === '.' || value.charAt(lastspace-1) === ',') {\n                    lastspace = lastspace - 1;\n                  }\n                  value = value.substr(0, lastspace);\n                }\n            }\n\n            return value + (tail || ' …');\n        };\n    });\n```\n\n使用如下\n\n```\n{{some_text | cut:true:100:' ...'}}\n```\n\n参数说明\n\n- wordwise (boolean) - if true, cut only by words bounds,\n- max (integer) - max length of the text, cut to this number of chars,\n- tail (string, default: ' …') - add this string to the input string if the string was cut.\n\n## [checkbox 中的 ng-model 不起作用了](https://stackoverflow.com/questions/18642371/checkbox-not-binding-to-scope-in-angularjs)\n\n先看看下面错误的做法\n\n- html\n\n```\n<label class=\"checkbox-inline custom-checkbox nowrap\">\n    <input type=\"checkbox\" ng-model=\"checkJobAll\" ng-click=\"checkAllJob(checkJobAll)\">\n    <span></span>\n</label>\n```\n\n- js\n\n```\n$scope.checkJobAll = false;\n\n$scope.checkJobAll = true;\n```\n\n当 ng-model 绑定的是一个普通变量的时候, Controller 中的变量无法和页面上的变量值同步,只有改成对象的形式才可以,正确的做法如下\n\n- html\n\n```\n<label class=\"checkbox-inline custom-checkbox nowrap\">\n    <input type=\"checkbox\" ng-model=\"checkJobAll.flag\" ng-click=\"checkAllJob(checkJobAll.flag)\">\n    <span></span>\n</label>\n```\n\n- js\n\n```\n$scope.checkJobAll = { 'flag':false };\n\n$scope.checkJobAll.flag = true;\n```\n\n## [Modal 弹出框如何使用](https://angular-ui.github.io/bootstrap/#!#modal) \n\n点击页面上的按钮弹出一个 Modal 对话框\n\n- html \n\n```\n<input type=\"button\" ng-disabled=\"(item.status == 'EXECUTING' ? false : true) || showLoading\" ng-click=\"openStopModal('app/pages/job/modal/stopJobModal.html', 'md', item.id)\" class=\"btn btn-danger btn-sm\" value=\"停止\">\n```\n\n- js\n\n```javaScript\n// 打开停止job的对话框\n$scope.openStopModal = function (page, size, id) {\n    $scope.showLoading = true;\n    $scope.stopJobExecuteId = id;\n\n    // 弹出是否关闭job的对话框 ///////////////////////////////////////////////////////////////////////\n    var modalInstance = $uibModal.open({\n        animation: true,\n        templateUrl: page,\n        scope: $scope,\n        //controller: 'StopJobModalInstanceCtrl',\n        size: size\n    });\n\n    modalInstance.result.then(function () { // close\n        console.log('modal close');\n        $scope.showLoading = false;\n\n        // 后台调用 stopJob 服务\n        JobExecuteService.stopJob($scope.stopJobExecuteId).then( // 点击确定关闭job 按钮的回调\n            function (response) {\n                console.log(\" stopJobExecute response = \"  + JSON.stringify(response));\n\n                $scope.stopJobDetail = response.data.stopDetail;\n\n                // 关闭job成功后的modal //////////////////////////////////////////////////////////////////////////////////////////////\n                var successModalInstance = $uibModal.open({\n                    animation: true,\n                    templateUrl: 'app/pages/job/modal/stopJobSuccessModal.html',\n                    scope: $scope, // 控制弹出的 Modal 框使用同样的 $scope\n                    size: 'md'\n                });\n\n                successModalInstance.result.then(function () { // close\n                },function () { // dismiss或者Modal框消失\n                    // 刷新列表数据\n                    $scope.callServer($scope.jobExecuteTableState);\n                });\n                /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n            },\n            function (errResponse) {\n                console.error('Error while getJobExecute ' + id + ', Error :' + errResponse.data);\n                toastr.error('Error while getJobExecute ' + id + ', Error :' + errResponse.data, '提示', $scope.notificationConfig);\n            }\n\n        );\n\n    }, function () { // dismiss\n        console.log('modal dismiss');\n        $scope.showLoading = false;\n    });\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n};\n```\n\n## [关于 form 的使用, 涉及 $submitted 和 $setPristine() 应用 ](https://code.angularjs.org/1.5.8/docs/api/ng/directive/form)\n\n- html\n\n```\n<div ba-panel\n     ba-panel-class=\"with-scroll\">\n\n    <form name=\"taskMainForm\" ng-submit=\"submit()\" ng-init=\"initForm()\" novalidate>\n        <div class=\"form-group has-feedback\"\n             ng-class=\"{'has-error': taskMainForm.taskName.$invalid && (taskMainForm.taskName.$dirty || taskMainForm.$submitted)}\">\n            <label>任务名称</label>\n            <input type=\"text\" class=\"form-control\" name=\"taskName\" placeholder=\"任务名称 必填\" ng-model=\"taskMainInfo.taskName\" required>\n            <span class=\"help-block error-block basic-block\">必填</span>\n        </div>\n        \n        <div class=\"form-group\">\n            <label>备注</label>\n            <textarea placeholder=\"填写备注\" class=\"form-control\" ng-model=\"taskMainInfo.remarks\"></textarea>\n        </div>\n\n        <div class=\"form-group\">\n            <input type=\"submit\" ng-disabled=\"taskMainForm.$submitted && submitFlag\" value=\"{{!taskMainInfo.id ? '添加' : '修改'}}\" class=\"btn btn-primary btn-sm\">\n            <button type=\"button\" ng-click=\"initForm(taskMainForm)\" class=\"btn btn-warning btn-sm\">重置</button>\n        </div>\n\n    </form>\n\n</div>\n\n```\n\n- js\n\n```javaScript\n// 重置form\n$scope.initForm = function (form) {\n  if (form != null && typeof form !== 'undefined') {\n      form.$setPristine();\n  }\n\n  $scope.taskMainInfo = {};\n  $scope.taskSubs = [];\n  $scope.deleteTaskSubs = [];\n  $scope.taskMainInfo.executeType = '0';\n  $scope.taskMainInfo.taskStatus = '0';\n\n  $scope.taskSubAdd();\n  // 2 所有, 用于创建主任务模块\n  $scope.loadAllTaskSubDict($scope.loadTaskSubFlag);\n\n  console.log('init form success');\n};\n```\n\n```\n$scope.taskMainForm = {}\n\n$scope.submitFlag = true;\n$scope.submit = function() {\n      $scope.submitFlag = true;\n      if (this.taskMainForm.$invalid) { // this.taskMainForm 表示当前操作的form\n          $scope.submitFlag = false;\n          return;\n      }\n\n      $scope.taskMainForm = this.taskMainForm; // 把当前 form 作为全局的 form 来看\n\n      // 保存成功\n      if (createSuccess) {\n        $scope.initForm($scope.taskMainForm);    \n      }\n      // 修改成功\n      if (updateSuccess) {\n        $scope.initForm($scope.taskMainForm);    \n      }\n      \n  };\n```\n\n在 form submit 后 $submitted 会变成 true 并禁用 submit 按钮, 然后再调用上面的 initForm 方法来将 $submitted 状态重置为 false.\n\n关键在于点击提交按钮后通过 ng-submit 中定义的 submit 函数中的 `this.taskMainForm` 来获取到当前的 form 对象, 在保存或者修改成功后再调用 `form.$setPristine()` 将 $submitted 状态重置为 false.\n\n- 参考 [Angular $setPristine() not working](https://stackoverflow.com/questions/32029889/angular-setpristine-not-working)\n\n\n## [如何给一组 CheckBox 绑定值](https://stackoverflow.com/questions/14514461/how-do-i-bind-to-list-of-checkbox-values-with-angularjs)\n\n```\n<div ng-controller=\"MainCtrl\">\n  <label ng-repeat=\"(color,enabled) in colors\">\n      <input type=\"checkbox\" ng-model=\"colors[color]\" /> {{color}} \n  </label>\n  <p>colors: {{colors}}</p>\n</div>\n\n<script>\n  var app = angular.module('plunker', []);\n\n  app.controller('MainCtrl', function($scope) {\n      $scope.colors = {Blue: true, Orange: true};\n  });\n</script>\n```","slug":"AngularJS 知识点积累","published":1,"updated":"2018-01-01T12:55:41.279Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfto0q6e000018c7fhmhnelc","content":"<h2 id=\"如何动态插入删除dom节点\"><a href=\"#如何动态插入删除dom节点\" class=\"headerlink\" title=\"如何动态插入删除dom节点\"></a><a href=\"http://yijiebuyi.com/blog/7702aba213aec9de43b129b3d2f3b30c.html\" target=\"_blank\" rel=\"external\">如何动态插入删除dom节点</a></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(&apos;div[name=father]&apos;).html(</span><br><span class=\"line\">  $compile(&apos;&lt;input type=&quot;text&quot; ng-model=&quot;person.name&quot; /&gt; &lt;input type=&quot;input&quot; ng-model=&quot;person.age&quot; value=&quot;&#123;&#123;person.age&#125;&#125;&quot; /&gt;&lt;a ng-show=&quot;$index!=0&quot; style=&quot;color:red;&quot; ng-click=&quot;del($index)&quot;&gt;移除&lt;/a&gt;&apos;</span><br><span class=\"line\">  )($scope)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<ul>\n<li><a href=\"https://docs.angularjs.org/guide/compiler\" target=\"_blank\" rel=\"external\">HTML Compiler</a></li>\n</ul>\n<h2 id=\"ng-click-如何获取触发事件对象或者this\"><a href=\"#ng-click-如何获取触发事件对象或者this\" class=\"headerlink\" title=\"ng-click 如何获取触发事件对象或者this\"></a><a href=\"http://blog.csdn.net/a576736858/article/details/62039286\" target=\"_blank\" rel=\"external\">ng-click 如何获取触发事件对象或者this</a></h2><p><code>ng-click=&quot;addPackage($event,111)&quot;</code> 传递一个$event对象<br>通过事件对象 <code>$event.target</code>  获取事件源<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//动态添加数据  </span><br><span class=\"line\">$scope.addPackage = function(myevent,deviceType)&#123;  </span><br><span class=\"line\">    //获取item对象  </span><br><span class=\"line\">    var htmlObj = $(myevent.target).closest(&quot;.float_left&quot;);  </span><br><span class=\"line\">    var deviceName = htmlObj.find(&quot;div.font_16&quot;).html();  </span><br><span class=\"line\">    var jsonObj = &#123;  </span><br><span class=\"line\">        &quot;deviceType&quot;:deviceType,//设备类型，唯一标识，用于判断是否已经添加  </span><br><span class=\"line\">        &quot;deviceName&quot;:deviceName //设备的名称  </span><br><span class=\"line\">    &#125;;  </span><br><span class=\"line\">    //判断数据是否已经选中了  </span><br><span class=\"line\">    if(!this.hasDevice(deviceType))&#123;  </span><br><span class=\"line\">        //给$scope.lists添加数据  </span><br><span class=\"line\">        this.lists.push(jsonObj);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"如何在页面加载的时候执行一个方法\"><a href=\"#如何在页面加载的时候执行一个方法\" class=\"headerlink\" title=\"如何在页面加载的时候执行一个方法\"></a><a href=\"https://stackoverflow.com/questions/15458609/how-to-execute-angular-controller-function-on-page-load\" target=\"_blank\" rel=\"external\">如何在页面加载的时候执行一个方法</a></h2><p>使用 <a href=\"https://docs.angularjs.org/api/ng/directive/ngInit\" target=\"_blank\" rel=\"external\"><code>ng-init</code></a> 指令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// register controller in html</span><br><span class=\"line\">&lt;div data-ng-controller=&quot;myCtrl&quot; data-ng-init=&quot;init()&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// in controller</span><br><span class=\"line\">$scope.init = function () &#123;</span><br><span class=\"line\">    // check if there is query in url</span><br><span class=\"line\">    // and fire search in case its value is not empty</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用-ng-repeat-来实现增加一行-删除一行的效果\"><a href=\"#使用-ng-repeat-来实现增加一行-删除一行的效果\" class=\"headerlink\" title=\"使用 ng-repeat 来实现增加一行/删除一行的效果\"></a><a href=\"http://lib.csdn.net/article/angularjs/33158\" target=\"_blank\" rel=\"external\">使用 <code>ng-repeat</code> 来实现增加一行/删除一行的效果</a></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$scope.printInfo = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; $scope.showVBs.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log($scope.showVBs[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">$scope.showVBs = [&#123;</span><br><span class=\"line\">    <span class=\"string\">\"Tag\"</span>: <span class=\"string\">\"Tag1\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"NO\"</span>: <span class=\"string\">\"No1\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"remarks\"</span>: <span class=\"string\">\"remarks1\"</span></span><br><span class=\"line\">&#125;, &#123;</span><br><span class=\"line\">    <span class=\"string\">\"Tag\"</span>: <span class=\"string\">\"Tag2\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"NO\"</span>: <span class=\"string\">\"No2\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"remarks\"</span>: <span class=\"string\">\"remarks2\"</span></span><br><span class=\"line\">&#125;];</span><br><span class=\"line\">$scope.BDetailsAdd = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    $scope.showVBs.push(&#123;&#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">$scope.BDetailsDel = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">Count</span>) </span>&#123;</span><br><span class=\"line\">    $scope.showVBs.splice(Count, <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">role</span>=<span class=\"string\">\"form\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"editForm\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"row\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-md-12\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"row  panel panel-default panel-body\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-md-offset-1 panel panel-default\"</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>&#123;&#123;'Details'&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-info\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"增加\"</span> <span class=\"attr\">ng-click</span>=<span class=\"string\">\"BDetailsAdd()\"</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-danger\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"打印信息\"</span> <span class=\"attr\">ng-click</span>=<span class=\"string\">\"printInfo()\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"vBaggages\"</span> <span class=\"attr\">ng-repeat</span>=<span class=\"string\">\"vba in showVBs\"</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group col-md-2 col-md-offset-1\"</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-info\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"删\"</span> <span class=\"attr\">ng-click</span>=<span class=\"string\">\"BDetailsDel($index)\"</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control pull-right\"</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">\"vba.Tag\"</span></span><br><span class=\"line\">                               <span class=\"attr\">placeholder</span>=<span class=\"string\">\"Tag\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width:70%\"</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group col-md-2 col-md-offset-1\"</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control pull-right\"</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">\"vba.NO\"</span></span><br><span class=\"line\">                               <span class=\"attr\">placeholder</span>=<span class=\"string\">\"No.\"</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group col-md-5 col-md-offset-1\"</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control pull-right\"</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">\"vba.remarks\"</span></span><br><span class=\"line\">                               <span class=\"attr\">placeholder</span>=<span class=\"string\">\"Remarks\"</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"如何构建一个-SpringBoot-angularJS-web-应用\"><a href=\"#如何构建一个-SpringBoot-angularJS-web-应用\" class=\"headerlink\" title=\"如何构建一个 SpringBoot + angularJS web 应用\"></a><a href=\"http://websystique.com/spring-boot/spring-boot-angularjs-spring-data-jpa-crud-app-example/\" target=\"_blank\" rel=\"external\">如何构建一个 SpringBoot + angularJS web 应用</a></h2><h2 id=\"如何安装-AngularJS-的-ngStorage-模块\"><a href=\"#如何安装-AngularJS-的-ngStorage-模块\" class=\"headerlink\" title=\"如何安装 AngularJS 的 ngStorage 模块\"></a><a href=\"http://blog.legacyteam.info/2014/12/ngstorage-localstorage-module-for-angularjs/\" target=\"_blank\" rel=\"external\">如何安装 AngularJS 的 ngStorage 模块</a></h2><p>错误提示如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Error: [$injector:modulerr] Failed to instantiate module ngStorage due to:</span><br><span class=\"line\">Error: [$injector:nomod] Module &apos;ngStorage&apos; is not available! You either misspelled the module name or forgot to load it. If registering a module ensure that you specify the dependencies as the second argument.</span><br></pre></td></tr></table></figure>\n<p>解决方法如下</p>\n<p>在项目根目录下执行安装(uninstall 是卸载)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bower install ngstorage</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bower ngstorage#*               cached https://github.com/gsklee/ngStorage.git#0.3.11</span><br><span class=\"line\">bower ngstorage#*             validate 0.3.11 against https://github.com/gsklee/ngStorage.git#*</span><br><span class=\"line\">bower ngstorage#^0.3.11        install ngstorage#0.3.11</span><br><span class=\"line\"></span><br><span class=\"line\">ngstorage#0.3.11 bower_components\\ngstorage</span><br><span class=\"line\">└── angular#1.5.11</span><br></pre></td></tr></table></figure>\n<p>然后在项目中的 bower.json 文件中添加相关依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;dependencies&quot;: &#123;</span><br><span class=\"line\">    &quot;ng-js-tree&quot;: &quot;~0.0.7&quot;,</span><br><span class=\"line\">    &quot;angular-ui-select&quot;: &quot;^0.19.6&quot;,</span><br><span class=\"line\">    &quot;ngstorage&quot;: &quot;0.3.11&quot;</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n<h2 id=\"AngularJS-如何跨域访问-SpringBoot-API\"><a href=\"#AngularJS-如何跨域访问-SpringBoot-API\" class=\"headerlink\" title=\"AngularJS 如何跨域访问 SpringBoot API\"></a><a href=\"https://stackoverflow.com/questions/19825946/how-to-add-a-filter-class-in-spring-boot\" target=\"_blank\" rel=\"external\">AngularJS 如何跨域访问 SpringBoot API</a></h2><p>错误描述如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">XMLHttpRequest cannot load http://localhost:8011/api/task_main. No &apos;Access-Control-Allow-Origin&apos; header is present on the requested resource. Origin &apos;http://localhost:3000&apos; is therefore not allowed access.</span><br></pre></td></tr></table></figure>\n<p>解决方法</p>\n<p>添加一个 Filter 配置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.Filter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.web.servlet.FilterRegistrationBean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.config.annotation.EnableWebMvc;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.ctrip.payment.filter.RemoteAccessFilter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableWebMvc</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebAppConfig</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Bean</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> FilterRegistrationBean <span class=\"title\">someFilterRegistration</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t    FilterRegistrationBean registration = <span class=\"keyword\">new</span> FilterRegistrationBean();</span><br><span class=\"line\">\t    registration.setFilter(remoteAccessFilter());</span><br><span class=\"line\">\t    registration.addUrlPatterns(<span class=\"string\">\"/api/*\"</span>);</span><br><span class=\"line\">\t    <span class=\"comment\">//registration.addInitParameter(\"paramName\", \"paramValue\");</span></span><br><span class=\"line\">\t    registration.setName(<span class=\"string\">\"remoteAccessFilter\"</span>);</span><br><span class=\"line\">\t    registration.setOrder(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t    <span class=\"keyword\">return</span> registration;</span><br><span class=\"line\">\t&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Filter <span class=\"title\">remoteAccessFilter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> RemoteAccessFilter();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>具体 Filter 如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.Filter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.FilterChain;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.FilterConfig;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RemoteAccessFilter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Filter</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(FilterConfig filterConfig)</span> <span class=\"keyword\">throws</span> ServletException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doFilter</span><span class=\"params\">(ServletRequest request, ServletResponse response, FilterChain chain)</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throws</span> IOException, ServletException </span>&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// ref:http://www.cnblogs.com/1000px/p/4666247.html</span></span><br><span class=\"line\">\t\tHttpServletResponse resp = (HttpServletResponse) response;</span><br><span class=\"line\">\t\tresp.setHeader(<span class=\"string\">\"Access-Control-Allow-Origin\"</span>, <span class=\"string\">\"*\"</span>);</span><br><span class=\"line\">\t\tresp.setHeader(<span class=\"string\">\"Access-Control-Allow-Methods\"</span>, <span class=\"string\">\"GET,POST,PUT\"</span>);</span><br><span class=\"line\">\t\tresp.setHeader(<span class=\"string\">\"Access-Control-Allow-Headers\"</span>, <span class=\"string\">\"Accept,x-requested-with,content-type\"</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tchain.doFilter(request, response);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">destroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><a href=\"http://www.cnblogs.com/1000px/p/4666247.html\" target=\"_blank\" rel=\"external\">AngularJS跨域请求</a></li>\n</ul>\n<h2 id=\"AngularJS-如何判断字符串或者对象是否为空\"><a href=\"#AngularJS-如何判断字符串或者对象是否为空\" class=\"headerlink\" title=\"AngularJS 如何判断字符串或者对象是否为空\"></a>AngularJS 如何判断字符串或者对象是否为空</h2><p>在 AngularJs 中判断对象是否为空，可以使用 angular.equals，如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (obj == null || angular.equals(&#123;&#125;, obj)) &#123;</span><br><span class=\"line\"> // 为空</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果是一个字段</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (obj == null || angular.equals(&apos;&apos;, obj.trim())) &#123;</span><br><span class=\"line\"> // 为空</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"关于-datePicker-和-timePicker-的组合使用\"><a href=\"#关于-datePicker-和-timePicker-的组合使用\" class=\"headerlink\" title=\"关于 datePicker 和 timePicker 的组合使用\"></a><a href=\"https://angular-ui.github.io/bootstrap/\" target=\"_blank\" rel=\"external\">关于 datePicker 和 timePicker 的组合使用</a></h2><ul>\n<li>html</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;row datepicker&quot;&gt;</span><br><span class=\"line\">\t&lt;div class=&quot;col-md-2&quot;&gt;</span><br><span class=\"line\">\t   &lt;label&gt;开始时间&lt;/label&gt;</span><br><span class=\"line\">\t   &lt;p class=&quot;input-group&quot;&gt;</span><br><span class=\"line\">\t\t  &lt;input type=&quot;text&quot; readonly class=&quot;form-control&quot; uib-datepicker-popup=&quot;yyyy-MM-dd&quot; datepicker-options=&quot;datePickerOptions&quot; ng-model=&quot;clogDateTime.clogFromDate&quot; is-open=&quot;fromDateStatus.isOpen&quot; close-text=&quot;Close&quot; /&gt;</span><br><span class=\"line\">\t\t  &lt;span class=&quot;input-group-btn&quot;&gt;</span><br><span class=\"line\">\t\t\t &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot; ng-click=&quot;fromDateOpen()&quot;&gt;&lt;i class=&quot;glyphicon glyphicon-calendar&quot;&gt;&lt;/i&gt;&lt;/button&gt;</span><br><span class=\"line\">\t\t  &lt;/span&gt;</span><br><span class=\"line\">\t   &lt;/p&gt;</span><br><span class=\"line\">\t&lt;/div&gt;</span><br><span class=\"line\">\t&lt;div class=&quot;col-md-2&quot;&gt;</span><br><span class=\"line\">\t   &lt;uib-timepicker show-seconds=&quot;true&quot; ng-change=&quot;clogFromTimeChanged()&quot; ng-model=&quot;clogDateTime.clogFromTime&quot; show-meridian=&quot;false&quot;&gt;&lt;/uib-timepicker&gt; &#123;&#123; (clogDateTime.clogFromDate != null &amp;&amp; clogDateTime.clogFromTime != null) ? (taskSubInfo.fromDate = (clogDateTime.clogFromDate | date:&apos;yyyy-MM-dd&apos;)  + &apos; &apos; + (clogDateTime.clogFromTime | date:&apos;HH:mm:ss&apos;)) : null &#125;&#125;</span><br><span class=\"line\">\t&lt;/div&gt;</span><br><span class=\"line\">\t&lt;div class=&quot;col-md-2&quot;&gt;</span><br><span class=\"line\">\t   &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-danger&quot; ng-click=&quot;resetFromDateTime()&quot;&gt;重置开始时间&lt;/button&gt;</span><br><span class=\"line\">\t&lt;/div&gt;</span><br><span class=\"line\">\t&lt;div class=&quot;col-md-2&quot;&gt;</span><br><span class=\"line\">\t   &lt;label&gt;结束时间&lt;/label&gt;</span><br><span class=\"line\">\t   &lt;p class=&quot;input-group&quot;&gt;</span><br><span class=\"line\">\t\t  &lt;input type=&quot;text&quot; readonly class=&quot;form-control&quot; uib-datepicker-popup=&quot;yyyy-MM-dd&quot; datepicker-options=&quot;datePickerOptions&quot; ng-model=&quot;clogDateTime.clogToDate&quot; is-open=&quot;toDateStatus.isOpen&quot; close-text=&quot;Close&quot; /&gt;</span><br><span class=\"line\">\t\t  &lt;span class=&quot;input-group-btn&quot;&gt;</span><br><span class=\"line\">\t\t\t &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot; ng-click=&quot;toDateOpen()&quot;&gt;&lt;i class=&quot;glyphicon glyphicon-calendar&quot;&gt;&lt;/i&gt;&lt;/button&gt;</span><br><span class=\"line\">\t\t  &lt;/span&gt;</span><br><span class=\"line\">\t   &lt;/p&gt;</span><br><span class=\"line\">\t&lt;/div&gt;</span><br><span class=\"line\">\t&lt;div class=&quot;col-md-2&quot;&gt;</span><br><span class=\"line\">\t   &lt;uib-timepicker show-seconds=&quot;true&quot; ng-change=&quot;clogToTimeChanged()&quot; ng-model=&quot;clogDateTime.clogToTime&quot; show-meridian=&quot;false&quot;&gt;&lt;/uib-timepicker&gt; &#123;&#123; (clogDateTime.clogToDate != null &amp;&amp; clogDateTime.clogToTime != null) ? (taskSubInfo.toDate = (clogDateTime.clogToDate | date:&apos;yyyy-MM-dd&apos;)  + &apos; &apos; + (clogDateTime.clogToTime | date:&apos;HH:mm:ss&apos;)) : null &#125;&#125;</span><br><span class=\"line\">\t&lt;/div&gt;</span><br><span class=\"line\">\t&lt;div class=&quot;col-md-2&quot;&gt;</span><br><span class=\"line\">\t   &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-danger&quot; ng-click=&quot;resetToDateTime()&quot;&gt;重置结束时间&lt;/button&gt;</span><br><span class=\"line\">\t&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>js</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 将日期和时间作为对象进行考虑</span><br><span class=\"line\">$scope.clogDateTime = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">$scope.resetFromDateTime = function () &#123;</span><br><span class=\"line\">  $scope.clogDateTime.clogFromDate = null;</span><br><span class=\"line\">  $scope.clogDateTime.clogFromTime = null;</span><br><span class=\"line\">  $scope.taskSubInfo.fromDate = null;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">$scope.resetToDateTime = function () &#123;</span><br><span class=\"line\">  $scope.clogDateTime.clogToDate = null;</span><br><span class=\"line\">  $scope.clogDateTime.clogToTime = null;</span><br><span class=\"line\">  $scope.taskSubInfo.toDate = null;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">\t  </span><br><span class=\"line\">// 提交的时候</span><br><span class=\"line\">if ($scope.taskSubInfo.fromDate == null || angular.equals($scope.taskSubInfo.fromDate.trim(), &apos;&apos;)) &#123;</span><br><span class=\"line\">  $scope.taskSubInfo.fromDate = null;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">if ($scope.taskSubInfo.toDate == null || angular.equals($scope.taskSubInfo.toDate.trim(), &apos;&apos;)) &#123;</span><br><span class=\"line\">  $scope.taskSubInfo.toDate = null;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 加载的时候\t  </span><br><span class=\"line\">var dateTimeReg = /^(?:19|20)[0-9][0-9]-(?:(?:0[1-9])|(?:1[0-2]))-(?:(?:[0-2][1-9])|(?:[1-3][0-1])) (?:(?:[0-2][0-3])|(?:[0-1][0-9])):[0-5][0-9]:[0-5][0-9]$/;</span><br><span class=\"line\"></span><br><span class=\"line\">if ($scope.taskSubInfo.fromDate != null</span><br><span class=\"line\">  &amp;&amp; !angular.equals($scope.taskSubInfo.fromDate.trim(), &apos;&apos;)</span><br><span class=\"line\">  &amp;&amp; dateTimeReg.test($scope.taskSubInfo.fromDate)) &#123;</span><br><span class=\"line\">  try &#123;</span><br><span class=\"line\">\t  $scope.clogDateTime.clogFromDate = new Date($scope.taskSubInfo.fromDate);</span><br><span class=\"line\">\t  $scope.clogDateTime.clogFromTime = new Date($scope.taskSubInfo.fromDate);</span><br><span class=\"line\">  &#125; catch (e) &#123;</span><br><span class=\"line\">\t  console.log(&apos;invalid fromDate:&apos;+$scope.taskSubInfo.fromDate);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">if ($scope.taskSubInfo.toDate != null</span><br><span class=\"line\">  &amp;&amp; !angular.equals($scope.taskSubInfo.toDate.trim(), &apos;&apos;)</span><br><span class=\"line\">  &amp;&amp; dateTimeReg.test($scope.taskSubInfo.toDate)) &#123;</span><br><span class=\"line\">  try &#123;</span><br><span class=\"line\">\t  $scope.clogDateTime.clogToDate = new Date($scope.taskSubInfo.toDate);</span><br><span class=\"line\">\t  $scope.clogDateTime.clogToTime = new Date($scope.taskSubInfo.toDate);</span><br><span class=\"line\">  &#125; catch (e) &#123;</span><br><span class=\"line\">\t  console.log(&apos;invalid fromDate:&apos;+$scope.taskSubInfo.fromDate);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/*$scope.clogFromDate = new Date($filter(&apos;date&apos;)(new Date($scope.taskSubInfo.fromDate),&apos;yyyy-MM-dd&apos;));</span><br><span class=\"line\">$scope.clogToDate = new Date($filter(&apos;date&apos;)(new Date($scope.taskSubInfo.toDate),&apos;yyyy-MM-dd&apos;));</span><br><span class=\"line\">$scope.clogFromTime = new Date($filter(&apos;date&apos;)(new Date($scope.taskSubInfo.fromDate),&apos;HH:mm:ss&apos;));</span><br><span class=\"line\">$scope.clogToTime = new Date($filter(&apos;date&apos;)(new Date($scope.taskSubInfo.toDate),&apos;HH:mm:ss&apos;));*/</span><br></pre></td></tr></table></figure>\n<h2 id=\"如何在-ngRepeat-中设置-name-属性的-index\"><a href=\"#如何在-ngRepeat-中设置-name-属性的-index\" class=\"headerlink\" title=\"如何在 ngRepeat 中设置 name 属性的 $index\"></a>如何在 ngRepeat 中设置 name 属性的 $index</h2><p>具体如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;form-group&quot;</span><br><span class=\"line\">     ng-class=&quot;&#123;&apos;has-error&apos;: taskSubForm[&apos;variableName_&apos;+$index].$invalid &amp;&amp; (taskSubForm[&apos;variableName_&apos;+$index].$dirty || taskSubForm.$submitted)&#125;&quot;&gt;</span><br><span class=\"line\">    &lt;label&gt;变量名称&lt;/label&gt;</span><br><span class=\"line\">    &lt;input type=&quot;text&quot; class=&quot;form-control&quot; name=&quot;variableName_&#123;&#123;$index&#125;&#125;&quot; placeholder=&quot;变量名称 必填&quot; ng-model=&quot;taskSubvariable.variableName&quot; required&gt;</span><br><span class=\"line\">    &lt;span class=&quot;help-block error-block basic-block&quot;&gt;此字段必填&lt;/span&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/21631456/angular-ngrepeat-index-in-name-attribute\" target=\"_blank\" rel=\"external\">angular ngRepeat $index in name attribute</a></li>\n</ul>\n<h2 id=\"如何知道-http-请求成功了\"><a href=\"#如何知道-http-请求成功了\" class=\"headerlink\" title=\"如何知道 $http 请求成功了\"></a><a href=\"http://www.cnblogs.com/xing901022/p/4928147.html\" target=\"_blank\" rel=\"external\">如何知道 $http 请求成功了</a></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">     var myAppModule = angular.module(&quot;myApp&quot;,[]);</span><br><span class=\"line\">     myAppModule.controller(&quot;myctrl&quot;,[&quot;$scope&quot;,&quot;$q&quot;,function($scope, $ q )&#123;</span><br><span class=\"line\">        $scope.test = 1;//这个只是用来测试angularjs是否正常的，没其他的作用</span><br><span class=\"line\"></span><br><span class=\"line\">        var defer1 = $q.defer();</span><br><span class=\"line\">        var promise1 = defer1.promise;</span><br><span class=\"line\"></span><br><span class=\"line\">        promise1</span><br><span class=\"line\">        .then(function(value)&#123;</span><br><span class=\"line\">            console.log(&quot;in promise1 ---- success&quot;);</span><br><span class=\"line\">            console.log(value);</span><br><span class=\"line\">        &#125;,function(value)&#123;</span><br><span class=\"line\">            console.log(&quot;in promise1 ---- error&quot;);</span><br><span class=\"line\">            console.log(value);</span><br><span class=\"line\">        &#125;,function(value)&#123;</span><br><span class=\"line\">            console.log(&quot;in promise1 ---- notify&quot;);</span><br><span class=\"line\">            console.log(value);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .catch(function(e)&#123;</span><br><span class=\"line\">            console.log(&quot;in promise1 ---- catch&quot;);</span><br><span class=\"line\">            console.log(e);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .finally(function(value)&#123;</span><br><span class=\"line\">            console.log(&apos;in promise1 ---- finally&apos;);</span><br><span class=\"line\">            console.log(value);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        defer1.resolve(&quot;hello&quot;);</span><br><span class=\"line\">        // defer1.reject(&quot;sorry,reject&quot;);</span><br><span class=\"line\">     &#125;]);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>也可以简写成如下方式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">promise1</span><br><span class=\"line\">.then(function(value)&#123;</span><br><span class=\"line\">    console.log(&quot;in promise1 ---- success&quot;);</span><br><span class=\"line\">    console.log(value);</span><br><span class=\"line\">&#125;,function(value)&#123;</span><br><span class=\"line\">    console.log(&quot;in promise1 ---- error&quot;);</span><br><span class=\"line\">    console.log(value);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>或者</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">promise1</span><br><span class=\"line\">.then(function(value)&#123;</span><br><span class=\"line\">    console.log(&quot;in promise1 ---- success&quot;);</span><br><span class=\"line\">    console.log(value);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li><a href=\"http://www.cnblogs.com/xing901022/p/4928147.html\" target=\"_blank\" rel=\"external\">AngularJS 中的Promise — $q服务详解</a></li>\n</ul>\n<h2 id=\"Modal-弹出框如何传值\"><a href=\"#Modal-弹出框如何传值\" class=\"headerlink\" title=\"Modal 弹出框如何传值\"></a><a href=\"http://www.cnblogs.com/acmilan/p/3672184.html\" target=\"_blank\" rel=\"external\">Modal 弹出框如何传值</a></h2><ul>\n<li>通过 resolve</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">angular.module(&apos;modaltest&apos;)</span><br><span class=\"line\">.controller(&apos;testModalTestController&apos;,function($scope,$modal)&#123;</span><br><span class=\"line\">        $scope.addModal = function () &#123;</span><br><span class=\"line\">            var newWarn = $modal.open(&#123;</span><br><span class=\"line\">                templateUrl: &apos;views/part/add.html&apos;,</span><br><span class=\"line\">                controller: &apos;C_add_Warn&apos;,</span><br><span class=\"line\">                resolve:&#123;</span><br><span class=\"line\">                    header : function() &#123; return angular.copy(&quot;新增&quot;); &#125;,</span><br><span class=\"line\">                    msg : function() &#123; return angular.copy(&quot;这是消息&quot;); &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">&#125;) </span><br><span class=\"line\">.controller(&apos;C_add_Warn&apos;,function($scope,header,msg)&#123;</span><br><span class=\"line\">       $scope.header = header;</span><br><span class=\"line\">       $scope.msg = msg;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>通过 scope 传递</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">angular.module(&apos;modaltest&apos;)</span><br><span class=\"line\"> .controller(&apos;testModalTestController&apos;,function($rootScope,$scope,$modal)&#123;</span><br><span class=\"line\">          var scope = $rootScope.$new();</span><br><span class=\"line\">           scope.data = &#123;</span><br><span class=\"line\">                msg:&quot;test&quot;,</span><br><span class=\"line\">                header:&quot;header&quot;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">          $scope.addModal = function () &#123;</span><br><span class=\"line\">              var newWarn = $modal.open(&#123;</span><br><span class=\"line\">                  templateUrl: &apos;views/part/add.html&apos;,</span><br><span class=\"line\">                  controller: &apos;C_add_Warn&apos;,</span><br><span class=\"line\">                  scope:scope</span><br><span class=\"line\">             &#125;);</span><br><span class=\"line\">         &#125;  </span><br><span class=\"line\"> &#125;) </span><br><span class=\"line\"> .controller(&apos;C_add_Warn&apos;,function($scope)&#123;</span><br><span class=\"line\">        var data = $scope.data;</span><br><span class=\"line\"></span><br><span class=\"line\"> &#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"Controller-之间如何跳转\"><a href=\"#Controller-之间如何跳转\" class=\"headerlink\" title=\"Controller 之间如何跳转\"></a><a href=\"https://yehuang.me/angularjs/2015/11/01/how-to-pass-parameters-in-angularjs/\" target=\"_blank\" rel=\"external\">Controller 之间如何跳转</a></h2><ul>\n<li>在AngularJS的app.js中用ui-router定义路由，比如现在有两个页面，一个页面producers.html放置了多个producers，点击其中一个目标，页面跳转到对应的producer.html页，同时将producerId这个参数传过去。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//定义producers状态</span><br><span class=\"line\">.state(&apos;producers&apos;, &#123;</span><br><span class=\"line\">    url: &apos;/producers&apos;,</span><br><span class=\"line\">    templateUrl: &apos;views/producers.html&apos;,</span><br><span class=\"line\">    controller: &apos;ProducersCtrl&apos;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">//定义producer状态</span><br><span class=\"line\">.state(&apos;producer&apos;, &#123;</span><br><span class=\"line\">    url: &apos;/producer/:producerId&apos;,</span><br><span class=\"line\">    templateUrl: &apos;views/producer.html&apos;,</span><br><span class=\"line\">    controller: &apos;ProducerCtrl&apos;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>在producers.html中，定义点击事件，比如ng-click=”toProducer(producerId)”，在ProducersCtrl中，定义页面跳转函数 (使用ui-router的$state.go接口)：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.controller(&apos;ProducersCtrl&apos;, function ($scope, $state) &#123;</span><br><span class=\"line\">    $scope.toProducer = function (producerId) &#123;</span><br><span class=\"line\">        $state.go(&apos;producer&apos;, &#123;producerId: producerId&#125;);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>在 ProducerCtrl 中，通过 ui-router 的 $stateParams 获取参数 producerId，譬如：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> .controller(&apos;ProducerCtrl&apos;, function ($scope, $state, $stateParams) &#123;</span><br><span class=\"line\">   var producerId = $stateParams.producerId;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li><a href=\"https://yehuang.me/angularjs/2015/11/01/how-to-pass-parameters-in-angularjs/\" target=\"_blank\" rel=\"external\">AngularJS - 页面跳转传参</a></li>\n</ul>\n<h2 id=\"如何截取字符串-filter的使用介绍\"><a href=\"#如何截取字符串-filter的使用介绍\" class=\"headerlink\" title=\"如何截取字符串(filter的使用介绍)\"></a><a href=\"https://stackoverflow.com/questions/18095727/limit-the-length-of-a-string-with-angularjs\" target=\"_blank\" rel=\"external\">如何截取字符串(filter的使用介绍)</a></h2><p>在模块中定义 cut filter</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">angular.module(&apos;ng&apos;).filter(&apos;cut&apos;, function () &#123;</span><br><span class=\"line\">        return function (value, wordwise, max, tail) &#123;</span><br><span class=\"line\">            if (!value) return &apos;&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">            max = parseInt(max, 10);</span><br><span class=\"line\">            if (!max) return value;</span><br><span class=\"line\">            if (value.length &lt;= max) return value;</span><br><span class=\"line\"></span><br><span class=\"line\">            value = value.substr(0, max);</span><br><span class=\"line\">            if (wordwise) &#123;</span><br><span class=\"line\">                var lastspace = value.lastIndexOf(&apos; &apos;);</span><br><span class=\"line\">                if (lastspace !== -1) &#123;</span><br><span class=\"line\">                  //Also remove . and , so its gives a cleaner result.</span><br><span class=\"line\">                  if (value.charAt(lastspace-1) === &apos;.&apos; || value.charAt(lastspace-1) === &apos;,&apos;) &#123;</span><br><span class=\"line\">                    lastspace = lastspace - 1;</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">                  value = value.substr(0, lastspace);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            return value + (tail || &apos; …&apos;);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n<p>使用如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#123;some_text | cut:true:100:&apos; ...&apos;&#125;&#125;</span><br></pre></td></tr></table></figure>\n<p>参数说明</p>\n<ul>\n<li>wordwise (boolean) - if true, cut only by words bounds,</li>\n<li>max (integer) - max length of the text, cut to this number of chars,</li>\n<li>tail (string, default: ‘ …’) - add this string to the input string if the string was cut.</li>\n</ul>\n<h2 id=\"checkbox-中的-ng-model-不起作用了\"><a href=\"#checkbox-中的-ng-model-不起作用了\" class=\"headerlink\" title=\"checkbox 中的 ng-model 不起作用了\"></a><a href=\"https://stackoverflow.com/questions/18642371/checkbox-not-binding-to-scope-in-angularjs\" target=\"_blank\" rel=\"external\">checkbox 中的 ng-model 不起作用了</a></h2><p>先看看下面错误的做法</p>\n<ul>\n<li>html</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;label class=&quot;checkbox-inline custom-checkbox nowrap&quot;&gt;</span><br><span class=\"line\">    &lt;input type=&quot;checkbox&quot; ng-model=&quot;checkJobAll&quot; ng-click=&quot;checkAllJob(checkJobAll)&quot;&gt;</span><br><span class=\"line\">    &lt;span&gt;&lt;/span&gt;</span><br><span class=\"line\">&lt;/label&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>js</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$scope.checkJobAll = false;</span><br><span class=\"line\"></span><br><span class=\"line\">$scope.checkJobAll = true;</span><br></pre></td></tr></table></figure>\n<p>当 ng-model 绑定的是一个普通变量的时候, Controller 中的变量无法和页面上的变量值同步,只有改成对象的形式才可以,正确的做法如下</p>\n<ul>\n<li>html</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;label class=&quot;checkbox-inline custom-checkbox nowrap&quot;&gt;</span><br><span class=\"line\">    &lt;input type=&quot;checkbox&quot; ng-model=&quot;checkJobAll.flag&quot; ng-click=&quot;checkAllJob(checkJobAll.flag)&quot;&gt;</span><br><span class=\"line\">    &lt;span&gt;&lt;/span&gt;</span><br><span class=\"line\">&lt;/label&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>js</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$scope.checkJobAll = &#123; &apos;flag&apos;:false &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">$scope.checkJobAll.flag = true;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Modal-弹出框如何使用\"><a href=\"#Modal-弹出框如何使用\" class=\"headerlink\" title=\"Modal 弹出框如何使用\"></a><a href=\"https://angular-ui.github.io/bootstrap/#!#modal\" target=\"_blank\" rel=\"external\">Modal 弹出框如何使用</a></h2><p>点击页面上的按钮弹出一个 Modal 对话框</p>\n<ul>\n<li>html </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=&quot;button&quot; ng-disabled=&quot;(item.status == &apos;EXECUTING&apos; ? false : true) || showLoading&quot; ng-click=&quot;openStopModal(&apos;app/pages/job/modal/stopJobModal.html&apos;, &apos;md&apos;, item.id)&quot; class=&quot;btn btn-danger btn-sm&quot; value=&quot;停止&quot;&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>js</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 打开停止job的对话框</span></span><br><span class=\"line\">$scope.openStopModal = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">page, size, id</span>) </span>&#123;</span><br><span class=\"line\">    $scope.showLoading = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    $scope.stopJobExecuteId = id;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 弹出是否关闭job的对话框 ///////////////////////////////////////////////////////////////////////</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> modalInstance = $uibModal.open(&#123;</span><br><span class=\"line\">        animation: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        templateUrl: page,</span><br><span class=\"line\">        scope: $scope,</span><br><span class=\"line\">        <span class=\"comment\">//controller: 'StopJobModalInstanceCtrl',</span></span><br><span class=\"line\">        size: size</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    modalInstance.result.then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">// close</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'modal close'</span>);</span><br><span class=\"line\">        $scope.showLoading = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 后台调用 stopJob 服务</span></span><br><span class=\"line\">        JobExecuteService.stopJob($scope.stopJobExecuteId).then( <span class=\"comment\">// 点击确定关闭job 按钮的回调</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">response</span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">\" stopJobExecute response = \"</span>  + <span class=\"built_in\">JSON</span>.stringify(response));</span><br><span class=\"line\"></span><br><span class=\"line\">                $scope.stopJobDetail = response.data.stopDetail;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 关闭job成功后的modal //////////////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class=\"line\">                <span class=\"keyword\">var</span> successModalInstance = $uibModal.open(&#123;</span><br><span class=\"line\">                    animation: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                    templateUrl: <span class=\"string\">'app/pages/job/modal/stopJobSuccessModal.html'</span>,</span><br><span class=\"line\">                    scope: $scope, <span class=\"comment\">// 控制弹出的 Modal 框使用同样的 $scope</span></span><br><span class=\"line\">                    size: <span class=\"string\">'md'</span></span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">                successModalInstance.result.then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">// close</span></span><br><span class=\"line\">                &#125;,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">// dismiss或者Modal框消失</span></span><br><span class=\"line\">                    <span class=\"comment\">// 刷新列表数据</span></span><br><span class=\"line\">                    $scope.callServer($scope.jobExecuteTableState);</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">                <span class=\"comment\">/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">errResponse</span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.error(<span class=\"string\">'Error while getJobExecute '</span> + id + <span class=\"string\">', Error :'</span> + errResponse.data);</span><br><span class=\"line\">                toastr.error(<span class=\"string\">'Error while getJobExecute '</span> + id + <span class=\"string\">', Error :'</span> + errResponse.data, <span class=\"string\">'提示'</span>, $scope.notificationConfig);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        );</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">// dismiss</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'modal dismiss'</span>);</span><br><span class=\"line\">        $scope.showLoading = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"comment\">///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"关于-form-的使用-涉及-submitted-和-setPristine-应用\"><a href=\"#关于-form-的使用-涉及-submitted-和-setPristine-应用\" class=\"headerlink\" title=\"关于 form 的使用, 涉及 $submitted 和 $setPristine() 应用 \"></a><a href=\"https://code.angularjs.org/1.5.8/docs/api/ng/directive/form\" target=\"_blank\" rel=\"external\">关于 form 的使用, 涉及 $submitted 和 $setPristine() 应用 </a></h2><ul>\n<li>html</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div ba-panel</span><br><span class=\"line\">     ba-panel-class=&quot;with-scroll&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;form name=&quot;taskMainForm&quot; ng-submit=&quot;submit()&quot; ng-init=&quot;initForm()&quot; novalidate&gt;</span><br><span class=\"line\">        &lt;div class=&quot;form-group has-feedback&quot;</span><br><span class=\"line\">             ng-class=&quot;&#123;&apos;has-error&apos;: taskMainForm.taskName.$invalid &amp;&amp; (taskMainForm.taskName.$dirty || taskMainForm.$submitted)&#125;&quot;&gt;</span><br><span class=\"line\">            &lt;label&gt;任务名称&lt;/label&gt;</span><br><span class=\"line\">            &lt;input type=&quot;text&quot; class=&quot;form-control&quot; name=&quot;taskName&quot; placeholder=&quot;任务名称 必填&quot; ng-model=&quot;taskMainInfo.taskName&quot; required&gt;</span><br><span class=\"line\">            &lt;span class=&quot;help-block error-block basic-block&quot;&gt;必填&lt;/span&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">        </span><br><span class=\"line\">        &lt;div class=&quot;form-group&quot;&gt;</span><br><span class=\"line\">            &lt;label&gt;备注&lt;/label&gt;</span><br><span class=\"line\">            &lt;textarea placeholder=&quot;填写备注&quot; class=&quot;form-control&quot; ng-model=&quot;taskMainInfo.remarks&quot;&gt;&lt;/textarea&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;div class=&quot;form-group&quot;&gt;</span><br><span class=\"line\">            &lt;input type=&quot;submit&quot; ng-disabled=&quot;taskMainForm.$submitted &amp;&amp; submitFlag&quot; value=&quot;&#123;&#123;!taskMainInfo.id ? &apos;添加&apos; : &apos;修改&apos;&#125;&#125;&quot; class=&quot;btn btn-primary btn-sm&quot;&gt;</span><br><span class=\"line\">            &lt;button type=&quot;button&quot; ng-click=&quot;initForm(taskMainForm)&quot; class=&quot;btn btn-warning btn-sm&quot;&gt;重置&lt;/button&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;/form&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>js</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 重置form</span></span><br><span class=\"line\">$scope.initForm = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">form</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (form != <span class=\"literal\">null</span> &amp;&amp; <span class=\"keyword\">typeof</span> form !== <span class=\"string\">'undefined'</span>) &#123;</span><br><span class=\"line\">      form.$setPristine();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  $scope.taskMainInfo = &#123;&#125;;</span><br><span class=\"line\">  $scope.taskSubs = [];</span><br><span class=\"line\">  $scope.deleteTaskSubs = [];</span><br><span class=\"line\">  $scope.taskMainInfo.executeType = <span class=\"string\">'0'</span>;</span><br><span class=\"line\">  $scope.taskMainInfo.taskStatus = <span class=\"string\">'0'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  $scope.taskSubAdd();</span><br><span class=\"line\">  <span class=\"comment\">// 2 所有, 用于创建主任务模块</span></span><br><span class=\"line\">  $scope.loadAllTaskSubDict($scope.loadTaskSubFlag);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'init form success'</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$scope.taskMainForm = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$scope.submitFlag = true;</span><br><span class=\"line\">$scope.submit = function() &#123;</span><br><span class=\"line\">      $scope.submitFlag = true;</span><br><span class=\"line\">      if (this.taskMainForm.$invalid) &#123; // this.taskMainForm 表示当前操作的form</span><br><span class=\"line\">          $scope.submitFlag = false;</span><br><span class=\"line\">          return;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      $scope.taskMainForm = this.taskMainForm; // 把当前 form 作为全局的 form 来看</span><br><span class=\"line\"></span><br><span class=\"line\">      // 保存成功</span><br><span class=\"line\">      if (createSuccess) &#123;</span><br><span class=\"line\">        $scope.initForm($scope.taskMainForm);    </span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      // 修改成功</span><br><span class=\"line\">      if (updateSuccess) &#123;</span><br><span class=\"line\">        $scope.initForm($scope.taskMainForm);    </span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      </span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<p>在 form submit 后 $submitted 会变成 true 并禁用 submit 按钮, 然后再调用上面的 initForm 方法来将 $submitted 状态重置为 false.</p>\n<p>关键在于点击提交按钮后通过 ng-submit 中定义的 submit 函数中的 <code>this.taskMainForm</code> 来获取到当前的 form 对象, 在保存或者修改成功后再调用 <code>form.$setPristine()</code> 将 $submitted 状态重置为 false.</p>\n<ul>\n<li>参考 <a href=\"https://stackoverflow.com/questions/32029889/angular-setpristine-not-working\" target=\"_blank\" rel=\"external\">Angular $setPristine() not working</a></li>\n</ul>\n<h2 id=\"如何给一组-CheckBox-绑定值\"><a href=\"#如何给一组-CheckBox-绑定值\" class=\"headerlink\" title=\"如何给一组 CheckBox 绑定值\"></a><a href=\"https://stackoverflow.com/questions/14514461/how-do-i-bind-to-list-of-checkbox-values-with-angularjs\" target=\"_blank\" rel=\"external\">如何给一组 CheckBox 绑定值</a></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div ng-controller=&quot;MainCtrl&quot;&gt;</span><br><span class=\"line\">  &lt;label ng-repeat=&quot;(color,enabled) in colors&quot;&gt;</span><br><span class=\"line\">      &lt;input type=&quot;checkbox&quot; ng-model=&quot;colors[color]&quot; /&gt; &#123;&#123;color&#125;&#125; </span><br><span class=\"line\">  &lt;/label&gt;</span><br><span class=\"line\">  &lt;p&gt;colors: &#123;&#123;colors&#125;&#125;&lt;/p&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  var app = angular.module(&apos;plunker&apos;, []);</span><br><span class=\"line\"></span><br><span class=\"line\">  app.controller(&apos;MainCtrl&apos;, function($scope) &#123;</span><br><span class=\"line\">      $scope.colors = &#123;Blue: true, Orange: true&#125;;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<h2 id=\"如何动态插入删除dom节点\"><a href=\"#如何动态插入删除dom节点\" class=\"headerlink\" title=\"如何动态插入删除dom节点\"></a><a href=\"http://yijiebuyi.com/blog/7702aba213aec9de43b129b3d2f3b30c.html\">如何动态插入删除dom节点</a></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(&apos;div[name=father]&apos;).html(</span><br><span class=\"line\">  $compile(&apos;&lt;input type=&quot;text&quot; ng-model=&quot;person.name&quot; /&gt; &lt;input type=&quot;input&quot; ng-model=&quot;person.age&quot; value=&quot;&#123;&#123;person.age&#125;&#125;&quot; /&gt;&lt;a ng-show=&quot;$index!=0&quot; style=&quot;color:red;&quot; ng-click=&quot;del($index)&quot;&gt;移除&lt;/a&gt;&apos;</span><br><span class=\"line\">  )($scope)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<ul>\n<li><a href=\"https://docs.angularjs.org/guide/compiler\">HTML Compiler</a></li>\n</ul>\n<h2 id=\"ng-click-如何获取触发事件对象或者this\"><a href=\"#ng-click-如何获取触发事件对象或者this\" class=\"headerlink\" title=\"ng-click 如何获取触发事件对象或者this\"></a><a href=\"http://blog.csdn.net/a576736858/article/details/62039286\">ng-click 如何获取触发事件对象或者this</a></h2><p><code>ng-click=&quot;addPackage($event,111)&quot;</code> 传递一个$event对象<br>通过事件对象 <code>$event.target</code>  获取事件源<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//动态添加数据  </span><br><span class=\"line\">$scope.addPackage = function(myevent,deviceType)&#123;  </span><br><span class=\"line\">    //获取item对象  </span><br><span class=\"line\">    var htmlObj = $(myevent.target).closest(&quot;.float_left&quot;);  </span><br><span class=\"line\">    var deviceName = htmlObj.find(&quot;div.font_16&quot;).html();  </span><br><span class=\"line\">    var jsonObj = &#123;  </span><br><span class=\"line\">        &quot;deviceType&quot;:deviceType,//设备类型，唯一标识，用于判断是否已经添加  </span><br><span class=\"line\">        &quot;deviceName&quot;:deviceName //设备的名称  </span><br><span class=\"line\">    &#125;;  </span><br><span class=\"line\">    //判断数据是否已经选中了  </span><br><span class=\"line\">    if(!this.hasDevice(deviceType))&#123;  </span><br><span class=\"line\">        //给$scope.lists添加数据  </span><br><span class=\"line\">        this.lists.push(jsonObj);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"如何在页面加载的时候执行一个方法\"><a href=\"#如何在页面加载的时候执行一个方法\" class=\"headerlink\" title=\"如何在页面加载的时候执行一个方法\"></a><a href=\"https://stackoverflow.com/questions/15458609/how-to-execute-angular-controller-function-on-page-load\">如何在页面加载的时候执行一个方法</a></h2><p>使用 <a href=\"https://docs.angularjs.org/api/ng/directive/ngInit\"><code>ng-init</code></a> 指令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// register controller in html</span><br><span class=\"line\">&lt;div data-ng-controller=&quot;myCtrl&quot; data-ng-init=&quot;init()&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// in controller</span><br><span class=\"line\">$scope.init = function () &#123;</span><br><span class=\"line\">    // check if there is query in url</span><br><span class=\"line\">    // and fire search in case its value is not empty</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用-ng-repeat-来实现增加一行-删除一行的效果\"><a href=\"#使用-ng-repeat-来实现增加一行-删除一行的效果\" class=\"headerlink\" title=\"使用 ng-repeat 来实现增加一行/删除一行的效果\"></a><a href=\"http://lib.csdn.net/article/angularjs/33158\">使用 <code>ng-repeat</code> 来实现增加一行/删除一行的效果</a></h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$scope.printInfo = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; $scope.showVBs.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log($scope.showVBs[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">$scope.showVBs = [&#123;</span><br><span class=\"line\">    <span class=\"string\">\"Tag\"</span>: <span class=\"string\">\"Tag1\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"NO\"</span>: <span class=\"string\">\"No1\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"remarks\"</span>: <span class=\"string\">\"remarks1\"</span></span><br><span class=\"line\">&#125;, &#123;</span><br><span class=\"line\">    <span class=\"string\">\"Tag\"</span>: <span class=\"string\">\"Tag2\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"NO\"</span>: <span class=\"string\">\"No2\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"remarks\"</span>: <span class=\"string\">\"remarks2\"</span></span><br><span class=\"line\">&#125;];</span><br><span class=\"line\">$scope.BDetailsAdd = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    $scope.showVBs.push(&#123;&#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">$scope.BDetailsDel = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">Count</span>) </span>&#123;</span><br><span class=\"line\">    $scope.showVBs.splice(Count, <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">role</span>=<span class=\"string\">\"form\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"editForm\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"row\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-md-12\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"row  panel panel-default panel-body\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-md-offset-1 panel panel-default\"</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">label</span>&gt;</span>&#123;&#123;'Details'&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-info\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"增加\"</span> <span class=\"attr\">ng-click</span>=<span class=\"string\">\"BDetailsAdd()\"</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-danger\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"打印信息\"</span> <span class=\"attr\">ng-click</span>=<span class=\"string\">\"printInfo()\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"vBaggages\"</span> <span class=\"attr\">ng-repeat</span>=<span class=\"string\">\"vba in showVBs\"</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group col-md-2 col-md-offset-1\"</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-info\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"删\"</span> <span class=\"attr\">ng-click</span>=<span class=\"string\">\"BDetailsDel($index)\"</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control pull-right\"</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">\"vba.Tag\"</span></span><br><span class=\"line\">                               <span class=\"attr\">placeholder</span>=<span class=\"string\">\"Tag\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width:70%\"</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group col-md-2 col-md-offset-1\"</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control pull-right\"</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">\"vba.NO\"</span></span><br><span class=\"line\">                               <span class=\"attr\">placeholder</span>=<span class=\"string\">\"No.\"</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-group col-md-5 col-md-offset-1\"</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"form-control pull-right\"</span> <span class=\"attr\">ng-model</span>=<span class=\"string\">\"vba.remarks\"</span></span><br><span class=\"line\">                               <span class=\"attr\">placeholder</span>=<span class=\"string\">\"Remarks\"</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"如何构建一个-SpringBoot-angularJS-web-应用\"><a href=\"#如何构建一个-SpringBoot-angularJS-web-应用\" class=\"headerlink\" title=\"如何构建一个 SpringBoot + angularJS web 应用\"></a><a href=\"http://websystique.com/spring-boot/spring-boot-angularjs-spring-data-jpa-crud-app-example/\">如何构建一个 SpringBoot + angularJS web 应用</a></h2><h2 id=\"如何安装-AngularJS-的-ngStorage-模块\"><a href=\"#如何安装-AngularJS-的-ngStorage-模块\" class=\"headerlink\" title=\"如何安装 AngularJS 的 ngStorage 模块\"></a><a href=\"http://blog.legacyteam.info/2014/12/ngstorage-localstorage-module-for-angularjs/\">如何安装 AngularJS 的 ngStorage 模块</a></h2><p>错误提示如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Error: [$injector:modulerr] Failed to instantiate module ngStorage due to:</span><br><span class=\"line\">Error: [$injector:nomod] Module &apos;ngStorage&apos; is not available! You either misspelled the module name or forgot to load it. If registering a module ensure that you specify the dependencies as the second argument.</span><br></pre></td></tr></table></figure>\n<p>解决方法如下</p>\n<p>在项目根目录下执行安装(uninstall 是卸载)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bower install ngstorage</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bower ngstorage#*               cached https://github.com/gsklee/ngStorage.git#0.3.11</span><br><span class=\"line\">bower ngstorage#*             validate 0.3.11 against https://github.com/gsklee/ngStorage.git#*</span><br><span class=\"line\">bower ngstorage#^0.3.11        install ngstorage#0.3.11</span><br><span class=\"line\"></span><br><span class=\"line\">ngstorage#0.3.11 bower_components\\ngstorage</span><br><span class=\"line\">└── angular#1.5.11</span><br></pre></td></tr></table></figure>\n<p>然后在项目中的 bower.json 文件中添加相关依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;dependencies&quot;: &#123;</span><br><span class=\"line\">    &quot;ng-js-tree&quot;: &quot;~0.0.7&quot;,</span><br><span class=\"line\">    &quot;angular-ui-select&quot;: &quot;^0.19.6&quot;,</span><br><span class=\"line\">    &quot;ngstorage&quot;: &quot;0.3.11&quot;</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n<h2 id=\"AngularJS-如何跨域访问-SpringBoot-API\"><a href=\"#AngularJS-如何跨域访问-SpringBoot-API\" class=\"headerlink\" title=\"AngularJS 如何跨域访问 SpringBoot API\"></a><a href=\"https://stackoverflow.com/questions/19825946/how-to-add-a-filter-class-in-spring-boot\">AngularJS 如何跨域访问 SpringBoot API</a></h2><p>错误描述如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">XMLHttpRequest cannot load http://localhost:8011/api/task_main. No &apos;Access-Control-Allow-Origin&apos; header is present on the requested resource. Origin &apos;http://localhost:3000&apos; is therefore not allowed access.</span><br></pre></td></tr></table></figure>\n<p>解决方法</p>\n<p>添加一个 Filter 配置</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.Filter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.web.servlet.FilterRegistrationBean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.config.annotation.EnableWebMvc;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.ctrip.payment.filter.RemoteAccessFilter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableWebMvc</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebAppConfig</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Bean</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> FilterRegistrationBean <span class=\"title\">someFilterRegistration</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t    FilterRegistrationBean registration = <span class=\"keyword\">new</span> FilterRegistrationBean();</span><br><span class=\"line\">\t    registration.setFilter(remoteAccessFilter());</span><br><span class=\"line\">\t    registration.addUrlPatterns(<span class=\"string\">\"/api/*\"</span>);</span><br><span class=\"line\">\t    <span class=\"comment\">//registration.addInitParameter(\"paramName\", \"paramValue\");</span></span><br><span class=\"line\">\t    registration.setName(<span class=\"string\">\"remoteAccessFilter\"</span>);</span><br><span class=\"line\">\t    registration.setOrder(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t    <span class=\"keyword\">return</span> registration;</span><br><span class=\"line\">\t&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Filter <span class=\"title\">remoteAccessFilter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> RemoteAccessFilter();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>具体 Filter 如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.Filter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.FilterChain;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.FilterConfig;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RemoteAccessFilter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Filter</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(FilterConfig filterConfig)</span> <span class=\"keyword\">throws</span> ServletException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doFilter</span><span class=\"params\">(ServletRequest request, ServletResponse response, FilterChain chain)</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throws</span> IOException, ServletException </span>&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// ref:http://www.cnblogs.com/1000px/p/4666247.html</span></span><br><span class=\"line\">\t\tHttpServletResponse resp = (HttpServletResponse) response;</span><br><span class=\"line\">\t\tresp.setHeader(<span class=\"string\">\"Access-Control-Allow-Origin\"</span>, <span class=\"string\">\"*\"</span>);</span><br><span class=\"line\">\t\tresp.setHeader(<span class=\"string\">\"Access-Control-Allow-Methods\"</span>, <span class=\"string\">\"GET,POST,PUT\"</span>);</span><br><span class=\"line\">\t\tresp.setHeader(<span class=\"string\">\"Access-Control-Allow-Headers\"</span>, <span class=\"string\">\"Accept,x-requested-with,content-type\"</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tchain.doFilter(request, response);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">destroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><a href=\"http://www.cnblogs.com/1000px/p/4666247.html\">AngularJS跨域请求</a></li>\n</ul>\n<h2 id=\"AngularJS-如何判断字符串或者对象是否为空\"><a href=\"#AngularJS-如何判断字符串或者对象是否为空\" class=\"headerlink\" title=\"AngularJS 如何判断字符串或者对象是否为空\"></a>AngularJS 如何判断字符串或者对象是否为空</h2><p>在 AngularJs 中判断对象是否为空，可以使用 angular.equals，如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (obj == null || angular.equals(&#123;&#125;, obj)) &#123;</span><br><span class=\"line\"> // 为空</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果是一个字段</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (obj == null || angular.equals(&apos;&apos;, obj.trim())) &#123;</span><br><span class=\"line\"> // 为空</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"关于-datePicker-和-timePicker-的组合使用\"><a href=\"#关于-datePicker-和-timePicker-的组合使用\" class=\"headerlink\" title=\"关于 datePicker 和 timePicker 的组合使用\"></a><a href=\"https://angular-ui.github.io/bootstrap/\">关于 datePicker 和 timePicker 的组合使用</a></h2><ul>\n<li>html</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;row datepicker&quot;&gt;</span><br><span class=\"line\">\t&lt;div class=&quot;col-md-2&quot;&gt;</span><br><span class=\"line\">\t   &lt;label&gt;开始时间&lt;/label&gt;</span><br><span class=\"line\">\t   &lt;p class=&quot;input-group&quot;&gt;</span><br><span class=\"line\">\t\t  &lt;input type=&quot;text&quot; readonly class=&quot;form-control&quot; uib-datepicker-popup=&quot;yyyy-MM-dd&quot; datepicker-options=&quot;datePickerOptions&quot; ng-model=&quot;clogDateTime.clogFromDate&quot; is-open=&quot;fromDateStatus.isOpen&quot; close-text=&quot;Close&quot; /&gt;</span><br><span class=\"line\">\t\t  &lt;span class=&quot;input-group-btn&quot;&gt;</span><br><span class=\"line\">\t\t\t &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot; ng-click=&quot;fromDateOpen()&quot;&gt;&lt;i class=&quot;glyphicon glyphicon-calendar&quot;&gt;&lt;/i&gt;&lt;/button&gt;</span><br><span class=\"line\">\t\t  &lt;/span&gt;</span><br><span class=\"line\">\t   &lt;/p&gt;</span><br><span class=\"line\">\t&lt;/div&gt;</span><br><span class=\"line\">\t&lt;div class=&quot;col-md-2&quot;&gt;</span><br><span class=\"line\">\t   &lt;uib-timepicker show-seconds=&quot;true&quot; ng-change=&quot;clogFromTimeChanged()&quot; ng-model=&quot;clogDateTime.clogFromTime&quot; show-meridian=&quot;false&quot;&gt;&lt;/uib-timepicker&gt; &#123;&#123; (clogDateTime.clogFromDate != null &amp;&amp; clogDateTime.clogFromTime != null) ? (taskSubInfo.fromDate = (clogDateTime.clogFromDate | date:&apos;yyyy-MM-dd&apos;)  + &apos; &apos; + (clogDateTime.clogFromTime | date:&apos;HH:mm:ss&apos;)) : null &#125;&#125;</span><br><span class=\"line\">\t&lt;/div&gt;</span><br><span class=\"line\">\t&lt;div class=&quot;col-md-2&quot;&gt;</span><br><span class=\"line\">\t   &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-danger&quot; ng-click=&quot;resetFromDateTime()&quot;&gt;重置开始时间&lt;/button&gt;</span><br><span class=\"line\">\t&lt;/div&gt;</span><br><span class=\"line\">\t&lt;div class=&quot;col-md-2&quot;&gt;</span><br><span class=\"line\">\t   &lt;label&gt;结束时间&lt;/label&gt;</span><br><span class=\"line\">\t   &lt;p class=&quot;input-group&quot;&gt;</span><br><span class=\"line\">\t\t  &lt;input type=&quot;text&quot; readonly class=&quot;form-control&quot; uib-datepicker-popup=&quot;yyyy-MM-dd&quot; datepicker-options=&quot;datePickerOptions&quot; ng-model=&quot;clogDateTime.clogToDate&quot; is-open=&quot;toDateStatus.isOpen&quot; close-text=&quot;Close&quot; /&gt;</span><br><span class=\"line\">\t\t  &lt;span class=&quot;input-group-btn&quot;&gt;</span><br><span class=\"line\">\t\t\t &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot; ng-click=&quot;toDateOpen()&quot;&gt;&lt;i class=&quot;glyphicon glyphicon-calendar&quot;&gt;&lt;/i&gt;&lt;/button&gt;</span><br><span class=\"line\">\t\t  &lt;/span&gt;</span><br><span class=\"line\">\t   &lt;/p&gt;</span><br><span class=\"line\">\t&lt;/div&gt;</span><br><span class=\"line\">\t&lt;div class=&quot;col-md-2&quot;&gt;</span><br><span class=\"line\">\t   &lt;uib-timepicker show-seconds=&quot;true&quot; ng-change=&quot;clogToTimeChanged()&quot; ng-model=&quot;clogDateTime.clogToTime&quot; show-meridian=&quot;false&quot;&gt;&lt;/uib-timepicker&gt; &#123;&#123; (clogDateTime.clogToDate != null &amp;&amp; clogDateTime.clogToTime != null) ? (taskSubInfo.toDate = (clogDateTime.clogToDate | date:&apos;yyyy-MM-dd&apos;)  + &apos; &apos; + (clogDateTime.clogToTime | date:&apos;HH:mm:ss&apos;)) : null &#125;&#125;</span><br><span class=\"line\">\t&lt;/div&gt;</span><br><span class=\"line\">\t&lt;div class=&quot;col-md-2&quot;&gt;</span><br><span class=\"line\">\t   &lt;button type=&quot;button&quot; class=&quot;btn btn-sm btn-danger&quot; ng-click=&quot;resetToDateTime()&quot;&gt;重置结束时间&lt;/button&gt;</span><br><span class=\"line\">\t&lt;/div&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>js</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 将日期和时间作为对象进行考虑</span><br><span class=\"line\">$scope.clogDateTime = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">$scope.resetFromDateTime = function () &#123;</span><br><span class=\"line\">  $scope.clogDateTime.clogFromDate = null;</span><br><span class=\"line\">  $scope.clogDateTime.clogFromTime = null;</span><br><span class=\"line\">  $scope.taskSubInfo.fromDate = null;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">$scope.resetToDateTime = function () &#123;</span><br><span class=\"line\">  $scope.clogDateTime.clogToDate = null;</span><br><span class=\"line\">  $scope.clogDateTime.clogToTime = null;</span><br><span class=\"line\">  $scope.taskSubInfo.toDate = null;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">\t  </span><br><span class=\"line\">// 提交的时候</span><br><span class=\"line\">if ($scope.taskSubInfo.fromDate == null || angular.equals($scope.taskSubInfo.fromDate.trim(), &apos;&apos;)) &#123;</span><br><span class=\"line\">  $scope.taskSubInfo.fromDate = null;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">if ($scope.taskSubInfo.toDate == null || angular.equals($scope.taskSubInfo.toDate.trim(), &apos;&apos;)) &#123;</span><br><span class=\"line\">  $scope.taskSubInfo.toDate = null;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 加载的时候\t  </span><br><span class=\"line\">var dateTimeReg = /^(?:19|20)[0-9][0-9]-(?:(?:0[1-9])|(?:1[0-2]))-(?:(?:[0-2][1-9])|(?:[1-3][0-1])) (?:(?:[0-2][0-3])|(?:[0-1][0-9])):[0-5][0-9]:[0-5][0-9]$/;</span><br><span class=\"line\"></span><br><span class=\"line\">if ($scope.taskSubInfo.fromDate != null</span><br><span class=\"line\">  &amp;&amp; !angular.equals($scope.taskSubInfo.fromDate.trim(), &apos;&apos;)</span><br><span class=\"line\">  &amp;&amp; dateTimeReg.test($scope.taskSubInfo.fromDate)) &#123;</span><br><span class=\"line\">  try &#123;</span><br><span class=\"line\">\t  $scope.clogDateTime.clogFromDate = new Date($scope.taskSubInfo.fromDate);</span><br><span class=\"line\">\t  $scope.clogDateTime.clogFromTime = new Date($scope.taskSubInfo.fromDate);</span><br><span class=\"line\">  &#125; catch (e) &#123;</span><br><span class=\"line\">\t  console.log(&apos;invalid fromDate:&apos;+$scope.taskSubInfo.fromDate);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">if ($scope.taskSubInfo.toDate != null</span><br><span class=\"line\">  &amp;&amp; !angular.equals($scope.taskSubInfo.toDate.trim(), &apos;&apos;)</span><br><span class=\"line\">  &amp;&amp; dateTimeReg.test($scope.taskSubInfo.toDate)) &#123;</span><br><span class=\"line\">  try &#123;</span><br><span class=\"line\">\t  $scope.clogDateTime.clogToDate = new Date($scope.taskSubInfo.toDate);</span><br><span class=\"line\">\t  $scope.clogDateTime.clogToTime = new Date($scope.taskSubInfo.toDate);</span><br><span class=\"line\">  &#125; catch (e) &#123;</span><br><span class=\"line\">\t  console.log(&apos;invalid fromDate:&apos;+$scope.taskSubInfo.fromDate);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/*$scope.clogFromDate = new Date($filter(&apos;date&apos;)(new Date($scope.taskSubInfo.fromDate),&apos;yyyy-MM-dd&apos;));</span><br><span class=\"line\">$scope.clogToDate = new Date($filter(&apos;date&apos;)(new Date($scope.taskSubInfo.toDate),&apos;yyyy-MM-dd&apos;));</span><br><span class=\"line\">$scope.clogFromTime = new Date($filter(&apos;date&apos;)(new Date($scope.taskSubInfo.fromDate),&apos;HH:mm:ss&apos;));</span><br><span class=\"line\">$scope.clogToTime = new Date($filter(&apos;date&apos;)(new Date($scope.taskSubInfo.toDate),&apos;HH:mm:ss&apos;));*/</span><br></pre></td></tr></table></figure>\n<h2 id=\"如何在-ngRepeat-中设置-name-属性的-index\"><a href=\"#如何在-ngRepeat-中设置-name-属性的-index\" class=\"headerlink\" title=\"如何在 ngRepeat 中设置 name 属性的 $index\"></a>如何在 ngRepeat 中设置 name 属性的 $index</h2><p>具体如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div class=&quot;form-group&quot;</span><br><span class=\"line\">     ng-class=&quot;&#123;&apos;has-error&apos;: taskSubForm[&apos;variableName_&apos;+$index].$invalid &amp;&amp; (taskSubForm[&apos;variableName_&apos;+$index].$dirty || taskSubForm.$submitted)&#125;&quot;&gt;</span><br><span class=\"line\">    &lt;label&gt;变量名称&lt;/label&gt;</span><br><span class=\"line\">    &lt;input type=&quot;text&quot; class=&quot;form-control&quot; name=&quot;variableName_&#123;&#123;$index&#125;&#125;&quot; placeholder=&quot;变量名称 必填&quot; ng-model=&quot;taskSubvariable.variableName&quot; required&gt;</span><br><span class=\"line\">    &lt;span class=&quot;help-block error-block basic-block&quot;&gt;此字段必填&lt;/span&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/21631456/angular-ngrepeat-index-in-name-attribute\">angular ngRepeat $index in name attribute</a></li>\n</ul>\n<h2 id=\"如何知道-http-请求成功了\"><a href=\"#如何知道-http-请求成功了\" class=\"headerlink\" title=\"如何知道 $http 请求成功了\"></a><a href=\"http://www.cnblogs.com/xing901022/p/4928147.html\">如何知道 $http 请求成功了</a></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">     var myAppModule = angular.module(&quot;myApp&quot;,[]);</span><br><span class=\"line\">     myAppModule.controller(&quot;myctrl&quot;,[&quot;$scope&quot;,&quot;$q&quot;,function($scope, $ q )&#123;</span><br><span class=\"line\">        $scope.test = 1;//这个只是用来测试angularjs是否正常的，没其他的作用</span><br><span class=\"line\"></span><br><span class=\"line\">        var defer1 = $q.defer();</span><br><span class=\"line\">        var promise1 = defer1.promise;</span><br><span class=\"line\"></span><br><span class=\"line\">        promise1</span><br><span class=\"line\">        .then(function(value)&#123;</span><br><span class=\"line\">            console.log(&quot;in promise1 ---- success&quot;);</span><br><span class=\"line\">            console.log(value);</span><br><span class=\"line\">        &#125;,function(value)&#123;</span><br><span class=\"line\">            console.log(&quot;in promise1 ---- error&quot;);</span><br><span class=\"line\">            console.log(value);</span><br><span class=\"line\">        &#125;,function(value)&#123;</span><br><span class=\"line\">            console.log(&quot;in promise1 ---- notify&quot;);</span><br><span class=\"line\">            console.log(value);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .catch(function(e)&#123;</span><br><span class=\"line\">            console.log(&quot;in promise1 ---- catch&quot;);</span><br><span class=\"line\">            console.log(e);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .finally(function(value)&#123;</span><br><span class=\"line\">            console.log(&apos;in promise1 ---- finally&apos;);</span><br><span class=\"line\">            console.log(value);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        defer1.resolve(&quot;hello&quot;);</span><br><span class=\"line\">        // defer1.reject(&quot;sorry,reject&quot;);</span><br><span class=\"line\">     &#125;]);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>也可以简写成如下方式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">promise1</span><br><span class=\"line\">.then(function(value)&#123;</span><br><span class=\"line\">    console.log(&quot;in promise1 ---- success&quot;);</span><br><span class=\"line\">    console.log(value);</span><br><span class=\"line\">&#125;,function(value)&#123;</span><br><span class=\"line\">    console.log(&quot;in promise1 ---- error&quot;);</span><br><span class=\"line\">    console.log(value);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>或者</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">promise1</span><br><span class=\"line\">.then(function(value)&#123;</span><br><span class=\"line\">    console.log(&quot;in promise1 ---- success&quot;);</span><br><span class=\"line\">    console.log(value);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li><a href=\"http://www.cnblogs.com/xing901022/p/4928147.html\">AngularJS 中的Promise — $q服务详解</a></li>\n</ul>\n<h2 id=\"Modal-弹出框如何传值\"><a href=\"#Modal-弹出框如何传值\" class=\"headerlink\" title=\"Modal 弹出框如何传值\"></a><a href=\"http://www.cnblogs.com/acmilan/p/3672184.html\">Modal 弹出框如何传值</a></h2><ul>\n<li>通过 resolve</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">angular.module(&apos;modaltest&apos;)</span><br><span class=\"line\">.controller(&apos;testModalTestController&apos;,function($scope,$modal)&#123;</span><br><span class=\"line\">        $scope.addModal = function () &#123;</span><br><span class=\"line\">            var newWarn = $modal.open(&#123;</span><br><span class=\"line\">                templateUrl: &apos;views/part/add.html&apos;,</span><br><span class=\"line\">                controller: &apos;C_add_Warn&apos;,</span><br><span class=\"line\">                resolve:&#123;</span><br><span class=\"line\">                    header : function() &#123; return angular.copy(&quot;新增&quot;); &#125;,</span><br><span class=\"line\">                    msg : function() &#123; return angular.copy(&quot;这是消息&quot;); &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">&#125;) </span><br><span class=\"line\">.controller(&apos;C_add_Warn&apos;,function($scope,header,msg)&#123;</span><br><span class=\"line\">       $scope.header = header;</span><br><span class=\"line\">       $scope.msg = msg;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>通过 scope 传递</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">angular.module(&apos;modaltest&apos;)</span><br><span class=\"line\"> .controller(&apos;testModalTestController&apos;,function($rootScope,$scope,$modal)&#123;</span><br><span class=\"line\">          var scope = $rootScope.$new();</span><br><span class=\"line\">           scope.data = &#123;</span><br><span class=\"line\">                msg:&quot;test&quot;,</span><br><span class=\"line\">                header:&quot;header&quot;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">          $scope.addModal = function () &#123;</span><br><span class=\"line\">              var newWarn = $modal.open(&#123;</span><br><span class=\"line\">                  templateUrl: &apos;views/part/add.html&apos;,</span><br><span class=\"line\">                  controller: &apos;C_add_Warn&apos;,</span><br><span class=\"line\">                  scope:scope</span><br><span class=\"line\">             &#125;);</span><br><span class=\"line\">         &#125;  </span><br><span class=\"line\"> &#125;) </span><br><span class=\"line\"> .controller(&apos;C_add_Warn&apos;,function($scope)&#123;</span><br><span class=\"line\">        var data = $scope.data;</span><br><span class=\"line\"></span><br><span class=\"line\"> &#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"Controller-之间如何跳转\"><a href=\"#Controller-之间如何跳转\" class=\"headerlink\" title=\"Controller 之间如何跳转\"></a><a href=\"https://yehuang.me/angularjs/2015/11/01/how-to-pass-parameters-in-angularjs/\">Controller 之间如何跳转</a></h2><ul>\n<li>在AngularJS的app.js中用ui-router定义路由，比如现在有两个页面，一个页面producers.html放置了多个producers，点击其中一个目标，页面跳转到对应的producer.html页，同时将producerId这个参数传过去。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//定义producers状态</span><br><span class=\"line\">.state(&apos;producers&apos;, &#123;</span><br><span class=\"line\">    url: &apos;/producers&apos;,</span><br><span class=\"line\">    templateUrl: &apos;views/producers.html&apos;,</span><br><span class=\"line\">    controller: &apos;ProducersCtrl&apos;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">//定义producer状态</span><br><span class=\"line\">.state(&apos;producer&apos;, &#123;</span><br><span class=\"line\">    url: &apos;/producer/:producerId&apos;,</span><br><span class=\"line\">    templateUrl: &apos;views/producer.html&apos;,</span><br><span class=\"line\">    controller: &apos;ProducerCtrl&apos;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>在producers.html中，定义点击事件，比如ng-click=”toProducer(producerId)”，在ProducersCtrl中，定义页面跳转函数 (使用ui-router的$state.go接口)：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.controller(&apos;ProducersCtrl&apos;, function ($scope, $state) &#123;</span><br><span class=\"line\">    $scope.toProducer = function (producerId) &#123;</span><br><span class=\"line\">        $state.go(&apos;producer&apos;, &#123;producerId: producerId&#125;);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>在 ProducerCtrl 中，通过 ui-router 的 $stateParams 获取参数 producerId，譬如：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> .controller(&apos;ProducerCtrl&apos;, function ($scope, $state, $stateParams) &#123;</span><br><span class=\"line\">   var producerId = $stateParams.producerId;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li><a href=\"https://yehuang.me/angularjs/2015/11/01/how-to-pass-parameters-in-angularjs/\">AngularJS - 页面跳转传参</a></li>\n</ul>\n<h2 id=\"如何截取字符串-filter的使用介绍\"><a href=\"#如何截取字符串-filter的使用介绍\" class=\"headerlink\" title=\"如何截取字符串(filter的使用介绍)\"></a><a href=\"https://stackoverflow.com/questions/18095727/limit-the-length-of-a-string-with-angularjs\">如何截取字符串(filter的使用介绍)</a></h2><p>在模块中定义 cut filter</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">angular.module(&apos;ng&apos;).filter(&apos;cut&apos;, function () &#123;</span><br><span class=\"line\">        return function (value, wordwise, max, tail) &#123;</span><br><span class=\"line\">            if (!value) return &apos;&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">            max = parseInt(max, 10);</span><br><span class=\"line\">            if (!max) return value;</span><br><span class=\"line\">            if (value.length &lt;= max) return value;</span><br><span class=\"line\"></span><br><span class=\"line\">            value = value.substr(0, max);</span><br><span class=\"line\">            if (wordwise) &#123;</span><br><span class=\"line\">                var lastspace = value.lastIndexOf(&apos; &apos;);</span><br><span class=\"line\">                if (lastspace !== -1) &#123;</span><br><span class=\"line\">                  //Also remove . and , so its gives a cleaner result.</span><br><span class=\"line\">                  if (value.charAt(lastspace-1) === &apos;.&apos; || value.charAt(lastspace-1) === &apos;,&apos;) &#123;</span><br><span class=\"line\">                    lastspace = lastspace - 1;</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">                  value = value.substr(0, lastspace);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            return value + (tail || &apos; …&apos;);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n<p>使用如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#123;some_text | cut:true:100:&apos; ...&apos;&#125;&#125;</span><br></pre></td></tr></table></figure>\n<p>参数说明</p>\n<ul>\n<li>wordwise (boolean) - if true, cut only by words bounds,</li>\n<li>max (integer) - max length of the text, cut to this number of chars,</li>\n<li>tail (string, default: ‘ …’) - add this string to the input string if the string was cut.</li>\n</ul>\n<h2 id=\"checkbox-中的-ng-model-不起作用了\"><a href=\"#checkbox-中的-ng-model-不起作用了\" class=\"headerlink\" title=\"checkbox 中的 ng-model 不起作用了\"></a><a href=\"https://stackoverflow.com/questions/18642371/checkbox-not-binding-to-scope-in-angularjs\">checkbox 中的 ng-model 不起作用了</a></h2><p>先看看下面错误的做法</p>\n<ul>\n<li>html</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;label class=&quot;checkbox-inline custom-checkbox nowrap&quot;&gt;</span><br><span class=\"line\">    &lt;input type=&quot;checkbox&quot; ng-model=&quot;checkJobAll&quot; ng-click=&quot;checkAllJob(checkJobAll)&quot;&gt;</span><br><span class=\"line\">    &lt;span&gt;&lt;/span&gt;</span><br><span class=\"line\">&lt;/label&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>js</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$scope.checkJobAll = false;</span><br><span class=\"line\"></span><br><span class=\"line\">$scope.checkJobAll = true;</span><br></pre></td></tr></table></figure>\n<p>当 ng-model 绑定的是一个普通变量的时候, Controller 中的变量无法和页面上的变量值同步,只有改成对象的形式才可以,正确的做法如下</p>\n<ul>\n<li>html</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;label class=&quot;checkbox-inline custom-checkbox nowrap&quot;&gt;</span><br><span class=\"line\">    &lt;input type=&quot;checkbox&quot; ng-model=&quot;checkJobAll.flag&quot; ng-click=&quot;checkAllJob(checkJobAll.flag)&quot;&gt;</span><br><span class=\"line\">    &lt;span&gt;&lt;/span&gt;</span><br><span class=\"line\">&lt;/label&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>js</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$scope.checkJobAll = &#123; &apos;flag&apos;:false &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">$scope.checkJobAll.flag = true;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Modal-弹出框如何使用\"><a href=\"#Modal-弹出框如何使用\" class=\"headerlink\" title=\"Modal 弹出框如何使用\"></a><a href=\"https://angular-ui.github.io/bootstrap/#!#modal\">Modal 弹出框如何使用</a></h2><p>点击页面上的按钮弹出一个 Modal 对话框</p>\n<ul>\n<li>html </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=&quot;button&quot; ng-disabled=&quot;(item.status == &apos;EXECUTING&apos; ? false : true) || showLoading&quot; ng-click=&quot;openStopModal(&apos;app/pages/job/modal/stopJobModal.html&apos;, &apos;md&apos;, item.id)&quot; class=&quot;btn btn-danger btn-sm&quot; value=&quot;停止&quot;&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>js</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 打开停止job的对话框</span></span><br><span class=\"line\">$scope.openStopModal = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">page, size, id</span>) </span>&#123;</span><br><span class=\"line\">    $scope.showLoading = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    $scope.stopJobExecuteId = id;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 弹出是否关闭job的对话框 ///////////////////////////////////////////////////////////////////////</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> modalInstance = $uibModal.open(&#123;</span><br><span class=\"line\">        animation: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        templateUrl: page,</span><br><span class=\"line\">        scope: $scope,</span><br><span class=\"line\">        <span class=\"comment\">//controller: 'StopJobModalInstanceCtrl',</span></span><br><span class=\"line\">        size: size</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    modalInstance.result.then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">// close</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'modal close'</span>);</span><br><span class=\"line\">        $scope.showLoading = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 后台调用 stopJob 服务</span></span><br><span class=\"line\">        JobExecuteService.stopJob($scope.stopJobExecuteId).then( <span class=\"comment\">// 点击确定关闭job 按钮的回调</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">response</span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">\" stopJobExecute response = \"</span>  + <span class=\"built_in\">JSON</span>.stringify(response));</span><br><span class=\"line\"></span><br><span class=\"line\">                $scope.stopJobDetail = response.data.stopDetail;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// 关闭job成功后的modal //////////////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class=\"line\">                <span class=\"keyword\">var</span> successModalInstance = $uibModal.open(&#123;</span><br><span class=\"line\">                    animation: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                    templateUrl: <span class=\"string\">'app/pages/job/modal/stopJobSuccessModal.html'</span>,</span><br><span class=\"line\">                    scope: $scope, <span class=\"comment\">// 控制弹出的 Modal 框使用同样的 $scope</span></span><br><span class=\"line\">                    size: <span class=\"string\">'md'</span></span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">                successModalInstance.result.then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">// close</span></span><br><span class=\"line\">                &#125;,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">// dismiss或者Modal框消失</span></span><br><span class=\"line\">                    <span class=\"comment\">// 刷新列表数据</span></span><br><span class=\"line\">                    $scope.callServer($scope.jobExecuteTableState);</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">                <span class=\"comment\">/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">errResponse</span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.error(<span class=\"string\">'Error while getJobExecute '</span> + id + <span class=\"string\">', Error :'</span> + errResponse.data);</span><br><span class=\"line\">                toastr.error(<span class=\"string\">'Error while getJobExecute '</span> + id + <span class=\"string\">', Error :'</span> + errResponse.data, <span class=\"string\">'提示'</span>, $scope.notificationConfig);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        );</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">// dismiss</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'modal dismiss'</span>);</span><br><span class=\"line\">        $scope.showLoading = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"comment\">///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"关于-form-的使用-涉及-submitted-和-setPristine-应用\"><a href=\"#关于-form-的使用-涉及-submitted-和-setPristine-应用\" class=\"headerlink\" title=\"关于 form 的使用, 涉及 $submitted 和 $setPristine() 应用 \"></a><a href=\"https://code.angularjs.org/1.5.8/docs/api/ng/directive/form\">关于 form 的使用, 涉及 $submitted 和 $setPristine() 应用 </a></h2><ul>\n<li>html</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div ba-panel</span><br><span class=\"line\">     ba-panel-class=&quot;with-scroll&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;form name=&quot;taskMainForm&quot; ng-submit=&quot;submit()&quot; ng-init=&quot;initForm()&quot; novalidate&gt;</span><br><span class=\"line\">        &lt;div class=&quot;form-group has-feedback&quot;</span><br><span class=\"line\">             ng-class=&quot;&#123;&apos;has-error&apos;: taskMainForm.taskName.$invalid &amp;&amp; (taskMainForm.taskName.$dirty || taskMainForm.$submitted)&#125;&quot;&gt;</span><br><span class=\"line\">            &lt;label&gt;任务名称&lt;/label&gt;</span><br><span class=\"line\">            &lt;input type=&quot;text&quot; class=&quot;form-control&quot; name=&quot;taskName&quot; placeholder=&quot;任务名称 必填&quot; ng-model=&quot;taskMainInfo.taskName&quot; required&gt;</span><br><span class=\"line\">            &lt;span class=&quot;help-block error-block basic-block&quot;&gt;必填&lt;/span&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">        </span><br><span class=\"line\">        &lt;div class=&quot;form-group&quot;&gt;</span><br><span class=\"line\">            &lt;label&gt;备注&lt;/label&gt;</span><br><span class=\"line\">            &lt;textarea placeholder=&quot;填写备注&quot; class=&quot;form-control&quot; ng-model=&quot;taskMainInfo.remarks&quot;&gt;&lt;/textarea&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;div class=&quot;form-group&quot;&gt;</span><br><span class=\"line\">            &lt;input type=&quot;submit&quot; ng-disabled=&quot;taskMainForm.$submitted &amp;&amp; submitFlag&quot; value=&quot;&#123;&#123;!taskMainInfo.id ? &apos;添加&apos; : &apos;修改&apos;&#125;&#125;&quot; class=&quot;btn btn-primary btn-sm&quot;&gt;</span><br><span class=\"line\">            &lt;button type=&quot;button&quot; ng-click=&quot;initForm(taskMainForm)&quot; class=&quot;btn btn-warning btn-sm&quot;&gt;重置&lt;/button&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;/form&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>js</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 重置form</span></span><br><span class=\"line\">$scope.initForm = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">form</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (form != <span class=\"literal\">null</span> &amp;&amp; <span class=\"keyword\">typeof</span> form !== <span class=\"string\">'undefined'</span>) &#123;</span><br><span class=\"line\">      form.$setPristine();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  $scope.taskMainInfo = &#123;&#125;;</span><br><span class=\"line\">  $scope.taskSubs = [];</span><br><span class=\"line\">  $scope.deleteTaskSubs = [];</span><br><span class=\"line\">  $scope.taskMainInfo.executeType = <span class=\"string\">'0'</span>;</span><br><span class=\"line\">  $scope.taskMainInfo.taskStatus = <span class=\"string\">'0'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  $scope.taskSubAdd();</span><br><span class=\"line\">  <span class=\"comment\">// 2 所有, 用于创建主任务模块</span></span><br><span class=\"line\">  $scope.loadAllTaskSubDict($scope.loadTaskSubFlag);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'init form success'</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$scope.taskMainForm = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$scope.submitFlag = true;</span><br><span class=\"line\">$scope.submit = function() &#123;</span><br><span class=\"line\">      $scope.submitFlag = true;</span><br><span class=\"line\">      if (this.taskMainForm.$invalid) &#123; // this.taskMainForm 表示当前操作的form</span><br><span class=\"line\">          $scope.submitFlag = false;</span><br><span class=\"line\">          return;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      $scope.taskMainForm = this.taskMainForm; // 把当前 form 作为全局的 form 来看</span><br><span class=\"line\"></span><br><span class=\"line\">      // 保存成功</span><br><span class=\"line\">      if (createSuccess) &#123;</span><br><span class=\"line\">        $scope.initForm($scope.taskMainForm);    </span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      // 修改成功</span><br><span class=\"line\">      if (updateSuccess) &#123;</span><br><span class=\"line\">        $scope.initForm($scope.taskMainForm);    </span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      </span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<p>在 form submit 后 $submitted 会变成 true 并禁用 submit 按钮, 然后再调用上面的 initForm 方法来将 $submitted 状态重置为 false.</p>\n<p>关键在于点击提交按钮后通过 ng-submit 中定义的 submit 函数中的 <code>this.taskMainForm</code> 来获取到当前的 form 对象, 在保存或者修改成功后再调用 <code>form.$setPristine()</code> 将 $submitted 状态重置为 false.</p>\n<ul>\n<li>参考 <a href=\"https://stackoverflow.com/questions/32029889/angular-setpristine-not-working\">Angular $setPristine() not working</a></li>\n</ul>\n<h2 id=\"如何给一组-CheckBox-绑定值\"><a href=\"#如何给一组-CheckBox-绑定值\" class=\"headerlink\" title=\"如何给一组 CheckBox 绑定值\"></a><a href=\"https://stackoverflow.com/questions/14514461/how-do-i-bind-to-list-of-checkbox-values-with-angularjs\">如何给一组 CheckBox 绑定值</a></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div ng-controller=&quot;MainCtrl&quot;&gt;</span><br><span class=\"line\">  &lt;label ng-repeat=&quot;(color,enabled) in colors&quot;&gt;</span><br><span class=\"line\">      &lt;input type=&quot;checkbox&quot; ng-model=&quot;colors[color]&quot; /&gt; &#123;&#123;color&#125;&#125; </span><br><span class=\"line\">  &lt;/label&gt;</span><br><span class=\"line\">  &lt;p&gt;colors: &#123;&#123;colors&#125;&#125;&lt;/p&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  var app = angular.module(&apos;plunker&apos;, []);</span><br><span class=\"line\"></span><br><span class=\"line\">  app.controller(&apos;MainCtrl&apos;, function($scope) &#123;</span><br><span class=\"line\">      $scope.colors = &#123;Blue: true, Orange: true&#125;;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>"},{"title":"Java 动态代理的应用","title_url":"java-dynamic-apply","date":"2018-01-14T16:00:00.000Z","description":"这里基于 Java 动态代理来完成 AOP 编程,责任链设计模式的实现以及注解的实现","_content":"\n这里基于 Java 动态代理来完成 AOP 编程,责任链设计模式的实现以及注解的实现. 基本步骤如下\n\n- 根据提供的接口数组创建代理类 proxyClass\n- 获取代理类 proxyClass 的构造器 proxyClassConstructor, 参数必须实现 InvocationHandler 相关接口\n- 根据构造器 proxyClassConstructor 创建接口实例, 该实例由jvm创建, \n- AOP 拦截器实现了对代理对象方法在执行过程中的拦截, 从而实现在待拦截方法执行的前后,抛出异常等情况下埋入相关逻辑.\n- 拦截器形成责任链, 每个拦截器完成不同的拦截任务, 最后一个拦截器必须实现对待拦截对象的调用, 也就是说最后一个拦截器中必须有代理对象的一个实例, 其他前面的拦截器就负责执行前的拦截处理.\n\n相关代码如下\n\n```java\npublic static void main(String[] args) {\n\n\t// 拦截 open 方法\n\tAInterceptor ainc = new AInterceptor();\n\t// 拦截 close 方法\n\tBInterceptor binc = new BInterceptor();\n\tainc.setNext(binc);\n\t// 注解拦截\n\tAnnotationInterceptor annc = new AnnotationInterceptor();\n\tbinc.setNext(annc);\n\t// 拦截其他方法\n\tAopInterceptor defc = new AopInterceptor(new MyConnectionImpl());\n\tannc.setNext(defc);\n\t\n\t// AInterceptor (next)-> BInterceptor\n\ttry {\n\t\t/*Class<?> proxyClass = Proxy.getProxyClass(AppMain.class.getClassLoader(), new Class[] { IConnection.class });\n\t\tConstructor<?> proxyClassConstructor = proxyClass.getConstructor(new Class[] { InvocationHandler.class });\n\t\tIConnection conn = (IConnection) proxyClassConstructor.newInstance(ainc); // 这里必须是 AInterceptor 的实例, 由 AInterceptor 一级级向下寻找\n\t\t*/\n\t\t\n\t\tIConnection conn = (IConnection) Proxy.newProxyInstance(AppMain.class.getClassLoader(), new Class[] { IConnection.class }, ainc);\n\t\t\n\t\tconn.open();\n\t\t\n\t\tconn.create();\n\t\t\n\t\tconn.get(\"a\");\n\t\t\n\t\tconn.get(\"\", \"\");\n\t\t\n\t\tconn.close();\n\t\t\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n}\n```\n\n## 责任链设计模式的实现\n\n>责任链模式是一种对象的行为模式。在责任链模式里，很多对象由每一个对象对其下家的引用而连接起来形成一条链。请求在这个链上传递，直到链上的某一个对象决定处理此请求。发出这个请求的客户端并不知道链上的哪一个对象最终处理这个请求，这使得系统可以在不影响客户端的情况下动态地重新组织和分配责任。\n\n本文的这个例子中 `AInterceptor`, `BInterceptor`, `AnnotationInterceptor`, `AopInterceptor` 组合成一个 责任链, 在他们的共同父类 `AbstractInterceptorHandler` 中有一个 \n\n```java\npublic void setNext(AbstractInterceptorHandler next) {\n\tthis.next = next;\n}\n```\n\n方法, 用于保存对下家的引用. 当在调用 IConnection 中每一个方法的时候责任链都会进行拦截, 从上到下的调用关系如下\n\n```\nAInterceptor\n    next->\n        BInterceptor\n            next->\n                AnnotationInterceptor\n                        next->\n                            AopInterceptor\n```\n\n其中 `AInterceptor` 和 `BInterceptor` 根据方法名来拦截具体的方法, 不仅可以获取方法的参数, 甚至可以替换原有方法的执行逻辑.\n\n比如 `AInterceptor` 的 invoke 方法如下\n\n```java\n@Override\npublic Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n\tSystem.out.println(\"AInterceptor ...\");\n\tif (method.getName().equals(\"open\")) {\n\t\tSystem.out.println(\"AInterceptor intercept open method\");\n\t\treturn super.invoke(proxy, method, args); // a.调用默认的 open 方法\n\t\t//return \"替换 open 方法的执行结果\"; // b.替换 open 方法的具体实现\n\t} else {\n\t\treturn super.invoke(proxy, method, args);\t\n\t}\n\t\n}\n```\n\n当使用其中 a 中的逻辑, 输出结果如下\n\n```\nAInterceptor ...\nAInterceptor intercept open method\nBInterceptor ...\nAnnotationInterceptor ...\nAopInterceptor ...\nAopInterceptor 目标方法执行前, before execute\nMyConnectionImpl do open\nAopInterceptor 目标方法执行后, after execute\nAopInterceptor 目标方法在返回前, before returning\nAInterceptor ...\nBInterceptor ...\nAnnotationInterceptor ...\nAopInterceptor ...\nAopInterceptor 目标方法执行前, before execute\nMyConnectionImpl do create\nAopInterceptor 目标方法执行后, after execute\nAopInterceptor 目标方法在返回前, before returning\n```\n\n当使用其中 b 中的逻辑, 输出结果如下\n\n```\nAInterceptor ...\nAInterceptor intercept open method\nAInterceptor ...\nBInterceptor ...\nAnnotationInterceptor ...\nAopInterceptor ...\nAopInterceptor 目标方法执行前, before execute\nMyConnectionImpl do create\nAopInterceptor 目标方法执行后, after execute\nAopInterceptor 目标方法在返回前, before returning\n```\n\n## AOP 编程\n\n在上面的责任链中 AopInterceptor 负责对 IConnection 中的所有方法进行拦截, 也是责任链中最底层的一层. 当然了, 如果其他拦截对象对目标方法进行了替换处理, 这里就无法拦截了.\n\n其中关键就在目标方法执行的前后,遇到异常以及返回前加入一些 AOP 逻辑, 比如日志, 根据方法的参数来判断方法的执行权限, 事务等重复性的代码.\n\n关于 AnnotationInterceptor 的 invoke 方法实现的说明如下\n\n```java\n/**\n * proxy 由 jvm 创建的类实例, 没有数据状态, 但是可以获取到类的相关信息,比如方法, 注解等信息\n * method 代理对象的方法\n * args 代理对象的方法的参数\n * \n * method.invoke(conn, args) 中的 conn 表示在执行过程中具体执行哪个接口实现类, 也可以根据传入方法参数的不同来动态选择实现类, 这里是根据构造函数传入的实现类\n */\n@Override\npublic Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n\tSystem.out.println(\"AopInterceptor ...\");\n\t\n\ttry {\n\t\tSystem.out.println(\"AopInterceptor 目标方法执行前, before execute\");\n\t\tObject obj = method.invoke(conn, args);\n\t\tSystem.out.println(\"AopInterceptor 目标方法执行后, after execute\");\n\t\treturn obj;\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t\tSystem.out.println(\"AopInterceptor 目标方法执行中遇到异常, exception\");\n\t\treturn null;\n\t} finally {\n\t\tSystem.out.println(\"AopInterceptor 目标方法在返回前, before returning\");\n\t}\n\t\n}\n```\n\n## 注解的实现\n\n定义注解如下\n\n```java\n@Target(ElementType.PARAMETER)\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\npublic @interface NotNull {\n\t\n}\n```\n\n```java\n@Target(ElementType.PARAMETER)\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\npublic @interface NotEmpty {\n\t\n}\n```\n\n上面的注解作用于方法的参数上面, 注解的保留策略在方法执行过程中实现. 将定义的注解作用于 IConnection 接口中的方法如下\n\n```java\npublic interface IConnection {\n\t\n\tpublic void open();\n\t\n\tpublic void close();\n\t\n\tpublic void get(@NotNull @NotEmpty String key);\n\t\n\tpublic void get(@NotNull String key, @NotNull String value);\n\t\n\tpublic void create();\n\t\n}\n```\n\n如果将 `@NotNull` 注解作用于方法的参数上面, 并且传入的参数为 null, 将会抛出 RuntimeException 异常; 如果同时将 `@NotNull` 和 `@NotEmpty`注解作用于方法的参数上面, 并且传入的参数为 null 或者为空字符串 \"\", 也将会抛出 RuntimeException 异常\n\n将 AnnotationInterceptor 加入责任链后, 即可拦截在应用执行过程中遇到的参数为 null 或者为 \"\" 的问题. \n\nAnnotationInterceptor 中的 invoke 方法的实现如下\n\n```java\n@Override\npublic Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n\tSystem.out.println(\"AnnotationInterceptor ...\");\n\t\n\t// 下面是针对接口中的方法如果带有参数并且加上了 @NotNull 注解的处理\n\t// 如果参数为 null 就会抛出 RuntimeException 异常\n\t// method.getParameterAnnotations(); 返回 Annotation 的二维数组, 第一纬表示参数索引, 第二维表示参数对应的注解列表\n\tAnnotation[][] parameterAnnotations = method.getParameterAnnotations();\n\tfor (int i = 0; i < parameterAnnotations.length; i++) {\n\t\tAnnotation[] annotations = parameterAnnotations[i];\n\t\tfor (Annotation annotation : annotations) {\n\t\t\tif (annotation instanceof NotNull && args[i] == null) {\n\t\t\t\tthrow new RuntimeException(\"AnnotationInterceptor[the parameter has NotNull Annotation, so must be not null, method = \"+method.getName()+\", arg = \"+args[i]+\"]\");\n\t\t\t}\n\t\t\tif (annotation instanceof NotEmpty && String.valueOf(args[i]).equals(\"\")) {\n\t\t\t\tthrow new RuntimeException(\"AnnotationInterceptor[the parameter has NotEmpty Annotation, so must be not empty, method = \"+method.getName()+\", arg = \"+args[i]+\"]\");\n\t\t\t}\n\t\t}\n\t}\n\treturn super.invoke(proxy, method, args);\n}\n```\n\n根据目标方法参数带上的注解来自定义相应的逻辑, 这个例子演示了注解的定义以及实现.\n\n## 代码地址\n\n本文中的代码在: [代码地址](https://github.com/toulezu/play/tree/master/test-proxy-class)\n\n## 参考\n\n- [Java Constructor.newInstance() 的例子](http://www.javainterviewpoint.com/java-constructor-newinstance-method-example/)\n- [Java的动态代理(dynamic proxy)](http://www.cnblogs.com/techyc/p/3455950.html)\n- [责任链设计模式【过滤器、拦截器】](http://www.cnblogs.com/lyajs/articles/5712316.html)","source":"_posts/Java 动态代理的应用.md","raw":"---\ntitle: Java 动态代理的应用\ntitle_url: java-dynamic-apply\ndate: 2018-01-15\ntags: Java\ncategories: [Java]\ndescription: 这里基于 Java 动态代理来完成 AOP 编程,责任链设计模式的实现以及注解的实现\n---\n\n这里基于 Java 动态代理来完成 AOP 编程,责任链设计模式的实现以及注解的实现. 基本步骤如下\n\n- 根据提供的接口数组创建代理类 proxyClass\n- 获取代理类 proxyClass 的构造器 proxyClassConstructor, 参数必须实现 InvocationHandler 相关接口\n- 根据构造器 proxyClassConstructor 创建接口实例, 该实例由jvm创建, \n- AOP 拦截器实现了对代理对象方法在执行过程中的拦截, 从而实现在待拦截方法执行的前后,抛出异常等情况下埋入相关逻辑.\n- 拦截器形成责任链, 每个拦截器完成不同的拦截任务, 最后一个拦截器必须实现对待拦截对象的调用, 也就是说最后一个拦截器中必须有代理对象的一个实例, 其他前面的拦截器就负责执行前的拦截处理.\n\n相关代码如下\n\n```java\npublic static void main(String[] args) {\n\n\t// 拦截 open 方法\n\tAInterceptor ainc = new AInterceptor();\n\t// 拦截 close 方法\n\tBInterceptor binc = new BInterceptor();\n\tainc.setNext(binc);\n\t// 注解拦截\n\tAnnotationInterceptor annc = new AnnotationInterceptor();\n\tbinc.setNext(annc);\n\t// 拦截其他方法\n\tAopInterceptor defc = new AopInterceptor(new MyConnectionImpl());\n\tannc.setNext(defc);\n\t\n\t// AInterceptor (next)-> BInterceptor\n\ttry {\n\t\t/*Class<?> proxyClass = Proxy.getProxyClass(AppMain.class.getClassLoader(), new Class[] { IConnection.class });\n\t\tConstructor<?> proxyClassConstructor = proxyClass.getConstructor(new Class[] { InvocationHandler.class });\n\t\tIConnection conn = (IConnection) proxyClassConstructor.newInstance(ainc); // 这里必须是 AInterceptor 的实例, 由 AInterceptor 一级级向下寻找\n\t\t*/\n\t\t\n\t\tIConnection conn = (IConnection) Proxy.newProxyInstance(AppMain.class.getClassLoader(), new Class[] { IConnection.class }, ainc);\n\t\t\n\t\tconn.open();\n\t\t\n\t\tconn.create();\n\t\t\n\t\tconn.get(\"a\");\n\t\t\n\t\tconn.get(\"\", \"\");\n\t\t\n\t\tconn.close();\n\t\t\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n}\n```\n\n## 责任链设计模式的实现\n\n>责任链模式是一种对象的行为模式。在责任链模式里，很多对象由每一个对象对其下家的引用而连接起来形成一条链。请求在这个链上传递，直到链上的某一个对象决定处理此请求。发出这个请求的客户端并不知道链上的哪一个对象最终处理这个请求，这使得系统可以在不影响客户端的情况下动态地重新组织和分配责任。\n\n本文的这个例子中 `AInterceptor`, `BInterceptor`, `AnnotationInterceptor`, `AopInterceptor` 组合成一个 责任链, 在他们的共同父类 `AbstractInterceptorHandler` 中有一个 \n\n```java\npublic void setNext(AbstractInterceptorHandler next) {\n\tthis.next = next;\n}\n```\n\n方法, 用于保存对下家的引用. 当在调用 IConnection 中每一个方法的时候责任链都会进行拦截, 从上到下的调用关系如下\n\n```\nAInterceptor\n    next->\n        BInterceptor\n            next->\n                AnnotationInterceptor\n                        next->\n                            AopInterceptor\n```\n\n其中 `AInterceptor` 和 `BInterceptor` 根据方法名来拦截具体的方法, 不仅可以获取方法的参数, 甚至可以替换原有方法的执行逻辑.\n\n比如 `AInterceptor` 的 invoke 方法如下\n\n```java\n@Override\npublic Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n\tSystem.out.println(\"AInterceptor ...\");\n\tif (method.getName().equals(\"open\")) {\n\t\tSystem.out.println(\"AInterceptor intercept open method\");\n\t\treturn super.invoke(proxy, method, args); // a.调用默认的 open 方法\n\t\t//return \"替换 open 方法的执行结果\"; // b.替换 open 方法的具体实现\n\t} else {\n\t\treturn super.invoke(proxy, method, args);\t\n\t}\n\t\n}\n```\n\n当使用其中 a 中的逻辑, 输出结果如下\n\n```\nAInterceptor ...\nAInterceptor intercept open method\nBInterceptor ...\nAnnotationInterceptor ...\nAopInterceptor ...\nAopInterceptor 目标方法执行前, before execute\nMyConnectionImpl do open\nAopInterceptor 目标方法执行后, after execute\nAopInterceptor 目标方法在返回前, before returning\nAInterceptor ...\nBInterceptor ...\nAnnotationInterceptor ...\nAopInterceptor ...\nAopInterceptor 目标方法执行前, before execute\nMyConnectionImpl do create\nAopInterceptor 目标方法执行后, after execute\nAopInterceptor 目标方法在返回前, before returning\n```\n\n当使用其中 b 中的逻辑, 输出结果如下\n\n```\nAInterceptor ...\nAInterceptor intercept open method\nAInterceptor ...\nBInterceptor ...\nAnnotationInterceptor ...\nAopInterceptor ...\nAopInterceptor 目标方法执行前, before execute\nMyConnectionImpl do create\nAopInterceptor 目标方法执行后, after execute\nAopInterceptor 目标方法在返回前, before returning\n```\n\n## AOP 编程\n\n在上面的责任链中 AopInterceptor 负责对 IConnection 中的所有方法进行拦截, 也是责任链中最底层的一层. 当然了, 如果其他拦截对象对目标方法进行了替换处理, 这里就无法拦截了.\n\n其中关键就在目标方法执行的前后,遇到异常以及返回前加入一些 AOP 逻辑, 比如日志, 根据方法的参数来判断方法的执行权限, 事务等重复性的代码.\n\n关于 AnnotationInterceptor 的 invoke 方法实现的说明如下\n\n```java\n/**\n * proxy 由 jvm 创建的类实例, 没有数据状态, 但是可以获取到类的相关信息,比如方法, 注解等信息\n * method 代理对象的方法\n * args 代理对象的方法的参数\n * \n * method.invoke(conn, args) 中的 conn 表示在执行过程中具体执行哪个接口实现类, 也可以根据传入方法参数的不同来动态选择实现类, 这里是根据构造函数传入的实现类\n */\n@Override\npublic Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n\tSystem.out.println(\"AopInterceptor ...\");\n\t\n\ttry {\n\t\tSystem.out.println(\"AopInterceptor 目标方法执行前, before execute\");\n\t\tObject obj = method.invoke(conn, args);\n\t\tSystem.out.println(\"AopInterceptor 目标方法执行后, after execute\");\n\t\treturn obj;\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t\tSystem.out.println(\"AopInterceptor 目标方法执行中遇到异常, exception\");\n\t\treturn null;\n\t} finally {\n\t\tSystem.out.println(\"AopInterceptor 目标方法在返回前, before returning\");\n\t}\n\t\n}\n```\n\n## 注解的实现\n\n定义注解如下\n\n```java\n@Target(ElementType.PARAMETER)\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\npublic @interface NotNull {\n\t\n}\n```\n\n```java\n@Target(ElementType.PARAMETER)\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\npublic @interface NotEmpty {\n\t\n}\n```\n\n上面的注解作用于方法的参数上面, 注解的保留策略在方法执行过程中实现. 将定义的注解作用于 IConnection 接口中的方法如下\n\n```java\npublic interface IConnection {\n\t\n\tpublic void open();\n\t\n\tpublic void close();\n\t\n\tpublic void get(@NotNull @NotEmpty String key);\n\t\n\tpublic void get(@NotNull String key, @NotNull String value);\n\t\n\tpublic void create();\n\t\n}\n```\n\n如果将 `@NotNull` 注解作用于方法的参数上面, 并且传入的参数为 null, 将会抛出 RuntimeException 异常; 如果同时将 `@NotNull` 和 `@NotEmpty`注解作用于方法的参数上面, 并且传入的参数为 null 或者为空字符串 \"\", 也将会抛出 RuntimeException 异常\n\n将 AnnotationInterceptor 加入责任链后, 即可拦截在应用执行过程中遇到的参数为 null 或者为 \"\" 的问题. \n\nAnnotationInterceptor 中的 invoke 方法的实现如下\n\n```java\n@Override\npublic Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n\tSystem.out.println(\"AnnotationInterceptor ...\");\n\t\n\t// 下面是针对接口中的方法如果带有参数并且加上了 @NotNull 注解的处理\n\t// 如果参数为 null 就会抛出 RuntimeException 异常\n\t// method.getParameterAnnotations(); 返回 Annotation 的二维数组, 第一纬表示参数索引, 第二维表示参数对应的注解列表\n\tAnnotation[][] parameterAnnotations = method.getParameterAnnotations();\n\tfor (int i = 0; i < parameterAnnotations.length; i++) {\n\t\tAnnotation[] annotations = parameterAnnotations[i];\n\t\tfor (Annotation annotation : annotations) {\n\t\t\tif (annotation instanceof NotNull && args[i] == null) {\n\t\t\t\tthrow new RuntimeException(\"AnnotationInterceptor[the parameter has NotNull Annotation, so must be not null, method = \"+method.getName()+\", arg = \"+args[i]+\"]\");\n\t\t\t}\n\t\t\tif (annotation instanceof NotEmpty && String.valueOf(args[i]).equals(\"\")) {\n\t\t\t\tthrow new RuntimeException(\"AnnotationInterceptor[the parameter has NotEmpty Annotation, so must be not empty, method = \"+method.getName()+\", arg = \"+args[i]+\"]\");\n\t\t\t}\n\t\t}\n\t}\n\treturn super.invoke(proxy, method, args);\n}\n```\n\n根据目标方法参数带上的注解来自定义相应的逻辑, 这个例子演示了注解的定义以及实现.\n\n## 代码地址\n\n本文中的代码在: [代码地址](https://github.com/toulezu/play/tree/master/test-proxy-class)\n\n## 参考\n\n- [Java Constructor.newInstance() 的例子](http://www.javainterviewpoint.com/java-constructor-newinstance-method-example/)\n- [Java的动态代理(dynamic proxy)](http://www.cnblogs.com/techyc/p/3455950.html)\n- [责任链设计模式【过滤器、拦截器】](http://www.cnblogs.com/lyajs/articles/5712316.html)","slug":"Java 动态代理的应用","published":1,"updated":"2018-03-17T10:36:21.903Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfto0q6n000218c79vev3od3","content":"<p>这里基于 Java 动态代理来完成 AOP 编程,责任链设计模式的实现以及注解的实现. 基本步骤如下</p>\n<ul>\n<li>根据提供的接口数组创建代理类 proxyClass</li>\n<li>获取代理类 proxyClass 的构造器 proxyClassConstructor, 参数必须实现 InvocationHandler 相关接口</li>\n<li>根据构造器 proxyClassConstructor 创建接口实例, 该实例由jvm创建, </li>\n<li>AOP 拦截器实现了对代理对象方法在执行过程中的拦截, 从而实现在待拦截方法执行的前后,抛出异常等情况下埋入相关逻辑.</li>\n<li>拦截器形成责任链, 每个拦截器完成不同的拦截任务, 最后一个拦截器必须实现对待拦截对象的调用, 也就是说最后一个拦截器中必须有代理对象的一个实例, 其他前面的拦截器就负责执行前的拦截处理.</li>\n</ul>\n<p>相关代码如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 拦截 open 方法</span></span><br><span class=\"line\">\tAInterceptor ainc = <span class=\"keyword\">new</span> AInterceptor();</span><br><span class=\"line\">\t<span class=\"comment\">// 拦截 close 方法</span></span><br><span class=\"line\">\tBInterceptor binc = <span class=\"keyword\">new</span> BInterceptor();</span><br><span class=\"line\">\tainc.setNext(binc);</span><br><span class=\"line\">\t<span class=\"comment\">// 注解拦截</span></span><br><span class=\"line\">\tAnnotationInterceptor annc = <span class=\"keyword\">new</span> AnnotationInterceptor();</span><br><span class=\"line\">\tbinc.setNext(annc);</span><br><span class=\"line\">\t<span class=\"comment\">// 拦截其他方法</span></span><br><span class=\"line\">\tAopInterceptor defc = <span class=\"keyword\">new</span> AopInterceptor(<span class=\"keyword\">new</span> MyConnectionImpl());</span><br><span class=\"line\">\tannc.setNext(defc);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// AInterceptor (next)-&gt; BInterceptor</span></span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">/*Class&lt;?&gt; proxyClass = Proxy.getProxyClass(AppMain.class.getClassLoader(), new Class[] &#123; IConnection.class &#125;);</span><br><span class=\"line\">\t\tConstructor&lt;?&gt; proxyClassConstructor = proxyClass.getConstructor(new Class[] &#123; InvocationHandler.class &#125;);</span><br><span class=\"line\">\t\tIConnection conn = (IConnection) proxyClassConstructor.newInstance(ainc); // 这里必须是 AInterceptor 的实例, 由 AInterceptor 一级级向下寻找</span><br><span class=\"line\">\t\t*/</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tIConnection conn = (IConnection) Proxy.newProxyInstance(AppMain.class.getClassLoader(), <span class=\"keyword\">new</span> Class[] &#123; IConnection.class &#125;, ainc);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tconn.open();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tconn.create();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tconn.get(<span class=\"string\">\"a\"</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tconn.get(<span class=\"string\">\"\"</span>, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tconn.close();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\te.printStackTrace();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"责任链设计模式的实现\"><a href=\"#责任链设计模式的实现\" class=\"headerlink\" title=\"责任链设计模式的实现\"></a>责任链设计模式的实现</h2><blockquote>\n<p>责任链模式是一种对象的行为模式。在责任链模式里，很多对象由每一个对象对其下家的引用而连接起来形成一条链。请求在这个链上传递，直到链上的某一个对象决定处理此请求。发出这个请求的客户端并不知道链上的哪一个对象最终处理这个请求，这使得系统可以在不影响客户端的情况下动态地重新组织和分配责任。</p>\n</blockquote>\n<p>本文的这个例子中 <code>AInterceptor</code>, <code>BInterceptor</code>, <code>AnnotationInterceptor</code>, <code>AopInterceptor</code> 组合成一个 责任链, 在他们的共同父类 <code>AbstractInterceptorHandler</code> 中有一个 </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setNext</span><span class=\"params\">(AbstractInterceptorHandler next)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.next = next;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>方法, 用于保存对下家的引用. 当在调用 IConnection 中每一个方法的时候责任链都会进行拦截, 从上到下的调用关系如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AInterceptor</span><br><span class=\"line\">    next-&gt;</span><br><span class=\"line\">        BInterceptor</span><br><span class=\"line\">            next-&gt;</span><br><span class=\"line\">                AnnotationInterceptor</span><br><span class=\"line\">                        next-&gt;</span><br><span class=\"line\">                            AopInterceptor</span><br></pre></td></tr></table></figure>\n<p>其中 <code>AInterceptor</code> 和 <code>BInterceptor</code> 根据方法名来拦截具体的方法, 不仅可以获取方法的参数, 甚至可以替换原有方法的执行逻辑.</p>\n<p>比如 <code>AInterceptor</code> 的 invoke 方法如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"AInterceptor ...\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (method.getName().equals(<span class=\"string\">\"open\"</span>)) &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"AInterceptor intercept open method\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.invoke(proxy, method, args); <span class=\"comment\">// a.调用默认的 open 方法</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//return \"替换 open 方法的执行结果\"; // b.替换 open 方法的具体实现</span></span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.invoke(proxy, method, args);\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当使用其中 a 中的逻辑, 输出结果如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AInterceptor ...</span><br><span class=\"line\">AInterceptor intercept open method</span><br><span class=\"line\">BInterceptor ...</span><br><span class=\"line\">AnnotationInterceptor ...</span><br><span class=\"line\">AopInterceptor ...</span><br><span class=\"line\">AopInterceptor 目标方法执行前, before execute</span><br><span class=\"line\">MyConnectionImpl do open</span><br><span class=\"line\">AopInterceptor 目标方法执行后, after execute</span><br><span class=\"line\">AopInterceptor 目标方法在返回前, before returning</span><br><span class=\"line\">AInterceptor ...</span><br><span class=\"line\">BInterceptor ...</span><br><span class=\"line\">AnnotationInterceptor ...</span><br><span class=\"line\">AopInterceptor ...</span><br><span class=\"line\">AopInterceptor 目标方法执行前, before execute</span><br><span class=\"line\">MyConnectionImpl do create</span><br><span class=\"line\">AopInterceptor 目标方法执行后, after execute</span><br><span class=\"line\">AopInterceptor 目标方法在返回前, before returning</span><br></pre></td></tr></table></figure>\n<p>当使用其中 b 中的逻辑, 输出结果如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AInterceptor ...</span><br><span class=\"line\">AInterceptor intercept open method</span><br><span class=\"line\">AInterceptor ...</span><br><span class=\"line\">BInterceptor ...</span><br><span class=\"line\">AnnotationInterceptor ...</span><br><span class=\"line\">AopInterceptor ...</span><br><span class=\"line\">AopInterceptor 目标方法执行前, before execute</span><br><span class=\"line\">MyConnectionImpl do create</span><br><span class=\"line\">AopInterceptor 目标方法执行后, after execute</span><br><span class=\"line\">AopInterceptor 目标方法在返回前, before returning</span><br></pre></td></tr></table></figure>\n<h2 id=\"AOP-编程\"><a href=\"#AOP-编程\" class=\"headerlink\" title=\"AOP 编程\"></a>AOP 编程</h2><p>在上面的责任链中 AopInterceptor 负责对 IConnection 中的所有方法进行拦截, 也是责任链中最底层的一层. 当然了, 如果其他拦截对象对目标方法进行了替换处理, 这里就无法拦截了.</p>\n<p>其中关键就在目标方法执行的前后,遇到异常以及返回前加入一些 AOP 逻辑, 比如日志, 根据方法的参数来判断方法的执行权限, 事务等重复性的代码.</p>\n<p>关于 AnnotationInterceptor 的 invoke 方法实现的说明如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * proxy 由 jvm 创建的类实例, 没有数据状态, 但是可以获取到类的相关信息,比如方法, 注解等信息</span><br><span class=\"line\"> * method 代理对象的方法</span><br><span class=\"line\"> * args 代理对象的方法的参数</span><br><span class=\"line\"> * </span><br><span class=\"line\"> * method.invoke(conn, args) 中的 conn 表示在执行过程中具体执行哪个接口实现类, 也可以根据传入方法参数的不同来动态选择实现类, 这里是根据构造函数传入的实现类</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"AopInterceptor ...\"</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"AopInterceptor 目标方法执行前, before execute\"</span>);</span><br><span class=\"line\">\t\tObject obj = method.invoke(conn, args);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"AopInterceptor 目标方法执行后, after execute\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\te.printStackTrace();</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"AopInterceptor 目标方法执行中遇到异常, exception\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"AopInterceptor 目标方法在返回前, before returning\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"注解的实现\"><a href=\"#注解的实现\" class=\"headerlink\" title=\"注解的实现\"></a>注解的实现</h2><p>定义注解如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target</span>(ElementType.PARAMETER)</span><br><span class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> NotNull &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target</span>(ElementType.PARAMETER)</span><br><span class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> NotEmpty &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的注解作用于方法的参数上面, 注解的保留策略在方法执行过程中实现. 将定义的注解作用于 IConnection 接口中的方法如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IConnection</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">open</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">close</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">get</span><span class=\"params\">(@NotNull @NotEmpty String key)</span></span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">get</span><span class=\"params\">(@NotNull String key, @NotNull String value)</span></span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">create</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果将 <code>@NotNull</code> 注解作用于方法的参数上面, 并且传入的参数为 null, 将会抛出 RuntimeException 异常; 如果同时将 <code>@NotNull</code> 和 <code>@NotEmpty</code>注解作用于方法的参数上面, 并且传入的参数为 null 或者为空字符串 “”, 也将会抛出 RuntimeException 异常</p>\n<p>将 AnnotationInterceptor 加入责任链后, 即可拦截在应用执行过程中遇到的参数为 null 或者为 “” 的问题. </p>\n<p>AnnotationInterceptor 中的 invoke 方法的实现如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"AnnotationInterceptor ...\"</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 下面是针对接口中的方法如果带有参数并且加上了 @NotNull 注解的处理</span></span><br><span class=\"line\">\t<span class=\"comment\">// 如果参数为 null 就会抛出 RuntimeException 异常</span></span><br><span class=\"line\">\t<span class=\"comment\">// method.getParameterAnnotations(); 返回 Annotation 的二维数组, 第一纬表示参数索引, 第二维表示参数对应的注解列表</span></span><br><span class=\"line\">\tAnnotation[][] parameterAnnotations = method.getParameterAnnotations();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; parameterAnnotations.length; i++) &#123;</span><br><span class=\"line\">\t\tAnnotation[] annotations = parameterAnnotations[i];</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (Annotation annotation : annotations) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (annotation <span class=\"keyword\">instanceof</span> NotNull &amp;&amp; args[i] == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"AnnotationInterceptor[the parameter has NotNull Annotation, so must be not null, method = \"</span>+method.getName()+<span class=\"string\">\", arg = \"</span>+args[i]+<span class=\"string\">\"]\"</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (annotation <span class=\"keyword\">instanceof</span> NotEmpty &amp;&amp; String.valueOf(args[i]).equals(<span class=\"string\">\"\"</span>)) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"AnnotationInterceptor[the parameter has NotEmpty Annotation, so must be not empty, method = \"</span>+method.getName()+<span class=\"string\">\", arg = \"</span>+args[i]+<span class=\"string\">\"]\"</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.invoke(proxy, method, args);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>根据目标方法参数带上的注解来自定义相应的逻辑, 这个例子演示了注解的定义以及实现.</p>\n<h2 id=\"代码地址\"><a href=\"#代码地址\" class=\"headerlink\" title=\"代码地址\"></a>代码地址</h2><p>本文中的代码在: <a href=\"https://github.com/toulezu/play/tree/master/test-proxy-class\" target=\"_blank\" rel=\"external\">代码地址</a></p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"http://www.javainterviewpoint.com/java-constructor-newinstance-method-example/\" target=\"_blank\" rel=\"external\">Java Constructor.newInstance() 的例子</a></li>\n<li><a href=\"http://www.cnblogs.com/techyc/p/3455950.html\" target=\"_blank\" rel=\"external\">Java的动态代理(dynamic proxy)</a></li>\n<li><a href=\"http://www.cnblogs.com/lyajs/articles/5712316.html\" target=\"_blank\" rel=\"external\">责任链设计模式【过滤器、拦截器】</a></li>\n</ul>\n","excerpt":"","more":"<p>这里基于 Java 动态代理来完成 AOP 编程,责任链设计模式的实现以及注解的实现. 基本步骤如下</p>\n<ul>\n<li>根据提供的接口数组创建代理类 proxyClass</li>\n<li>获取代理类 proxyClass 的构造器 proxyClassConstructor, 参数必须实现 InvocationHandler 相关接口</li>\n<li>根据构造器 proxyClassConstructor 创建接口实例, 该实例由jvm创建, </li>\n<li>AOP 拦截器实现了对代理对象方法在执行过程中的拦截, 从而实现在待拦截方法执行的前后,抛出异常等情况下埋入相关逻辑.</li>\n<li>拦截器形成责任链, 每个拦截器完成不同的拦截任务, 最后一个拦截器必须实现对待拦截对象的调用, 也就是说最后一个拦截器中必须有代理对象的一个实例, 其他前面的拦截器就负责执行前的拦截处理.</li>\n</ul>\n<p>相关代码如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 拦截 open 方法</span></span><br><span class=\"line\">\tAInterceptor ainc = <span class=\"keyword\">new</span> AInterceptor();</span><br><span class=\"line\">\t<span class=\"comment\">// 拦截 close 方法</span></span><br><span class=\"line\">\tBInterceptor binc = <span class=\"keyword\">new</span> BInterceptor();</span><br><span class=\"line\">\tainc.setNext(binc);</span><br><span class=\"line\">\t<span class=\"comment\">// 注解拦截</span></span><br><span class=\"line\">\tAnnotationInterceptor annc = <span class=\"keyword\">new</span> AnnotationInterceptor();</span><br><span class=\"line\">\tbinc.setNext(annc);</span><br><span class=\"line\">\t<span class=\"comment\">// 拦截其他方法</span></span><br><span class=\"line\">\tAopInterceptor defc = <span class=\"keyword\">new</span> AopInterceptor(<span class=\"keyword\">new</span> MyConnectionImpl());</span><br><span class=\"line\">\tannc.setNext(defc);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// AInterceptor (next)-&gt; BInterceptor</span></span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">/*Class&lt;?&gt; proxyClass = Proxy.getProxyClass(AppMain.class.getClassLoader(), new Class[] &#123; IConnection.class &#125;);</span><br><span class=\"line\">\t\tConstructor&lt;?&gt; proxyClassConstructor = proxyClass.getConstructor(new Class[] &#123; InvocationHandler.class &#125;);</span><br><span class=\"line\">\t\tIConnection conn = (IConnection) proxyClassConstructor.newInstance(ainc); // 这里必须是 AInterceptor 的实例, 由 AInterceptor 一级级向下寻找</span><br><span class=\"line\">\t\t*/</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tIConnection conn = (IConnection) Proxy.newProxyInstance(AppMain.class.getClassLoader(), <span class=\"keyword\">new</span> Class[] &#123; IConnection.class &#125;, ainc);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tconn.open();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tconn.create();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tconn.get(<span class=\"string\">\"a\"</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tconn.get(<span class=\"string\">\"\"</span>, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tconn.close();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\te.printStackTrace();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"责任链设计模式的实现\"><a href=\"#责任链设计模式的实现\" class=\"headerlink\" title=\"责任链设计模式的实现\"></a>责任链设计模式的实现</h2><blockquote>\n<p>责任链模式是一种对象的行为模式。在责任链模式里，很多对象由每一个对象对其下家的引用而连接起来形成一条链。请求在这个链上传递，直到链上的某一个对象决定处理此请求。发出这个请求的客户端并不知道链上的哪一个对象最终处理这个请求，这使得系统可以在不影响客户端的情况下动态地重新组织和分配责任。</p>\n</blockquote>\n<p>本文的这个例子中 <code>AInterceptor</code>, <code>BInterceptor</code>, <code>AnnotationInterceptor</code>, <code>AopInterceptor</code> 组合成一个 责任链, 在他们的共同父类 <code>AbstractInterceptorHandler</code> 中有一个 </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setNext</span><span class=\"params\">(AbstractInterceptorHandler next)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">this</span>.next = next;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>方法, 用于保存对下家的引用. 当在调用 IConnection 中每一个方法的时候责任链都会进行拦截, 从上到下的调用关系如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AInterceptor</span><br><span class=\"line\">    next-&gt;</span><br><span class=\"line\">        BInterceptor</span><br><span class=\"line\">            next-&gt;</span><br><span class=\"line\">                AnnotationInterceptor</span><br><span class=\"line\">                        next-&gt;</span><br><span class=\"line\">                            AopInterceptor</span><br></pre></td></tr></table></figure>\n<p>其中 <code>AInterceptor</code> 和 <code>BInterceptor</code> 根据方法名来拦截具体的方法, 不仅可以获取方法的参数, 甚至可以替换原有方法的执行逻辑.</p>\n<p>比如 <code>AInterceptor</code> 的 invoke 方法如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"AInterceptor ...\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (method.getName().equals(<span class=\"string\">\"open\"</span>)) &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"AInterceptor intercept open method\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.invoke(proxy, method, args); <span class=\"comment\">// a.调用默认的 open 方法</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//return \"替换 open 方法的执行结果\"; // b.替换 open 方法的具体实现</span></span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.invoke(proxy, method, args);\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当使用其中 a 中的逻辑, 输出结果如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AInterceptor ...</span><br><span class=\"line\">AInterceptor intercept open method</span><br><span class=\"line\">BInterceptor ...</span><br><span class=\"line\">AnnotationInterceptor ...</span><br><span class=\"line\">AopInterceptor ...</span><br><span class=\"line\">AopInterceptor 目标方法执行前, before execute</span><br><span class=\"line\">MyConnectionImpl do open</span><br><span class=\"line\">AopInterceptor 目标方法执行后, after execute</span><br><span class=\"line\">AopInterceptor 目标方法在返回前, before returning</span><br><span class=\"line\">AInterceptor ...</span><br><span class=\"line\">BInterceptor ...</span><br><span class=\"line\">AnnotationInterceptor ...</span><br><span class=\"line\">AopInterceptor ...</span><br><span class=\"line\">AopInterceptor 目标方法执行前, before execute</span><br><span class=\"line\">MyConnectionImpl do create</span><br><span class=\"line\">AopInterceptor 目标方法执行后, after execute</span><br><span class=\"line\">AopInterceptor 目标方法在返回前, before returning</span><br></pre></td></tr></table></figure>\n<p>当使用其中 b 中的逻辑, 输出结果如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AInterceptor ...</span><br><span class=\"line\">AInterceptor intercept open method</span><br><span class=\"line\">AInterceptor ...</span><br><span class=\"line\">BInterceptor ...</span><br><span class=\"line\">AnnotationInterceptor ...</span><br><span class=\"line\">AopInterceptor ...</span><br><span class=\"line\">AopInterceptor 目标方法执行前, before execute</span><br><span class=\"line\">MyConnectionImpl do create</span><br><span class=\"line\">AopInterceptor 目标方法执行后, after execute</span><br><span class=\"line\">AopInterceptor 目标方法在返回前, before returning</span><br></pre></td></tr></table></figure>\n<h2 id=\"AOP-编程\"><a href=\"#AOP-编程\" class=\"headerlink\" title=\"AOP 编程\"></a>AOP 编程</h2><p>在上面的责任链中 AopInterceptor 负责对 IConnection 中的所有方法进行拦截, 也是责任链中最底层的一层. 当然了, 如果其他拦截对象对目标方法进行了替换处理, 这里就无法拦截了.</p>\n<p>其中关键就在目标方法执行的前后,遇到异常以及返回前加入一些 AOP 逻辑, 比如日志, 根据方法的参数来判断方法的执行权限, 事务等重复性的代码.</p>\n<p>关于 AnnotationInterceptor 的 invoke 方法实现的说明如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * proxy 由 jvm 创建的类实例, 没有数据状态, 但是可以获取到类的相关信息,比如方法, 注解等信息</span><br><span class=\"line\"> * method 代理对象的方法</span><br><span class=\"line\"> * args 代理对象的方法的参数</span><br><span class=\"line\"> * </span><br><span class=\"line\"> * method.invoke(conn, args) 中的 conn 表示在执行过程中具体执行哪个接口实现类, 也可以根据传入方法参数的不同来动态选择实现类, 这里是根据构造函数传入的实现类</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"AopInterceptor ...\"</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"AopInterceptor 目标方法执行前, before execute\"</span>);</span><br><span class=\"line\">\t\tObject obj = method.invoke(conn, args);</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"AopInterceptor 目标方法执行后, after execute\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\te.printStackTrace();</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"AopInterceptor 目标方法执行中遇到异常, exception\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"AopInterceptor 目标方法在返回前, before returning\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"注解的实现\"><a href=\"#注解的实现\" class=\"headerlink\" title=\"注解的实现\"></a>注解的实现</h2><p>定义注解如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target</span>(ElementType.PARAMETER)</span><br><span class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> NotNull &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target</span>(ElementType.PARAMETER)</span><br><span class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> NotEmpty &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的注解作用于方法的参数上面, 注解的保留策略在方法执行过程中实现. 将定义的注解作用于 IConnection 接口中的方法如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IConnection</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">open</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">close</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">get</span><span class=\"params\">(@NotNull @NotEmpty String key)</span></span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">get</span><span class=\"params\">(@NotNull String key, @NotNull String value)</span></span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">create</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果将 <code>@NotNull</code> 注解作用于方法的参数上面, 并且传入的参数为 null, 将会抛出 RuntimeException 异常; 如果同时将 <code>@NotNull</code> 和 <code>@NotEmpty</code>注解作用于方法的参数上面, 并且传入的参数为 null 或者为空字符串 “”, 也将会抛出 RuntimeException 异常</p>\n<p>将 AnnotationInterceptor 加入责任链后, 即可拦截在应用执行过程中遇到的参数为 null 或者为 “” 的问题. </p>\n<p>AnnotationInterceptor 中的 invoke 方法的实现如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"AnnotationInterceptor ...\"</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 下面是针对接口中的方法如果带有参数并且加上了 @NotNull 注解的处理</span></span><br><span class=\"line\">\t<span class=\"comment\">// 如果参数为 null 就会抛出 RuntimeException 异常</span></span><br><span class=\"line\">\t<span class=\"comment\">// method.getParameterAnnotations(); 返回 Annotation 的二维数组, 第一纬表示参数索引, 第二维表示参数对应的注解列表</span></span><br><span class=\"line\">\tAnnotation[][] parameterAnnotations = method.getParameterAnnotations();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; parameterAnnotations.length; i++) &#123;</span><br><span class=\"line\">\t\tAnnotation[] annotations = parameterAnnotations[i];</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (Annotation annotation : annotations) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (annotation <span class=\"keyword\">instanceof</span> NotNull &amp;&amp; args[i] == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"AnnotationInterceptor[the parameter has NotNull Annotation, so must be not null, method = \"</span>+method.getName()+<span class=\"string\">\", arg = \"</span>+args[i]+<span class=\"string\">\"]\"</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (annotation <span class=\"keyword\">instanceof</span> NotEmpty &amp;&amp; String.valueOf(args[i]).equals(<span class=\"string\">\"\"</span>)) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"AnnotationInterceptor[the parameter has NotEmpty Annotation, so must be not empty, method = \"</span>+method.getName()+<span class=\"string\">\", arg = \"</span>+args[i]+<span class=\"string\">\"]\"</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.invoke(proxy, method, args);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>根据目标方法参数带上的注解来自定义相应的逻辑, 这个例子演示了注解的定义以及实现.</p>\n<h2 id=\"代码地址\"><a href=\"#代码地址\" class=\"headerlink\" title=\"代码地址\"></a>代码地址</h2><p>本文中的代码在: <a href=\"https://github.com/toulezu/play/tree/master/test-proxy-class\">代码地址</a></p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"http://www.javainterviewpoint.com/java-constructor-newinstance-method-example/\">Java Constructor.newInstance() 的例子</a></li>\n<li><a href=\"http://www.cnblogs.com/techyc/p/3455950.html\">Java的动态代理(dynamic proxy)</a></li>\n<li><a href=\"http://www.cnblogs.com/lyajs/articles/5712316.html\">责任链设计模式【过滤器、拦截器】</a></li>\n</ul>\n"},{"title":"Java 分段从文件中读取数据的一个例子","title_url":"java-read-file-piece","date":"2016-10-30T16:00:00.000Z","description":"Java 分段从文件中读取数据的一个例子","_content":"\n```java\n\n/**\n * 分段从文件中读取数据\n * \n * @author chen_k\n *\n */\n@Component\npublic class GrabDataService {\n\t\n\t/**\n\t * 每次从文件中读取的行数，默认 5000 行\n\t */\n\tpublic static final int LINE_COUNT = 5000;\n\t\n\t/**\n\t * 文件默认编码\n\t */\n\tpublic static final String FILE_ENCODING = \"UTF-8\";\n\n\tprivate static final Logger log = LoggerFactory.getLogger(GrabDataService.class);\n\t\n\t/**\n\t * 文件的唯一标识Map，用于记录从文件的哪一行开始读取\n\t */\n\tprivate Map<String, Integer> counterMap = Collections.synchronizedMap(new HashMap<String, Integer>());\n\t\n\t/**\n\t * 每次从文件中读取固定行数的记录\n\t * @param msgKey 文件的唯一标识\n\t * @param filePath 文件路径\n\t * @return List<Map<Integer, String>> 读取的文件内容\n\t */\n\tpublic List<Map<Integer, String>> getFileData(String msgKey, String filePath) {\n\t\tList<Map<Integer, String>> dataList = new ArrayList<>();\n\t\t\n\t\tint line = 0;\n\t\tif (counterMap.get(msgKey) == null) {\n\t\t\tcounterMap.put(msgKey, line);\n\t\t} else {\n\t\t\tline = counterMap.get(msgKey);\n\t\t}\n\t\t\n\t\ttry {\n\t\t\tFile file = new File(filePath);\n\t\t\tif (file.isFile() && file.exists()) { // 判断文件是否存在\n\t\t\t\tInputStreamReader read = new InputStreamReader(new FileInputStream(file), FILE_ENCODING);// 考虑到编码格式\n\t\t\t\tBufferedReader bufferedReader = new BufferedReader(read);\n\t\t\t\tString lineTxt = null;\n\t\t\t\t\n\t\t\t\tint index = 1;\n\t\t\t\twhile ((lineTxt = bufferedReader.readLine()) != null) {\n\t\t\t\t\t// 每次取的时候从上次最后的行开始\n\t\t\t\t\tif (index > line) {\n\t\t\t\t\t\tMap<Integer, String> data = new HashMap<>();\n\t\t\t\t\t\tdata.put(index, lineTxt);\n\t\t\t\t\t\tdataList.add(data);\n\t\t\t\t\t\t\n\t\t\t\t\t\t// 每次只取文件的 5000 条\n\t\t\t\t\t\tif ((index - line) == LINE_COUNT) {\n\t\t\t\t\t\t\tline = index;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tindex ++;\n\t\t\t\t}\n\t\t\t\t// 说明文件已经读完，插入一个读完的标记, file.renameTo(file) 用于判断当前文件是否被其他程序写入内容或占用\n\t\t\t\tif (lineTxt == null && file.renameTo(file)) {\n\t\t\t\t\tMap<Integer, String> data = new HashMap<>();\n\t\t\t\t\tdata.put(-1, \"END OF FILE\");\n\t\t\t\t\tdataList.add(data);\n\t\t\t\t\t\n\t\t\t\t\tline = index;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tread.close();\n\t\t\t\tbufferedReader.close();\n\t\t\t} else {\n\t\t\t\tlog.error(\"找不到指定的文件:{}\", new Object[]{filePath});\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\tlog.error(\"读取文件内容出现异常\", e);\n\t\t} finally {\n\t\t\t// 记录下一次从文件的哪一行开始读取\n\t\t\tcounterMap.put(msgKey, line);\n\t\t\tlog.info(\"msgKey={},filePath={},line={}\", new Object[]{msgKey,filePath,line});\n\t\t}\n\t\t\n\t\treturn dataList;\n\t}\n\t\n\t/**\n\t * 重置从文件的开始读取行数\n\t * \n\t * @param msgKey 文件的唯一标识\n\t * @param offset 开始读取行数\n\t */\n\tpublic void relocateTo(String msgKey, int offset) {\n\t\tcounterMap.put(msgKey, offset);\n\t}\n\t\n\tpublic GrabDataService() {\n\t}\n\n}\n```","source":"_posts/Java 分段从文件中读取数据的一个例子.md","raw":"---\ntitle: Java 分段从文件中读取数据的一个例子\ntitle_url: java-read-file-piece\ndate: 2016-10-31\ntags: [Java]\ncategories: 技术\ndescription: Java 分段从文件中读取数据的一个例子\n---\n\n```java\n\n/**\n * 分段从文件中读取数据\n * \n * @author chen_k\n *\n */\n@Component\npublic class GrabDataService {\n\t\n\t/**\n\t * 每次从文件中读取的行数，默认 5000 行\n\t */\n\tpublic static final int LINE_COUNT = 5000;\n\t\n\t/**\n\t * 文件默认编码\n\t */\n\tpublic static final String FILE_ENCODING = \"UTF-8\";\n\n\tprivate static final Logger log = LoggerFactory.getLogger(GrabDataService.class);\n\t\n\t/**\n\t * 文件的唯一标识Map，用于记录从文件的哪一行开始读取\n\t */\n\tprivate Map<String, Integer> counterMap = Collections.synchronizedMap(new HashMap<String, Integer>());\n\t\n\t/**\n\t * 每次从文件中读取固定行数的记录\n\t * @param msgKey 文件的唯一标识\n\t * @param filePath 文件路径\n\t * @return List<Map<Integer, String>> 读取的文件内容\n\t */\n\tpublic List<Map<Integer, String>> getFileData(String msgKey, String filePath) {\n\t\tList<Map<Integer, String>> dataList = new ArrayList<>();\n\t\t\n\t\tint line = 0;\n\t\tif (counterMap.get(msgKey) == null) {\n\t\t\tcounterMap.put(msgKey, line);\n\t\t} else {\n\t\t\tline = counterMap.get(msgKey);\n\t\t}\n\t\t\n\t\ttry {\n\t\t\tFile file = new File(filePath);\n\t\t\tif (file.isFile() && file.exists()) { // 判断文件是否存在\n\t\t\t\tInputStreamReader read = new InputStreamReader(new FileInputStream(file), FILE_ENCODING);// 考虑到编码格式\n\t\t\t\tBufferedReader bufferedReader = new BufferedReader(read);\n\t\t\t\tString lineTxt = null;\n\t\t\t\t\n\t\t\t\tint index = 1;\n\t\t\t\twhile ((lineTxt = bufferedReader.readLine()) != null) {\n\t\t\t\t\t// 每次取的时候从上次最后的行开始\n\t\t\t\t\tif (index > line) {\n\t\t\t\t\t\tMap<Integer, String> data = new HashMap<>();\n\t\t\t\t\t\tdata.put(index, lineTxt);\n\t\t\t\t\t\tdataList.add(data);\n\t\t\t\t\t\t\n\t\t\t\t\t\t// 每次只取文件的 5000 条\n\t\t\t\t\t\tif ((index - line) == LINE_COUNT) {\n\t\t\t\t\t\t\tline = index;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tindex ++;\n\t\t\t\t}\n\t\t\t\t// 说明文件已经读完，插入一个读完的标记, file.renameTo(file) 用于判断当前文件是否被其他程序写入内容或占用\n\t\t\t\tif (lineTxt == null && file.renameTo(file)) {\n\t\t\t\t\tMap<Integer, String> data = new HashMap<>();\n\t\t\t\t\tdata.put(-1, \"END OF FILE\");\n\t\t\t\t\tdataList.add(data);\n\t\t\t\t\t\n\t\t\t\t\tline = index;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tread.close();\n\t\t\t\tbufferedReader.close();\n\t\t\t} else {\n\t\t\t\tlog.error(\"找不到指定的文件:{}\", new Object[]{filePath});\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\tlog.error(\"读取文件内容出现异常\", e);\n\t\t} finally {\n\t\t\t// 记录下一次从文件的哪一行开始读取\n\t\t\tcounterMap.put(msgKey, line);\n\t\t\tlog.info(\"msgKey={},filePath={},line={}\", new Object[]{msgKey,filePath,line});\n\t\t}\n\t\t\n\t\treturn dataList;\n\t}\n\t\n\t/**\n\t * 重置从文件的开始读取行数\n\t * \n\t * @param msgKey 文件的唯一标识\n\t * @param offset 开始读取行数\n\t */\n\tpublic void relocateTo(String msgKey, int offset) {\n\t\tcounterMap.put(msgKey, offset);\n\t}\n\t\n\tpublic GrabDataService() {\n\t}\n\n}\n```","slug":"Java 分段从文件中读取数据的一个例子","published":1,"updated":"2017-05-26T14:31:01.382Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfto0q6v000618c7he65jdve","content":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * 分段从文件中读取数据</span><br><span class=\"line\"> * </span><br><span class=\"line\"> * <span class=\"doctag\">@author</span> chen_k</span><br><span class=\"line\"> *</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GrabDataService</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/**</span><br><span class=\"line\">\t * 每次从文件中读取的行数，默认 5000 行</span><br><span class=\"line\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> LINE_COUNT = <span class=\"number\">5000</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/**</span><br><span class=\"line\">\t * 文件默认编码</span><br><span class=\"line\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String FILE_ENCODING = <span class=\"string\">\"UTF-8\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Logger log = LoggerFactory.getLogger(GrabDataService.class);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/**</span><br><span class=\"line\">\t * 文件的唯一标识Map，用于记录从文件的哪一行开始读取</span><br><span class=\"line\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Map&lt;String, Integer&gt; counterMap = Collections.synchronizedMap(<span class=\"keyword\">new</span> HashMap&lt;String, Integer&gt;());</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/**</span><br><span class=\"line\">\t * 每次从文件中读取固定行数的记录</span><br><span class=\"line\">\t * <span class=\"doctag\">@param</span> msgKey 文件的唯一标识</span><br><span class=\"line\">\t * <span class=\"doctag\">@param</span> filePath 文件路径</span><br><span class=\"line\">\t * <span class=\"doctag\">@return</span> List&lt;Map&lt;Integer, String&gt;&gt; 读取的文件内容</span><br><span class=\"line\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> List&lt;Map&lt;Integer, String&gt;&gt; getFileData(String msgKey, String filePath) &#123;</span><br><span class=\"line\">\t\tList&lt;Map&lt;Integer, String&gt;&gt; dataList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> line = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (counterMap.get(msgKey) == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tcounterMap.put(msgKey, line);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tline = counterMap.get(msgKey);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tFile file = <span class=\"keyword\">new</span> File(filePath);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (file.isFile() &amp;&amp; file.exists()) &#123; <span class=\"comment\">// 判断文件是否存在</span></span><br><span class=\"line\">\t\t\t\tInputStreamReader read = <span class=\"keyword\">new</span> InputStreamReader(<span class=\"keyword\">new</span> FileInputStream(file), FILE_ENCODING);<span class=\"comment\">// 考虑到编码格式</span></span><br><span class=\"line\">\t\t\t\tBufferedReader bufferedReader = <span class=\"keyword\">new</span> BufferedReader(read);</span><br><span class=\"line\">\t\t\t\tString lineTxt = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> index = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">while</span> ((lineTxt = bufferedReader.readLine()) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// 每次取的时候从上次最后的行开始</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (index &gt; line) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tMap&lt;Integer, String&gt; data = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">\t\t\t\t\t\tdata.put(index, lineTxt);</span><br><span class=\"line\">\t\t\t\t\t\tdataList.add(data);</span><br><span class=\"line\">\t\t\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"comment\">// 每次只取文件的 5000 条</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span> ((index - line) == LINE_COUNT) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\tline = index;</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\tindex ++;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 说明文件已经读完，插入一个读完的标记, file.renameTo(file) 用于判断当前文件是否被其他程序写入内容或占用</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (lineTxt == <span class=\"keyword\">null</span> &amp;&amp; file.renameTo(file)) &#123;</span><br><span class=\"line\">\t\t\t\t\tMap&lt;Integer, String&gt; data = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">\t\t\t\t\tdata.put(-<span class=\"number\">1</span>, <span class=\"string\">\"END OF FILE\"</span>);</span><br><span class=\"line\">\t\t\t\t\tdataList.add(data);</span><br><span class=\"line\">\t\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\tline = index;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t\t\t\tread.close();</span><br><span class=\"line\">\t\t\t\tbufferedReader.close();</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\tlog.error(<span class=\"string\">\"找不到指定的文件:&#123;&#125;\"</span>, <span class=\"keyword\">new</span> Object[]&#123;filePath&#125;);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\tlog.error(<span class=\"string\">\"读取文件内容出现异常\"</span>, e);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 记录下一次从文件的哪一行开始读取</span></span><br><span class=\"line\">\t\t\tcounterMap.put(msgKey, line);</span><br><span class=\"line\">\t\t\tlog.info(<span class=\"string\">\"msgKey=&#123;&#125;,filePath=&#123;&#125;,line=&#123;&#125;\"</span>, <span class=\"keyword\">new</span> Object[]&#123;msgKey,filePath,line&#125;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> dataList;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/**</span><br><span class=\"line\">\t * 重置从文件的开始读取行数</span><br><span class=\"line\">\t * </span><br><span class=\"line\">\t * <span class=\"doctag\">@param</span> msgKey 文件的唯一标识</span><br><span class=\"line\">\t * <span class=\"doctag\">@param</span> offset 开始读取行数</span><br><span class=\"line\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">relocateTo</span><span class=\"params\">(String msgKey, <span class=\"keyword\">int</span> offset)</span> </span>&#123;</span><br><span class=\"line\">\t\tcounterMap.put(msgKey, offset);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">GrabDataService</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * 分段从文件中读取数据</span><br><span class=\"line\"> * </span><br><span class=\"line\"> * <span class=\"doctag\">@author</span> chen_k</span><br><span class=\"line\"> *</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GrabDataService</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/**</span><br><span class=\"line\">\t * 每次从文件中读取的行数，默认 5000 行</span><br><span class=\"line\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> LINE_COUNT = <span class=\"number\">5000</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/**</span><br><span class=\"line\">\t * 文件默认编码</span><br><span class=\"line\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String FILE_ENCODING = <span class=\"string\">\"UTF-8\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Logger log = LoggerFactory.getLogger(GrabDataService.class);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/**</span><br><span class=\"line\">\t * 文件的唯一标识Map，用于记录从文件的哪一行开始读取</span><br><span class=\"line\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Map&lt;String, Integer&gt; counterMap = Collections.synchronizedMap(<span class=\"keyword\">new</span> HashMap&lt;String, Integer&gt;());</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/**</span><br><span class=\"line\">\t * 每次从文件中读取固定行数的记录</span><br><span class=\"line\">\t * <span class=\"doctag\">@param</span> msgKey 文件的唯一标识</span><br><span class=\"line\">\t * <span class=\"doctag\">@param</span> filePath 文件路径</span><br><span class=\"line\">\t * <span class=\"doctag\">@return</span> List&lt;Map&lt;Integer, String&gt;&gt; 读取的文件内容</span><br><span class=\"line\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> List&lt;Map&lt;Integer, String&gt;&gt; getFileData(String msgKey, String filePath) &#123;</span><br><span class=\"line\">\t\tList&lt;Map&lt;Integer, String&gt;&gt; dataList = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> line = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (counterMap.get(msgKey) == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tcounterMap.put(msgKey, line);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tline = counterMap.get(msgKey);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tFile file = <span class=\"keyword\">new</span> File(filePath);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (file.isFile() &amp;&amp; file.exists()) &#123; <span class=\"comment\">// 判断文件是否存在</span></span><br><span class=\"line\">\t\t\t\tInputStreamReader read = <span class=\"keyword\">new</span> InputStreamReader(<span class=\"keyword\">new</span> FileInputStream(file), FILE_ENCODING);<span class=\"comment\">// 考虑到编码格式</span></span><br><span class=\"line\">\t\t\t\tBufferedReader bufferedReader = <span class=\"keyword\">new</span> BufferedReader(read);</span><br><span class=\"line\">\t\t\t\tString lineTxt = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> index = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">while</span> ((lineTxt = bufferedReader.readLine()) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">// 每次取的时候从上次最后的行开始</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (index &gt; line) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tMap&lt;Integer, String&gt; data = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">\t\t\t\t\t\tdata.put(index, lineTxt);</span><br><span class=\"line\">\t\t\t\t\t\tdataList.add(data);</span><br><span class=\"line\">\t\t\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"comment\">// 每次只取文件的 5000 条</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span> ((index - line) == LINE_COUNT) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\tline = index;</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\tindex ++;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 说明文件已经读完，插入一个读完的标记, file.renameTo(file) 用于判断当前文件是否被其他程序写入内容或占用</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (lineTxt == <span class=\"keyword\">null</span> &amp;&amp; file.renameTo(file)) &#123;</span><br><span class=\"line\">\t\t\t\t\tMap&lt;Integer, String&gt; data = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">\t\t\t\t\tdata.put(-<span class=\"number\">1</span>, <span class=\"string\">\"END OF FILE\"</span>);</span><br><span class=\"line\">\t\t\t\t\tdataList.add(data);</span><br><span class=\"line\">\t\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\tline = index;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t\t\t\tread.close();</span><br><span class=\"line\">\t\t\t\tbufferedReader.close();</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\tlog.error(<span class=\"string\">\"找不到指定的文件:&#123;&#125;\"</span>, <span class=\"keyword\">new</span> Object[]&#123;filePath&#125;);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\tlog.error(<span class=\"string\">\"读取文件内容出现异常\"</span>, e);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 记录下一次从文件的哪一行开始读取</span></span><br><span class=\"line\">\t\t\tcounterMap.put(msgKey, line);</span><br><span class=\"line\">\t\t\tlog.info(<span class=\"string\">\"msgKey=&#123;&#125;,filePath=&#123;&#125;,line=&#123;&#125;\"</span>, <span class=\"keyword\">new</span> Object[]&#123;msgKey,filePath,line&#125;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> dataList;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/**</span><br><span class=\"line\">\t * 重置从文件的开始读取行数</span><br><span class=\"line\">\t * </span><br><span class=\"line\">\t * <span class=\"doctag\">@param</span> msgKey 文件的唯一标识</span><br><span class=\"line\">\t * <span class=\"doctag\">@param</span> offset 开始读取行数</span><br><span class=\"line\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">relocateTo</span><span class=\"params\">(String msgKey, <span class=\"keyword\">int</span> offset)</span> </span>&#123;</span><br><span class=\"line\">\t\tcounterMap.put(msgKey, offset);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">GrabDataService</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"JavaScript 中对闭包和匿名函数的理解","title_url":"understand-JavaScript-closure-anonymous-function","date":"2017-11-28T16:00:00.000Z","description":"JavaScript 中对闭包和匿名函数的理解","_content":"\n## 从一个例子带出的问题\n\n完整的使用如下\n\n```\nfunction checkTaskMainJobStatus() {\n      for (var i=0; i <$scope.taskMains.length; i ++) {\n          (function (taskMain) {\n              JobInfoService.searchJob({ 'param':taskMain.id })\n                  .then(\n                      function (response) {\n                          if (response != null && response.length > 0) {\n                              if (response[0].activity) {\n                                  taskMain.jobStatus = true;\n                                  taskMain.jobStatusLabel = '开启';\n                              } else {\n                                  taskMain.jobStatus = false;\n                                  taskMain.jobStatusLabel = '关闭';\n                              }\n                          } else {\n                              taskMain.jobStatus = false;\n                              taskMain.jobStatusLabel = '关闭';\n                          }\n                      },\n                      function (errResponse) {\n                          console.error('loadJobDetail has error, errResponse = ' + JSON.stringify(errResponse));\n                      }\n                  );\n          })($scope.taskMains[i]);\n    \n      }\n}\n```\n\n简写如下\n\n```\nfunction checkTaskMainJobStatus() {\n      for (var i=0; i <$scope.taskMains.length; i ++) {\n            (function (taskMain) {\n                JobInfoService.searchJob({ 'param':taskMain.id })\n                  .then(\n                      function (response) {\n                         // 使用 taskMain 的逻辑\n                      },\n                      function (errResponse) {\n                         // 使用 taskMain 的逻辑\n                      }\n                  );\n            })($scope.taskMains[i]);\n      }\n}\n```\n\n如果按照下面的写法就会出现问题 \n\n```\nfunction checkTaskMainJobStatus() {\n      for (var i=0; i <$scope.taskMains.length; i ++) {\n            JobInfoService.searchJob({ 'param':$scope.taskMains[i].id })\n                  .then(\n                      function (response) {\n                         // 使用 $scope.taskMains[i] 的逻辑\n                      },\n                      function (errResponse) {\n                         // 使用 $scope.taskMains[i] 的逻辑\n                      }\n                  );\n      }\n}\n```\n\n原因在于 `$scope.taskMains[i]` 是 for 循环带来的一个局部变量, 而 searchJob 函数返回的 `$promise` 对象在循环结束后仍然使用了无效的局部变量.\n\n而通过匿名函数的方式将 `$scope.taskMains[i]` 局部变量传递给 `$promise` 使用, 在 `$promise` 中使用 `$scope.taskMains[i]` 变量就是闭包使用. \n\n闭包可以维持（keep alive）这些变量。在上面的例子中，外部函数创建局部变量 `$scope.taskMains[i]` ，并且最终退出；但是，如果任何一个或多个内部函数在外部函数退出后却没有退出，那么内部函数就维持了外部函数的局部数据, 这里的内部函数就是匿名函数.\n\n## 对闭包的理解\n\n只要在一个函数内部出现了另一个函数, 那么内部的函数就是闭包, 外部函数即使已经执行完毕退出了,内部的函数仍然可以使用外部函数的变量,并且该变量对于内部函数来说是不变的.\n\n类似 Java 中的内部类, 外部传递给内部类中方法的变量是 final 修饰过的.\n\n## 对匿名函数的理解\n\n基本形式如下\n\n```\n(function ([p1,p2...pN]) {\n    // 使用 param1,param2...paramN 的业务逻辑\n    // p1 对应 param1, p2 对应 param2, PN 对应 paramN\n})([param1,param2...paramN]);\n```\n\n在 JavaScript 中 `();` 表示执行, 写成  `(function(){});` 也可以执行, 写成 `(function(){})();` 也可以执行,\n如果在第二个小括号中传入参数就相当于给第一个小括号中的函数传入对应的参数.\n\n## 参考\n\n- [闭包，懂不懂由你，反正我是懂了](http://www.cnblogs.com/frankfang/archive/2011/08/03/2125663.html)\n- [How do JavaScript closures work?](https://stackoverflow.com/questions/111102/how-do-javascript-closures-work)","source":"_posts/JavaScript 中对闭包和匿名函数的理解.md","raw":"---\ntitle: JavaScript 中对闭包和匿名函数的理解\ntitle_url: understand-JavaScript-closure-anonymous-function\ndate: 2017-11-29\ntags: JavaScript\ncategories: [JavaScript]\ndescription: JavaScript 中对闭包和匿名函数的理解\n---\n\n## 从一个例子带出的问题\n\n完整的使用如下\n\n```\nfunction checkTaskMainJobStatus() {\n      for (var i=0; i <$scope.taskMains.length; i ++) {\n          (function (taskMain) {\n              JobInfoService.searchJob({ 'param':taskMain.id })\n                  .then(\n                      function (response) {\n                          if (response != null && response.length > 0) {\n                              if (response[0].activity) {\n                                  taskMain.jobStatus = true;\n                                  taskMain.jobStatusLabel = '开启';\n                              } else {\n                                  taskMain.jobStatus = false;\n                                  taskMain.jobStatusLabel = '关闭';\n                              }\n                          } else {\n                              taskMain.jobStatus = false;\n                              taskMain.jobStatusLabel = '关闭';\n                          }\n                      },\n                      function (errResponse) {\n                          console.error('loadJobDetail has error, errResponse = ' + JSON.stringify(errResponse));\n                      }\n                  );\n          })($scope.taskMains[i]);\n    \n      }\n}\n```\n\n简写如下\n\n```\nfunction checkTaskMainJobStatus() {\n      for (var i=0; i <$scope.taskMains.length; i ++) {\n            (function (taskMain) {\n                JobInfoService.searchJob({ 'param':taskMain.id })\n                  .then(\n                      function (response) {\n                         // 使用 taskMain 的逻辑\n                      },\n                      function (errResponse) {\n                         // 使用 taskMain 的逻辑\n                      }\n                  );\n            })($scope.taskMains[i]);\n      }\n}\n```\n\n如果按照下面的写法就会出现问题 \n\n```\nfunction checkTaskMainJobStatus() {\n      for (var i=0; i <$scope.taskMains.length; i ++) {\n            JobInfoService.searchJob({ 'param':$scope.taskMains[i].id })\n                  .then(\n                      function (response) {\n                         // 使用 $scope.taskMains[i] 的逻辑\n                      },\n                      function (errResponse) {\n                         // 使用 $scope.taskMains[i] 的逻辑\n                      }\n                  );\n      }\n}\n```\n\n原因在于 `$scope.taskMains[i]` 是 for 循环带来的一个局部变量, 而 searchJob 函数返回的 `$promise` 对象在循环结束后仍然使用了无效的局部变量.\n\n而通过匿名函数的方式将 `$scope.taskMains[i]` 局部变量传递给 `$promise` 使用, 在 `$promise` 中使用 `$scope.taskMains[i]` 变量就是闭包使用. \n\n闭包可以维持（keep alive）这些变量。在上面的例子中，外部函数创建局部变量 `$scope.taskMains[i]` ，并且最终退出；但是，如果任何一个或多个内部函数在外部函数退出后却没有退出，那么内部函数就维持了外部函数的局部数据, 这里的内部函数就是匿名函数.\n\n## 对闭包的理解\n\n只要在一个函数内部出现了另一个函数, 那么内部的函数就是闭包, 外部函数即使已经执行完毕退出了,内部的函数仍然可以使用外部函数的变量,并且该变量对于内部函数来说是不变的.\n\n类似 Java 中的内部类, 外部传递给内部类中方法的变量是 final 修饰过的.\n\n## 对匿名函数的理解\n\n基本形式如下\n\n```\n(function ([p1,p2...pN]) {\n    // 使用 param1,param2...paramN 的业务逻辑\n    // p1 对应 param1, p2 对应 param2, PN 对应 paramN\n})([param1,param2...paramN]);\n```\n\n在 JavaScript 中 `();` 表示执行, 写成  `(function(){});` 也可以执行, 写成 `(function(){})();` 也可以执行,\n如果在第二个小括号中传入参数就相当于给第一个小括号中的函数传入对应的参数.\n\n## 参考\n\n- [闭包，懂不懂由你，反正我是懂了](http://www.cnblogs.com/frankfang/archive/2011/08/03/2125663.html)\n- [How do JavaScript closures work?](https://stackoverflow.com/questions/111102/how-do-javascript-closures-work)","slug":"JavaScript 中对闭包和匿名函数的理解","published":1,"updated":"2018-01-01T12:55:41.283Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfto0q6y000718c717iypstx","content":"<h2 id=\"从一个例子带出的问题\"><a href=\"#从一个例子带出的问题\" class=\"headerlink\" title=\"从一个例子带出的问题\"></a>从一个例子带出的问题</h2><p>完整的使用如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function checkTaskMainJobStatus() &#123;</span><br><span class=\"line\">      for (var i=0; i &lt;$scope.taskMains.length; i ++) &#123;</span><br><span class=\"line\">          (function (taskMain) &#123;</span><br><span class=\"line\">              JobInfoService.searchJob(&#123; &apos;param&apos;:taskMain.id &#125;)</span><br><span class=\"line\">                  .then(</span><br><span class=\"line\">                      function (response) &#123;</span><br><span class=\"line\">                          if (response != null &amp;&amp; response.length &gt; 0) &#123;</span><br><span class=\"line\">                              if (response[0].activity) &#123;</span><br><span class=\"line\">                                  taskMain.jobStatus = true;</span><br><span class=\"line\">                                  taskMain.jobStatusLabel = &apos;开启&apos;;</span><br><span class=\"line\">                              &#125; else &#123;</span><br><span class=\"line\">                                  taskMain.jobStatus = false;</span><br><span class=\"line\">                                  taskMain.jobStatusLabel = &apos;关闭&apos;;</span><br><span class=\"line\">                              &#125;</span><br><span class=\"line\">                          &#125; else &#123;</span><br><span class=\"line\">                              taskMain.jobStatus = false;</span><br><span class=\"line\">                              taskMain.jobStatusLabel = &apos;关闭&apos;;</span><br><span class=\"line\">                          &#125;</span><br><span class=\"line\">                      &#125;,</span><br><span class=\"line\">                      function (errResponse) &#123;</span><br><span class=\"line\">                          console.error(&apos;loadJobDetail has error, errResponse = &apos; + JSON.stringify(errResponse));</span><br><span class=\"line\">                      &#125;</span><br><span class=\"line\">                  );</span><br><span class=\"line\">          &#125;)($scope.taskMains[i]);</span><br><span class=\"line\">    </span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>简写如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function checkTaskMainJobStatus() &#123;</span><br><span class=\"line\">      for (var i=0; i &lt;$scope.taskMains.length; i ++) &#123;</span><br><span class=\"line\">            (function (taskMain) &#123;</span><br><span class=\"line\">                JobInfoService.searchJob(&#123; &apos;param&apos;:taskMain.id &#125;)</span><br><span class=\"line\">                  .then(</span><br><span class=\"line\">                      function (response) &#123;</span><br><span class=\"line\">                         // 使用 taskMain 的逻辑</span><br><span class=\"line\">                      &#125;,</span><br><span class=\"line\">                      function (errResponse) &#123;</span><br><span class=\"line\">                         // 使用 taskMain 的逻辑</span><br><span class=\"line\">                      &#125;</span><br><span class=\"line\">                  );</span><br><span class=\"line\">            &#125;)($scope.taskMains[i]);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果按照下面的写法就会出现问题 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function checkTaskMainJobStatus() &#123;</span><br><span class=\"line\">      for (var i=0; i &lt;$scope.taskMains.length; i ++) &#123;</span><br><span class=\"line\">            JobInfoService.searchJob(&#123; &apos;param&apos;:$scope.taskMains[i].id &#125;)</span><br><span class=\"line\">                  .then(</span><br><span class=\"line\">                      function (response) &#123;</span><br><span class=\"line\">                         // 使用 $scope.taskMains[i] 的逻辑</span><br><span class=\"line\">                      &#125;,</span><br><span class=\"line\">                      function (errResponse) &#123;</span><br><span class=\"line\">                         // 使用 $scope.taskMains[i] 的逻辑</span><br><span class=\"line\">                      &#125;</span><br><span class=\"line\">                  );</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>原因在于 <code>$scope.taskMains[i]</code> 是 for 循环带来的一个局部变量, 而 searchJob 函数返回的 <code>$promise</code> 对象在循环结束后仍然使用了无效的局部变量.</p>\n<p>而通过匿名函数的方式将 <code>$scope.taskMains[i]</code> 局部变量传递给 <code>$promise</code> 使用, 在 <code>$promise</code> 中使用 <code>$scope.taskMains[i]</code> 变量就是闭包使用. </p>\n<p>闭包可以维持（keep alive）这些变量。在上面的例子中，外部函数创建局部变量 <code>$scope.taskMains[i]</code> ，并且最终退出；但是，如果任何一个或多个内部函数在外部函数退出后却没有退出，那么内部函数就维持了外部函数的局部数据, 这里的内部函数就是匿名函数.</p>\n<h2 id=\"对闭包的理解\"><a href=\"#对闭包的理解\" class=\"headerlink\" title=\"对闭包的理解\"></a>对闭包的理解</h2><p>只要在一个函数内部出现了另一个函数, 那么内部的函数就是闭包, 外部函数即使已经执行完毕退出了,内部的函数仍然可以使用外部函数的变量,并且该变量对于内部函数来说是不变的.</p>\n<p>类似 Java 中的内部类, 外部传递给内部类中方法的变量是 final 修饰过的.</p>\n<h2 id=\"对匿名函数的理解\"><a href=\"#对匿名函数的理解\" class=\"headerlink\" title=\"对匿名函数的理解\"></a>对匿名函数的理解</h2><p>基本形式如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(function ([p1,p2...pN]) &#123;</span><br><span class=\"line\">    // 使用 param1,param2...paramN 的业务逻辑</span><br><span class=\"line\">    // p1 对应 param1, p2 对应 param2, PN 对应 paramN</span><br><span class=\"line\">&#125;)([param1,param2...paramN]);</span><br></pre></td></tr></table></figure>\n<p>在 JavaScript 中 <code>();</code> 表示执行, 写成  <code>(function(){});</code> 也可以执行, 写成 <code>(function(){})();</code> 也可以执行,<br>如果在第二个小括号中传入参数就相当于给第一个小括号中的函数传入对应的参数.</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"http://www.cnblogs.com/frankfang/archive/2011/08/03/2125663.html\" target=\"_blank\" rel=\"external\">闭包，懂不懂由你，反正我是懂了</a></li>\n<li><a href=\"https://stackoverflow.com/questions/111102/how-do-javascript-closures-work\" target=\"_blank\" rel=\"external\">How do JavaScript closures work?</a></li>\n</ul>\n","excerpt":"","more":"<h2 id=\"从一个例子带出的问题\"><a href=\"#从一个例子带出的问题\" class=\"headerlink\" title=\"从一个例子带出的问题\"></a>从一个例子带出的问题</h2><p>完整的使用如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function checkTaskMainJobStatus() &#123;</span><br><span class=\"line\">      for (var i=0; i &lt;$scope.taskMains.length; i ++) &#123;</span><br><span class=\"line\">          (function (taskMain) &#123;</span><br><span class=\"line\">              JobInfoService.searchJob(&#123; &apos;param&apos;:taskMain.id &#125;)</span><br><span class=\"line\">                  .then(</span><br><span class=\"line\">                      function (response) &#123;</span><br><span class=\"line\">                          if (response != null &amp;&amp; response.length &gt; 0) &#123;</span><br><span class=\"line\">                              if (response[0].activity) &#123;</span><br><span class=\"line\">                                  taskMain.jobStatus = true;</span><br><span class=\"line\">                                  taskMain.jobStatusLabel = &apos;开启&apos;;</span><br><span class=\"line\">                              &#125; else &#123;</span><br><span class=\"line\">                                  taskMain.jobStatus = false;</span><br><span class=\"line\">                                  taskMain.jobStatusLabel = &apos;关闭&apos;;</span><br><span class=\"line\">                              &#125;</span><br><span class=\"line\">                          &#125; else &#123;</span><br><span class=\"line\">                              taskMain.jobStatus = false;</span><br><span class=\"line\">                              taskMain.jobStatusLabel = &apos;关闭&apos;;</span><br><span class=\"line\">                          &#125;</span><br><span class=\"line\">                      &#125;,</span><br><span class=\"line\">                      function (errResponse) &#123;</span><br><span class=\"line\">                          console.error(&apos;loadJobDetail has error, errResponse = &apos; + JSON.stringify(errResponse));</span><br><span class=\"line\">                      &#125;</span><br><span class=\"line\">                  );</span><br><span class=\"line\">          &#125;)($scope.taskMains[i]);</span><br><span class=\"line\">    </span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>简写如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function checkTaskMainJobStatus() &#123;</span><br><span class=\"line\">      for (var i=0; i &lt;$scope.taskMains.length; i ++) &#123;</span><br><span class=\"line\">            (function (taskMain) &#123;</span><br><span class=\"line\">                JobInfoService.searchJob(&#123; &apos;param&apos;:taskMain.id &#125;)</span><br><span class=\"line\">                  .then(</span><br><span class=\"line\">                      function (response) &#123;</span><br><span class=\"line\">                         // 使用 taskMain 的逻辑</span><br><span class=\"line\">                      &#125;,</span><br><span class=\"line\">                      function (errResponse) &#123;</span><br><span class=\"line\">                         // 使用 taskMain 的逻辑</span><br><span class=\"line\">                      &#125;</span><br><span class=\"line\">                  );</span><br><span class=\"line\">            &#125;)($scope.taskMains[i]);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果按照下面的写法就会出现问题 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function checkTaskMainJobStatus() &#123;</span><br><span class=\"line\">      for (var i=0; i &lt;$scope.taskMains.length; i ++) &#123;</span><br><span class=\"line\">            JobInfoService.searchJob(&#123; &apos;param&apos;:$scope.taskMains[i].id &#125;)</span><br><span class=\"line\">                  .then(</span><br><span class=\"line\">                      function (response) &#123;</span><br><span class=\"line\">                         // 使用 $scope.taskMains[i] 的逻辑</span><br><span class=\"line\">                      &#125;,</span><br><span class=\"line\">                      function (errResponse) &#123;</span><br><span class=\"line\">                         // 使用 $scope.taskMains[i] 的逻辑</span><br><span class=\"line\">                      &#125;</span><br><span class=\"line\">                  );</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>原因在于 <code>$scope.taskMains[i]</code> 是 for 循环带来的一个局部变量, 而 searchJob 函数返回的 <code>$promise</code> 对象在循环结束后仍然使用了无效的局部变量.</p>\n<p>而通过匿名函数的方式将 <code>$scope.taskMains[i]</code> 局部变量传递给 <code>$promise</code> 使用, 在 <code>$promise</code> 中使用 <code>$scope.taskMains[i]</code> 变量就是闭包使用. </p>\n<p>闭包可以维持（keep alive）这些变量。在上面的例子中，外部函数创建局部变量 <code>$scope.taskMains[i]</code> ，并且最终退出；但是，如果任何一个或多个内部函数在外部函数退出后却没有退出，那么内部函数就维持了外部函数的局部数据, 这里的内部函数就是匿名函数.</p>\n<h2 id=\"对闭包的理解\"><a href=\"#对闭包的理解\" class=\"headerlink\" title=\"对闭包的理解\"></a>对闭包的理解</h2><p>只要在一个函数内部出现了另一个函数, 那么内部的函数就是闭包, 外部函数即使已经执行完毕退出了,内部的函数仍然可以使用外部函数的变量,并且该变量对于内部函数来说是不变的.</p>\n<p>类似 Java 中的内部类, 外部传递给内部类中方法的变量是 final 修饰过的.</p>\n<h2 id=\"对匿名函数的理解\"><a href=\"#对匿名函数的理解\" class=\"headerlink\" title=\"对匿名函数的理解\"></a>对匿名函数的理解</h2><p>基本形式如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(function ([p1,p2...pN]) &#123;</span><br><span class=\"line\">    // 使用 param1,param2...paramN 的业务逻辑</span><br><span class=\"line\">    // p1 对应 param1, p2 对应 param2, PN 对应 paramN</span><br><span class=\"line\">&#125;)([param1,param2...paramN]);</span><br></pre></td></tr></table></figure>\n<p>在 JavaScript 中 <code>();</code> 表示执行, 写成  <code>(function(){});</code> 也可以执行, 写成 <code>(function(){})();</code> 也可以执行,<br>如果在第二个小括号中传入参数就相当于给第一个小括号中的函数传入对应的参数.</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"http://www.cnblogs.com/frankfang/archive/2011/08/03/2125663.html\">闭包，懂不懂由你，反正我是懂了</a></li>\n<li><a href=\"https://stackoverflow.com/questions/111102/how-do-javascript-closures-work\">How do JavaScript closures work?</a></li>\n</ul>\n"},{"title":"ELK：安装","title_url":"ELK-introduce-setup","date":"2016-06-09T16:00:00.000Z","description":"ELK 初步认识和安装","_content":"\n## ELK 简单介绍\n\nELK 是 Elasticsearch,Logstash,Kibana的合称，依赖Java才能运行。\n\n- ElasticSearch 是开源分布式搜索引擎，能够实时处理，分析日志\n\n- Logstash 统一对应用程序日志进行收集管理\n\n- Kibana 是一个为 Logstash 和 ElasticSearch 提供的日志分析的 Web 接口。可使用它对日志进行高效的搜索、可视化、分析等各种操作\n\n他们之间的依赖关系如下：\n\nKibana <- ElasticSearch <- Logstash\n\n## 安装 Java\n\n- 到`http://www.oracle.com/technetwork/java/javase/downloads/index.html`下载`jdk-8u91-linux-x64.gz`\n\n- 上传到`Ubuntu`上的`/usr/local/soft`目录下，执行`tar -xvf jdk-8u91-linux-x64.gz`解压\n\n- 将下面的Java配置追加到`/etc/profile`文件中，然后执行`source /etc/profile`让配置立即生效\n```\n# set Java environment\nJAVA_HOME=/usr/local/soft/jdk1.8.0_91\nPATH=$JAVA_HOME/bin:$PATH\nCLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar\nexport JAVA_HOME\nexport PATH\nexport CLASSPATH\n```\n- 执行`java -version`和`javac -version`都能返回当前安装的Java的版本号，说明安装成功\n\n\n- 如果当前用户对目录没有权限，执行`sudo chown -R dev:dev /usr/local/soft`，其中`dev:dev`表示dev用户在dev用户组。\n\n\n\n## 安装 Elasticsearch\n\n- 到`https://www.elastic.co/downloads/elasticsearch`下载 elasticsearch-2.3.3.tar.gz\n\n- 上传到`Ubuntu`上的`/usr/local/soft`目录下，执行`tar -xvf elasticsearch-2.3.3.tar.gz`解压\n\n- 执行`sh elasticsearch-2.3.3/bin/elasticsearch`\n\n- 打开浏览器输入`http://localhost:9200/`，返回如下内容说明安装成功:\n```\n{\n  \"name\" : \"Earth Lord\",\n  \"cluster_name\" : \"elasticsearch\",\n  \"version\" : {\n    \"number\" : \"2.3.3\",\n    \"build_hash\" : \"218bdf10790eef486ff2c41a3df5cfa32dadcfde\",\n    \"build_timestamp\" : \"2016-05-17T15:40:04Z\",\n    \"build_snapshot\" : false,\n    \"lucene_version\" : \"5.5.0\"\n  },\n  \"tagline\" : \"You Know, for Search\"\n}\n```\n## 安装 Logstash\n\n- 在`https://www.elastic.co/downloads/logstash`下载`logstash-2.3.2.tar.gz`\n\n- 上传到`Ubuntu`上的`/usr/local/soft`目录下，执行`tar -xvf logstash-2.3.2.tar.gz`解压\n\n- 执行`sh logstash-2.3.2/bin/logstash -e 'input { stdin { } } output { stdout {} }'`，提示\n```\nSettings: Default pipeline workers: 1\nPipeline main started\n```\n说明安装成功，输入任意内容将会打印刚才的输入。\n\n## 安装 Kibana\n\n- 在`https://www.elastic.co/downloads/kibana`下载`kibana-4.5.1-linux-x64.tar.gz`\n\n- 上传到`Ubuntu`上的`/usr/local/soft`目录下，执行`tar -xvf kibana-4.5.1-linux-x64.tar.gz`解压\n\n- 编辑`vi kibana-4.5.1-linux-x64/config/kibana.yml`，确保kibana和elasticsearch 关联起来\n```\nelasticsearch.url: \"http://localhost:9200\"\n```\n\n- 编辑`vi elasticsearch-2.3.3/config/elasticsearch.yml`，追加下面一行，并重启elasticsearch服务\n```\nhttp.cors.enabled: true\n```\n\n- 执行`sh kibana-4.5.1-linux-x64/bin/kibana`启动kibana，在浏览器中输入`http://localhost:5601`，即可访问kibana\n\n参考：\n[CentOS下使用ELK套件搭建日志分析和监控平台](http://blog.csdn.net/i_chips/article/details/43309415)\n[http://www.cnblogs.com/danbo/p/5220516.html](ELK日志分析系统)\n[Logstash实践: 分布式系统的日志监控](http://www.cnblogs.com/yiwenshengmei/p/use_logstash_collect_log.html)","source":"_posts/ELK：安装.md","raw":"---\ntitle: ELK：安装\ntitle_url: ELK-introduce-setup\ndate: 2016-06-10\ntags: ELK\ncategories: 技术\ndescription: ELK 初步认识和安装\n---\n\n## ELK 简单介绍\n\nELK 是 Elasticsearch,Logstash,Kibana的合称，依赖Java才能运行。\n\n- ElasticSearch 是开源分布式搜索引擎，能够实时处理，分析日志\n\n- Logstash 统一对应用程序日志进行收集管理\n\n- Kibana 是一个为 Logstash 和 ElasticSearch 提供的日志分析的 Web 接口。可使用它对日志进行高效的搜索、可视化、分析等各种操作\n\n他们之间的依赖关系如下：\n\nKibana <- ElasticSearch <- Logstash\n\n## 安装 Java\n\n- 到`http://www.oracle.com/technetwork/java/javase/downloads/index.html`下载`jdk-8u91-linux-x64.gz`\n\n- 上传到`Ubuntu`上的`/usr/local/soft`目录下，执行`tar -xvf jdk-8u91-linux-x64.gz`解压\n\n- 将下面的Java配置追加到`/etc/profile`文件中，然后执行`source /etc/profile`让配置立即生效\n```\n# set Java environment\nJAVA_HOME=/usr/local/soft/jdk1.8.0_91\nPATH=$JAVA_HOME/bin:$PATH\nCLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar\nexport JAVA_HOME\nexport PATH\nexport CLASSPATH\n```\n- 执行`java -version`和`javac -version`都能返回当前安装的Java的版本号，说明安装成功\n\n\n- 如果当前用户对目录没有权限，执行`sudo chown -R dev:dev /usr/local/soft`，其中`dev:dev`表示dev用户在dev用户组。\n\n\n\n## 安装 Elasticsearch\n\n- 到`https://www.elastic.co/downloads/elasticsearch`下载 elasticsearch-2.3.3.tar.gz\n\n- 上传到`Ubuntu`上的`/usr/local/soft`目录下，执行`tar -xvf elasticsearch-2.3.3.tar.gz`解压\n\n- 执行`sh elasticsearch-2.3.3/bin/elasticsearch`\n\n- 打开浏览器输入`http://localhost:9200/`，返回如下内容说明安装成功:\n```\n{\n  \"name\" : \"Earth Lord\",\n  \"cluster_name\" : \"elasticsearch\",\n  \"version\" : {\n    \"number\" : \"2.3.3\",\n    \"build_hash\" : \"218bdf10790eef486ff2c41a3df5cfa32dadcfde\",\n    \"build_timestamp\" : \"2016-05-17T15:40:04Z\",\n    \"build_snapshot\" : false,\n    \"lucene_version\" : \"5.5.0\"\n  },\n  \"tagline\" : \"You Know, for Search\"\n}\n```\n## 安装 Logstash\n\n- 在`https://www.elastic.co/downloads/logstash`下载`logstash-2.3.2.tar.gz`\n\n- 上传到`Ubuntu`上的`/usr/local/soft`目录下，执行`tar -xvf logstash-2.3.2.tar.gz`解压\n\n- 执行`sh logstash-2.3.2/bin/logstash -e 'input { stdin { } } output { stdout {} }'`，提示\n```\nSettings: Default pipeline workers: 1\nPipeline main started\n```\n说明安装成功，输入任意内容将会打印刚才的输入。\n\n## 安装 Kibana\n\n- 在`https://www.elastic.co/downloads/kibana`下载`kibana-4.5.1-linux-x64.tar.gz`\n\n- 上传到`Ubuntu`上的`/usr/local/soft`目录下，执行`tar -xvf kibana-4.5.1-linux-x64.tar.gz`解压\n\n- 编辑`vi kibana-4.5.1-linux-x64/config/kibana.yml`，确保kibana和elasticsearch 关联起来\n```\nelasticsearch.url: \"http://localhost:9200\"\n```\n\n- 编辑`vi elasticsearch-2.3.3/config/elasticsearch.yml`，追加下面一行，并重启elasticsearch服务\n```\nhttp.cors.enabled: true\n```\n\n- 执行`sh kibana-4.5.1-linux-x64/bin/kibana`启动kibana，在浏览器中输入`http://localhost:5601`，即可访问kibana\n\n参考：\n[CentOS下使用ELK套件搭建日志分析和监控平台](http://blog.csdn.net/i_chips/article/details/43309415)\n[http://www.cnblogs.com/danbo/p/5220516.html](ELK日志分析系统)\n[Logstash实践: 分布式系统的日志监控](http://www.cnblogs.com/yiwenshengmei/p/use_logstash_collect_log.html)","slug":"ELK：安装","published":1,"updated":"2016-08-23T13:43:30.703Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfto0q71000918c7otz5zahe","content":"<h2 id=\"ELK-简单介绍\"><a href=\"#ELK-简单介绍\" class=\"headerlink\" title=\"ELK 简单介绍\"></a>ELK 简单介绍</h2><p>ELK 是 Elasticsearch,Logstash,Kibana的合称，依赖Java才能运行。</p>\n<ul>\n<li><p>ElasticSearch 是开源分布式搜索引擎，能够实时处理，分析日志</p>\n</li>\n<li><p>Logstash 统一对应用程序日志进行收集管理</p>\n</li>\n<li><p>Kibana 是一个为 Logstash 和 ElasticSearch 提供的日志分析的 Web 接口。可使用它对日志进行高效的搜索、可视化、分析等各种操作</p>\n</li>\n</ul>\n<p>他们之间的依赖关系如下：</p>\n<p>Kibana &lt;- ElasticSearch &lt;- Logstash</p>\n<h2 id=\"安装-Java\"><a href=\"#安装-Java\" class=\"headerlink\" title=\"安装 Java\"></a>安装 Java</h2><ul>\n<li><p>到<code>http://www.oracle.com/technetwork/java/javase/downloads/index.html</code>下载<code>jdk-8u91-linux-x64.gz</code></p>\n</li>\n<li><p>上传到<code>Ubuntu</code>上的<code>/usr/local/soft</code>目录下，执行<code>tar -xvf jdk-8u91-linux-x64.gz</code>解压</p>\n</li>\n<li><p>将下面的Java配置追加到<code>/etc/profile</code>文件中，然后执行<code>source /etc/profile</code>让配置立即生效</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># set Java environment</span><br><span class=\"line\">JAVA_HOME=/usr/local/soft/jdk1.8.0_91</span><br><span class=\"line\">PATH=$JAVA_HOME/bin:$PATH</span><br><span class=\"line\">CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class=\"line\">export JAVA_HOME</span><br><span class=\"line\">export PATH</span><br><span class=\"line\">export CLASSPATH</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>执行<code>java -version</code>和<code>javac -version</code>都能返回当前安装的Java的版本号，说明安装成功</p>\n</li>\n</ul>\n<ul>\n<li>如果当前用户对目录没有权限，执行<code>sudo chown -R dev:dev /usr/local/soft</code>，其中<code>dev:dev</code>表示dev用户在dev用户组。</li>\n</ul>\n<h2 id=\"安装-Elasticsearch\"><a href=\"#安装-Elasticsearch\" class=\"headerlink\" title=\"安装 Elasticsearch\"></a>安装 Elasticsearch</h2><ul>\n<li><p>到<code>https://www.elastic.co/downloads/elasticsearch</code>下载 elasticsearch-2.3.3.tar.gz</p>\n</li>\n<li><p>上传到<code>Ubuntu</code>上的<code>/usr/local/soft</code>目录下，执行<code>tar -xvf elasticsearch-2.3.3.tar.gz</code>解压</p>\n</li>\n<li><p>执行<code>sh elasticsearch-2.3.3/bin/elasticsearch</code></p>\n</li>\n<li><p>打开浏览器输入<code>http://localhost:9200/</code>，返回如下内容说明安装成功:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;name&quot; : &quot;Earth Lord&quot;,</span><br><span class=\"line\">  &quot;cluster_name&quot; : &quot;elasticsearch&quot;,</span><br><span class=\"line\">  &quot;version&quot; : &#123;</span><br><span class=\"line\">    &quot;number&quot; : &quot;2.3.3&quot;,</span><br><span class=\"line\">    &quot;build_hash&quot; : &quot;218bdf10790eef486ff2c41a3df5cfa32dadcfde&quot;,</span><br><span class=\"line\">    &quot;build_timestamp&quot; : &quot;2016-05-17T15:40:04Z&quot;,</span><br><span class=\"line\">    &quot;build_snapshot&quot; : false,</span><br><span class=\"line\">    &quot;lucene_version&quot; : &quot;5.5.0&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;tagline&quot; : &quot;You Know, for Search&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"安装-Logstash\"><a href=\"#安装-Logstash\" class=\"headerlink\" title=\"安装 Logstash\"></a>安装 Logstash</h2><ul>\n<li><p>在<code>https://www.elastic.co/downloads/logstash</code>下载<code>logstash-2.3.2.tar.gz</code></p>\n</li>\n<li><p>上传到<code>Ubuntu</code>上的<code>/usr/local/soft</code>目录下，执行<code>tar -xvf logstash-2.3.2.tar.gz</code>解压</p>\n</li>\n<li><p>执行<code>sh logstash-2.3.2/bin/logstash -e &#39;input { stdin { } } output { stdout {} }&#39;</code>，提示</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Settings: Default pipeline workers: 1</span><br><span class=\"line\">Pipeline main started</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>说明安装成功，输入任意内容将会打印刚才的输入。</p>\n<h2 id=\"安装-Kibana\"><a href=\"#安装-Kibana\" class=\"headerlink\" title=\"安装 Kibana\"></a>安装 Kibana</h2><ul>\n<li><p>在<code>https://www.elastic.co/downloads/kibana</code>下载<code>kibana-4.5.1-linux-x64.tar.gz</code></p>\n</li>\n<li><p>上传到<code>Ubuntu</code>上的<code>/usr/local/soft</code>目录下，执行<code>tar -xvf kibana-4.5.1-linux-x64.tar.gz</code>解压</p>\n</li>\n<li><p>编辑<code>vi kibana-4.5.1-linux-x64/config/kibana.yml</code>，确保kibana和elasticsearch 关联起来</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">elasticsearch.url: &quot;http://localhost:9200&quot;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>编辑<code>vi elasticsearch-2.3.3/config/elasticsearch.yml</code>，追加下面一行，并重启elasticsearch服务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http.cors.enabled: true</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>执行<code>sh kibana-4.5.1-linux-x64/bin/kibana</code>启动kibana，在浏览器中输入<code>http://localhost:5601</code>，即可访问kibana</p>\n</li>\n</ul>\n<p>参考：<br><a href=\"http://blog.csdn.net/i_chips/article/details/43309415\" target=\"_blank\" rel=\"external\">CentOS下使用ELK套件搭建日志分析和监控平台</a><br><a href=\"ELK日志分析系统\">http://www.cnblogs.com/danbo/p/5220516.html</a><br><a href=\"http://www.cnblogs.com/yiwenshengmei/p/use_logstash_collect_log.html\" target=\"_blank\" rel=\"external\">Logstash实践: 分布式系统的日志监控</a></p>\n","excerpt":"","more":"<h2 id=\"ELK-简单介绍\"><a href=\"#ELK-简单介绍\" class=\"headerlink\" title=\"ELK 简单介绍\"></a>ELK 简单介绍</h2><p>ELK 是 Elasticsearch,Logstash,Kibana的合称，依赖Java才能运行。</p>\n<ul>\n<li><p>ElasticSearch 是开源分布式搜索引擎，能够实时处理，分析日志</p>\n</li>\n<li><p>Logstash 统一对应用程序日志进行收集管理</p>\n</li>\n<li><p>Kibana 是一个为 Logstash 和 ElasticSearch 提供的日志分析的 Web 接口。可使用它对日志进行高效的搜索、可视化、分析等各种操作</p>\n</li>\n</ul>\n<p>他们之间的依赖关系如下：</p>\n<p>Kibana &lt;- ElasticSearch &lt;- Logstash</p>\n<h2 id=\"安装-Java\"><a href=\"#安装-Java\" class=\"headerlink\" title=\"安装 Java\"></a>安装 Java</h2><ul>\n<li><p>到<code>http://www.oracle.com/technetwork/java/javase/downloads/index.html</code>下载<code>jdk-8u91-linux-x64.gz</code></p>\n</li>\n<li><p>上传到<code>Ubuntu</code>上的<code>/usr/local/soft</code>目录下，执行<code>tar -xvf jdk-8u91-linux-x64.gz</code>解压</p>\n</li>\n<li><p>将下面的Java配置追加到<code>/etc/profile</code>文件中，然后执行<code>source /etc/profile</code>让配置立即生效</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># set Java environment</span><br><span class=\"line\">JAVA_HOME=/usr/local/soft/jdk1.8.0_91</span><br><span class=\"line\">PATH=$JAVA_HOME/bin:$PATH</span><br><span class=\"line\">CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class=\"line\">export JAVA_HOME</span><br><span class=\"line\">export PATH</span><br><span class=\"line\">export CLASSPATH</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>执行<code>java -version</code>和<code>javac -version</code>都能返回当前安装的Java的版本号，说明安装成功</p>\n</li>\n</ul>\n<ul>\n<li>如果当前用户对目录没有权限，执行<code>sudo chown -R dev:dev /usr/local/soft</code>，其中<code>dev:dev</code>表示dev用户在dev用户组。</li>\n</ul>\n<h2 id=\"安装-Elasticsearch\"><a href=\"#安装-Elasticsearch\" class=\"headerlink\" title=\"安装 Elasticsearch\"></a>安装 Elasticsearch</h2><ul>\n<li><p>到<code>https://www.elastic.co/downloads/elasticsearch</code>下载 elasticsearch-2.3.3.tar.gz</p>\n</li>\n<li><p>上传到<code>Ubuntu</code>上的<code>/usr/local/soft</code>目录下，执行<code>tar -xvf elasticsearch-2.3.3.tar.gz</code>解压</p>\n</li>\n<li><p>执行<code>sh elasticsearch-2.3.3/bin/elasticsearch</code></p>\n</li>\n<li><p>打开浏览器输入<code>http://localhost:9200/</code>，返回如下内容说明安装成功:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;name&quot; : &quot;Earth Lord&quot;,</span><br><span class=\"line\">  &quot;cluster_name&quot; : &quot;elasticsearch&quot;,</span><br><span class=\"line\">  &quot;version&quot; : &#123;</span><br><span class=\"line\">    &quot;number&quot; : &quot;2.3.3&quot;,</span><br><span class=\"line\">    &quot;build_hash&quot; : &quot;218bdf10790eef486ff2c41a3df5cfa32dadcfde&quot;,</span><br><span class=\"line\">    &quot;build_timestamp&quot; : &quot;2016-05-17T15:40:04Z&quot;,</span><br><span class=\"line\">    &quot;build_snapshot&quot; : false,</span><br><span class=\"line\">    &quot;lucene_version&quot; : &quot;5.5.0&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;tagline&quot; : &quot;You Know, for Search&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"安装-Logstash\"><a href=\"#安装-Logstash\" class=\"headerlink\" title=\"安装 Logstash\"></a>安装 Logstash</h2><ul>\n<li><p>在<code>https://www.elastic.co/downloads/logstash</code>下载<code>logstash-2.3.2.tar.gz</code></p>\n</li>\n<li><p>上传到<code>Ubuntu</code>上的<code>/usr/local/soft</code>目录下，执行<code>tar -xvf logstash-2.3.2.tar.gz</code>解压</p>\n</li>\n<li><p>执行<code>sh logstash-2.3.2/bin/logstash -e &#39;input { stdin { } } output { stdout {} }&#39;</code>，提示</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Settings: Default pipeline workers: 1</span><br><span class=\"line\">Pipeline main started</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>说明安装成功，输入任意内容将会打印刚才的输入。</p>\n<h2 id=\"安装-Kibana\"><a href=\"#安装-Kibana\" class=\"headerlink\" title=\"安装 Kibana\"></a>安装 Kibana</h2><ul>\n<li><p>在<code>https://www.elastic.co/downloads/kibana</code>下载<code>kibana-4.5.1-linux-x64.tar.gz</code></p>\n</li>\n<li><p>上传到<code>Ubuntu</code>上的<code>/usr/local/soft</code>目录下，执行<code>tar -xvf kibana-4.5.1-linux-x64.tar.gz</code>解压</p>\n</li>\n<li><p>编辑<code>vi kibana-4.5.1-linux-x64/config/kibana.yml</code>，确保kibana和elasticsearch 关联起来</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">elasticsearch.url: &quot;http://localhost:9200&quot;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>编辑<code>vi elasticsearch-2.3.3/config/elasticsearch.yml</code>，追加下面一行，并重启elasticsearch服务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http.cors.enabled: true</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>执行<code>sh kibana-4.5.1-linux-x64/bin/kibana</code>启动kibana，在浏览器中输入<code>http://localhost:5601</code>，即可访问kibana</p>\n</li>\n</ul>\n<p>参考：<br><a href=\"http://blog.csdn.net/i_chips/article/details/43309415\">CentOS下使用ELK套件搭建日志分析和监控平台</a><br><a href=\"ELK日志分析系统\">http://www.cnblogs.com/danbo/p/5220516.html</a><br><a href=\"http://www.cnblogs.com/yiwenshengmei/p/use_logstash_collect_log.html\">Logstash实践: 分布式系统的日志监控</a></p>\n"},{"title":"Java 中的 synchronizd 关键字在同步中的使用","title_url":"Java-synchronizd-usage","date":"2016-06-06T16:00:00.000Z","description":"Java 中的 synchronizd 关键字在同步中的使用","_content":"\n### 为什么要线程同步\n\n- 同步的目的是避免在同一个时间点操作同一个数据\n- 这里操作是指`update`，`delete`，数据是指任意对象\n- 每一个对象都有一把锁，`synchronized` 就是为此对象上锁，等到 `synchronized` 方法或`synchronized` 代码块执行完就会自动解锁，所有多线程执行相同带`synchronized`的代码时会检查所操作对象是否上锁，如果已经被锁住，就阻塞等待，直到锁此代码段的线程执行完此代码块。\n\n### synchronized 5种用法\n\n-\t用在普通方法上\n```java\npublic synchronized void test() {\n // 业务代码\n}\n```\n-\t用在静态方法上\n```java\npublic static synchronized void test3() {\n // 业务代码\n}\n```\n-\t用在代码块，括号里面是this\n```java\npublic void test1() {\n    synchronized(this) {\n      // 业务代码\n\t  }\n}\n```\n-\t用在代码块，括号里面是类的一个实例，和this类似\n```java\npublic void test11() {\n  Sync sync = this;\n  synchronized(sync) {\n    // 业务代码\n  }\n}\n```\n-\t用在代码块，括号里面是类\n```java\npublic void test2() {\n  synchronized (Sync.class) {\n      // 业务代码\n  }\n}\n```\n\nsynchronized 锁住的是括号里的对象，而不是代码。对于非静态的 synchronized 方法，锁的就是对象本身也就是this。\n\n当 synchronized 锁住一个对象后，别的线程如果也想拿到这个对象的锁，就必须等待这个线程执行完成释放锁，才能再次给对象加锁，这样才达到线程同步的目的。\n\n```java\npublic class SynchronizedTest {\n\t\n\tPerson p = new Person(\"lin\", 15);\n\t\n\tpublic synchronized void say() {//相当于锁住this，效果和say3()一样，只要多个线程同时访问同一个SynchronizedTest实例（相当于this），就会发生不能同时访问此方法\n\t\tSystem.out.println(p.getName());\n\t}\n\t\n\tpublic void say2() {\n\t\tsynchronized(p) {//相当于锁住p，只要多个线程同时访问此代码块且是同一个p，那么在同一时间，只有一个线程能对P进行操作。\n\t\t\tSystem.out.println(p.getName());\n\t\t}\n\t}\n\t\n\tpublic void say3() {\n\t\tsynchronized(this) {//锁住this，效果和say()一样，只要多个线程同时访问同一个SynchronizedTest实例（this），就会发生不能同时访问此代码块\n\t\t\tSystem.out.println(p.getName());\n\t\t}\n\t}\n}\n\n```\n上面的三种用法都是为了避免在多个线程操作同一个对象的时候同时访问一个代码块或者某个方法。\n\n### 误用 synchronized 的情况\n下面的代码想要防止多个线程同时对某个代码块的访问，但是最后没有做到。\n```java\nclass Sync {  \n  \n    public synchronized void test() {  \n        System.out.println(\"test开始..\");  \n        try {  \n            Thread.sleep(1000);  \n        } catch (InterruptedException e) {  \n            e.printStackTrace();  \n        }  \n        System.out.println(\"test结束..\");  \n    }  \n}  \n  \nclass MyThread extends Thread {  \n  \n    public void run() {  \n        Sync sync = new Sync();  \n        sync.test();  \n    }  \n}  \n  \npublic class Main {  \n  \n    public static void main(String[] args) {  \n        for (int i = 0; i < 3; i++) {  \n            Thread thread = new MyThread();  \n            thread.start();  \n        }  \n    }  \n}  \n```\n```\n运行结果：\ntest开始..\ntest开始..\ntest开始..\ntest结束..\ntest结束..\ntest结束..\n```\n可以看出来，上面的程序起了三个线程，同时运行test方法，虽然test方法加上了synchronized，但是还是同时运行起来，貌似synchronized没起作用。\n\n将test方法改成如下：\n```java\npublic void test() {  \n    synchronized(this){  \n        System.out.println(\"test开始..\");  \n        try {  \n            Thread.sleep(1000);  \n        } catch (InterruptedException e) {  \n            e.printStackTrace();  \n        }  \n        System.out.println(\"test结束..\");  \n    }  \n}  \n```\n```\n运行结果：\ntest开始..\ntest开始..\ntest开始..\ntest结束..\ntest结束..\ntest结束..\n```\n一切还是这么平静，没有看到synchronized 达到想要的结果。为什么？刚才讲到上面的两种方法是为了避免在多个线程操作**同一个对象**的时候同时访问一个代码块或者某个方法，但是在\n```java\nclass MyThread extends Thread {  \n  \n    public void run() {  \n        Sync sync = new Sync();  \n        sync.test();  \n    }  \n}  \n```\n中，每个线程都单独操作一个 Sync 对象，这样线程之间根本不会发生同步。怎么做呢？\n```java\nclass MyThread2 extends Thread {\n\t\n\tprivate Sync sync;\n\t\n\tpublic MyThread2(Sync sync) {\n\t\tthis.sync = sync;\n\t}\n\t  \n    public void run() {\n        sync.test();  \n    }  \n}\n```\n```java\nSync sync = new Sync();\nfor (int i = 0; i < 3; i++) {  \n    Thread thread = new MyThread2(sync);\n    thread.start();  \n}\n```\n输出结果如下：\n```\ntest开始..\ntest结束..\ntest开始..\ntest结束..\ntest开始..\ntest结束..\n```\n这样就达到预期了，多个线程在操作同一个对象的时候只有一个线程能够访问 test 方法。\n\n但是还有其他方法吗？也就是如何避免多个线程执行多个对象的同一个代码块呢。看看下面的代码：\n```java\npublic class Sync {\n\tpublic void test2() {\n\t\tsynchronized (Sync.class) { // 作用于 Sync 类的所有实例\n\t\t\tSystem.out.println(\"test2开始..\");\n\t\t\ttry {\n\t\t\t\tThread.sleep(1000);\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\tSystem.out.println(\"test2结束..\");\n\t\t}\n\t}\n}\n```\n```java\nclass MyThread3 extends Thread {  \n\t  \n    public void run() {  \n        Sync sync = new Sync();  \n        sync.test2();  \n    }  \n}\n```\n```java\nfor (int i = 0; i < 3; i++) {  \n    Thread thread = new MyThread3();\n    thread.start();  \n}\n```\n输出结果如下：\n```\ntest2开始..\ntest2结束..\ntest2开始..\ntest2结束..\ntest2开始..\ntest2结束..\n```\n这样就满足期望了，关键是\n```java\nsynchronized (Sync.class) { // 作用于 Sync 类的所有实例\n//...\n}\n```\n\n如果synchronized作用于某个静态方法上会有什么效果呢？\n```java\npublic static synchronized void test3() {\n\tSystem.out.println(\"test3开始..\");\n\ttry {\n\t\tThread.sleep(1000);\n\t} catch (InterruptedException e) {\n\t\te.printStackTrace();\n\t}\n\tSystem.out.println(\"test3结束..\");\n}\n```\n```java\nclass MyThread4 extends Thread {  \n\t  \n    public void run() {  \n        Sync.test3();  \n    }  \n}\n```\n```java\nfor (int i = 0; i < 3; i++) {  \n    Thread thread = new MyThread4();\n    thread.start();  \n}\n```\n输出结果如下：\n```\ntest3开始..\ntest3结束..\ntest3开始..\ntest3结束..\ntest3开始..\ntest3结束..\n```\n这同样能够满足期望，从上面的这些例子也很好说明了5种的synchronized区别和相同点。\n\n\n### 对 synchronized 的总结\n\n- 方法同步，锁当前对象（this）\n- 静态同步方法，锁当前类的Class对象\n- 对于同步代码块，锁住的是synchronized括号中的对象，任意对象，当前类对象或者是其他对象。\n\n参考如下：\n[Java:使用synchronized和Lock对象获取对象锁](http://zhangjunhd.blog.51cto.com/113473/70300)\n[线程同步总结--synchronized方法和synchronized代码块](http://991690137.iteye.com/blog/1948882)","source":"_posts/Java中的 synchronizd 关键字用法.md","raw":"---\ntitle: Java 中的 synchronizd 关键字在同步中的使用\ntitle_url: Java-synchronizd-usage\ndate: 2016-06-07\ntags: Java\ncategories: 技术\ndescription: Java 中的 synchronizd 关键字在同步中的使用\n---\n\n### 为什么要线程同步\n\n- 同步的目的是避免在同一个时间点操作同一个数据\n- 这里操作是指`update`，`delete`，数据是指任意对象\n- 每一个对象都有一把锁，`synchronized` 就是为此对象上锁，等到 `synchronized` 方法或`synchronized` 代码块执行完就会自动解锁，所有多线程执行相同带`synchronized`的代码时会检查所操作对象是否上锁，如果已经被锁住，就阻塞等待，直到锁此代码段的线程执行完此代码块。\n\n### synchronized 5种用法\n\n-\t用在普通方法上\n```java\npublic synchronized void test() {\n // 业务代码\n}\n```\n-\t用在静态方法上\n```java\npublic static synchronized void test3() {\n // 业务代码\n}\n```\n-\t用在代码块，括号里面是this\n```java\npublic void test1() {\n    synchronized(this) {\n      // 业务代码\n\t  }\n}\n```\n-\t用在代码块，括号里面是类的一个实例，和this类似\n```java\npublic void test11() {\n  Sync sync = this;\n  synchronized(sync) {\n    // 业务代码\n  }\n}\n```\n-\t用在代码块，括号里面是类\n```java\npublic void test2() {\n  synchronized (Sync.class) {\n      // 业务代码\n  }\n}\n```\n\nsynchronized 锁住的是括号里的对象，而不是代码。对于非静态的 synchronized 方法，锁的就是对象本身也就是this。\n\n当 synchronized 锁住一个对象后，别的线程如果也想拿到这个对象的锁，就必须等待这个线程执行完成释放锁，才能再次给对象加锁，这样才达到线程同步的目的。\n\n```java\npublic class SynchronizedTest {\n\t\n\tPerson p = new Person(\"lin\", 15);\n\t\n\tpublic synchronized void say() {//相当于锁住this，效果和say3()一样，只要多个线程同时访问同一个SynchronizedTest实例（相当于this），就会发生不能同时访问此方法\n\t\tSystem.out.println(p.getName());\n\t}\n\t\n\tpublic void say2() {\n\t\tsynchronized(p) {//相当于锁住p，只要多个线程同时访问此代码块且是同一个p，那么在同一时间，只有一个线程能对P进行操作。\n\t\t\tSystem.out.println(p.getName());\n\t\t}\n\t}\n\t\n\tpublic void say3() {\n\t\tsynchronized(this) {//锁住this，效果和say()一样，只要多个线程同时访问同一个SynchronizedTest实例（this），就会发生不能同时访问此代码块\n\t\t\tSystem.out.println(p.getName());\n\t\t}\n\t}\n}\n\n```\n上面的三种用法都是为了避免在多个线程操作同一个对象的时候同时访问一个代码块或者某个方法。\n\n### 误用 synchronized 的情况\n下面的代码想要防止多个线程同时对某个代码块的访问，但是最后没有做到。\n```java\nclass Sync {  \n  \n    public synchronized void test() {  \n        System.out.println(\"test开始..\");  \n        try {  \n            Thread.sleep(1000);  \n        } catch (InterruptedException e) {  \n            e.printStackTrace();  \n        }  \n        System.out.println(\"test结束..\");  \n    }  \n}  \n  \nclass MyThread extends Thread {  \n  \n    public void run() {  \n        Sync sync = new Sync();  \n        sync.test();  \n    }  \n}  \n  \npublic class Main {  \n  \n    public static void main(String[] args) {  \n        for (int i = 0; i < 3; i++) {  \n            Thread thread = new MyThread();  \n            thread.start();  \n        }  \n    }  \n}  \n```\n```\n运行结果：\ntest开始..\ntest开始..\ntest开始..\ntest结束..\ntest结束..\ntest结束..\n```\n可以看出来，上面的程序起了三个线程，同时运行test方法，虽然test方法加上了synchronized，但是还是同时运行起来，貌似synchronized没起作用。\n\n将test方法改成如下：\n```java\npublic void test() {  \n    synchronized(this){  \n        System.out.println(\"test开始..\");  \n        try {  \n            Thread.sleep(1000);  \n        } catch (InterruptedException e) {  \n            e.printStackTrace();  \n        }  \n        System.out.println(\"test结束..\");  \n    }  \n}  \n```\n```\n运行结果：\ntest开始..\ntest开始..\ntest开始..\ntest结束..\ntest结束..\ntest结束..\n```\n一切还是这么平静，没有看到synchronized 达到想要的结果。为什么？刚才讲到上面的两种方法是为了避免在多个线程操作**同一个对象**的时候同时访问一个代码块或者某个方法，但是在\n```java\nclass MyThread extends Thread {  \n  \n    public void run() {  \n        Sync sync = new Sync();  \n        sync.test();  \n    }  \n}  \n```\n中，每个线程都单独操作一个 Sync 对象，这样线程之间根本不会发生同步。怎么做呢？\n```java\nclass MyThread2 extends Thread {\n\t\n\tprivate Sync sync;\n\t\n\tpublic MyThread2(Sync sync) {\n\t\tthis.sync = sync;\n\t}\n\t  \n    public void run() {\n        sync.test();  \n    }  \n}\n```\n```java\nSync sync = new Sync();\nfor (int i = 0; i < 3; i++) {  \n    Thread thread = new MyThread2(sync);\n    thread.start();  \n}\n```\n输出结果如下：\n```\ntest开始..\ntest结束..\ntest开始..\ntest结束..\ntest开始..\ntest结束..\n```\n这样就达到预期了，多个线程在操作同一个对象的时候只有一个线程能够访问 test 方法。\n\n但是还有其他方法吗？也就是如何避免多个线程执行多个对象的同一个代码块呢。看看下面的代码：\n```java\npublic class Sync {\n\tpublic void test2() {\n\t\tsynchronized (Sync.class) { // 作用于 Sync 类的所有实例\n\t\t\tSystem.out.println(\"test2开始..\");\n\t\t\ttry {\n\t\t\t\tThread.sleep(1000);\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\tSystem.out.println(\"test2结束..\");\n\t\t}\n\t}\n}\n```\n```java\nclass MyThread3 extends Thread {  \n\t  \n    public void run() {  \n        Sync sync = new Sync();  \n        sync.test2();  \n    }  \n}\n```\n```java\nfor (int i = 0; i < 3; i++) {  \n    Thread thread = new MyThread3();\n    thread.start();  \n}\n```\n输出结果如下：\n```\ntest2开始..\ntest2结束..\ntest2开始..\ntest2结束..\ntest2开始..\ntest2结束..\n```\n这样就满足期望了，关键是\n```java\nsynchronized (Sync.class) { // 作用于 Sync 类的所有实例\n//...\n}\n```\n\n如果synchronized作用于某个静态方法上会有什么效果呢？\n```java\npublic static synchronized void test3() {\n\tSystem.out.println(\"test3开始..\");\n\ttry {\n\t\tThread.sleep(1000);\n\t} catch (InterruptedException e) {\n\t\te.printStackTrace();\n\t}\n\tSystem.out.println(\"test3结束..\");\n}\n```\n```java\nclass MyThread4 extends Thread {  \n\t  \n    public void run() {  \n        Sync.test3();  \n    }  \n}\n```\n```java\nfor (int i = 0; i < 3; i++) {  \n    Thread thread = new MyThread4();\n    thread.start();  \n}\n```\n输出结果如下：\n```\ntest3开始..\ntest3结束..\ntest3开始..\ntest3结束..\ntest3开始..\ntest3结束..\n```\n这同样能够满足期望，从上面的这些例子也很好说明了5种的synchronized区别和相同点。\n\n\n### 对 synchronized 的总结\n\n- 方法同步，锁当前对象（this）\n- 静态同步方法，锁当前类的Class对象\n- 对于同步代码块，锁住的是synchronized括号中的对象，任意对象，当前类对象或者是其他对象。\n\n参考如下：\n[Java:使用synchronized和Lock对象获取对象锁](http://zhangjunhd.blog.51cto.com/113473/70300)\n[线程同步总结--synchronized方法和synchronized代码块](http://991690137.iteye.com/blog/1948882)","slug":"Java中的 synchronizd 关键字用法","published":1,"updated":"2016-08-23T13:43:30.704Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfto0q74000c18c7gl80uzhg","content":"<h3 id=\"为什么要线程同步\"><a href=\"#为什么要线程同步\" class=\"headerlink\" title=\"为什么要线程同步\"></a>为什么要线程同步</h3><ul>\n<li>同步的目的是避免在同一个时间点操作同一个数据</li>\n<li>这里操作是指<code>update</code>，<code>delete</code>，数据是指任意对象</li>\n<li>每一个对象都有一把锁，<code>synchronized</code> 就是为此对象上锁，等到 <code>synchronized</code> 方法或<code>synchronized</code> 代码块执行完就会自动解锁，所有多线程执行相同带<code>synchronized</code>的代码时会检查所操作对象是否上锁，如果已经被锁住，就阻塞等待，直到锁此代码段的线程执行完此代码块。</li>\n</ul>\n<h3 id=\"synchronized-5种用法\"><a href=\"#synchronized-5种用法\" class=\"headerlink\" title=\"synchronized 5种用法\"></a>synchronized 5种用法</h3><ul>\n<li><p>用在普通方法上</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"> <span class=\"comment\">// 业务代码</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>用在静态方法上</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">test3</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"> <span class=\"comment\">// 业务代码</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>用在代码块，括号里面是this</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span>(<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 业务代码</span></span><br><span class=\"line\">\t  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>用在代码块，括号里面是类的一个实例，和this类似</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test11</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  Sync sync = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">  <span class=\"keyword\">synchronized</span>(sync) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 业务代码</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>用在代码块，括号里面是类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">synchronized</span> (Sync.class) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 业务代码</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>synchronized 锁住的是括号里的对象，而不是代码。对于非静态的 synchronized 方法，锁的就是对象本身也就是this。</p>\n<p>当 synchronized 锁住一个对象后，别的线程如果也想拿到这个对象的锁，就必须等待这个线程执行完成释放锁，才能再次给对象加锁，这样才达到线程同步的目的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SynchronizedTest</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tPerson p = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"lin\"</span>, <span class=\"number\">15</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">say</span><span class=\"params\">()</span> </span>&#123;<span class=\"comment\">//相当于锁住this，效果和say3()一样，只要多个线程同时访问同一个SynchronizedTest实例（相当于this），就会发生不能同时访问此方法</span></span><br><span class=\"line\">\t\tSystem.out.println(p.getName());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">say2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">synchronized</span>(p) &#123;<span class=\"comment\">//相当于锁住p，只要多个线程同时访问此代码块且是同一个p，那么在同一时间，只有一个线程能对P进行操作。</span></span><br><span class=\"line\">\t\t\tSystem.out.println(p.getName());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">say3</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">synchronized</span>(<span class=\"keyword\">this</span>) &#123;<span class=\"comment\">//锁住this，效果和say()一样，只要多个线程同时访问同一个SynchronizedTest实例（this），就会发生不能同时访问此代码块</span></span><br><span class=\"line\">\t\t\tSystem.out.println(p.getName());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的三种用法都是为了避免在多个线程操作同一个对象的时候同时访问一个代码块或者某个方法。</p>\n<h3 id=\"误用-synchronized-的情况\"><a href=\"#误用-synchronized-的情况\" class=\"headerlink\" title=\"误用 synchronized 的情况\"></a>误用 synchronized 的情况</h3><p>下面的代码想要防止多个线程同时对某个代码块的访问，但是最后没有做到。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sync</span> </span>&#123;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"test开始..\"</span>);  </span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;  </span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">1000</span>);  </span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;  </span><br><span class=\"line\">            e.printStackTrace();  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"test结束..\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        Sync sync = <span class=\"keyword\">new</span> Sync();  </span><br><span class=\"line\">        sync.test();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;  </span><br><span class=\"line\">            Thread thread = <span class=\"keyword\">new</span> MyThread();  </span><br><span class=\"line\">            thread.start();  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">运行结果：</span><br><span class=\"line\">test开始..</span><br><span class=\"line\">test开始..</span><br><span class=\"line\">test开始..</span><br><span class=\"line\">test结束..</span><br><span class=\"line\">test结束..</span><br><span class=\"line\">test结束..</span><br></pre></td></tr></table></figure>\n<p>可以看出来，上面的程序起了三个线程，同时运行test方法，虽然test方法加上了synchronized，但是还是同时运行起来，貌似synchronized没起作用。</p>\n<p>将test方法改成如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span>(<span class=\"keyword\">this</span>)&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"test开始..\"</span>);  </span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;  </span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">1000</span>);  </span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;  </span><br><span class=\"line\">            e.printStackTrace();  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"test结束..\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">运行结果：</span><br><span class=\"line\">test开始..</span><br><span class=\"line\">test开始..</span><br><span class=\"line\">test开始..</span><br><span class=\"line\">test结束..</span><br><span class=\"line\">test结束..</span><br><span class=\"line\">test结束..</span><br></pre></td></tr></table></figure>\n<p>一切还是这么平静，没有看到synchronized 达到想要的结果。为什么？刚才讲到上面的两种方法是为了避免在多个线程操作<strong>同一个对象</strong>的时候同时访问一个代码块或者某个方法，但是在<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        Sync sync = <span class=\"keyword\">new</span> Sync();  </span><br><span class=\"line\">        sync.test();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>中，每个线程都单独操作一个 Sync 对象，这样线程之间根本不会发生同步。怎么做呢？<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread2</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Sync sync;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyThread2</span><span class=\"params\">(Sync sync)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.sync = sync;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        sync.test();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Sync sync = <span class=\"keyword\">new</span> Sync();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;  </span><br><span class=\"line\">    Thread thread = <span class=\"keyword\">new</span> MyThread2(sync);</span><br><span class=\"line\">    thread.start();  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test开始..</span><br><span class=\"line\">test结束..</span><br><span class=\"line\">test开始..</span><br><span class=\"line\">test结束..</span><br><span class=\"line\">test开始..</span><br><span class=\"line\">test结束..</span><br></pre></td></tr></table></figure></p>\n<p>这样就达到预期了，多个线程在操作同一个对象的时候只有一个线程能够访问 test 方法。</p>\n<p>但是还有其他方法吗？也就是如何避免多个线程执行多个对象的同一个代码块呢。看看下面的代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sync</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">synchronized</span> (Sync.class) &#123; <span class=\"comment\">// 作用于 Sync 类的所有实例</span></span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"test2开始..\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\tThread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"test2结束..\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread3</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;  </span><br><span class=\"line\">\t  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        Sync sync = <span class=\"keyword\">new</span> Sync();  </span><br><span class=\"line\">        sync.test2();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;  </span><br><span class=\"line\">    Thread thread = <span class=\"keyword\">new</span> MyThread3();</span><br><span class=\"line\">    thread.start();  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test2开始..</span><br><span class=\"line\">test2结束..</span><br><span class=\"line\">test2开始..</span><br><span class=\"line\">test2结束..</span><br><span class=\"line\">test2开始..</span><br><span class=\"line\">test2结束..</span><br></pre></td></tr></table></figure></p>\n<p>这样就满足期望了，关键是<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">synchronized</span> (Sync.class) &#123; <span class=\"comment\">// 作用于 Sync 类的所有实例</span></span><br><span class=\"line\"><span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>如果synchronized作用于某个静态方法上会有什么效果呢？<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">test3</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"test3开始..\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\tThread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">\t\te.printStackTrace();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"test3结束..\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread4</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;  </span><br><span class=\"line\">\t  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        Sync.test3();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;  </span><br><span class=\"line\">    Thread thread = <span class=\"keyword\">new</span> MyThread4();</span><br><span class=\"line\">    thread.start();  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test3开始..</span><br><span class=\"line\">test3结束..</span><br><span class=\"line\">test3开始..</span><br><span class=\"line\">test3结束..</span><br><span class=\"line\">test3开始..</span><br><span class=\"line\">test3结束..</span><br></pre></td></tr></table></figure></p>\n<p>这同样能够满足期望，从上面的这些例子也很好说明了5种的synchronized区别和相同点。</p>\n<h3 id=\"对-synchronized-的总结\"><a href=\"#对-synchronized-的总结\" class=\"headerlink\" title=\"对 synchronized 的总结\"></a>对 synchronized 的总结</h3><ul>\n<li>方法同步，锁当前对象（this）</li>\n<li>静态同步方法，锁当前类的Class对象</li>\n<li>对于同步代码块，锁住的是synchronized括号中的对象，任意对象，当前类对象或者是其他对象。</li>\n</ul>\n<p>参考如下：<br><a href=\"http://zhangjunhd.blog.51cto.com/113473/70300\" target=\"_blank\" rel=\"external\">Java:使用synchronized和Lock对象获取对象锁</a><br><a href=\"http://991690137.iteye.com/blog/1948882\" target=\"_blank\" rel=\"external\">线程同步总结–synchronized方法和synchronized代码块</a></p>\n","excerpt":"","more":"<h3 id=\"为什么要线程同步\"><a href=\"#为什么要线程同步\" class=\"headerlink\" title=\"为什么要线程同步\"></a>为什么要线程同步</h3><ul>\n<li>同步的目的是避免在同一个时间点操作同一个数据</li>\n<li>这里操作是指<code>update</code>，<code>delete</code>，数据是指任意对象</li>\n<li>每一个对象都有一把锁，<code>synchronized</code> 就是为此对象上锁，等到 <code>synchronized</code> 方法或<code>synchronized</code> 代码块执行完就会自动解锁，所有多线程执行相同带<code>synchronized</code>的代码时会检查所操作对象是否上锁，如果已经被锁住，就阻塞等待，直到锁此代码段的线程执行完此代码块。</li>\n</ul>\n<h3 id=\"synchronized-5种用法\"><a href=\"#synchronized-5种用法\" class=\"headerlink\" title=\"synchronized 5种用法\"></a>synchronized 5种用法</h3><ul>\n<li><p>用在普通方法上</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"> <span class=\"comment\">// 业务代码</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>用在静态方法上</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">test3</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"> <span class=\"comment\">// 业务代码</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>用在代码块，括号里面是this</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span>(<span class=\"keyword\">this</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 业务代码</span></span><br><span class=\"line\">\t  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>用在代码块，括号里面是类的一个实例，和this类似</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test11</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  Sync sync = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">  <span class=\"keyword\">synchronized</span>(sync) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 业务代码</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>用在代码块，括号里面是类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">synchronized</span> (Sync.class) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 业务代码</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>synchronized 锁住的是括号里的对象，而不是代码。对于非静态的 synchronized 方法，锁的就是对象本身也就是this。</p>\n<p>当 synchronized 锁住一个对象后，别的线程如果也想拿到这个对象的锁，就必须等待这个线程执行完成释放锁，才能再次给对象加锁，这样才达到线程同步的目的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SynchronizedTest</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tPerson p = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"lin\"</span>, <span class=\"number\">15</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">say</span><span class=\"params\">()</span> </span>&#123;<span class=\"comment\">//相当于锁住this，效果和say3()一样，只要多个线程同时访问同一个SynchronizedTest实例（相当于this），就会发生不能同时访问此方法</span></span><br><span class=\"line\">\t\tSystem.out.println(p.getName());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">say2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">synchronized</span>(p) &#123;<span class=\"comment\">//相当于锁住p，只要多个线程同时访问此代码块且是同一个p，那么在同一时间，只有一个线程能对P进行操作。</span></span><br><span class=\"line\">\t\t\tSystem.out.println(p.getName());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">say3</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">synchronized</span>(<span class=\"keyword\">this</span>) &#123;<span class=\"comment\">//锁住this，效果和say()一样，只要多个线程同时访问同一个SynchronizedTest实例（this），就会发生不能同时访问此代码块</span></span><br><span class=\"line\">\t\t\tSystem.out.println(p.getName());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的三种用法都是为了避免在多个线程操作同一个对象的时候同时访问一个代码块或者某个方法。</p>\n<h3 id=\"误用-synchronized-的情况\"><a href=\"#误用-synchronized-的情况\" class=\"headerlink\" title=\"误用 synchronized 的情况\"></a>误用 synchronized 的情况</h3><p>下面的代码想要防止多个线程同时对某个代码块的访问，但是最后没有做到。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sync</span> </span>&#123;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"test开始..\"</span>);  </span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;  </span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">1000</span>);  </span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;  </span><br><span class=\"line\">            e.printStackTrace();  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"test结束..\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        Sync sync = <span class=\"keyword\">new</span> Sync();  </span><br><span class=\"line\">        sync.test();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;  </span><br><span class=\"line\">            Thread thread = <span class=\"keyword\">new</span> MyThread();  </span><br><span class=\"line\">            thread.start();  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">运行结果：</span><br><span class=\"line\">test开始..</span><br><span class=\"line\">test开始..</span><br><span class=\"line\">test开始..</span><br><span class=\"line\">test结束..</span><br><span class=\"line\">test结束..</span><br><span class=\"line\">test结束..</span><br></pre></td></tr></table></figure>\n<p>可以看出来，上面的程序起了三个线程，同时运行test方法，虽然test方法加上了synchronized，但是还是同时运行起来，貌似synchronized没起作用。</p>\n<p>将test方法改成如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span>(<span class=\"keyword\">this</span>)&#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"test开始..\"</span>);  </span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;  </span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">1000</span>);  </span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;  </span><br><span class=\"line\">            e.printStackTrace();  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"test结束..\"</span>);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">运行结果：</span><br><span class=\"line\">test开始..</span><br><span class=\"line\">test开始..</span><br><span class=\"line\">test开始..</span><br><span class=\"line\">test结束..</span><br><span class=\"line\">test结束..</span><br><span class=\"line\">test结束..</span><br></pre></td></tr></table></figure>\n<p>一切还是这么平静，没有看到synchronized 达到想要的结果。为什么？刚才讲到上面的两种方法是为了避免在多个线程操作<strong>同一个对象</strong>的时候同时访问一个代码块或者某个方法，但是在<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        Sync sync = <span class=\"keyword\">new</span> Sync();  </span><br><span class=\"line\">        sync.test();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>中，每个线程都单独操作一个 Sync 对象，这样线程之间根本不会发生同步。怎么做呢？<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread2</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Sync sync;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyThread2</span><span class=\"params\">(Sync sync)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.sync = sync;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        sync.test();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Sync sync = <span class=\"keyword\">new</span> Sync();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;  </span><br><span class=\"line\">    Thread thread = <span class=\"keyword\">new</span> MyThread2(sync);</span><br><span class=\"line\">    thread.start();  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test开始..</span><br><span class=\"line\">test结束..</span><br><span class=\"line\">test开始..</span><br><span class=\"line\">test结束..</span><br><span class=\"line\">test开始..</span><br><span class=\"line\">test结束..</span><br></pre></td></tr></table></figure></p>\n<p>这样就达到预期了，多个线程在操作同一个对象的时候只有一个线程能够访问 test 方法。</p>\n<p>但是还有其他方法吗？也就是如何避免多个线程执行多个对象的同一个代码块呢。看看下面的代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sync</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">synchronized</span> (Sync.class) &#123; <span class=\"comment\">// 作用于 Sync 类的所有实例</span></span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"test2开始..\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\tThread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"test2结束..\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread3</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;  </span><br><span class=\"line\">\t  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        Sync sync = <span class=\"keyword\">new</span> Sync();  </span><br><span class=\"line\">        sync.test2();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;  </span><br><span class=\"line\">    Thread thread = <span class=\"keyword\">new</span> MyThread3();</span><br><span class=\"line\">    thread.start();  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test2开始..</span><br><span class=\"line\">test2结束..</span><br><span class=\"line\">test2开始..</span><br><span class=\"line\">test2结束..</span><br><span class=\"line\">test2开始..</span><br><span class=\"line\">test2结束..</span><br></pre></td></tr></table></figure></p>\n<p>这样就满足期望了，关键是<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">synchronized</span> (Sync.class) &#123; <span class=\"comment\">// 作用于 Sync 类的所有实例</span></span><br><span class=\"line\"><span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>如果synchronized作用于某个静态方法上会有什么效果呢？<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">test3</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"test3开始..\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\tThread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">\t\te.printStackTrace();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"test3结束..\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread4</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span> </span>&#123;  </span><br><span class=\"line\">\t  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;  </span><br><span class=\"line\">        Sync.test3();  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;  </span><br><span class=\"line\">    Thread thread = <span class=\"keyword\">new</span> MyThread4();</span><br><span class=\"line\">    thread.start();  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test3开始..</span><br><span class=\"line\">test3结束..</span><br><span class=\"line\">test3开始..</span><br><span class=\"line\">test3结束..</span><br><span class=\"line\">test3开始..</span><br><span class=\"line\">test3结束..</span><br></pre></td></tr></table></figure></p>\n<p>这同样能够满足期望，从上面的这些例子也很好说明了5种的synchronized区别和相同点。</p>\n<h3 id=\"对-synchronized-的总结\"><a href=\"#对-synchronized-的总结\" class=\"headerlink\" title=\"对 synchronized 的总结\"></a>对 synchronized 的总结</h3><ul>\n<li>方法同步，锁当前对象（this）</li>\n<li>静态同步方法，锁当前类的Class对象</li>\n<li>对于同步代码块，锁住的是synchronized括号中的对象，任意对象，当前类对象或者是其他对象。</li>\n</ul>\n<p>参考如下：<br><a href=\"http://zhangjunhd.blog.51cto.com/113473/70300\">Java:使用synchronized和Lock对象获取对象锁</a><br><a href=\"http://991690137.iteye.com/blog/1948882\">线程同步总结–synchronized方法和synchronized代码块</a></p>\n"},{"title":"Log4j向Logstash发送日志实践","title_url":"log4j-logstash-practice","date":"2016-07-04T16:00:00.000Z","description":"Log4j向Logstash发送日志实践","_content":"\n## 在logstash中配置log4j\n\n- 在logstash的配置文件中增加如下配置\n```\ninput {\n  stdin {\n  }\n  log4j {\n    type => \"log4j-test\"\n    port => 4560\n  }\n}\n\nfilter {\n  grok {\n    match => { \"message\" => \"%{COMBINEDAPACHELOG}\" }\n  }\n}\n\noutput {\n  elasticsearch {\n        hosts => [\"localhost:9200\"]\n        index => \"logstash-%{type}-%{+YYYY.MM.dd}\"\n\t\tdocument_type => \"%{type}\"\n  }\n  stdout { codec => rubydebug }\n}\n```\n- 其中`input`下的`port`表示本机开放4560端口接收网络中其他主机应用程序中log4j发送过来的日志，也可以指定其他未被占用的端口，`type` 为接收的日志起的别名\n\n- `output`下的`elasticsearch`部分表示logstash将接收的日志发送给本机的elasticsearch，其端口为9200，`index` 表示生成索引的名称\n\n- 这里的配置是服务器模式，也就是logstash作为日志服务器开放一个端口，网络中其他主机主动发送日志\n\n## 在应用中配置 log4j\n\n- log4j用SocketAppender将日志发送到指定的主机和端口，在log4j.xml中配置如下\n```xml\n<appender name=\"LOGSTASH\" class=\"org.apache.log4j.net.SocketAppender\">\n\t<param name=\"RemoteHost\" value=\"192.168.37.118\"/>\n\t<param name=\"Port\" value=\"4560\"/>\t\n\t<param name=\"ReconnectionDelay\" value=\"10000\"/>\n\t<param name=\"LocationInfo\" value=\"true\"/>\n\t<param name=\"Threshold\" value=\"INFO\"/>\n\t<param name=\"Application\" value=\"web-api\" />\n</appender>\n```\n\n- 其中`RemoteHost`和`Port`表示logstash主机的ip和开放的端口，`Threshold` 表示将何种等级的日志发送到logstash，`Application`表示日志来源于哪个应用\n\n- 如果使用log4j.properties文件，配置如下\n```\nlog4j.appender.socket=org.apache.log4j.net.SocketAppender  \nlog4j.appender.socket.RemoteHost=192.168.37.118\nlog4j.appender.socket.Port=4560\nlog4j.appender.socket.ReconnectionDelay=10000\nlog4j.appender.socket.LocationInfo=true\nlog4j.appender.socket.Threshold=INFO\nlog4j.appender.socket.Application=web-api\n```\n\n- 关于`SocketAppender`中的`RemoteHost`和`Port`等字段的含义参考`SocketAppender`的源码\n\n\n参考如下：\n\n[logstash的log4j插件使用说明](https://www.elastic.co/guide/en/logstash/current/plugins-inputs-log4j.html)\n\n","source":"_posts/Log4j向Logstash发送日志实践.md","raw":"---\ntitle: Log4j向Logstash发送日志实践\ntitle_url: log4j-logstash-practice\ndate: 2016-07-05\ntags: [Log4j,Logstash]\ncategories: 技术\ndescription: Log4j向Logstash发送日志实践\n---\n\n## 在logstash中配置log4j\n\n- 在logstash的配置文件中增加如下配置\n```\ninput {\n  stdin {\n  }\n  log4j {\n    type => \"log4j-test\"\n    port => 4560\n  }\n}\n\nfilter {\n  grok {\n    match => { \"message\" => \"%{COMBINEDAPACHELOG}\" }\n  }\n}\n\noutput {\n  elasticsearch {\n        hosts => [\"localhost:9200\"]\n        index => \"logstash-%{type}-%{+YYYY.MM.dd}\"\n\t\tdocument_type => \"%{type}\"\n  }\n  stdout { codec => rubydebug }\n}\n```\n- 其中`input`下的`port`表示本机开放4560端口接收网络中其他主机应用程序中log4j发送过来的日志，也可以指定其他未被占用的端口，`type` 为接收的日志起的别名\n\n- `output`下的`elasticsearch`部分表示logstash将接收的日志发送给本机的elasticsearch，其端口为9200，`index` 表示生成索引的名称\n\n- 这里的配置是服务器模式，也就是logstash作为日志服务器开放一个端口，网络中其他主机主动发送日志\n\n## 在应用中配置 log4j\n\n- log4j用SocketAppender将日志发送到指定的主机和端口，在log4j.xml中配置如下\n```xml\n<appender name=\"LOGSTASH\" class=\"org.apache.log4j.net.SocketAppender\">\n\t<param name=\"RemoteHost\" value=\"192.168.37.118\"/>\n\t<param name=\"Port\" value=\"4560\"/>\t\n\t<param name=\"ReconnectionDelay\" value=\"10000\"/>\n\t<param name=\"LocationInfo\" value=\"true\"/>\n\t<param name=\"Threshold\" value=\"INFO\"/>\n\t<param name=\"Application\" value=\"web-api\" />\n</appender>\n```\n\n- 其中`RemoteHost`和`Port`表示logstash主机的ip和开放的端口，`Threshold` 表示将何种等级的日志发送到logstash，`Application`表示日志来源于哪个应用\n\n- 如果使用log4j.properties文件，配置如下\n```\nlog4j.appender.socket=org.apache.log4j.net.SocketAppender  \nlog4j.appender.socket.RemoteHost=192.168.37.118\nlog4j.appender.socket.Port=4560\nlog4j.appender.socket.ReconnectionDelay=10000\nlog4j.appender.socket.LocationInfo=true\nlog4j.appender.socket.Threshold=INFO\nlog4j.appender.socket.Application=web-api\n```\n\n- 关于`SocketAppender`中的`RemoteHost`和`Port`等字段的含义参考`SocketAppender`的源码\n\n\n参考如下：\n\n[logstash的log4j插件使用说明](https://www.elastic.co/guide/en/logstash/current/plugins-inputs-log4j.html)\n\n","slug":"Log4j向Logstash发送日志实践","published":1,"updated":"2016-08-23T13:43:30.704Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfto0q7a000e18c7hh8ysf3p","content":"<h2 id=\"在logstash中配置log4j\"><a href=\"#在logstash中配置log4j\" class=\"headerlink\" title=\"在logstash中配置log4j\"></a>在logstash中配置log4j</h2><ul>\n<li><p>在logstash的配置文件中增加如下配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">input &#123;</span><br><span class=\"line\">  stdin &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  log4j &#123;</span><br><span class=\"line\">    type =&gt; &quot;log4j-test&quot;</span><br><span class=\"line\">    port =&gt; 4560</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">filter &#123;</span><br><span class=\"line\">  grok &#123;</span><br><span class=\"line\">    match =&gt; &#123; &quot;message&quot; =&gt; &quot;%&#123;COMBINEDAPACHELOG&#125;&quot; &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">output &#123;</span><br><span class=\"line\">  elasticsearch &#123;</span><br><span class=\"line\">        hosts =&gt; [&quot;localhost:9200&quot;]</span><br><span class=\"line\">        index =&gt; &quot;logstash-%&#123;type&#125;-%&#123;+YYYY.MM.dd&#125;&quot;</span><br><span class=\"line\">\t\tdocument_type =&gt; &quot;%&#123;type&#125;&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  stdout &#123; codec =&gt; rubydebug &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>其中<code>input</code>下的<code>port</code>表示本机开放4560端口接收网络中其他主机应用程序中log4j发送过来的日志，也可以指定其他未被占用的端口，<code>type</code> 为接收的日志起的别名</p>\n</li>\n<li><p><code>output</code>下的<code>elasticsearch</code>部分表示logstash将接收的日志发送给本机的elasticsearch，其端口为9200，<code>index</code> 表示生成索引的名称</p>\n</li>\n<li><p>这里的配置是服务器模式，也就是logstash作为日志服务器开放一个端口，网络中其他主机主动发送日志</p>\n</li>\n</ul>\n<h2 id=\"在应用中配置-log4j\"><a href=\"#在应用中配置-log4j\" class=\"headerlink\" title=\"在应用中配置 log4j\"></a>在应用中配置 log4j</h2><ul>\n<li><p>log4j用SocketAppender将日志发送到指定的主机和端口，在log4j.xml中配置如下</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"LOGSTASH\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.apache.log4j.net.SocketAppender\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"RemoteHost\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"192.168.37.118\"</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Port\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"4560\"</span>/&gt;</span>\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"ReconnectionDelay\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"10000\"</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"LocationInfo\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Threshold\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"INFO\"</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Application\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"web-api\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>其中<code>RemoteHost</code>和<code>Port</code>表示logstash主机的ip和开放的端口，<code>Threshold</code> 表示将何种等级的日志发送到logstash，<code>Application</code>表示日志来源于哪个应用</p>\n</li>\n<li><p>如果使用log4j.properties文件，配置如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">log4j.appender.socket=org.apache.log4j.net.SocketAppender  </span><br><span class=\"line\">log4j.appender.socket.RemoteHost=192.168.37.118</span><br><span class=\"line\">log4j.appender.socket.Port=4560</span><br><span class=\"line\">log4j.appender.socket.ReconnectionDelay=10000</span><br><span class=\"line\">log4j.appender.socket.LocationInfo=true</span><br><span class=\"line\">log4j.appender.socket.Threshold=INFO</span><br><span class=\"line\">log4j.appender.socket.Application=web-api</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>关于<code>SocketAppender</code>中的<code>RemoteHost</code>和<code>Port</code>等字段的含义参考<code>SocketAppender</code>的源码</p>\n</li>\n</ul>\n<p>参考如下：</p>\n<p><a href=\"https://www.elastic.co/guide/en/logstash/current/plugins-inputs-log4j.html\" target=\"_blank\" rel=\"external\">logstash的log4j插件使用说明</a></p>\n","excerpt":"","more":"<h2 id=\"在logstash中配置log4j\"><a href=\"#在logstash中配置log4j\" class=\"headerlink\" title=\"在logstash中配置log4j\"></a>在logstash中配置log4j</h2><ul>\n<li><p>在logstash的配置文件中增加如下配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">input &#123;</span><br><span class=\"line\">  stdin &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  log4j &#123;</span><br><span class=\"line\">    type =&gt; &quot;log4j-test&quot;</span><br><span class=\"line\">    port =&gt; 4560</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">filter &#123;</span><br><span class=\"line\">  grok &#123;</span><br><span class=\"line\">    match =&gt; &#123; &quot;message&quot; =&gt; &quot;%&#123;COMBINEDAPACHELOG&#125;&quot; &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">output &#123;</span><br><span class=\"line\">  elasticsearch &#123;</span><br><span class=\"line\">        hosts =&gt; [&quot;localhost:9200&quot;]</span><br><span class=\"line\">        index =&gt; &quot;logstash-%&#123;type&#125;-%&#123;+YYYY.MM.dd&#125;&quot;</span><br><span class=\"line\">\t\tdocument_type =&gt; &quot;%&#123;type&#125;&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  stdout &#123; codec =&gt; rubydebug &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>其中<code>input</code>下的<code>port</code>表示本机开放4560端口接收网络中其他主机应用程序中log4j发送过来的日志，也可以指定其他未被占用的端口，<code>type</code> 为接收的日志起的别名</p>\n</li>\n<li><p><code>output</code>下的<code>elasticsearch</code>部分表示logstash将接收的日志发送给本机的elasticsearch，其端口为9200，<code>index</code> 表示生成索引的名称</p>\n</li>\n<li><p>这里的配置是服务器模式，也就是logstash作为日志服务器开放一个端口，网络中其他主机主动发送日志</p>\n</li>\n</ul>\n<h2 id=\"在应用中配置-log4j\"><a href=\"#在应用中配置-log4j\" class=\"headerlink\" title=\"在应用中配置 log4j\"></a>在应用中配置 log4j</h2><ul>\n<li><p>log4j用SocketAppender将日志发送到指定的主机和端口，在log4j.xml中配置如下</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"LOGSTASH\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.apache.log4j.net.SocketAppender\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"RemoteHost\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"192.168.37.118\"</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Port\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"4560\"</span>/&gt;</span>\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"ReconnectionDelay\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"10000\"</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"LocationInfo\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Threshold\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"INFO\"</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Application\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"web-api\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>其中<code>RemoteHost</code>和<code>Port</code>表示logstash主机的ip和开放的端口，<code>Threshold</code> 表示将何种等级的日志发送到logstash，<code>Application</code>表示日志来源于哪个应用</p>\n</li>\n<li><p>如果使用log4j.properties文件，配置如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">log4j.appender.socket=org.apache.log4j.net.SocketAppender  </span><br><span class=\"line\">log4j.appender.socket.RemoteHost=192.168.37.118</span><br><span class=\"line\">log4j.appender.socket.Port=4560</span><br><span class=\"line\">log4j.appender.socket.ReconnectionDelay=10000</span><br><span class=\"line\">log4j.appender.socket.LocationInfo=true</span><br><span class=\"line\">log4j.appender.socket.Threshold=INFO</span><br><span class=\"line\">log4j.appender.socket.Application=web-api</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>关于<code>SocketAppender</code>中的<code>RemoteHost</code>和<code>Port</code>等字段的含义参考<code>SocketAppender</code>的源码</p>\n</li>\n</ul>\n<p>参考如下：</p>\n<p><a href=\"https://www.elastic.co/guide/en/logstash/current/plugins-inputs-log4j.html\">logstash的log4j插件使用说明</a></p>\n"},{"title":"MariaDB 在 RedHat Linux 上的安装过程以及 MySQL 相关命令的使用","title_url":"Linux-MariaDB-setup-MySql","date":"2017-05-14T16:00:00.000Z","description":"MariaDB 在 RedHat Linux 上的安装过程以及 MySQL 相关命令的使用","_content":"\n## 安装\n\n```\nyum install mariadb-server mariadb\n```\n如果提示已经有存在的包了,通过以下命令卸载\n\n```\nyum -y remove mysql-libs*\n```\n\n## 启动 MariaDB.service\n\n```\nsystemctl start mariadb.service\n```\n\n## 设置开机启动 MariaDB.service\n\n```\nsystemctl enable mariadb.service\n```\n\n## 验证是否安装成功\n\n```\nps -wef | grep mariadb | grep -v grep\n```\n\n## 修改root密码\n\nMariaDB Server 默认root密码为空,这里通过登入mysql后修改密码\n\n```\n[root@localhost ~]# mysql -u root\n```\n\n输入上面的命令后提示 `MariaDB [(none)]>`,然后输入以下命令:\n\n```\nuse mysql;\nupdate user set password=PASSWORD('new_password') where User='root';\nflush privileges;\nquit\n```\n\n## 通过命令登录mysql\n\n```\n[root@localhost ~]# mysql -u root -p\n```\n\n输入上面的命令后提示输入密码.\n\n\n## mysql 命令行窗口基本使用\n\n- `show databases;` 显示数据库列表\n- `use datamonitor;` 切换到指定的数据库\n- `show tables;` 显示某个数据库下所有\n- `desc dm_mail_info;` 显示某个表的详细信息\n- `source /etc/appData/datamonitor.sql` 将sql备份数据导入到数据库中\n\n## 参考\n\n- [RedHat Linux RPM方式安装MySQL5.6](http://blog.csdn.net/chenjinge7/article/details/46582527)","source":"_posts/MariaDB 在 RedHat Linux 上的安装过程以及 MySQL 相关命令的使用.md","raw":"---\ntitle: MariaDB 在 RedHat Linux 上的安装过程以及 MySQL 相关命令的使用\ntitle_url: Linux-MariaDB-setup-MySql\ndate: 2017-05-15\ntags: [Linux,MariaDB,MySql]\ncategories: 技术\ndescription: MariaDB 在 RedHat Linux 上的安装过程以及 MySQL 相关命令的使用\n---\n\n## 安装\n\n```\nyum install mariadb-server mariadb\n```\n如果提示已经有存在的包了,通过以下命令卸载\n\n```\nyum -y remove mysql-libs*\n```\n\n## 启动 MariaDB.service\n\n```\nsystemctl start mariadb.service\n```\n\n## 设置开机启动 MariaDB.service\n\n```\nsystemctl enable mariadb.service\n```\n\n## 验证是否安装成功\n\n```\nps -wef | grep mariadb | grep -v grep\n```\n\n## 修改root密码\n\nMariaDB Server 默认root密码为空,这里通过登入mysql后修改密码\n\n```\n[root@localhost ~]# mysql -u root\n```\n\n输入上面的命令后提示 `MariaDB [(none)]>`,然后输入以下命令:\n\n```\nuse mysql;\nupdate user set password=PASSWORD('new_password') where User='root';\nflush privileges;\nquit\n```\n\n## 通过命令登录mysql\n\n```\n[root@localhost ~]# mysql -u root -p\n```\n\n输入上面的命令后提示输入密码.\n\n\n## mysql 命令行窗口基本使用\n\n- `show databases;` 显示数据库列表\n- `use datamonitor;` 切换到指定的数据库\n- `show tables;` 显示某个数据库下所有\n- `desc dm_mail_info;` 显示某个表的详细信息\n- `source /etc/appData/datamonitor.sql` 将sql备份数据导入到数据库中\n\n## 参考\n\n- [RedHat Linux RPM方式安装MySQL5.6](http://blog.csdn.net/chenjinge7/article/details/46582527)","slug":"MariaDB 在 RedHat Linux 上的安装过程以及 MySQL 相关命令的使用","published":1,"updated":"2017-06-20T14:11:13.891Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfto0q7f000i18c7b4lsdge3","content":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install mariadb-server mariadb</span><br></pre></td></tr></table></figure>\n<p>如果提示已经有存在的包了,通过以下命令卸载</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y remove mysql-libs*</span><br></pre></td></tr></table></figure>\n<h2 id=\"启动-MariaDB-service\"><a href=\"#启动-MariaDB-service\" class=\"headerlink\" title=\"启动 MariaDB.service\"></a>启动 MariaDB.service</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start mariadb.service</span><br></pre></td></tr></table></figure>\n<h2 id=\"设置开机启动-MariaDB-service\"><a href=\"#设置开机启动-MariaDB-service\" class=\"headerlink\" title=\"设置开机启动 MariaDB.service\"></a>设置开机启动 MariaDB.service</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable mariadb.service</span><br></pre></td></tr></table></figure>\n<h2 id=\"验证是否安装成功\"><a href=\"#验证是否安装成功\" class=\"headerlink\" title=\"验证是否安装成功\"></a>验证是否安装成功</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -wef | grep mariadb | grep -v grep</span><br></pre></td></tr></table></figure>\n<h2 id=\"修改root密码\"><a href=\"#修改root密码\" class=\"headerlink\" title=\"修改root密码\"></a>修改root密码</h2><p>MariaDB Server 默认root密码为空,这里通过登入mysql后修改密码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# mysql -u root</span><br></pre></td></tr></table></figure>\n<p>输入上面的命令后提示 <code>MariaDB [(none)]&gt;</code>,然后输入以下命令:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use mysql;</span><br><span class=\"line\">update user set password=PASSWORD(&apos;new_password&apos;) where User=&apos;root&apos;;</span><br><span class=\"line\">flush privileges;</span><br><span class=\"line\">quit</span><br></pre></td></tr></table></figure>\n<h2 id=\"通过命令登录mysql\"><a href=\"#通过命令登录mysql\" class=\"headerlink\" title=\"通过命令登录mysql\"></a>通过命令登录mysql</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# mysql -u root -p</span><br></pre></td></tr></table></figure>\n<p>输入上面的命令后提示输入密码.</p>\n<h2 id=\"mysql-命令行窗口基本使用\"><a href=\"#mysql-命令行窗口基本使用\" class=\"headerlink\" title=\"mysql 命令行窗口基本使用\"></a>mysql 命令行窗口基本使用</h2><ul>\n<li><code>show databases;</code> 显示数据库列表</li>\n<li><code>use datamonitor;</code> 切换到指定的数据库</li>\n<li><code>show tables;</code> 显示某个数据库下所有</li>\n<li><code>desc dm_mail_info;</code> 显示某个表的详细信息</li>\n<li><code>source /etc/appData/datamonitor.sql</code> 将sql备份数据导入到数据库中</li>\n</ul>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"http://blog.csdn.net/chenjinge7/article/details/46582527\" target=\"_blank\" rel=\"external\">RedHat Linux RPM方式安装MySQL5.6</a></li>\n</ul>\n","excerpt":"","more":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install mariadb-server mariadb</span><br></pre></td></tr></table></figure>\n<p>如果提示已经有存在的包了,通过以下命令卸载</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y remove mysql-libs*</span><br></pre></td></tr></table></figure>\n<h2 id=\"启动-MariaDB-service\"><a href=\"#启动-MariaDB-service\" class=\"headerlink\" title=\"启动 MariaDB.service\"></a>启动 MariaDB.service</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start mariadb.service</span><br></pre></td></tr></table></figure>\n<h2 id=\"设置开机启动-MariaDB-service\"><a href=\"#设置开机启动-MariaDB-service\" class=\"headerlink\" title=\"设置开机启动 MariaDB.service\"></a>设置开机启动 MariaDB.service</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable mariadb.service</span><br></pre></td></tr></table></figure>\n<h2 id=\"验证是否安装成功\"><a href=\"#验证是否安装成功\" class=\"headerlink\" title=\"验证是否安装成功\"></a>验证是否安装成功</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -wef | grep mariadb | grep -v grep</span><br></pre></td></tr></table></figure>\n<h2 id=\"修改root密码\"><a href=\"#修改root密码\" class=\"headerlink\" title=\"修改root密码\"></a>修改root密码</h2><p>MariaDB Server 默认root密码为空,这里通过登入mysql后修改密码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# mysql -u root</span><br></pre></td></tr></table></figure>\n<p>输入上面的命令后提示 <code>MariaDB [(none)]&gt;</code>,然后输入以下命令:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use mysql;</span><br><span class=\"line\">update user set password=PASSWORD(&apos;new_password&apos;) where User=&apos;root&apos;;</span><br><span class=\"line\">flush privileges;</span><br><span class=\"line\">quit</span><br></pre></td></tr></table></figure>\n<h2 id=\"通过命令登录mysql\"><a href=\"#通过命令登录mysql\" class=\"headerlink\" title=\"通过命令登录mysql\"></a>通过命令登录mysql</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# mysql -u root -p</span><br></pre></td></tr></table></figure>\n<p>输入上面的命令后提示输入密码.</p>\n<h2 id=\"mysql-命令行窗口基本使用\"><a href=\"#mysql-命令行窗口基本使用\" class=\"headerlink\" title=\"mysql 命令行窗口基本使用\"></a>mysql 命令行窗口基本使用</h2><ul>\n<li><code>show databases;</code> 显示数据库列表</li>\n<li><code>use datamonitor;</code> 切换到指定的数据库</li>\n<li><code>show tables;</code> 显示某个数据库下所有</li>\n<li><code>desc dm_mail_info;</code> 显示某个表的详细信息</li>\n<li><code>source /etc/appData/datamonitor.sql</code> 将sql备份数据导入到数据库中</li>\n</ul>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"http://blog.csdn.net/chenjinge7/article/details/46582527\">RedHat Linux RPM方式安装MySQL5.6</a></li>\n</ul>\n"},{"title":"PHP 基本语法","title_url":"PHP-basic","date":"2017-07-02T16:00:00.000Z","description":"PHP 基本语法","_content":"\n## => 含义\n\n=> 是用来数组赋值时用的，例子：\n```php\n<?php\n$arr = array(\"somearray\" => array(6 => 5, 13 => 9, \"a\" => 42));\necho $arr[\"somearray\"][6];    // 5\necho $arr[\"somearray\"][13];   // 9\necho $arr[\"somearray\"][\"a\"];  // 42\n?> \n\n$_POST = array(\"Peter\"=>\"35\",\"Ben\"=>\"37\",\"Joe\"=>\"43\");\nforeach($_POST AS $key=>$value){\n  echo \"data is \" . $key . $value;\n}\n// foreach是用来遍历数组的.这个是用来遍历$_POST数组.并把数组的键值放到$key中,值放到$value中\n```\n\n## -> 箭头操作符\n\n箭头操作符 -> 是对象里面用的,表示调用，例子：\n\n```php\n<?php\nclass foo {\n    function do_foo() {\n        echo \"Doing foo.\";\n    }\n}\n$bar = new foo();\n$bar->do_foo();\n?>\n```\n\n## .= 的意思\n\n表示字符串累加,类似于 +=，-=\n\n## 类型转换\n\n```php\necho (int)'abc1';  //输出0 \necho (int)'1abc'; //输出1 \necho (int)'2abc'; //输出2 \necho (int)'22abc'; //输出22 \n```\n\n如果将一个字符串强制转换成一个数字.PHP会去搜索这个字符串的开头.如果开头是数字就转换.如果不是就直接返回0.\n\n## . 点号\n\n用于连接字符串,先连接字符串再运算\n\n```php\necho '5+1=' . 1+5; //输出10 \necho '5+1=' . 5+1; //输出6 \necho '1+5=' . 1+5; //输出6 \necho '1+5=' . 5+1; //输出2 \n```\n具体是 `'5+1=' . 1` 连接字符串后变成 `5+11`, `5+11` 转成数字后变成 5, 最后 `5+5` 等于10\n\n## , 逗号\n\n用逗号是 `multiple parameters`. 也就是说是多参数.换句话说.\n逗号分隔开的就相当于是N个参数.也就是说把echo当个函数用.这样的话 echo 会对每个参数先进行计算.最后再进行连接后输出\n\n```php\necho '1+5=' . 1+5;  //输出 6\necho '1+5=' , 5+1;  //输出 1+5=6 \n```\n\n## @ at符号\n\n当php解释器遇到@开头的语句时候，无论本行的语句是否执行成功，都会继续执行后续的语句，而且不会报错。\n\n## :: 双冒号,两个冒号\n\n用于访问静态、const和类中重写的属性与方法, 类不需要实例化, 用箭头操作符`->`必须要将类进行实例化（或者在类的内部调用也可以） 。\n\n```php\n<?php\nclass MyClass {\n    const CONST_VALUE = 'A constant value';\n}\n\n$classname = 'MyClass';\necho $classname::CONST_VALUE; // 自 PHP 5.3.0 起\n\necho MyClass::CONST_VALUE;\n?>\n```\n\n## 构造函数和析构函数\n\n```php\n<?php\nclass MyDestructableClass {\n   function __construct() { // 构造函数\n       print \"In constructor\\n\";\n       $this->name = \"MyDestructableClass\";\n   }\n\n   function __destruct() { // 析构函数\n       print \"Destroying \" . $this->name . \"\\n\";\n   }\n}\n\n$obj = new MyDestructableClass();\n?>\n```\n\n## 命名空间 和 use\n\n```php\nnamespace Album\\Model;\nuse Zend\\InputFilter\\Factory as InputFactory;\nuse Zend\\InputFilter\\InputFilter;\nuse Zend\\InputFilter\\InputFilterAwareInterface;\nuse Zend\\InputFilter\\InputFilterInterface;\nclass Album implements InputFilterAwareInterface {\n\n}\n```\n\n## include 和 include_once\n\n使用方法：include \"文件路径\";\n\n函数作用：引入另一个php脚本文件，并执行里面的代码\n\n推荐使用：include_once \"文件路径\";\n\n```php\n// 自动加载控制器和模型类 \npublic static function loadClass($class) {\n    $frameworks = __DIR__ . '/' . $class . '.php';\n    $controllers = APP_PATH . 'application/controllers/' . $class . '.php';\n    $models = APP_PATH . 'application/models/' . $class . '.php';\n\n    if (file_exists($frameworks)) {\n        // 加载框架核心类\n        include $frameworks;\n    } elseif (file_exists($controllers)) {\n        // 加载应用控制器类\n        include $controllers;\n    } elseif (file_exists($models)) {\n        //加载应用模型类\n        include $models;\n    } else {\n        // 错误代码\n    }\n}\n```\n\n## require 和 require_once\n\n>最大的区别就是：include在引入不存文件时产生一个警告且脚本还会继续执行，require则会导致一个致命性错误且脚本停止执行。\n\n```php\n<?php  \ninclude_once '1.php';  \nrequire_once '1.php';  \ninclude '1.php';  \nrequire '1.php';  \n?>  \n```\n\n## 以下划线(_)开头的变量和方法\n\n加一个为私有的, 加两个一般都是系统默认的，系统预定义的.\n\n```php\n__LINE__ 表示文件中的当前行号。\n\n__FILE__ 表示文件的完整路径和文件名。\n\n__DIR__ 表示文件所在的目录。如果用在被包括文件中，则返回被包括的文件所在的目录。它等价于 dirname(__FILE__)。除非是根目录，否则目录中名不包括末尾的斜杠\n```\n\n另外 php规定以两个下划线（__）开头的方法都保留为**魔术方法**，\n\nPHP中的魔术方法有\n\n```php\n__construct,\n__destruct ,\n__call,\n__callStatic,\n__get, \n__set,\n__isset, \n__unset , \n__sleep,\n__wakeup, \n__toString,\n__set_state, \n__clone, \n__autoload\n```\n\n## array_merge和数组相加（+）\n\n- 键名是字符串：\n\n```php\n$arr1=array('a'=>'PHP');\n$arr2=array('a'=>'JAVA');\n//如果键名为字符，且键名相同，array_merge()后面数组元素值会覆盖前面数组元素值\nprint_r(array_merge($arr1,$arr2));//Array ( [a] => JAVA )\n//如果键名为字符，且键名相同，数组相加会将最先出现的值作为结果\nprint_r($arr1+$arr2);//Array ( [a] => PHP )\n```\n\n- 键名是数字：\n\n```php\n$arr1=array(\"C\",\"PHP\");\n$arr2=array(\"JAVA\",\"PHP\");\n//如果键名为数字，array_merge()不会进行覆盖\nprint_r(array_merge($arr1,$arr2));//Array ( [0] => C [1] => PHP [2] => JAVA [3] => PHP )\n//如果键名为数字，数组相加会将最先出现的值作为结果，后面键名相同的会被抛弃\nprint_r($arr1+$arr2);//Array ( [0] => C [1] => PHP )\n```\n\n## clone 关键字与 __clone() 方法\n\n- `clone` 关键字用于克隆一个完全一样的对象,而且克隆以后，两个对象互不干扰。\n\n- `__clone()` 如果想在克隆后改变克隆对象的内容，需要在类中添加一个特殊的 `__clone()` 方法来重写原本的属性和方法。`__clone()` 方法只会在对象被克隆的时候自动调用。\n\n```php\n<?php\nclass Person {\n    private $name;\n    private $age;\n\n    function __construct($name, $age) {\n        $this->name = $name;\n        $this->age = $age;\n    }\n\n    function say() {\n        echo \"我的名字叫：\".$this->name;\n\t    echo \"我的年龄是：\".$this->age.\"<br />\";\n    }\n    function __clone() {\n        $this->name = \"我是假的\".$this->name;\n        $this->age = 30;\n    }\n}\n\n$p1 = new Person(\"张三\", 20);\n$p1->say();\n$p2 = clone $p1;\n$p2->say();\n?>\n```\n\n运行例子，输出：\n\n```\n我的名字叫：张三 我的年龄是：20\n我的名字叫：我是假的张三 我的年龄是：30\n```\n\n## 参考\n\n- [php中双冒号的应用](http://blog.csdn.net/abandonship/article/details/6459370)\n- [构造函数和析构函数](http://php.net/manual/zh/language.oop5.decon.php#language.oop5.decon)\n- [PHP中用下划线开头的变量含义](http://blog.csdn.net/zlking02/article/details/6752256)\n- [PHP 1、array_merge和数组相加（+）](http://www.jianshu.com/p/43e9263f82c1)\n- [PHP 对象克隆 clone 关键字与 __clone() 方法](http://www.5idev.com/p-php_object_clone.shtml)\n- [PHP基础教程](http://www.5idev.com/php-phpbase.shtml)","source":"_posts/PHP 基本语法.md","raw":"---\ntitle: PHP 基本语法\ntitle_url: PHP-basic\ndate: 2017-07-03\ntags: PHP\ncategories: PHP\ndescription: PHP 基本语法\n---\n\n## => 含义\n\n=> 是用来数组赋值时用的，例子：\n```php\n<?php\n$arr = array(\"somearray\" => array(6 => 5, 13 => 9, \"a\" => 42));\necho $arr[\"somearray\"][6];    // 5\necho $arr[\"somearray\"][13];   // 9\necho $arr[\"somearray\"][\"a\"];  // 42\n?> \n\n$_POST = array(\"Peter\"=>\"35\",\"Ben\"=>\"37\",\"Joe\"=>\"43\");\nforeach($_POST AS $key=>$value){\n  echo \"data is \" . $key . $value;\n}\n// foreach是用来遍历数组的.这个是用来遍历$_POST数组.并把数组的键值放到$key中,值放到$value中\n```\n\n## -> 箭头操作符\n\n箭头操作符 -> 是对象里面用的,表示调用，例子：\n\n```php\n<?php\nclass foo {\n    function do_foo() {\n        echo \"Doing foo.\";\n    }\n}\n$bar = new foo();\n$bar->do_foo();\n?>\n```\n\n## .= 的意思\n\n表示字符串累加,类似于 +=，-=\n\n## 类型转换\n\n```php\necho (int)'abc1';  //输出0 \necho (int)'1abc'; //输出1 \necho (int)'2abc'; //输出2 \necho (int)'22abc'; //输出22 \n```\n\n如果将一个字符串强制转换成一个数字.PHP会去搜索这个字符串的开头.如果开头是数字就转换.如果不是就直接返回0.\n\n## . 点号\n\n用于连接字符串,先连接字符串再运算\n\n```php\necho '5+1=' . 1+5; //输出10 \necho '5+1=' . 5+1; //输出6 \necho '1+5=' . 1+5; //输出6 \necho '1+5=' . 5+1; //输出2 \n```\n具体是 `'5+1=' . 1` 连接字符串后变成 `5+11`, `5+11` 转成数字后变成 5, 最后 `5+5` 等于10\n\n## , 逗号\n\n用逗号是 `multiple parameters`. 也就是说是多参数.换句话说.\n逗号分隔开的就相当于是N个参数.也就是说把echo当个函数用.这样的话 echo 会对每个参数先进行计算.最后再进行连接后输出\n\n```php\necho '1+5=' . 1+5;  //输出 6\necho '1+5=' , 5+1;  //输出 1+5=6 \n```\n\n## @ at符号\n\n当php解释器遇到@开头的语句时候，无论本行的语句是否执行成功，都会继续执行后续的语句，而且不会报错。\n\n## :: 双冒号,两个冒号\n\n用于访问静态、const和类中重写的属性与方法, 类不需要实例化, 用箭头操作符`->`必须要将类进行实例化（或者在类的内部调用也可以） 。\n\n```php\n<?php\nclass MyClass {\n    const CONST_VALUE = 'A constant value';\n}\n\n$classname = 'MyClass';\necho $classname::CONST_VALUE; // 自 PHP 5.3.0 起\n\necho MyClass::CONST_VALUE;\n?>\n```\n\n## 构造函数和析构函数\n\n```php\n<?php\nclass MyDestructableClass {\n   function __construct() { // 构造函数\n       print \"In constructor\\n\";\n       $this->name = \"MyDestructableClass\";\n   }\n\n   function __destruct() { // 析构函数\n       print \"Destroying \" . $this->name . \"\\n\";\n   }\n}\n\n$obj = new MyDestructableClass();\n?>\n```\n\n## 命名空间 和 use\n\n```php\nnamespace Album\\Model;\nuse Zend\\InputFilter\\Factory as InputFactory;\nuse Zend\\InputFilter\\InputFilter;\nuse Zend\\InputFilter\\InputFilterAwareInterface;\nuse Zend\\InputFilter\\InputFilterInterface;\nclass Album implements InputFilterAwareInterface {\n\n}\n```\n\n## include 和 include_once\n\n使用方法：include \"文件路径\";\n\n函数作用：引入另一个php脚本文件，并执行里面的代码\n\n推荐使用：include_once \"文件路径\";\n\n```php\n// 自动加载控制器和模型类 \npublic static function loadClass($class) {\n    $frameworks = __DIR__ . '/' . $class . '.php';\n    $controllers = APP_PATH . 'application/controllers/' . $class . '.php';\n    $models = APP_PATH . 'application/models/' . $class . '.php';\n\n    if (file_exists($frameworks)) {\n        // 加载框架核心类\n        include $frameworks;\n    } elseif (file_exists($controllers)) {\n        // 加载应用控制器类\n        include $controllers;\n    } elseif (file_exists($models)) {\n        //加载应用模型类\n        include $models;\n    } else {\n        // 错误代码\n    }\n}\n```\n\n## require 和 require_once\n\n>最大的区别就是：include在引入不存文件时产生一个警告且脚本还会继续执行，require则会导致一个致命性错误且脚本停止执行。\n\n```php\n<?php  \ninclude_once '1.php';  \nrequire_once '1.php';  \ninclude '1.php';  \nrequire '1.php';  \n?>  \n```\n\n## 以下划线(_)开头的变量和方法\n\n加一个为私有的, 加两个一般都是系统默认的，系统预定义的.\n\n```php\n__LINE__ 表示文件中的当前行号。\n\n__FILE__ 表示文件的完整路径和文件名。\n\n__DIR__ 表示文件所在的目录。如果用在被包括文件中，则返回被包括的文件所在的目录。它等价于 dirname(__FILE__)。除非是根目录，否则目录中名不包括末尾的斜杠\n```\n\n另外 php规定以两个下划线（__）开头的方法都保留为**魔术方法**，\n\nPHP中的魔术方法有\n\n```php\n__construct,\n__destruct ,\n__call,\n__callStatic,\n__get, \n__set,\n__isset, \n__unset , \n__sleep,\n__wakeup, \n__toString,\n__set_state, \n__clone, \n__autoload\n```\n\n## array_merge和数组相加（+）\n\n- 键名是字符串：\n\n```php\n$arr1=array('a'=>'PHP');\n$arr2=array('a'=>'JAVA');\n//如果键名为字符，且键名相同，array_merge()后面数组元素值会覆盖前面数组元素值\nprint_r(array_merge($arr1,$arr2));//Array ( [a] => JAVA )\n//如果键名为字符，且键名相同，数组相加会将最先出现的值作为结果\nprint_r($arr1+$arr2);//Array ( [a] => PHP )\n```\n\n- 键名是数字：\n\n```php\n$arr1=array(\"C\",\"PHP\");\n$arr2=array(\"JAVA\",\"PHP\");\n//如果键名为数字，array_merge()不会进行覆盖\nprint_r(array_merge($arr1,$arr2));//Array ( [0] => C [1] => PHP [2] => JAVA [3] => PHP )\n//如果键名为数字，数组相加会将最先出现的值作为结果，后面键名相同的会被抛弃\nprint_r($arr1+$arr2);//Array ( [0] => C [1] => PHP )\n```\n\n## clone 关键字与 __clone() 方法\n\n- `clone` 关键字用于克隆一个完全一样的对象,而且克隆以后，两个对象互不干扰。\n\n- `__clone()` 如果想在克隆后改变克隆对象的内容，需要在类中添加一个特殊的 `__clone()` 方法来重写原本的属性和方法。`__clone()` 方法只会在对象被克隆的时候自动调用。\n\n```php\n<?php\nclass Person {\n    private $name;\n    private $age;\n\n    function __construct($name, $age) {\n        $this->name = $name;\n        $this->age = $age;\n    }\n\n    function say() {\n        echo \"我的名字叫：\".$this->name;\n\t    echo \"我的年龄是：\".$this->age.\"<br />\";\n    }\n    function __clone() {\n        $this->name = \"我是假的\".$this->name;\n        $this->age = 30;\n    }\n}\n\n$p1 = new Person(\"张三\", 20);\n$p1->say();\n$p2 = clone $p1;\n$p2->say();\n?>\n```\n\n运行例子，输出：\n\n```\n我的名字叫：张三 我的年龄是：20\n我的名字叫：我是假的张三 我的年龄是：30\n```\n\n## 参考\n\n- [php中双冒号的应用](http://blog.csdn.net/abandonship/article/details/6459370)\n- [构造函数和析构函数](http://php.net/manual/zh/language.oop5.decon.php#language.oop5.decon)\n- [PHP中用下划线开头的变量含义](http://blog.csdn.net/zlking02/article/details/6752256)\n- [PHP 1、array_merge和数组相加（+）](http://www.jianshu.com/p/43e9263f82c1)\n- [PHP 对象克隆 clone 关键字与 __clone() 方法](http://www.5idev.com/p-php_object_clone.shtml)\n- [PHP基础教程](http://www.5idev.com/php-phpbase.shtml)","slug":"PHP 基本语法","published":1,"updated":"2017-07-22T15:16:34.039Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfto0q7j000k18c7rnnt1zea","content":"<h2 id=\"gt-含义\"><a href=\"#gt-含义\" class=\"headerlink\" title=\"=&gt; 含义\"></a>=&gt; 含义</h2><p>=&gt; 是用来数组赋值时用的，例子：<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">$arr = <span class=\"keyword\">array</span>(<span class=\"string\">\"somearray\"</span> =&gt; <span class=\"keyword\">array</span>(<span class=\"number\">6</span> =&gt; <span class=\"number\">5</span>, <span class=\"number\">13</span> =&gt; <span class=\"number\">9</span>, <span class=\"string\">\"a\"</span> =&gt; <span class=\"number\">42</span>));</span><br><span class=\"line\"><span class=\"keyword\">echo</span> $arr[<span class=\"string\">\"somearray\"</span>][<span class=\"number\">6</span>];    <span class=\"comment\">// 5</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> $arr[<span class=\"string\">\"somearray\"</span>][<span class=\"number\">13</span>];   <span class=\"comment\">// 9</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> $arr[<span class=\"string\">\"somearray\"</span>][<span class=\"string\">\"a\"</span>];  <span class=\"comment\">// 42</span></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span> </span><br><span class=\"line\"></span><br><span class=\"line\">$_POST = <span class=\"keyword\">array</span>(<span class=\"string\">\"Peter\"</span>=&gt;<span class=\"string\">\"35\"</span>,<span class=\"string\">\"Ben\"</span>=&gt;<span class=\"string\">\"37\"</span>,<span class=\"string\">\"Joe\"</span>=&gt;<span class=\"string\">\"43\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">foreach</span>($_POST <span class=\"keyword\">AS</span> $key=&gt;$value)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">echo</span> <span class=\"string\">\"data is \"</span> . $key . $value;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// foreach是用来遍历数组的.这个是用来遍历$_POST数组.并把数组的键值放到$key中,值放到$value中</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"gt-箭头操作符\"><a href=\"#gt-箭头操作符\" class=\"headerlink\" title=\"-&gt; 箭头操作符\"></a>-&gt; 箭头操作符</h2><p>箭头操作符 -&gt; 是对象里面用的,表示调用，例子：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">foo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">do_foo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">\"Doing foo.\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$bar = <span class=\"keyword\">new</span> foo();</span><br><span class=\"line\">$bar-&gt;do_foo();</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"的意思\"><a href=\"#的意思\" class=\"headerlink\" title=\".= 的意思\"></a>.= 的意思</h2><p>表示字符串累加,类似于 +=，-=</p>\n<h2 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">echo</span> (int)<span class=\"string\">'abc1'</span>;  <span class=\"comment\">//输出0 </span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> (int)<span class=\"string\">'1abc'</span>; <span class=\"comment\">//输出1 </span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> (int)<span class=\"string\">'2abc'</span>; <span class=\"comment\">//输出2 </span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> (int)<span class=\"string\">'22abc'</span>; <span class=\"comment\">//输出22</span></span><br></pre></td></tr></table></figure>\n<p>如果将一个字符串强制转换成一个数字.PHP会去搜索这个字符串的开头.如果开头是数字就转换.如果不是就直接返回0.</p>\n<h2 id=\"点号\"><a href=\"#点号\" class=\"headerlink\" title=\". 点号\"></a>. 点号</h2><p>用于连接字符串,先连接字符串再运算</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">'5+1='</span> . <span class=\"number\">1</span>+<span class=\"number\">5</span>; <span class=\"comment\">//输出10 </span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">'5+1='</span> . <span class=\"number\">5</span>+<span class=\"number\">1</span>; <span class=\"comment\">//输出6 </span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">'1+5='</span> . <span class=\"number\">1</span>+<span class=\"number\">5</span>; <span class=\"comment\">//输出6 </span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">'1+5='</span> . <span class=\"number\">5</span>+<span class=\"number\">1</span>; <span class=\"comment\">//输出2</span></span><br></pre></td></tr></table></figure>\n<p>具体是 <code>&#39;5+1=&#39; . 1</code> 连接字符串后变成 <code>5+11</code>, <code>5+11</code> 转成数字后变成 5, 最后 <code>5+5</code> 等于10</p>\n<h2 id=\"逗号\"><a href=\"#逗号\" class=\"headerlink\" title=\", 逗号\"></a>, 逗号</h2><p>用逗号是 <code>multiple parameters</code>. 也就是说是多参数.换句话说.<br>逗号分隔开的就相当于是N个参数.也就是说把echo当个函数用.这样的话 echo 会对每个参数先进行计算.最后再进行连接后输出</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">'1+5='</span> . <span class=\"number\">1</span>+<span class=\"number\">5</span>;  <span class=\"comment\">//输出 6</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">'1+5='</span> , <span class=\"number\">5</span>+<span class=\"number\">1</span>;  <span class=\"comment\">//输出 1+5=6</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"at符号\"><a href=\"#at符号\" class=\"headerlink\" title=\"@ at符号\"></a>@ at符号</h2><p>当php解释器遇到@开头的语句时候，无论本行的语句是否执行成功，都会继续执行后续的语句，而且不会报错。</p>\n<h2 id=\"双冒号-两个冒号\"><a href=\"#双冒号-两个冒号\" class=\"headerlink\" title=\":: 双冒号,两个冒号\"></a>:: 双冒号,两个冒号</h2><p>用于访问静态、const和类中重写的属性与方法, 类不需要实例化, 用箭头操作符<code>-&gt;</code>必须要将类进行实例化（或者在类的内部调用也可以） 。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> CONST_VALUE = <span class=\"string\">'A constant value'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$classname = <span class=\"string\">'MyClass'</span>;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> $classname::CONST_VALUE; <span class=\"comment\">// 自 PHP 5.3.0 起</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">echo</span> MyClass::CONST_VALUE;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"构造函数和析构函数\"><a href=\"#构造函数和析构函数\" class=\"headerlink\" title=\"构造函数和析构函数\"></a>构造函数和析构函数</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyDestructableClass</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span> </span>&#123; <span class=\"comment\">// 构造函数</span></span><br><span class=\"line\">       <span class=\"keyword\">print</span> <span class=\"string\">\"In constructor\\n\"</span>;</span><br><span class=\"line\">       <span class=\"keyword\">$this</span>-&gt;name = <span class=\"string\">\"MyDestructableClass\"</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__destruct</span><span class=\"params\">()</span> </span>&#123; <span class=\"comment\">// 析构函数</span></span><br><span class=\"line\">       <span class=\"keyword\">print</span> <span class=\"string\">\"Destroying \"</span> . <span class=\"keyword\">$this</span>-&gt;name . <span class=\"string\">\"\\n\"</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$obj = <span class=\"keyword\">new</span> MyDestructableClass();</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"命名空间-和-use\"><a href=\"#命名空间-和-use\" class=\"headerlink\" title=\"命名空间 和 use\"></a>命名空间 和 use</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Album</span>\\<span class=\"title\">Model</span>;</span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Zend</span>\\<span class=\"title\">InputFilter</span>\\<span class=\"title\">Factory</span> <span class=\"title\">as</span> <span class=\"title\">InputFactory</span>;</span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Zend</span>\\<span class=\"title\">InputFilter</span>\\<span class=\"title\">InputFilter</span>;</span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Zend</span>\\<span class=\"title\">InputFilter</span>\\<span class=\"title\">InputFilterAwareInterface</span>;</span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Zend</span>\\<span class=\"title\">InputFilter</span>\\<span class=\"title\">InputFilterInterface</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Album</span> <span class=\"keyword\">implements</span> <span class=\"title\">InputFilterAwareInterface</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"include-和-include-once\"><a href=\"#include-和-include-once\" class=\"headerlink\" title=\"include 和 include_once\"></a>include 和 include_once</h2><p>使用方法：include “文件路径”;</p>\n<p>函数作用：引入另一个php脚本文件，并执行里面的代码</p>\n<p>推荐使用：include_once “文件路径”;</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 自动加载控制器和模型类 </span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadClass</span><span class=\"params\">($class)</span> </span>&#123;</span><br><span class=\"line\">    $frameworks = <span class=\"keyword\">__DIR__</span> . <span class=\"string\">'/'</span> . $class . <span class=\"string\">'.php'</span>;</span><br><span class=\"line\">    $controllers = APP_PATH . <span class=\"string\">'application/controllers/'</span> . $class . <span class=\"string\">'.php'</span>;</span><br><span class=\"line\">    $models = APP_PATH . <span class=\"string\">'application/models/'</span> . $class . <span class=\"string\">'.php'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (file_exists($frameworks)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 加载框架核心类</span></span><br><span class=\"line\">        <span class=\"keyword\">include</span> $frameworks;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">elseif</span> (file_exists($controllers)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 加载应用控制器类</span></span><br><span class=\"line\">        <span class=\"keyword\">include</span> $controllers;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">elseif</span> (file_exists($models)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//加载应用模型类</span></span><br><span class=\"line\">        <span class=\"keyword\">include</span> $models;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 错误代码</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"require-和-require-once\"><a href=\"#require-和-require-once\" class=\"headerlink\" title=\"require 和 require_once\"></a>require 和 require_once</h2><blockquote>\n<p>最大的区别就是：include在引入不存文件时产生一个警告且脚本还会继续执行，require则会导致一个致命性错误且脚本停止执行。</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span>  </span><br><span class=\"line\"><span class=\"keyword\">include_once</span> <span class=\"string\">'1.php'</span>;  </span><br><span class=\"line\"><span class=\"keyword\">require_once</span> <span class=\"string\">'1.php'</span>;  </span><br><span class=\"line\"><span class=\"keyword\">include</span> <span class=\"string\">'1.php'</span>;  </span><br><span class=\"line\"><span class=\"keyword\">require</span> <span class=\"string\">'1.php'</span>;  </span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"以下划线-开头的变量和方法\"><a href=\"#以下划线-开头的变量和方法\" class=\"headerlink\" title=\"以下划线(_)开头的变量和方法\"></a>以下划线(_)开头的变量和方法</h2><p>加一个为私有的, 加两个一般都是系统默认的，系统预定义的.</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">__LINE__</span> 表示文件中的当前行号。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">__FILE__</span> 表示文件的完整路径和文件名。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">__DIR__</span> 表示文件所在的目录。如果用在被包括文件中，则返回被包括的文件所在的目录。它等价于 dirname(<span class=\"keyword\">__FILE__</span>)。除非是根目录，否则目录中名不包括末尾的斜杠</span><br></pre></td></tr></table></figure>\n<p>另外 php规定以两个下划线（__）开头的方法都保留为<strong>魔术方法</strong>，</p>\n<p>PHP中的魔术方法有</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__construct,</span><br><span class=\"line\">__destruct ,</span><br><span class=\"line\">__call,</span><br><span class=\"line\">__callStatic,</span><br><span class=\"line\">__get, </span><br><span class=\"line\">__set,</span><br><span class=\"line\">__isset, </span><br><span class=\"line\">__unset , </span><br><span class=\"line\">__sleep,</span><br><span class=\"line\">__wakeup, </span><br><span class=\"line\">__toString,</span><br><span class=\"line\">__set_state, </span><br><span class=\"line\">__clone, </span><br><span class=\"line\">__autoload</span><br></pre></td></tr></table></figure>\n<h2 id=\"array-merge和数组相加（-）\"><a href=\"#array-merge和数组相加（-）\" class=\"headerlink\" title=\"array_merge和数组相加（+）\"></a>array_merge和数组相加（+）</h2><ul>\n<li>键名是字符串：</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$arr1=<span class=\"keyword\">array</span>(<span class=\"string\">'a'</span>=&gt;<span class=\"string\">'PHP'</span>);</span><br><span class=\"line\">$arr2=<span class=\"keyword\">array</span>(<span class=\"string\">'a'</span>=&gt;<span class=\"string\">'JAVA'</span>);</span><br><span class=\"line\"><span class=\"comment\">//如果键名为字符，且键名相同，array_merge()后面数组元素值会覆盖前面数组元素值</span></span><br><span class=\"line\">print_r(array_merge($arr1,$arr2));<span class=\"comment\">//Array ( [a] =&gt; JAVA )</span></span><br><span class=\"line\"><span class=\"comment\">//如果键名为字符，且键名相同，数组相加会将最先出现的值作为结果</span></span><br><span class=\"line\">print_r($arr1+$arr2);<span class=\"comment\">//Array ( [a] =&gt; PHP )</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>键名是数字：</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$arr1=<span class=\"keyword\">array</span>(<span class=\"string\">\"C\"</span>,<span class=\"string\">\"PHP\"</span>);</span><br><span class=\"line\">$arr2=<span class=\"keyword\">array</span>(<span class=\"string\">\"JAVA\"</span>,<span class=\"string\">\"PHP\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//如果键名为数字，array_merge()不会进行覆盖</span></span><br><span class=\"line\">print_r(array_merge($arr1,$arr2));<span class=\"comment\">//Array ( [0] =&gt; C [1] =&gt; PHP [2] =&gt; JAVA [3] =&gt; PHP )</span></span><br><span class=\"line\"><span class=\"comment\">//如果键名为数字，数组相加会将最先出现的值作为结果，后面键名相同的会被抛弃</span></span><br><span class=\"line\">print_r($arr1+$arr2);<span class=\"comment\">//Array ( [0] =&gt; C [1] =&gt; PHP )</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"clone-关键字与-clone-方法\"><a href=\"#clone-关键字与-clone-方法\" class=\"headerlink\" title=\"clone 关键字与 __clone() 方法\"></a>clone 关键字与 __clone() 方法</h2><ul>\n<li><p><code>clone</code> 关键字用于克隆一个完全一样的对象,而且克隆以后，两个对象互不干扰。</p>\n</li>\n<li><p><code>__clone()</code> 如果想在克隆后改变克隆对象的内容，需要在类中添加一个特殊的 <code>__clone()</code> 方法来重写原本的属性和方法。<code>__clone()</code> 方法只会在对象被克隆的时候自动调用。</p>\n</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> $name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> $age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">($name, $age)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;name = $name;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;age = $age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">say</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">\"我的名字叫：\"</span>.<span class=\"keyword\">$this</span>-&gt;name;</span><br><span class=\"line\">\t    <span class=\"keyword\">echo</span> <span class=\"string\">\"我的年龄是：\"</span>.<span class=\"keyword\">$this</span>-&gt;age.<span class=\"string\">\"&lt;br /&gt;\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__clone</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;name = <span class=\"string\">\"我是假的\"</span>.<span class=\"keyword\">$this</span>-&gt;name;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;age = <span class=\"number\">30</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$p1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"张三\"</span>, <span class=\"number\">20</span>);</span><br><span class=\"line\">$p1-&gt;say();</span><br><span class=\"line\">$p2 = <span class=\"keyword\">clone</span> $p1;</span><br><span class=\"line\">$p2-&gt;say();</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p>运行例子，输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">我的名字叫：张三 我的年龄是：20</span><br><span class=\"line\">我的名字叫：我是假的张三 我的年龄是：30</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"http://blog.csdn.net/abandonship/article/details/6459370\" target=\"_blank\" rel=\"external\">php中双冒号的应用</a></li>\n<li><a href=\"http://php.net/manual/zh/language.oop5.decon.php#language.oop5.decon\" target=\"_blank\" rel=\"external\">构造函数和析构函数</a></li>\n<li><a href=\"http://blog.csdn.net/zlking02/article/details/6752256\" target=\"_blank\" rel=\"external\">PHP中用下划线开头的变量含义</a></li>\n<li><a href=\"http://www.jianshu.com/p/43e9263f82c1\" target=\"_blank\" rel=\"external\">PHP 1、array_merge和数组相加（+）</a></li>\n<li><a href=\"http://www.5idev.com/p-php_object_clone.shtml\" target=\"_blank\" rel=\"external\">PHP 对象克隆 clone 关键字与 __clone() 方法</a></li>\n<li><a href=\"http://www.5idev.com/php-phpbase.shtml\" target=\"_blank\" rel=\"external\">PHP基础教程</a></li>\n</ul>\n","excerpt":"","more":"<h2 id=\"gt-含义\"><a href=\"#gt-含义\" class=\"headerlink\" title=\"=&gt; 含义\"></a>=&gt; 含义</h2><p>=&gt; 是用来数组赋值时用的，例子：<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">$arr = <span class=\"keyword\">array</span>(<span class=\"string\">\"somearray\"</span> =&gt; <span class=\"keyword\">array</span>(<span class=\"number\">6</span> =&gt; <span class=\"number\">5</span>, <span class=\"number\">13</span> =&gt; <span class=\"number\">9</span>, <span class=\"string\">\"a\"</span> =&gt; <span class=\"number\">42</span>));</span><br><span class=\"line\"><span class=\"keyword\">echo</span> $arr[<span class=\"string\">\"somearray\"</span>][<span class=\"number\">6</span>];    <span class=\"comment\">// 5</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> $arr[<span class=\"string\">\"somearray\"</span>][<span class=\"number\">13</span>];   <span class=\"comment\">// 9</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> $arr[<span class=\"string\">\"somearray\"</span>][<span class=\"string\">\"a\"</span>];  <span class=\"comment\">// 42</span></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span> </span><br><span class=\"line\"></span><br><span class=\"line\">$_POST = <span class=\"keyword\">array</span>(<span class=\"string\">\"Peter\"</span>=&gt;<span class=\"string\">\"35\"</span>,<span class=\"string\">\"Ben\"</span>=&gt;<span class=\"string\">\"37\"</span>,<span class=\"string\">\"Joe\"</span>=&gt;<span class=\"string\">\"43\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">foreach</span>($_POST <span class=\"keyword\">AS</span> $key=&gt;$value)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">echo</span> <span class=\"string\">\"data is \"</span> . $key . $value;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// foreach是用来遍历数组的.这个是用来遍历$_POST数组.并把数组的键值放到$key中,值放到$value中</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"gt-箭头操作符\"><a href=\"#gt-箭头操作符\" class=\"headerlink\" title=\"-&gt; 箭头操作符\"></a>-&gt; 箭头操作符</h2><p>箭头操作符 -&gt; 是对象里面用的,表示调用，例子：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">foo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">do_foo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">\"Doing foo.\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$bar = <span class=\"keyword\">new</span> foo();</span><br><span class=\"line\">$bar-&gt;do_foo();</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"的意思\"><a href=\"#的意思\" class=\"headerlink\" title=\".= 的意思\"></a>.= 的意思</h2><p>表示字符串累加,类似于 +=，-=</p>\n<h2 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">echo</span> (int)<span class=\"string\">'abc1'</span>;  <span class=\"comment\">//输出0 </span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> (int)<span class=\"string\">'1abc'</span>; <span class=\"comment\">//输出1 </span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> (int)<span class=\"string\">'2abc'</span>; <span class=\"comment\">//输出2 </span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> (int)<span class=\"string\">'22abc'</span>; <span class=\"comment\">//输出22</span></span><br></pre></td></tr></table></figure>\n<p>如果将一个字符串强制转换成一个数字.PHP会去搜索这个字符串的开头.如果开头是数字就转换.如果不是就直接返回0.</p>\n<h2 id=\"点号\"><a href=\"#点号\" class=\"headerlink\" title=\". 点号\"></a>. 点号</h2><p>用于连接字符串,先连接字符串再运算</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">'5+1='</span> . <span class=\"number\">1</span>+<span class=\"number\">5</span>; <span class=\"comment\">//输出10 </span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">'5+1='</span> . <span class=\"number\">5</span>+<span class=\"number\">1</span>; <span class=\"comment\">//输出6 </span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">'1+5='</span> . <span class=\"number\">1</span>+<span class=\"number\">5</span>; <span class=\"comment\">//输出6 </span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">'1+5='</span> . <span class=\"number\">5</span>+<span class=\"number\">1</span>; <span class=\"comment\">//输出2</span></span><br></pre></td></tr></table></figure>\n<p>具体是 <code>&#39;5+1=&#39; . 1</code> 连接字符串后变成 <code>5+11</code>, <code>5+11</code> 转成数字后变成 5, 最后 <code>5+5</code> 等于10</p>\n<h2 id=\"逗号\"><a href=\"#逗号\" class=\"headerlink\" title=\", 逗号\"></a>, 逗号</h2><p>用逗号是 <code>multiple parameters</code>. 也就是说是多参数.换句话说.<br>逗号分隔开的就相当于是N个参数.也就是说把echo当个函数用.这样的话 echo 会对每个参数先进行计算.最后再进行连接后输出</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">'1+5='</span> . <span class=\"number\">1</span>+<span class=\"number\">5</span>;  <span class=\"comment\">//输出 6</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">'1+5='</span> , <span class=\"number\">5</span>+<span class=\"number\">1</span>;  <span class=\"comment\">//输出 1+5=6</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"at符号\"><a href=\"#at符号\" class=\"headerlink\" title=\"@ at符号\"></a>@ at符号</h2><p>当php解释器遇到@开头的语句时候，无论本行的语句是否执行成功，都会继续执行后续的语句，而且不会报错。</p>\n<h2 id=\"双冒号-两个冒号\"><a href=\"#双冒号-两个冒号\" class=\"headerlink\" title=\":: 双冒号,两个冒号\"></a>:: 双冒号,两个冒号</h2><p>用于访问静态、const和类中重写的属性与方法, 类不需要实例化, 用箭头操作符<code>-&gt;</code>必须要将类进行实例化（或者在类的内部调用也可以） 。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> CONST_VALUE = <span class=\"string\">'A constant value'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$classname = <span class=\"string\">'MyClass'</span>;</span><br><span class=\"line\"><span class=\"keyword\">echo</span> $classname::CONST_VALUE; <span class=\"comment\">// 自 PHP 5.3.0 起</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">echo</span> MyClass::CONST_VALUE;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"构造函数和析构函数\"><a href=\"#构造函数和析构函数\" class=\"headerlink\" title=\"构造函数和析构函数\"></a>构造函数和析构函数</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyDestructableClass</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">()</span> </span>&#123; <span class=\"comment\">// 构造函数</span></span><br><span class=\"line\">       <span class=\"keyword\">print</span> <span class=\"string\">\"In constructor\\n\"</span>;</span><br><span class=\"line\">       <span class=\"keyword\">$this</span>-&gt;name = <span class=\"string\">\"MyDestructableClass\"</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__destruct</span><span class=\"params\">()</span> </span>&#123; <span class=\"comment\">// 析构函数</span></span><br><span class=\"line\">       <span class=\"keyword\">print</span> <span class=\"string\">\"Destroying \"</span> . <span class=\"keyword\">$this</span>-&gt;name . <span class=\"string\">\"\\n\"</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$obj = <span class=\"keyword\">new</span> MyDestructableClass();</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"命名空间-和-use\"><a href=\"#命名空间-和-use\" class=\"headerlink\" title=\"命名空间 和 use\"></a>命名空间 和 use</h2><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">namespace</span> <span class=\"title\">Album</span>\\<span class=\"title\">Model</span>;</span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Zend</span>\\<span class=\"title\">InputFilter</span>\\<span class=\"title\">Factory</span> <span class=\"title\">as</span> <span class=\"title\">InputFactory</span>;</span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Zend</span>\\<span class=\"title\">InputFilter</span>\\<span class=\"title\">InputFilter</span>;</span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Zend</span>\\<span class=\"title\">InputFilter</span>\\<span class=\"title\">InputFilterAwareInterface</span>;</span><br><span class=\"line\"><span class=\"keyword\">use</span> <span class=\"title\">Zend</span>\\<span class=\"title\">InputFilter</span>\\<span class=\"title\">InputFilterInterface</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Album</span> <span class=\"keyword\">implements</span> <span class=\"title\">InputFilterAwareInterface</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"include-和-include-once\"><a href=\"#include-和-include-once\" class=\"headerlink\" title=\"include 和 include_once\"></a>include 和 include_once</h2><p>使用方法：include “文件路径”;</p>\n<p>函数作用：引入另一个php脚本文件，并执行里面的代码</p>\n<p>推荐使用：include_once “文件路径”;</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 自动加载控制器和模型类 </span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadClass</span><span class=\"params\">($class)</span> </span>&#123;</span><br><span class=\"line\">    $frameworks = <span class=\"keyword\">__DIR__</span> . <span class=\"string\">'/'</span> . $class . <span class=\"string\">'.php'</span>;</span><br><span class=\"line\">    $controllers = APP_PATH . <span class=\"string\">'application/controllers/'</span> . $class . <span class=\"string\">'.php'</span>;</span><br><span class=\"line\">    $models = APP_PATH . <span class=\"string\">'application/models/'</span> . $class . <span class=\"string\">'.php'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (file_exists($frameworks)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 加载框架核心类</span></span><br><span class=\"line\">        <span class=\"keyword\">include</span> $frameworks;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">elseif</span> (file_exists($controllers)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 加载应用控制器类</span></span><br><span class=\"line\">        <span class=\"keyword\">include</span> $controllers;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">elseif</span> (file_exists($models)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//加载应用模型类</span></span><br><span class=\"line\">        <span class=\"keyword\">include</span> $models;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 错误代码</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"require-和-require-once\"><a href=\"#require-和-require-once\" class=\"headerlink\" title=\"require 和 require_once\"></a>require 和 require_once</h2><blockquote>\n<p>最大的区别就是：include在引入不存文件时产生一个警告且脚本还会继续执行，require则会导致一个致命性错误且脚本停止执行。</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span>  </span><br><span class=\"line\"><span class=\"keyword\">include_once</span> <span class=\"string\">'1.php'</span>;  </span><br><span class=\"line\"><span class=\"keyword\">require_once</span> <span class=\"string\">'1.php'</span>;  </span><br><span class=\"line\"><span class=\"keyword\">include</span> <span class=\"string\">'1.php'</span>;  </span><br><span class=\"line\"><span class=\"keyword\">require</span> <span class=\"string\">'1.php'</span>;  </span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"以下划线-开头的变量和方法\"><a href=\"#以下划线-开头的变量和方法\" class=\"headerlink\" title=\"以下划线(_)开头的变量和方法\"></a>以下划线(_)开头的变量和方法</h2><p>加一个为私有的, 加两个一般都是系统默认的，系统预定义的.</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">__LINE__</span> 表示文件中的当前行号。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">__FILE__</span> 表示文件的完整路径和文件名。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">__DIR__</span> 表示文件所在的目录。如果用在被包括文件中，则返回被包括的文件所在的目录。它等价于 dirname(<span class=\"keyword\">__FILE__</span>)。除非是根目录，否则目录中名不包括末尾的斜杠</span><br></pre></td></tr></table></figure>\n<p>另外 php规定以两个下划线（__）开头的方法都保留为<strong>魔术方法</strong>，</p>\n<p>PHP中的魔术方法有</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__construct,</span><br><span class=\"line\">__destruct ,</span><br><span class=\"line\">__call,</span><br><span class=\"line\">__callStatic,</span><br><span class=\"line\">__get, </span><br><span class=\"line\">__set,</span><br><span class=\"line\">__isset, </span><br><span class=\"line\">__unset , </span><br><span class=\"line\">__sleep,</span><br><span class=\"line\">__wakeup, </span><br><span class=\"line\">__toString,</span><br><span class=\"line\">__set_state, </span><br><span class=\"line\">__clone, </span><br><span class=\"line\">__autoload</span><br></pre></td></tr></table></figure>\n<h2 id=\"array-merge和数组相加（-）\"><a href=\"#array-merge和数组相加（-）\" class=\"headerlink\" title=\"array_merge和数组相加（+）\"></a>array_merge和数组相加（+）</h2><ul>\n<li>键名是字符串：</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$arr1=<span class=\"keyword\">array</span>(<span class=\"string\">'a'</span>=&gt;<span class=\"string\">'PHP'</span>);</span><br><span class=\"line\">$arr2=<span class=\"keyword\">array</span>(<span class=\"string\">'a'</span>=&gt;<span class=\"string\">'JAVA'</span>);</span><br><span class=\"line\"><span class=\"comment\">//如果键名为字符，且键名相同，array_merge()后面数组元素值会覆盖前面数组元素值</span></span><br><span class=\"line\">print_r(array_merge($arr1,$arr2));<span class=\"comment\">//Array ( [a] =&gt; JAVA )</span></span><br><span class=\"line\"><span class=\"comment\">//如果键名为字符，且键名相同，数组相加会将最先出现的值作为结果</span></span><br><span class=\"line\">print_r($arr1+$arr2);<span class=\"comment\">//Array ( [a] =&gt; PHP )</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>键名是数字：</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$arr1=<span class=\"keyword\">array</span>(<span class=\"string\">\"C\"</span>,<span class=\"string\">\"PHP\"</span>);</span><br><span class=\"line\">$arr2=<span class=\"keyword\">array</span>(<span class=\"string\">\"JAVA\"</span>,<span class=\"string\">\"PHP\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//如果键名为数字，array_merge()不会进行覆盖</span></span><br><span class=\"line\">print_r(array_merge($arr1,$arr2));<span class=\"comment\">//Array ( [0] =&gt; C [1] =&gt; PHP [2] =&gt; JAVA [3] =&gt; PHP )</span></span><br><span class=\"line\"><span class=\"comment\">//如果键名为数字，数组相加会将最先出现的值作为结果，后面键名相同的会被抛弃</span></span><br><span class=\"line\">print_r($arr1+$arr2);<span class=\"comment\">//Array ( [0] =&gt; C [1] =&gt; PHP )</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"clone-关键字与-clone-方法\"><a href=\"#clone-关键字与-clone-方法\" class=\"headerlink\" title=\"clone 关键字与 __clone() 方法\"></a>clone 关键字与 __clone() 方法</h2><ul>\n<li><p><code>clone</code> 关键字用于克隆一个完全一样的对象,而且克隆以后，两个对象互不干扰。</p>\n</li>\n<li><p><code>__clone()</code> 如果想在克隆后改变克隆对象的内容，需要在类中添加一个特殊的 <code>__clone()</code> 方法来重写原本的属性和方法。<code>__clone()</code> 方法只会在对象被克隆的时候自动调用。</p>\n</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> $name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> $age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span><span class=\"params\">($name, $age)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;name = $name;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;age = $age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">say</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">echo</span> <span class=\"string\">\"我的名字叫：\"</span>.<span class=\"keyword\">$this</span>-&gt;name;</span><br><span class=\"line\">\t    <span class=\"keyword\">echo</span> <span class=\"string\">\"我的年龄是：\"</span>.<span class=\"keyword\">$this</span>-&gt;age.<span class=\"string\">\"&lt;br /&gt;\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__clone</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;name = <span class=\"string\">\"我是假的\"</span>.<span class=\"keyword\">$this</span>-&gt;name;</span><br><span class=\"line\">        <span class=\"keyword\">$this</span>-&gt;age = <span class=\"number\">30</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$p1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"张三\"</span>, <span class=\"number\">20</span>);</span><br><span class=\"line\">$p1-&gt;say();</span><br><span class=\"line\">$p2 = <span class=\"keyword\">clone</span> $p1;</span><br><span class=\"line\">$p2-&gt;say();</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p>运行例子，输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">我的名字叫：张三 我的年龄是：20</span><br><span class=\"line\">我的名字叫：我是假的张三 我的年龄是：30</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"http://blog.csdn.net/abandonship/article/details/6459370\">php中双冒号的应用</a></li>\n<li><a href=\"http://php.net/manual/zh/language.oop5.decon.php#language.oop5.decon\">构造函数和析构函数</a></li>\n<li><a href=\"http://blog.csdn.net/zlking02/article/details/6752256\">PHP中用下划线开头的变量含义</a></li>\n<li><a href=\"http://www.jianshu.com/p/43e9263f82c1\">PHP 1、array_merge和数组相加（+）</a></li>\n<li><a href=\"http://www.5idev.com/p-php_object_clone.shtml\">PHP 对象克隆 clone 关键字与 __clone() 方法</a></li>\n<li><a href=\"http://www.5idev.com/php-phpbase.shtml\">PHP基础教程</a></li>\n</ul>\n"},{"title":"Phabricator 在 Windows 环境上的部署与二次开发","title_url":"Phabricator-Windows-setup","date":"2017-07-02T16:00:00.000Z","description":"Phabricator 在 Windows 环境上的部署与二次开发","_content":"\n## 基本开发工具\n\n- [eclipse-php-oxygen-R-win32-x86_64.zip](http://mirror.rise.ph/eclipse/technology/epp/downloads/release/oxygen/R/eclipse-php-oxygen-R-win32-x86_64.zip)\n- [wampserver3.0.6_x64_apache2.4.23_mysql5.7.14_php5.6.25-7.0.10.exe](https://wampserver-64bit.en.softonic.com/)\n- [git-for-windows-2.13.2](https://git-for-windows.github.io/)\n\n其中 wampserver 安装在 `C:\\wamp64`\n\neclipse-php 需要在 `Window -> Preferences -> PHP` 设置安装好的 PHP,Debug,Execution Environments 等信息,具体参考->[这里](http://tiame.iteye.com/blog/1454234)\n\n- 这里最终推荐使用 PhpStorm 来二次开发 Phabricator，因为本人在使用 eclipse-php 和 xdebug 来 debug Phabricator 的时候 eclipse-php 很容易崩溃，而 PhpStorm 就没有任何问题，总之，花钱的东西就是好用。\n\n## Phabricator 部署\n\n在 eclipse-php 中新建一个 php 项目, 地址在 `D:\\php-workspace\\phabricator`, 在 Git Bash 中进入该目录, 执行如下命令拉取 Phabricator 代码\n\n```\ngit clone https://github.com/phacility/libphutil.git\ngit clone https://github.com/phacility/arcanist.git\ngit clone https://github.com/phacility/phabricator.git\n```\n\n完毕后, 将 arcanist, libphutil, phabricator 三个文件夹 以 File System 的形式导入到php项目中\n\n启动 wampserver, 在浏览器中打开 `http://localhost/index.php` 进入 WampServer 管理页面,在下面的 Tools 栏中点击 `Add a Virtual Host` 链接创建一个VirtualHost, \n\n第一栏填写 test.pha.com\n第二栏不填\n第三栏填写 D:\\php-workspace\\phabricator\\phabricator\\webroot\n\n点击保存, 成功后会在 WampServer 主页下面的 Your VirtualHost 栏中增加 test.pha.com 站点, 这时候在 `C:\\Windows\\System32\\drivers\\etc` 中会增加如下信息\n\n```\n::1 test.pha.com\n```\n\n在 `C:\\wamp64\\bin\\apache\\apache2.4.23\\conf\\extra\\httpd-vhosts.conf` 中会增加如下信息\n\n```\n<VirtualHost *:80>\n\tServerName test.pha.com\n\tDocumentRoot \"d:/php-workspace/phabricator/phabricator/webroot\"\n\t\n\tRewriteEngine on\n    RewriteRule ^(.*)$          /index.php?__path__=$1  [B,L,QSA]\n\t<Directory  \"d:/php-workspace/phabricator/phabricator/webroot/\">\n\t\tOptions +Indexes +Includes +FollowSymLinks +MultiViews\n\t\tAllowOverride All\n\t\tRequire local\n\t</Directory>\n</VirtualHost>\n```\n\n这个时候就可以通过 `test.pha.com` 访问 Phabricator 了,如果提示数据库未配置,或者需要执行 `upgrade` 操作\n\n那么通过 Git Bash cd 到 `D:\\php-workspace\\phabricator\\phabricator` 目录, 执行如下命令来设置 mysql 的相关信息\n\n```\nphp scripts/setup/manage_config.php set mysql.host localhost\nphp scripts/setup/manage_config.php set mysql.port 3306\nphp scripts/setup/manage_config.php set mysql.user root\nphp scripts/setup/manage_config.php set mysql.pass 123\n```\n\n通过如下命令进行 upgrade\n\n```\nphp scripts/sql/manage_storage.php upgrade\n```\n\n这里之所以不能和官方wiki那样通过 `./bin/config set mysql.host localhost` 的原因是 bin 目录下面在 Linux 环境中都是符号链接, 通过 Git Clone 到 Windows 环境后变成了文件\n\n## 扩展phabricator验证\n\n- [扩展phabricator验证](https://popozhu.github.io/2016/05/31/扩展phabricator验证/)\n\n## 参考\n\n- [Phabricator 用户手册](https://admin.phacility.com/book/phacility/)\n- [VirtualHost 配置参考](https://httpd.apache.org/docs/2.4/vhosts/examples.html)\n- [Eclipse集成PDT+XDebug调试PHP脚本](http://pjdong1990.iteye.com/blog/1610305)\n- [Phabricator 技术文档](https://secure.phabricator.com/diviner/)\n- [Phabricator 二次开发入门](https://secure.phabricator.com/book/phabcontrib/)\n- [Phabricator 基本代码结构](https://secure.phabricator.com/book/phabcontrib/article/phabricator_code_layout/)\n- [xdebug 配置向导](https://xdebug.org/wizard.php)\n","source":"_posts/Phabricator 在 Windows 环境上的部署与二次开发.md","raw":"---\ntitle: Phabricator 在 Windows 环境上的部署与二次开发\ntitle_url: Phabricator-Windows-setup\ndate: 2017-07-03\ntags: Phabricator\ncategories: [Phabricator,PHP]\ndescription: Phabricator 在 Windows 环境上的部署与二次开发\n---\n\n## 基本开发工具\n\n- [eclipse-php-oxygen-R-win32-x86_64.zip](http://mirror.rise.ph/eclipse/technology/epp/downloads/release/oxygen/R/eclipse-php-oxygen-R-win32-x86_64.zip)\n- [wampserver3.0.6_x64_apache2.4.23_mysql5.7.14_php5.6.25-7.0.10.exe](https://wampserver-64bit.en.softonic.com/)\n- [git-for-windows-2.13.2](https://git-for-windows.github.io/)\n\n其中 wampserver 安装在 `C:\\wamp64`\n\neclipse-php 需要在 `Window -> Preferences -> PHP` 设置安装好的 PHP,Debug,Execution Environments 等信息,具体参考->[这里](http://tiame.iteye.com/blog/1454234)\n\n- 这里最终推荐使用 PhpStorm 来二次开发 Phabricator，因为本人在使用 eclipse-php 和 xdebug 来 debug Phabricator 的时候 eclipse-php 很容易崩溃，而 PhpStorm 就没有任何问题，总之，花钱的东西就是好用。\n\n## Phabricator 部署\n\n在 eclipse-php 中新建一个 php 项目, 地址在 `D:\\php-workspace\\phabricator`, 在 Git Bash 中进入该目录, 执行如下命令拉取 Phabricator 代码\n\n```\ngit clone https://github.com/phacility/libphutil.git\ngit clone https://github.com/phacility/arcanist.git\ngit clone https://github.com/phacility/phabricator.git\n```\n\n完毕后, 将 arcanist, libphutil, phabricator 三个文件夹 以 File System 的形式导入到php项目中\n\n启动 wampserver, 在浏览器中打开 `http://localhost/index.php` 进入 WampServer 管理页面,在下面的 Tools 栏中点击 `Add a Virtual Host` 链接创建一个VirtualHost, \n\n第一栏填写 test.pha.com\n第二栏不填\n第三栏填写 D:\\php-workspace\\phabricator\\phabricator\\webroot\n\n点击保存, 成功后会在 WampServer 主页下面的 Your VirtualHost 栏中增加 test.pha.com 站点, 这时候在 `C:\\Windows\\System32\\drivers\\etc` 中会增加如下信息\n\n```\n::1 test.pha.com\n```\n\n在 `C:\\wamp64\\bin\\apache\\apache2.4.23\\conf\\extra\\httpd-vhosts.conf` 中会增加如下信息\n\n```\n<VirtualHost *:80>\n\tServerName test.pha.com\n\tDocumentRoot \"d:/php-workspace/phabricator/phabricator/webroot\"\n\t\n\tRewriteEngine on\n    RewriteRule ^(.*)$          /index.php?__path__=$1  [B,L,QSA]\n\t<Directory  \"d:/php-workspace/phabricator/phabricator/webroot/\">\n\t\tOptions +Indexes +Includes +FollowSymLinks +MultiViews\n\t\tAllowOverride All\n\t\tRequire local\n\t</Directory>\n</VirtualHost>\n```\n\n这个时候就可以通过 `test.pha.com` 访问 Phabricator 了,如果提示数据库未配置,或者需要执行 `upgrade` 操作\n\n那么通过 Git Bash cd 到 `D:\\php-workspace\\phabricator\\phabricator` 目录, 执行如下命令来设置 mysql 的相关信息\n\n```\nphp scripts/setup/manage_config.php set mysql.host localhost\nphp scripts/setup/manage_config.php set mysql.port 3306\nphp scripts/setup/manage_config.php set mysql.user root\nphp scripts/setup/manage_config.php set mysql.pass 123\n```\n\n通过如下命令进行 upgrade\n\n```\nphp scripts/sql/manage_storage.php upgrade\n```\n\n这里之所以不能和官方wiki那样通过 `./bin/config set mysql.host localhost` 的原因是 bin 目录下面在 Linux 环境中都是符号链接, 通过 Git Clone 到 Windows 环境后变成了文件\n\n## 扩展phabricator验证\n\n- [扩展phabricator验证](https://popozhu.github.io/2016/05/31/扩展phabricator验证/)\n\n## 参考\n\n- [Phabricator 用户手册](https://admin.phacility.com/book/phacility/)\n- [VirtualHost 配置参考](https://httpd.apache.org/docs/2.4/vhosts/examples.html)\n- [Eclipse集成PDT+XDebug调试PHP脚本](http://pjdong1990.iteye.com/blog/1610305)\n- [Phabricator 技术文档](https://secure.phabricator.com/diviner/)\n- [Phabricator 二次开发入门](https://secure.phabricator.com/book/phabcontrib/)\n- [Phabricator 基本代码结构](https://secure.phabricator.com/book/phabcontrib/article/phabricator_code_layout/)\n- [xdebug 配置向导](https://xdebug.org/wizard.php)\n","slug":"Phabricator 在 Windows 环境上的部署与二次开发","published":1,"updated":"2017-07-25T00:56:31.532Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfto0q7m000p18c7ns1zpuc6","content":"<h2 id=\"基本开发工具\"><a href=\"#基本开发工具\" class=\"headerlink\" title=\"基本开发工具\"></a>基本开发工具</h2><ul>\n<li><a href=\"http://mirror.rise.ph/eclipse/technology/epp/downloads/release/oxygen/R/eclipse-php-oxygen-R-win32-x86_64.zip\" target=\"_blank\" rel=\"external\">eclipse-php-oxygen-R-win32-x86_64.zip</a></li>\n<li><a href=\"https://wampserver-64bit.en.softonic.com/\" target=\"_blank\" rel=\"external\">wampserver3.0.6_x64_apache2.4.23_mysql5.7.14_php5.6.25-7.0.10.exe</a></li>\n<li><a href=\"https://git-for-windows.github.io/\" target=\"_blank\" rel=\"external\">git-for-windows-2.13.2</a></li>\n</ul>\n<p>其中 wampserver 安装在 <code>C:\\wamp64</code></p>\n<p>eclipse-php 需要在 <code>Window -&gt; Preferences -&gt; PHP</code> 设置安装好的 PHP,Debug,Execution Environments 等信息,具体参考-&gt;<a href=\"http://tiame.iteye.com/blog/1454234\" target=\"_blank\" rel=\"external\">这里</a></p>\n<ul>\n<li>这里最终推荐使用 PhpStorm 来二次开发 Phabricator，因为本人在使用 eclipse-php 和 xdebug 来 debug Phabricator 的时候 eclipse-php 很容易崩溃，而 PhpStorm 就没有任何问题，总之，花钱的东西就是好用。</li>\n</ul>\n<h2 id=\"Phabricator-部署\"><a href=\"#Phabricator-部署\" class=\"headerlink\" title=\"Phabricator 部署\"></a>Phabricator 部署</h2><p>在 eclipse-php 中新建一个 php 项目, 地址在 <code>D:\\php-workspace\\phabricator</code>, 在 Git Bash 中进入该目录, 执行如下命令拉取 Phabricator 代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/phacility/libphutil.git</span><br><span class=\"line\">git clone https://github.com/phacility/arcanist.git</span><br><span class=\"line\">git clone https://github.com/phacility/phabricator.git</span><br></pre></td></tr></table></figure>\n<p>完毕后, 将 arcanist, libphutil, phabricator 三个文件夹 以 File System 的形式导入到php项目中</p>\n<p>启动 wampserver, 在浏览器中打开 <code>http://localhost/index.php</code> 进入 WampServer 管理页面,在下面的 Tools 栏中点击 <code>Add a Virtual Host</code> 链接创建一个VirtualHost, </p>\n<p>第一栏填写 test.pha.com<br>第二栏不填<br>第三栏填写 D:\\php-workspace\\phabricator\\phabricator\\webroot</p>\n<p>点击保存, 成功后会在 WampServer 主页下面的 Your VirtualHost 栏中增加 test.pha.com 站点, 这时候在 <code>C:\\Windows\\System32\\drivers\\etc</code> 中会增加如下信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">::1 test.pha.com</span><br></pre></td></tr></table></figure>\n<p>在 <code>C:\\wamp64\\bin\\apache\\apache2.4.23\\conf\\extra\\httpd-vhosts.conf</code> 中会增加如下信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;VirtualHost *:80&gt;</span><br><span class=\"line\">\tServerName test.pha.com</span><br><span class=\"line\">\tDocumentRoot &quot;d:/php-workspace/phabricator/phabricator/webroot&quot;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tRewriteEngine on</span><br><span class=\"line\">    RewriteRule ^(.*)$          /index.php?__path__=$1  [B,L,QSA]</span><br><span class=\"line\">\t&lt;Directory  &quot;d:/php-workspace/phabricator/phabricator/webroot/&quot;&gt;</span><br><span class=\"line\">\t\tOptions +Indexes +Includes +FollowSymLinks +MultiViews</span><br><span class=\"line\">\t\tAllowOverride All</span><br><span class=\"line\">\t\tRequire local</span><br><span class=\"line\">\t&lt;/Directory&gt;</span><br><span class=\"line\">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure>\n<p>这个时候就可以通过 <code>test.pha.com</code> 访问 Phabricator 了,如果提示数据库未配置,或者需要执行 <code>upgrade</code> 操作</p>\n<p>那么通过 Git Bash cd 到 <code>D:\\php-workspace\\phabricator\\phabricator</code> 目录, 执行如下命令来设置 mysql 的相关信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php scripts/setup/manage_config.php set mysql.host localhost</span><br><span class=\"line\">php scripts/setup/manage_config.php set mysql.port 3306</span><br><span class=\"line\">php scripts/setup/manage_config.php set mysql.user root</span><br><span class=\"line\">php scripts/setup/manage_config.php set mysql.pass 123</span><br></pre></td></tr></table></figure>\n<p>通过如下命令进行 upgrade</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php scripts/sql/manage_storage.php upgrade</span><br></pre></td></tr></table></figure>\n<p>这里之所以不能和官方wiki那样通过 <code>./bin/config set mysql.host localhost</code> 的原因是 bin 目录下面在 Linux 环境中都是符号链接, 通过 Git Clone 到 Windows 环境后变成了文件</p>\n<h2 id=\"扩展phabricator验证\"><a href=\"#扩展phabricator验证\" class=\"headerlink\" title=\"扩展phabricator验证\"></a>扩展phabricator验证</h2><ul>\n<li><a href=\"https://popozhu.github.io/2016/05/31/扩展phabricator验证/\" target=\"_blank\" rel=\"external\">扩展phabricator验证</a></li>\n</ul>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://admin.phacility.com/book/phacility/\" target=\"_blank\" rel=\"external\">Phabricator 用户手册</a></li>\n<li><a href=\"https://httpd.apache.org/docs/2.4/vhosts/examples.html\" target=\"_blank\" rel=\"external\">VirtualHost 配置参考</a></li>\n<li><a href=\"http://pjdong1990.iteye.com/blog/1610305\" target=\"_blank\" rel=\"external\">Eclipse集成PDT+XDebug调试PHP脚本</a></li>\n<li><a href=\"https://secure.phabricator.com/diviner/\" target=\"_blank\" rel=\"external\">Phabricator 技术文档</a></li>\n<li><a href=\"https://secure.phabricator.com/book/phabcontrib/\" target=\"_blank\" rel=\"external\">Phabricator 二次开发入门</a></li>\n<li><a href=\"https://secure.phabricator.com/book/phabcontrib/article/phabricator_code_layout/\" target=\"_blank\" rel=\"external\">Phabricator 基本代码结构</a></li>\n<li><a href=\"https://xdebug.org/wizard.php\" target=\"_blank\" rel=\"external\">xdebug 配置向导</a></li>\n</ul>\n","excerpt":"","more":"<h2 id=\"基本开发工具\"><a href=\"#基本开发工具\" class=\"headerlink\" title=\"基本开发工具\"></a>基本开发工具</h2><ul>\n<li><a href=\"http://mirror.rise.ph/eclipse/technology/epp/downloads/release/oxygen/R/eclipse-php-oxygen-R-win32-x86_64.zip\">eclipse-php-oxygen-R-win32-x86_64.zip</a></li>\n<li><a href=\"https://wampserver-64bit.en.softonic.com/\">wampserver3.0.6_x64_apache2.4.23_mysql5.7.14_php5.6.25-7.0.10.exe</a></li>\n<li><a href=\"https://git-for-windows.github.io/\">git-for-windows-2.13.2</a></li>\n</ul>\n<p>其中 wampserver 安装在 <code>C:\\wamp64</code></p>\n<p>eclipse-php 需要在 <code>Window -&gt; Preferences -&gt; PHP</code> 设置安装好的 PHP,Debug,Execution Environments 等信息,具体参考-&gt;<a href=\"http://tiame.iteye.com/blog/1454234\">这里</a></p>\n<ul>\n<li>这里最终推荐使用 PhpStorm 来二次开发 Phabricator，因为本人在使用 eclipse-php 和 xdebug 来 debug Phabricator 的时候 eclipse-php 很容易崩溃，而 PhpStorm 就没有任何问题，总之，花钱的东西就是好用。</li>\n</ul>\n<h2 id=\"Phabricator-部署\"><a href=\"#Phabricator-部署\" class=\"headerlink\" title=\"Phabricator 部署\"></a>Phabricator 部署</h2><p>在 eclipse-php 中新建一个 php 项目, 地址在 <code>D:\\php-workspace\\phabricator</code>, 在 Git Bash 中进入该目录, 执行如下命令拉取 Phabricator 代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/phacility/libphutil.git</span><br><span class=\"line\">git clone https://github.com/phacility/arcanist.git</span><br><span class=\"line\">git clone https://github.com/phacility/phabricator.git</span><br></pre></td></tr></table></figure>\n<p>完毕后, 将 arcanist, libphutil, phabricator 三个文件夹 以 File System 的形式导入到php项目中</p>\n<p>启动 wampserver, 在浏览器中打开 <code>http://localhost/index.php</code> 进入 WampServer 管理页面,在下面的 Tools 栏中点击 <code>Add a Virtual Host</code> 链接创建一个VirtualHost, </p>\n<p>第一栏填写 test.pha.com<br>第二栏不填<br>第三栏填写 D:\\php-workspace\\phabricator\\phabricator\\webroot</p>\n<p>点击保存, 成功后会在 WampServer 主页下面的 Your VirtualHost 栏中增加 test.pha.com 站点, 这时候在 <code>C:\\Windows\\System32\\drivers\\etc</code> 中会增加如下信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">::1 test.pha.com</span><br></pre></td></tr></table></figure>\n<p>在 <code>C:\\wamp64\\bin\\apache\\apache2.4.23\\conf\\extra\\httpd-vhosts.conf</code> 中会增加如下信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;VirtualHost *:80&gt;</span><br><span class=\"line\">\tServerName test.pha.com</span><br><span class=\"line\">\tDocumentRoot &quot;d:/php-workspace/phabricator/phabricator/webroot&quot;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tRewriteEngine on</span><br><span class=\"line\">    RewriteRule ^(.*)$          /index.php?__path__=$1  [B,L,QSA]</span><br><span class=\"line\">\t&lt;Directory  &quot;d:/php-workspace/phabricator/phabricator/webroot/&quot;&gt;</span><br><span class=\"line\">\t\tOptions +Indexes +Includes +FollowSymLinks +MultiViews</span><br><span class=\"line\">\t\tAllowOverride All</span><br><span class=\"line\">\t\tRequire local</span><br><span class=\"line\">\t&lt;/Directory&gt;</span><br><span class=\"line\">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure>\n<p>这个时候就可以通过 <code>test.pha.com</code> 访问 Phabricator 了,如果提示数据库未配置,或者需要执行 <code>upgrade</code> 操作</p>\n<p>那么通过 Git Bash cd 到 <code>D:\\php-workspace\\phabricator\\phabricator</code> 目录, 执行如下命令来设置 mysql 的相关信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php scripts/setup/manage_config.php set mysql.host localhost</span><br><span class=\"line\">php scripts/setup/manage_config.php set mysql.port 3306</span><br><span class=\"line\">php scripts/setup/manage_config.php set mysql.user root</span><br><span class=\"line\">php scripts/setup/manage_config.php set mysql.pass 123</span><br></pre></td></tr></table></figure>\n<p>通过如下命令进行 upgrade</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php scripts/sql/manage_storage.php upgrade</span><br></pre></td></tr></table></figure>\n<p>这里之所以不能和官方wiki那样通过 <code>./bin/config set mysql.host localhost</code> 的原因是 bin 目录下面在 Linux 环境中都是符号链接, 通过 Git Clone 到 Windows 环境后变成了文件</p>\n<h2 id=\"扩展phabricator验证\"><a href=\"#扩展phabricator验证\" class=\"headerlink\" title=\"扩展phabricator验证\"></a>扩展phabricator验证</h2><ul>\n<li><a href=\"https://popozhu.github.io/2016/05/31/扩展phabricator验证/\">扩展phabricator验证</a></li>\n</ul>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://admin.phacility.com/book/phacility/\">Phabricator 用户手册</a></li>\n<li><a href=\"https://httpd.apache.org/docs/2.4/vhosts/examples.html\">VirtualHost 配置参考</a></li>\n<li><a href=\"http://pjdong1990.iteye.com/blog/1610305\">Eclipse集成PDT+XDebug调试PHP脚本</a></li>\n<li><a href=\"https://secure.phabricator.com/diviner/\">Phabricator 技术文档</a></li>\n<li><a href=\"https://secure.phabricator.com/book/phabcontrib/\">Phabricator 二次开发入门</a></li>\n<li><a href=\"https://secure.phabricator.com/book/phabcontrib/article/phabricator_code_layout/\">Phabricator 基本代码结构</a></li>\n<li><a href=\"https://xdebug.org/wizard.php\">xdebug 配置向导</a></li>\n</ul>\n"},{"title":"Phabricator 在创建项目的时候自动创建一个 Herald 规则","title_url":"Phabricator-project-Herald","date":"2017-07-21T16:00:00.000Z","description":"Phabricator 在创建项目的时候自动创建一个 Herald 规则","_content":"\n## 问题描述\n\nPhabricator 默认在添加一个新的项目成员的时候是不会给新成员发生邮件的，需要手工创建一个 Herald 规则。\n所以为了便于维护，需要扩展一个功能，具体就是：Phabricator 在创建项目的时候自动创建一个 Herald 规则。这个规则具体如下\n\n![herald1](http://7xt8a6.com1.z0.glb.clouddn.com/herald1.PNG)\n\n从代码角度理解如下\n\n```php\n// 手动插入规则信息, $object 是保存成功后的项目对象\n$projectInfo = array($object->getPHID() => $object->getDisplayName());\n$data['conditions'] = array(array(\"projects.exact\",\"any\",$projectInfo));\n$data['actions'] = array(array(\"email.other\", $projectInfo));\n```\n\n## 解决\n\n- 具体就是要在项目保存成功后获取到新项目的id和名称，然后再保存一个 Herald 规则\n\n- 并且项目更新的时候避免再新增 Herald 规则\n\n在 Phabricator 现有的代码基础上新增的代码如下\n\n![herald2](http://7xt8a6.com1.z0.glb.clouddn.com/herald3.PNG)\n\n新增的 saveProjectNotificationRule 方法具体如下：\n\n```php\n/**\n * 新增加项目的时候自动增加一个通知规则 herald\n *\n * author ck\n *\n * @param AphrontRequest $request\n * @param PhabricatorUser $viewer\n * @param PhabricatorProject $object\n * @return array\n */\nprivate function saveProjectNotificationRule(AphrontRequest $request, PhabricatorUser $viewer, PhabricatorProject $object) {\n  $adapter = HeraldAdapter::getAdapterForContentType('PhabricatorProjectHeraldAdapter');\n\n  // 手动构造一个form请求\n  $request_data = array();\n  $request_data['name'] = 'herald_rule_for_'.$object->getDisplayName();\n  $request_data['must_match'] = 'all';\n  $request_data['repetition_policy'] = 'every';\n  $request_data['__csrf__'] = $request->getRequestData()['__csrf__']; //保留token否则添加失败\n\n  // 手动构造一个通知规则\n  $rule = new HeraldRule();\n  $rule->setAuthorPHID($viewer->getPHID());\n  $rule->setMustMatchAll(1);\n  $rule->setContentType('PhabricatorProjectHeraldAdapter');\n  $rule->setRuleType('global');\n  $rule->setConfigVersion(38);\n\n  $rule_conditions = $rule->loadConditions();\n  $rule_actions = $rule->loadActions();\n\n  $rule->attachConditions($rule_conditions);\n  $rule->attachActions($rule_actions);\n      \n  $request->setRequestData($request_data);\n  \n  $new_name = $request->getStr('name');\n  $match_all = ($request->getStr('must_match') == 'all');\n  \n  $repetition_policy_param = $request->getStr('repetition_policy');\n  \n  $e_name = true;\n  $errors = array();\n\n  // 手动插入规则信息\n  $projectInfo = array($object->getPHID() => $object->getDisplayName());\n  $data['conditions'] = array(array(\"projects.exact\",\"any\",$projectInfo));\n  $data['actions'] = array(array(\"email.other\", $projectInfo));\n\n  $conditions = array();\n  foreach ($data['conditions'] as $condition) {\n      if ($condition === null) {\n          // We manage this as a sparse array on the client, so may receive\n          // NULL if conditions have been removed.\n          continue;\n      }\n\n      $obj = new HeraldCondition();\n      $obj->setFieldName($condition[0]);\n      $obj->setFieldCondition($condition[1]);\n\n      if (is_array($condition[2])) {\n          $obj->setValue(array_keys($condition[2]));\n      } else {\n          $obj->setValue($condition[2]);\n      }\n\n      try {\n          $adapter->willSaveCondition($obj);\n      } catch (HeraldInvalidConditionException $ex) {\n          $errors[] = $ex->getMessage();\n      }\n\n      $conditions[] = $obj;\n  }\n\n  $actions = array();\n  foreach ($data['actions'] as $action) {\n      if ($action === null) {\n          // Sparse on the client; removals can give us NULLs.\n          continue;\n      }\n\n      if (!isset($action[1])) {\n          // Legitimate for any action which doesn't need a target, like\n          // \"Do nothing\".\n          $action[1] = null;\n      }\n\n      $obj = new HeraldActionRecord();\n      $obj->setAction($action[0]);\n      $obj->setTarget($action[1]);\n\n      try {\n          $adapter->willSaveAction($rule, $obj);\n      } catch (HeraldInvalidActionException $ex) {\n          $errors[] = $ex->getMessage();\n      }\n\n      $actions[] = $obj;\n  }\n\n  if (!$errors) {\n      $new_state = id(new HeraldRuleSerializer())->serializeRuleComponents(\n          $match_all,\n          $conditions,\n          $actions,\n          $repetition_policy_param);\n\n      $xactions = array();\n      $xactions[] = id(new HeraldRuleTransaction())\n      ->setTransactionType(HeraldRuleTransaction::TYPE_EDIT)\n      ->setNewValue($new_state);\n      $xactions[] = id(new HeraldRuleTransaction())\n      ->setTransactionType(HeraldRuleTransaction::TYPE_NAME)\n      ->setNewValue($new_name);\n\n      try {\n          id(new HeraldRuleEditor())\n          ->setActor($viewer)\n          ->setContinueOnNoEffect(true)\n          ->setContentSourceFromRequest($request)\n          ->applyTransactions($rule, $xactions);\n          return array(null, null);\n      } catch (Exception $ex) {\n          $errors[] = $ex->getMessage();\n      }\n  }\n\n  return array($e_name, $errors);\n}\n```\n\n在完成这个功能的时候具体需要了解 Herald 规则的具体创建过程，具体参考 `phabricator\\src\\applications\\herald\\controller\\HeraldRuleController.php` 中的 `saveRule` 方法。\n\n## 遇到的问题\n\n在所有的工作快完成的时候遇到了如下的一个问题\n\n```\nYou are trying to save some data to Phabricator, but the request your browser made included an incorrect token. Reload the page and try again. You may need to clear your cookies.\nThis was a Web request.\nThis request had no CSRF token.\nTo avoid this error, use phabricator_form() to construct forms. If you are already using phabricator_form(), make sure the form 'action' uses a relative URI (i.e., begins with a '/'). Forms using absolute URIs do not include CSRF tokens, to prevent leaking tokens to external sites.\n\nIf this page performs writes which do not require CSRF protection (usually, filling caches or logging), you can use AphrontWriteGuard::beginScopedUnguardedWrites() to temporarily bypass CSRF protection while writing. You should use this only for writes which can not be protected with normal CSRF mechanisms.\n\nSome UI elements (like PhabricatorActionListView) also have methods which will allow you to render links as forms (like setRenderAsForm(true)).\n```\n\n具体出现在\n\n```php\ntry {\n  id(new HeraldRuleEditor())\n  ->setActor($viewer)\n  ->setContinueOnNoEffect(true)\n  ->setContentSourceFromRequest($request)\n  ->applyTransactions($rule, $xactions);\n  return array(null, null);\n} catch (Exception $ex) {\n  $errors[] = $ex->getMessage();\n}\n```\n\n找了很多地方，最终发现 `$request` 对象的 `$request_data` 数组中缺少了 `__csrf__`, 通过如下的方式加上后不再报错\n\n```php\n$request_data['__csrf__'] = $request->getRequestData()['__csrf__']; //保留token否则添加失败\n```\n\n本人猜测这个属性在保存对象的时候与请求绑定，并不与具体的对象绑定，因为这个请求是本来是用来保存项目对象的。\n\n## 具体的代码\n\n- [提交](https://github.com/toulezu/phabricator/commit/99ac508712b39e316ce07597acc6208b3b6193dc)","source":"_posts/Phabricator 在创建项目的时候自动创建一个 Herald 规则.md","raw":"---\ntitle: Phabricator 在创建项目的时候自动创建一个 Herald 规则\ntitle_url: Phabricator-project-Herald\ndate: 2017-07-22\ntags: [Phabricator]\ncategories: Phabricator\ndescription: Phabricator 在创建项目的时候自动创建一个 Herald 规则\n---\n\n## 问题描述\n\nPhabricator 默认在添加一个新的项目成员的时候是不会给新成员发生邮件的，需要手工创建一个 Herald 规则。\n所以为了便于维护，需要扩展一个功能，具体就是：Phabricator 在创建项目的时候自动创建一个 Herald 规则。这个规则具体如下\n\n![herald1](http://7xt8a6.com1.z0.glb.clouddn.com/herald1.PNG)\n\n从代码角度理解如下\n\n```php\n// 手动插入规则信息, $object 是保存成功后的项目对象\n$projectInfo = array($object->getPHID() => $object->getDisplayName());\n$data['conditions'] = array(array(\"projects.exact\",\"any\",$projectInfo));\n$data['actions'] = array(array(\"email.other\", $projectInfo));\n```\n\n## 解决\n\n- 具体就是要在项目保存成功后获取到新项目的id和名称，然后再保存一个 Herald 规则\n\n- 并且项目更新的时候避免再新增 Herald 规则\n\n在 Phabricator 现有的代码基础上新增的代码如下\n\n![herald2](http://7xt8a6.com1.z0.glb.clouddn.com/herald3.PNG)\n\n新增的 saveProjectNotificationRule 方法具体如下：\n\n```php\n/**\n * 新增加项目的时候自动增加一个通知规则 herald\n *\n * author ck\n *\n * @param AphrontRequest $request\n * @param PhabricatorUser $viewer\n * @param PhabricatorProject $object\n * @return array\n */\nprivate function saveProjectNotificationRule(AphrontRequest $request, PhabricatorUser $viewer, PhabricatorProject $object) {\n  $adapter = HeraldAdapter::getAdapterForContentType('PhabricatorProjectHeraldAdapter');\n\n  // 手动构造一个form请求\n  $request_data = array();\n  $request_data['name'] = 'herald_rule_for_'.$object->getDisplayName();\n  $request_data['must_match'] = 'all';\n  $request_data['repetition_policy'] = 'every';\n  $request_data['__csrf__'] = $request->getRequestData()['__csrf__']; //保留token否则添加失败\n\n  // 手动构造一个通知规则\n  $rule = new HeraldRule();\n  $rule->setAuthorPHID($viewer->getPHID());\n  $rule->setMustMatchAll(1);\n  $rule->setContentType('PhabricatorProjectHeraldAdapter');\n  $rule->setRuleType('global');\n  $rule->setConfigVersion(38);\n\n  $rule_conditions = $rule->loadConditions();\n  $rule_actions = $rule->loadActions();\n\n  $rule->attachConditions($rule_conditions);\n  $rule->attachActions($rule_actions);\n      \n  $request->setRequestData($request_data);\n  \n  $new_name = $request->getStr('name');\n  $match_all = ($request->getStr('must_match') == 'all');\n  \n  $repetition_policy_param = $request->getStr('repetition_policy');\n  \n  $e_name = true;\n  $errors = array();\n\n  // 手动插入规则信息\n  $projectInfo = array($object->getPHID() => $object->getDisplayName());\n  $data['conditions'] = array(array(\"projects.exact\",\"any\",$projectInfo));\n  $data['actions'] = array(array(\"email.other\", $projectInfo));\n\n  $conditions = array();\n  foreach ($data['conditions'] as $condition) {\n      if ($condition === null) {\n          // We manage this as a sparse array on the client, so may receive\n          // NULL if conditions have been removed.\n          continue;\n      }\n\n      $obj = new HeraldCondition();\n      $obj->setFieldName($condition[0]);\n      $obj->setFieldCondition($condition[1]);\n\n      if (is_array($condition[2])) {\n          $obj->setValue(array_keys($condition[2]));\n      } else {\n          $obj->setValue($condition[2]);\n      }\n\n      try {\n          $adapter->willSaveCondition($obj);\n      } catch (HeraldInvalidConditionException $ex) {\n          $errors[] = $ex->getMessage();\n      }\n\n      $conditions[] = $obj;\n  }\n\n  $actions = array();\n  foreach ($data['actions'] as $action) {\n      if ($action === null) {\n          // Sparse on the client; removals can give us NULLs.\n          continue;\n      }\n\n      if (!isset($action[1])) {\n          // Legitimate for any action which doesn't need a target, like\n          // \"Do nothing\".\n          $action[1] = null;\n      }\n\n      $obj = new HeraldActionRecord();\n      $obj->setAction($action[0]);\n      $obj->setTarget($action[1]);\n\n      try {\n          $adapter->willSaveAction($rule, $obj);\n      } catch (HeraldInvalidActionException $ex) {\n          $errors[] = $ex->getMessage();\n      }\n\n      $actions[] = $obj;\n  }\n\n  if (!$errors) {\n      $new_state = id(new HeraldRuleSerializer())->serializeRuleComponents(\n          $match_all,\n          $conditions,\n          $actions,\n          $repetition_policy_param);\n\n      $xactions = array();\n      $xactions[] = id(new HeraldRuleTransaction())\n      ->setTransactionType(HeraldRuleTransaction::TYPE_EDIT)\n      ->setNewValue($new_state);\n      $xactions[] = id(new HeraldRuleTransaction())\n      ->setTransactionType(HeraldRuleTransaction::TYPE_NAME)\n      ->setNewValue($new_name);\n\n      try {\n          id(new HeraldRuleEditor())\n          ->setActor($viewer)\n          ->setContinueOnNoEffect(true)\n          ->setContentSourceFromRequest($request)\n          ->applyTransactions($rule, $xactions);\n          return array(null, null);\n      } catch (Exception $ex) {\n          $errors[] = $ex->getMessage();\n      }\n  }\n\n  return array($e_name, $errors);\n}\n```\n\n在完成这个功能的时候具体需要了解 Herald 规则的具体创建过程，具体参考 `phabricator\\src\\applications\\herald\\controller\\HeraldRuleController.php` 中的 `saveRule` 方法。\n\n## 遇到的问题\n\n在所有的工作快完成的时候遇到了如下的一个问题\n\n```\nYou are trying to save some data to Phabricator, but the request your browser made included an incorrect token. Reload the page and try again. You may need to clear your cookies.\nThis was a Web request.\nThis request had no CSRF token.\nTo avoid this error, use phabricator_form() to construct forms. If you are already using phabricator_form(), make sure the form 'action' uses a relative URI (i.e., begins with a '/'). Forms using absolute URIs do not include CSRF tokens, to prevent leaking tokens to external sites.\n\nIf this page performs writes which do not require CSRF protection (usually, filling caches or logging), you can use AphrontWriteGuard::beginScopedUnguardedWrites() to temporarily bypass CSRF protection while writing. You should use this only for writes which can not be protected with normal CSRF mechanisms.\n\nSome UI elements (like PhabricatorActionListView) also have methods which will allow you to render links as forms (like setRenderAsForm(true)).\n```\n\n具体出现在\n\n```php\ntry {\n  id(new HeraldRuleEditor())\n  ->setActor($viewer)\n  ->setContinueOnNoEffect(true)\n  ->setContentSourceFromRequest($request)\n  ->applyTransactions($rule, $xactions);\n  return array(null, null);\n} catch (Exception $ex) {\n  $errors[] = $ex->getMessage();\n}\n```\n\n找了很多地方，最终发现 `$request` 对象的 `$request_data` 数组中缺少了 `__csrf__`, 通过如下的方式加上后不再报错\n\n```php\n$request_data['__csrf__'] = $request->getRequestData()['__csrf__']; //保留token否则添加失败\n```\n\n本人猜测这个属性在保存对象的时候与请求绑定，并不与具体的对象绑定，因为这个请求是本来是用来保存项目对象的。\n\n## 具体的代码\n\n- [提交](https://github.com/toulezu/phabricator/commit/99ac508712b39e316ce07597acc6208b3b6193dc)","slug":"Phabricator 在创建项目的时候自动创建一个 Herald 规则","published":1,"updated":"2017-07-22T15:10:09.944Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfto0q7p000r18c7cz2r1xko","content":"<h2 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h2><p>Phabricator 默认在添加一个新的项目成员的时候是不会给新成员发生邮件的，需要手工创建一个 Herald 规则。<br>所以为了便于维护，需要扩展一个功能，具体就是：Phabricator 在创建项目的时候自动创建一个 Herald 规则。这个规则具体如下</p>\n<p><img src=\"http://7xt8a6.com1.z0.glb.clouddn.com/herald1.PNG\" alt=\"herald1\"></p>\n<p>从代码角度理解如下</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 手动插入规则信息, $object 是保存成功后的项目对象</span></span><br><span class=\"line\">$projectInfo = <span class=\"keyword\">array</span>($object-&gt;getPHID() =&gt; $object-&gt;getDisplayName());</span><br><span class=\"line\">$data[<span class=\"string\">'conditions'</span>] = <span class=\"keyword\">array</span>(<span class=\"keyword\">array</span>(<span class=\"string\">\"projects.exact\"</span>,<span class=\"string\">\"any\"</span>,$projectInfo));</span><br><span class=\"line\">$data[<span class=\"string\">'actions'</span>] = <span class=\"keyword\">array</span>(<span class=\"keyword\">array</span>(<span class=\"string\">\"email.other\"</span>, $projectInfo));</span><br></pre></td></tr></table></figure>\n<h2 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h2><ul>\n<li><p>具体就是要在项目保存成功后获取到新项目的id和名称，然后再保存一个 Herald 规则</p>\n</li>\n<li><p>并且项目更新的时候避免再新增 Herald 规则</p>\n</li>\n</ul>\n<p>在 Phabricator 现有的代码基础上新增的代码如下</p>\n<p><img src=\"http://7xt8a6.com1.z0.glb.clouddn.com/herald3.PNG\" alt=\"herald2\"></p>\n<p>新增的 saveProjectNotificationRule 方法具体如下：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * 新增加项目的时候自动增加一个通知规则 herald</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * author ck</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * <span class=\"doctag\">@param</span> AphrontRequest $request</span><br><span class=\"line\"> * <span class=\"doctag\">@param</span> PhabricatorUser $viewer</span><br><span class=\"line\"> * <span class=\"doctag\">@param</span> PhabricatorProject $object</span><br><span class=\"line\"> * <span class=\"doctag\">@return</span> array</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">saveProjectNotificationRule</span><span class=\"params\">(AphrontRequest $request, PhabricatorUser $viewer, PhabricatorProject $object)</span> </span>&#123;</span><br><span class=\"line\">  $adapter = HeraldAdapter::getAdapterForContentType(<span class=\"string\">'PhabricatorProjectHeraldAdapter'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 手动构造一个form请求</span></span><br><span class=\"line\">  $request_data = <span class=\"keyword\">array</span>();</span><br><span class=\"line\">  $request_data[<span class=\"string\">'name'</span>] = <span class=\"string\">'herald_rule_for_'</span>.$object-&gt;getDisplayName();</span><br><span class=\"line\">  $request_data[<span class=\"string\">'must_match'</span>] = <span class=\"string\">'all'</span>;</span><br><span class=\"line\">  $request_data[<span class=\"string\">'repetition_policy'</span>] = <span class=\"string\">'every'</span>;</span><br><span class=\"line\">  $request_data[<span class=\"string\">'__csrf__'</span>] = $request-&gt;getRequestData()[<span class=\"string\">'__csrf__'</span>]; <span class=\"comment\">//保留token否则添加失败</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 手动构造一个通知规则</span></span><br><span class=\"line\">  $rule = <span class=\"keyword\">new</span> HeraldRule();</span><br><span class=\"line\">  $rule-&gt;setAuthorPHID($viewer-&gt;getPHID());</span><br><span class=\"line\">  $rule-&gt;setMustMatchAll(<span class=\"number\">1</span>);</span><br><span class=\"line\">  $rule-&gt;setContentType(<span class=\"string\">'PhabricatorProjectHeraldAdapter'</span>);</span><br><span class=\"line\">  $rule-&gt;setRuleType(<span class=\"string\">'global'</span>);</span><br><span class=\"line\">  $rule-&gt;setConfigVersion(<span class=\"number\">38</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  $rule_conditions = $rule-&gt;loadConditions();</span><br><span class=\"line\">  $rule_actions = $rule-&gt;loadActions();</span><br><span class=\"line\"></span><br><span class=\"line\">  $rule-&gt;attachConditions($rule_conditions);</span><br><span class=\"line\">  $rule-&gt;attachActions($rule_actions);</span><br><span class=\"line\">      </span><br><span class=\"line\">  $request-&gt;setRequestData($request_data);</span><br><span class=\"line\">  </span><br><span class=\"line\">  $new_name = $request-&gt;getStr(<span class=\"string\">'name'</span>);</span><br><span class=\"line\">  $match_all = ($request-&gt;getStr(<span class=\"string\">'must_match'</span>) == <span class=\"string\">'all'</span>);</span><br><span class=\"line\">  </span><br><span class=\"line\">  $repetition_policy_param = $request-&gt;getStr(<span class=\"string\">'repetition_policy'</span>);</span><br><span class=\"line\">  </span><br><span class=\"line\">  $e_name = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">  $errors = <span class=\"keyword\">array</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 手动插入规则信息</span></span><br><span class=\"line\">  $projectInfo = <span class=\"keyword\">array</span>($object-&gt;getPHID() =&gt; $object-&gt;getDisplayName());</span><br><span class=\"line\">  $data[<span class=\"string\">'conditions'</span>] = <span class=\"keyword\">array</span>(<span class=\"keyword\">array</span>(<span class=\"string\">\"projects.exact\"</span>,<span class=\"string\">\"any\"</span>,$projectInfo));</span><br><span class=\"line\">  $data[<span class=\"string\">'actions'</span>] = <span class=\"keyword\">array</span>(<span class=\"keyword\">array</span>(<span class=\"string\">\"email.other\"</span>, $projectInfo));</span><br><span class=\"line\"></span><br><span class=\"line\">  $conditions = <span class=\"keyword\">array</span>();</span><br><span class=\"line\">  <span class=\"keyword\">foreach</span> ($data[<span class=\"string\">'conditions'</span>] <span class=\"keyword\">as</span> $condition) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ($condition === <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// We manage this as a sparse array on the client, so may receive</span></span><br><span class=\"line\">          <span class=\"comment\">// NULL if conditions have been removed.</span></span><br><span class=\"line\">          <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      $obj = <span class=\"keyword\">new</span> HeraldCondition();</span><br><span class=\"line\">      $obj-&gt;setFieldName($condition[<span class=\"number\">0</span>]);</span><br><span class=\"line\">      $obj-&gt;setFieldCondition($condition[<span class=\"number\">1</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (is_array($condition[<span class=\"number\">2</span>])) &#123;</span><br><span class=\"line\">          $obj-&gt;setValue(array_keys($condition[<span class=\"number\">2</span>]));</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          $obj-&gt;setValue($condition[<span class=\"number\">2</span>]);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          $adapter-&gt;willSaveCondition($obj);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (HeraldInvalidConditionException $ex) &#123;</span><br><span class=\"line\">          $errors[] = $ex-&gt;getMessage();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      $conditions[] = $obj;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  $actions = <span class=\"keyword\">array</span>();</span><br><span class=\"line\">  <span class=\"keyword\">foreach</span> ($data[<span class=\"string\">'actions'</span>] <span class=\"keyword\">as</span> $action) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ($action === <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// Sparse on the client; removals can give us NULLs.</span></span><br><span class=\"line\">          <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!<span class=\"keyword\">isset</span>($action[<span class=\"number\">1</span>])) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// Legitimate for any action which doesn't need a target, like</span></span><br><span class=\"line\">          <span class=\"comment\">// \"Do nothing\".</span></span><br><span class=\"line\">          $action[<span class=\"number\">1</span>] = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      $obj = <span class=\"keyword\">new</span> HeraldActionRecord();</span><br><span class=\"line\">      $obj-&gt;setAction($action[<span class=\"number\">0</span>]);</span><br><span class=\"line\">      $obj-&gt;setTarget($action[<span class=\"number\">1</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          $adapter-&gt;willSaveAction($rule, $obj);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (HeraldInvalidActionException $ex) &#123;</span><br><span class=\"line\">          $errors[] = $ex-&gt;getMessage();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      $actions[] = $obj;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!$errors) &#123;</span><br><span class=\"line\">      $new_state = id(<span class=\"keyword\">new</span> HeraldRuleSerializer())-&gt;serializeRuleComponents(</span><br><span class=\"line\">          $match_all,</span><br><span class=\"line\">          $conditions,</span><br><span class=\"line\">          $actions,</span><br><span class=\"line\">          $repetition_policy_param);</span><br><span class=\"line\"></span><br><span class=\"line\">      $xactions = <span class=\"keyword\">array</span>();</span><br><span class=\"line\">      $xactions[] = id(<span class=\"keyword\">new</span> HeraldRuleTransaction())</span><br><span class=\"line\">      -&gt;setTransactionType(HeraldRuleTransaction::TYPE_EDIT)</span><br><span class=\"line\">      -&gt;setNewValue($new_state);</span><br><span class=\"line\">      $xactions[] = id(<span class=\"keyword\">new</span> HeraldRuleTransaction())</span><br><span class=\"line\">      -&gt;setTransactionType(HeraldRuleTransaction::TYPE_NAME)</span><br><span class=\"line\">      -&gt;setNewValue($new_name);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          id(<span class=\"keyword\">new</span> HeraldRuleEditor())</span><br><span class=\"line\">          -&gt;setActor($viewer)</span><br><span class=\"line\">          -&gt;setContinueOnNoEffect(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">          -&gt;setContentSourceFromRequest($request)</span><br><span class=\"line\">          -&gt;applyTransactions($rule, $xactions);</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">array</span>(<span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (<span class=\"keyword\">Exception</span> $ex) &#123;</span><br><span class=\"line\">          $errors[] = $ex-&gt;getMessage();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">array</span>($e_name, $errors);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在完成这个功能的时候具体需要了解 Herald 规则的具体创建过程，具体参考 <code>phabricator\\src\\applications\\herald\\controller\\HeraldRuleController.php</code> 中的 <code>saveRule</code> 方法。</p>\n<h2 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h2><p>在所有的工作快完成的时候遇到了如下的一个问题</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">You are trying to save some data to Phabricator, but the request your browser made included an incorrect token. Reload the page and try again. You may need to clear your cookies.</span><br><span class=\"line\">This was a Web request.</span><br><span class=\"line\">This request had no CSRF token.</span><br><span class=\"line\">To avoid this error, use phabricator_form() to construct forms. If you are already using phabricator_form(), make sure the form &apos;action&apos; uses a relative URI (i.e., begins with a &apos;/&apos;). Forms using absolute URIs do not include CSRF tokens, to prevent leaking tokens to external sites.</span><br><span class=\"line\"></span><br><span class=\"line\">If this page performs writes which do not require CSRF protection (usually, filling caches or logging), you can use AphrontWriteGuard::beginScopedUnguardedWrites() to temporarily bypass CSRF protection while writing. You should use this only for writes which can not be protected with normal CSRF mechanisms.</span><br><span class=\"line\"></span><br><span class=\"line\">Some UI elements (like PhabricatorActionListView) also have methods which will allow you to render links as forms (like setRenderAsForm(true)).</span><br></pre></td></tr></table></figure>\n<p>具体出现在</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  id(<span class=\"keyword\">new</span> HeraldRuleEditor())</span><br><span class=\"line\">  -&gt;setActor($viewer)</span><br><span class=\"line\">  -&gt;setContinueOnNoEffect(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">  -&gt;setContentSourceFromRequest($request)</span><br><span class=\"line\">  -&gt;applyTransactions($rule, $xactions);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">array</span>(<span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (<span class=\"keyword\">Exception</span> $ex) &#123;</span><br><span class=\"line\">  $errors[] = $ex-&gt;getMessage();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>找了很多地方，最终发现 <code>$request</code> 对象的 <code>$request_data</code> 数组中缺少了 <code>__csrf__</code>, 通过如下的方式加上后不再报错</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$request_data[<span class=\"string\">'__csrf__'</span>] = $request-&gt;getRequestData()[<span class=\"string\">'__csrf__'</span>]; <span class=\"comment\">//保留token否则添加失败</span></span><br></pre></td></tr></table></figure>\n<p>本人猜测这个属性在保存对象的时候与请求绑定，并不与具体的对象绑定，因为这个请求是本来是用来保存项目对象的。</p>\n<h2 id=\"具体的代码\"><a href=\"#具体的代码\" class=\"headerlink\" title=\"具体的代码\"></a>具体的代码</h2><ul>\n<li><a href=\"https://github.com/toulezu/phabricator/commit/99ac508712b39e316ce07597acc6208b3b6193dc\" target=\"_blank\" rel=\"external\">提交</a></li>\n</ul>\n","excerpt":"","more":"<h2 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h2><p>Phabricator 默认在添加一个新的项目成员的时候是不会给新成员发生邮件的，需要手工创建一个 Herald 规则。<br>所以为了便于维护，需要扩展一个功能，具体就是：Phabricator 在创建项目的时候自动创建一个 Herald 规则。这个规则具体如下</p>\n<p><img src=\"http://7xt8a6.com1.z0.glb.clouddn.com/herald1.PNG\" alt=\"herald1\"></p>\n<p>从代码角度理解如下</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 手动插入规则信息, $object 是保存成功后的项目对象</span></span><br><span class=\"line\">$projectInfo = <span class=\"keyword\">array</span>($object-&gt;getPHID() =&gt; $object-&gt;getDisplayName());</span><br><span class=\"line\">$data[<span class=\"string\">'conditions'</span>] = <span class=\"keyword\">array</span>(<span class=\"keyword\">array</span>(<span class=\"string\">\"projects.exact\"</span>,<span class=\"string\">\"any\"</span>,$projectInfo));</span><br><span class=\"line\">$data[<span class=\"string\">'actions'</span>] = <span class=\"keyword\">array</span>(<span class=\"keyword\">array</span>(<span class=\"string\">\"email.other\"</span>, $projectInfo));</span><br></pre></td></tr></table></figure>\n<h2 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h2><ul>\n<li><p>具体就是要在项目保存成功后获取到新项目的id和名称，然后再保存一个 Herald 规则</p>\n</li>\n<li><p>并且项目更新的时候避免再新增 Herald 规则</p>\n</li>\n</ul>\n<p>在 Phabricator 现有的代码基础上新增的代码如下</p>\n<p><img src=\"http://7xt8a6.com1.z0.glb.clouddn.com/herald3.PNG\" alt=\"herald2\"></p>\n<p>新增的 saveProjectNotificationRule 方法具体如下：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * 新增加项目的时候自动增加一个通知规则 herald</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * author ck</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * <span class=\"doctag\">@param</span> AphrontRequest $request</span><br><span class=\"line\"> * <span class=\"doctag\">@param</span> PhabricatorUser $viewer</span><br><span class=\"line\"> * <span class=\"doctag\">@param</span> PhabricatorProject $object</span><br><span class=\"line\"> * <span class=\"doctag\">@return</span> array</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">saveProjectNotificationRule</span><span class=\"params\">(AphrontRequest $request, PhabricatorUser $viewer, PhabricatorProject $object)</span> </span>&#123;</span><br><span class=\"line\">  $adapter = HeraldAdapter::getAdapterForContentType(<span class=\"string\">'PhabricatorProjectHeraldAdapter'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 手动构造一个form请求</span></span><br><span class=\"line\">  $request_data = <span class=\"keyword\">array</span>();</span><br><span class=\"line\">  $request_data[<span class=\"string\">'name'</span>] = <span class=\"string\">'herald_rule_for_'</span>.$object-&gt;getDisplayName();</span><br><span class=\"line\">  $request_data[<span class=\"string\">'must_match'</span>] = <span class=\"string\">'all'</span>;</span><br><span class=\"line\">  $request_data[<span class=\"string\">'repetition_policy'</span>] = <span class=\"string\">'every'</span>;</span><br><span class=\"line\">  $request_data[<span class=\"string\">'__csrf__'</span>] = $request-&gt;getRequestData()[<span class=\"string\">'__csrf__'</span>]; <span class=\"comment\">//保留token否则添加失败</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 手动构造一个通知规则</span></span><br><span class=\"line\">  $rule = <span class=\"keyword\">new</span> HeraldRule();</span><br><span class=\"line\">  $rule-&gt;setAuthorPHID($viewer-&gt;getPHID());</span><br><span class=\"line\">  $rule-&gt;setMustMatchAll(<span class=\"number\">1</span>);</span><br><span class=\"line\">  $rule-&gt;setContentType(<span class=\"string\">'PhabricatorProjectHeraldAdapter'</span>);</span><br><span class=\"line\">  $rule-&gt;setRuleType(<span class=\"string\">'global'</span>);</span><br><span class=\"line\">  $rule-&gt;setConfigVersion(<span class=\"number\">38</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  $rule_conditions = $rule-&gt;loadConditions();</span><br><span class=\"line\">  $rule_actions = $rule-&gt;loadActions();</span><br><span class=\"line\"></span><br><span class=\"line\">  $rule-&gt;attachConditions($rule_conditions);</span><br><span class=\"line\">  $rule-&gt;attachActions($rule_actions);</span><br><span class=\"line\">      </span><br><span class=\"line\">  $request-&gt;setRequestData($request_data);</span><br><span class=\"line\">  </span><br><span class=\"line\">  $new_name = $request-&gt;getStr(<span class=\"string\">'name'</span>);</span><br><span class=\"line\">  $match_all = ($request-&gt;getStr(<span class=\"string\">'must_match'</span>) == <span class=\"string\">'all'</span>);</span><br><span class=\"line\">  </span><br><span class=\"line\">  $repetition_policy_param = $request-&gt;getStr(<span class=\"string\">'repetition_policy'</span>);</span><br><span class=\"line\">  </span><br><span class=\"line\">  $e_name = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">  $errors = <span class=\"keyword\">array</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 手动插入规则信息</span></span><br><span class=\"line\">  $projectInfo = <span class=\"keyword\">array</span>($object-&gt;getPHID() =&gt; $object-&gt;getDisplayName());</span><br><span class=\"line\">  $data[<span class=\"string\">'conditions'</span>] = <span class=\"keyword\">array</span>(<span class=\"keyword\">array</span>(<span class=\"string\">\"projects.exact\"</span>,<span class=\"string\">\"any\"</span>,$projectInfo));</span><br><span class=\"line\">  $data[<span class=\"string\">'actions'</span>] = <span class=\"keyword\">array</span>(<span class=\"keyword\">array</span>(<span class=\"string\">\"email.other\"</span>, $projectInfo));</span><br><span class=\"line\"></span><br><span class=\"line\">  $conditions = <span class=\"keyword\">array</span>();</span><br><span class=\"line\">  <span class=\"keyword\">foreach</span> ($data[<span class=\"string\">'conditions'</span>] <span class=\"keyword\">as</span> $condition) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ($condition === <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// We manage this as a sparse array on the client, so may receive</span></span><br><span class=\"line\">          <span class=\"comment\">// NULL if conditions have been removed.</span></span><br><span class=\"line\">          <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      $obj = <span class=\"keyword\">new</span> HeraldCondition();</span><br><span class=\"line\">      $obj-&gt;setFieldName($condition[<span class=\"number\">0</span>]);</span><br><span class=\"line\">      $obj-&gt;setFieldCondition($condition[<span class=\"number\">1</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (is_array($condition[<span class=\"number\">2</span>])) &#123;</span><br><span class=\"line\">          $obj-&gt;setValue(array_keys($condition[<span class=\"number\">2</span>]));</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          $obj-&gt;setValue($condition[<span class=\"number\">2</span>]);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          $adapter-&gt;willSaveCondition($obj);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (HeraldInvalidConditionException $ex) &#123;</span><br><span class=\"line\">          $errors[] = $ex-&gt;getMessage();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      $conditions[] = $obj;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  $actions = <span class=\"keyword\">array</span>();</span><br><span class=\"line\">  <span class=\"keyword\">foreach</span> ($data[<span class=\"string\">'actions'</span>] <span class=\"keyword\">as</span> $action) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ($action === <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// Sparse on the client; removals can give us NULLs.</span></span><br><span class=\"line\">          <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!<span class=\"keyword\">isset</span>($action[<span class=\"number\">1</span>])) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// Legitimate for any action which doesn't need a target, like</span></span><br><span class=\"line\">          <span class=\"comment\">// \"Do nothing\".</span></span><br><span class=\"line\">          $action[<span class=\"number\">1</span>] = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      $obj = <span class=\"keyword\">new</span> HeraldActionRecord();</span><br><span class=\"line\">      $obj-&gt;setAction($action[<span class=\"number\">0</span>]);</span><br><span class=\"line\">      $obj-&gt;setTarget($action[<span class=\"number\">1</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          $adapter-&gt;willSaveAction($rule, $obj);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (HeraldInvalidActionException $ex) &#123;</span><br><span class=\"line\">          $errors[] = $ex-&gt;getMessage();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      $actions[] = $obj;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!$errors) &#123;</span><br><span class=\"line\">      $new_state = id(<span class=\"keyword\">new</span> HeraldRuleSerializer())-&gt;serializeRuleComponents(</span><br><span class=\"line\">          $match_all,</span><br><span class=\"line\">          $conditions,</span><br><span class=\"line\">          $actions,</span><br><span class=\"line\">          $repetition_policy_param);</span><br><span class=\"line\"></span><br><span class=\"line\">      $xactions = <span class=\"keyword\">array</span>();</span><br><span class=\"line\">      $xactions[] = id(<span class=\"keyword\">new</span> HeraldRuleTransaction())</span><br><span class=\"line\">      -&gt;setTransactionType(HeraldRuleTransaction::TYPE_EDIT)</span><br><span class=\"line\">      -&gt;setNewValue($new_state);</span><br><span class=\"line\">      $xactions[] = id(<span class=\"keyword\">new</span> HeraldRuleTransaction())</span><br><span class=\"line\">      -&gt;setTransactionType(HeraldRuleTransaction::TYPE_NAME)</span><br><span class=\"line\">      -&gt;setNewValue($new_name);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          id(<span class=\"keyword\">new</span> HeraldRuleEditor())</span><br><span class=\"line\">          -&gt;setActor($viewer)</span><br><span class=\"line\">          -&gt;setContinueOnNoEffect(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">          -&gt;setContentSourceFromRequest($request)</span><br><span class=\"line\">          -&gt;applyTransactions($rule, $xactions);</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">array</span>(<span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (<span class=\"keyword\">Exception</span> $ex) &#123;</span><br><span class=\"line\">          $errors[] = $ex-&gt;getMessage();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">array</span>($e_name, $errors);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在完成这个功能的时候具体需要了解 Herald 规则的具体创建过程，具体参考 <code>phabricator\\src\\applications\\herald\\controller\\HeraldRuleController.php</code> 中的 <code>saveRule</code> 方法。</p>\n<h2 id=\"遇到的问题\"><a href=\"#遇到的问题\" class=\"headerlink\" title=\"遇到的问题\"></a>遇到的问题</h2><p>在所有的工作快完成的时候遇到了如下的一个问题</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">You are trying to save some data to Phabricator, but the request your browser made included an incorrect token. Reload the page and try again. You may need to clear your cookies.</span><br><span class=\"line\">This was a Web request.</span><br><span class=\"line\">This request had no CSRF token.</span><br><span class=\"line\">To avoid this error, use phabricator_form() to construct forms. If you are already using phabricator_form(), make sure the form &apos;action&apos; uses a relative URI (i.e., begins with a &apos;/&apos;). Forms using absolute URIs do not include CSRF tokens, to prevent leaking tokens to external sites.</span><br><span class=\"line\"></span><br><span class=\"line\">If this page performs writes which do not require CSRF protection (usually, filling caches or logging), you can use AphrontWriteGuard::beginScopedUnguardedWrites() to temporarily bypass CSRF protection while writing. You should use this only for writes which can not be protected with normal CSRF mechanisms.</span><br><span class=\"line\"></span><br><span class=\"line\">Some UI elements (like PhabricatorActionListView) also have methods which will allow you to render links as forms (like setRenderAsForm(true)).</span><br></pre></td></tr></table></figure>\n<p>具体出现在</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  id(<span class=\"keyword\">new</span> HeraldRuleEditor())</span><br><span class=\"line\">  -&gt;setActor($viewer)</span><br><span class=\"line\">  -&gt;setContinueOnNoEffect(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">  -&gt;setContentSourceFromRequest($request)</span><br><span class=\"line\">  -&gt;applyTransactions($rule, $xactions);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">array</span>(<span class=\"keyword\">null</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (<span class=\"keyword\">Exception</span> $ex) &#123;</span><br><span class=\"line\">  $errors[] = $ex-&gt;getMessage();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>找了很多地方，最终发现 <code>$request</code> 对象的 <code>$request_data</code> 数组中缺少了 <code>__csrf__</code>, 通过如下的方式加上后不再报错</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$request_data[<span class=\"string\">'__csrf__'</span>] = $request-&gt;getRequestData()[<span class=\"string\">'__csrf__'</span>]; <span class=\"comment\">//保留token否则添加失败</span></span><br></pre></td></tr></table></figure>\n<p>本人猜测这个属性在保存对象的时候与请求绑定，并不与具体的对象绑定，因为这个请求是本来是用来保存项目对象的。</p>\n<h2 id=\"具体的代码\"><a href=\"#具体的代码\" class=\"headerlink\" title=\"具体的代码\"></a>具体的代码</h2><ul>\n<li><a href=\"https://github.com/toulezu/phabricator/commit/99ac508712b39e316ce07597acc6208b3b6193dc\">提交</a></li>\n</ul>\n"},{"title":"Phabricator 的 conduit API 使用说明","title_url":"Phabricator-conduit-API-Java","date":"2017-08-14T16:00:00.000Z","description":"Phabricator 的 conduit API 使用说明","_content":"\n## 基本介绍\n\nPhabricator 的 conduit API 地址在 `http://test.pha.com/conduit/`, 在使用 API 前需要生成一个访问用的 Token,地址在 `http://test.pha.com/settings/user/chen_k/page/apitokens/` 其中 `chen_k` 是自己的用户名.\n\n这里举一个查询任务的API，地址在`http://test.pha.com/conduit/method/maniphest.search/`.\n\n## 参数介绍\n\n![pha-api-param](http://7xt8a6.com1.z0.glb.clouddn.com/pha-api-param.PNG)\n\n- queryKey 表示 Phabricator 内置的查询对象，具体有 \"assigned\", \"authored\", \"subscribed\", \"open\", \"all\", 当然也可以自定义查询后在这里使用\n- constraints ： 查询条件，`{\"statuses\": [\"open\"]}` 表示任务状态为 open 的\n- attachments 任务对象关联其他对象查询， `{ \"subscribers\": true}` 表示查询任务的订阅者\n- order 排序，内置的有 \"priority\",\"updated\",\"outdated\",\"newest\",\"oldest\",\"title\", \"priority\" 表示 `order by priority, subpriority, id`\n- before 表示分页中的 上一页\n- after 表示分页中的 下一页\n- limit 表示分页中的 每页记录数\n\n## 使用 Java 访问 API\n\n点击 `Call Method` 后，生成的 cURL 查询格式如下\n\n![pha-api-param-2](http://7xt8a6.com1.z0.glb.clouddn.com/pha-api-param-2.PNG)\n\n```\n$ curl http://test.pha.com/api/maniphest.search \\\n    -d api.token=api-token \\\n    -d queryKey=all \\\n    -d constraints[statuses][0]=open \\\n    -d attachments[subscribers]=1 \\\n    -d order[0]=id\n```\n\n在 Java 中查询方式如下, 主要就是根据生成的 cURL 参数来构造查询\n\n```java\npublic void testPhabricatorAPI() {\n\ttry {\n\t\tResponse res = Request.Post(\"http://test.pha.com/api/maniphest.search\")\n\t\t\t\t.bodyForm(Form.form()\n\t\t\t\t.add(\"api.token\", \"api-6mlsh56cb5uexqbxgpnvah6djhmc\")\n\t\t\t\t.add(\"queryKey\", \"all\")\n\t\t\t\t.add(\"constraints[statuses][0]\", \"open\")\n\t\t\t\t.add(\"attachments[subscribers]\", \"1\")\n\t\t\t\t.add(\"order[0]\", \"id\")\n\t\t\t\t.build())\n\t\t\t\t.execute();\n\t\tContent content = res.returnContent();\n\t\tSystem.out.println(content.toString());\n\t} catch (ClientProtocolException e) {\n\t\te.printStackTrace();\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t}\n}\n```\n\n这里使用的 Maven 依赖如下\n\n```xml\n<dependency>\n\t<groupId>org.apache.httpcomponents</groupId>\n\t<artifactId>fluent-hc</artifactId>\n\t<version>4.3.1</version>\n</dependency>\n\n<dependency>\n\t<groupId>org.apache.httpcomponents</groupId>\n\t<artifactId>httpclient</artifactId>\n\t<version>4.3.1</version>\n</dependency>\n\n<dependency>\n\t<groupId>org.apache.httpcomponents</groupId>\n\t<artifactId>httpcore</artifactId>\n\t<version>4.3.2</version>\n</dependency> \n```\n\n## 使用 before，after 和 limit 进行翻页查询\n\n![pha-api-param-1](http://7xt8a6.com1.z0.glb.clouddn.com/pha-api-param-1.PNG)\n\n这里举个例子，当 before，after 和 limit 三个参数为空的时候\n返回的任务 id 分别是：28，27，26，22，21，19，17，16，14，13，12，11，10，9，7，5，1\n\n- 当 before=21,after为空,limit=5, 返回 28，27，26，22，相当于上一页\n- 当 before为空，after=22, limit=5, 返回 21, 19，17，16，14，相当于下一页\n- 当 before为空，after=14, limit=5, 返回 13，12，11，10，9，相当于下一页\n\n## 总结\n\n本文简单介绍了 Phabricator 的 conduit API 的使用，关键点在于通过 Phabricator 生成的 cURL 参数来构造 Java 查询。\n","source":"_posts/Phabricator 的 conduit API 使用说明.md","raw":"---\ntitle: Phabricator 的 conduit API 使用说明\ntitle_url: Phabricator-conduit-API-Java\ndate: 2017-08-15\ntags: Phabricator\ncategories: [Phabricator,PHP]\ndescription: Phabricator 的 conduit API 使用说明\n---\n\n## 基本介绍\n\nPhabricator 的 conduit API 地址在 `http://test.pha.com/conduit/`, 在使用 API 前需要生成一个访问用的 Token,地址在 `http://test.pha.com/settings/user/chen_k/page/apitokens/` 其中 `chen_k` 是自己的用户名.\n\n这里举一个查询任务的API，地址在`http://test.pha.com/conduit/method/maniphest.search/`.\n\n## 参数介绍\n\n![pha-api-param](http://7xt8a6.com1.z0.glb.clouddn.com/pha-api-param.PNG)\n\n- queryKey 表示 Phabricator 内置的查询对象，具体有 \"assigned\", \"authored\", \"subscribed\", \"open\", \"all\", 当然也可以自定义查询后在这里使用\n- constraints ： 查询条件，`{\"statuses\": [\"open\"]}` 表示任务状态为 open 的\n- attachments 任务对象关联其他对象查询， `{ \"subscribers\": true}` 表示查询任务的订阅者\n- order 排序，内置的有 \"priority\",\"updated\",\"outdated\",\"newest\",\"oldest\",\"title\", \"priority\" 表示 `order by priority, subpriority, id`\n- before 表示分页中的 上一页\n- after 表示分页中的 下一页\n- limit 表示分页中的 每页记录数\n\n## 使用 Java 访问 API\n\n点击 `Call Method` 后，生成的 cURL 查询格式如下\n\n![pha-api-param-2](http://7xt8a6.com1.z0.glb.clouddn.com/pha-api-param-2.PNG)\n\n```\n$ curl http://test.pha.com/api/maniphest.search \\\n    -d api.token=api-token \\\n    -d queryKey=all \\\n    -d constraints[statuses][0]=open \\\n    -d attachments[subscribers]=1 \\\n    -d order[0]=id\n```\n\n在 Java 中查询方式如下, 主要就是根据生成的 cURL 参数来构造查询\n\n```java\npublic void testPhabricatorAPI() {\n\ttry {\n\t\tResponse res = Request.Post(\"http://test.pha.com/api/maniphest.search\")\n\t\t\t\t.bodyForm(Form.form()\n\t\t\t\t.add(\"api.token\", \"api-6mlsh56cb5uexqbxgpnvah6djhmc\")\n\t\t\t\t.add(\"queryKey\", \"all\")\n\t\t\t\t.add(\"constraints[statuses][0]\", \"open\")\n\t\t\t\t.add(\"attachments[subscribers]\", \"1\")\n\t\t\t\t.add(\"order[0]\", \"id\")\n\t\t\t\t.build())\n\t\t\t\t.execute();\n\t\tContent content = res.returnContent();\n\t\tSystem.out.println(content.toString());\n\t} catch (ClientProtocolException e) {\n\t\te.printStackTrace();\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t}\n}\n```\n\n这里使用的 Maven 依赖如下\n\n```xml\n<dependency>\n\t<groupId>org.apache.httpcomponents</groupId>\n\t<artifactId>fluent-hc</artifactId>\n\t<version>4.3.1</version>\n</dependency>\n\n<dependency>\n\t<groupId>org.apache.httpcomponents</groupId>\n\t<artifactId>httpclient</artifactId>\n\t<version>4.3.1</version>\n</dependency>\n\n<dependency>\n\t<groupId>org.apache.httpcomponents</groupId>\n\t<artifactId>httpcore</artifactId>\n\t<version>4.3.2</version>\n</dependency> \n```\n\n## 使用 before，after 和 limit 进行翻页查询\n\n![pha-api-param-1](http://7xt8a6.com1.z0.glb.clouddn.com/pha-api-param-1.PNG)\n\n这里举个例子，当 before，after 和 limit 三个参数为空的时候\n返回的任务 id 分别是：28，27，26，22，21，19，17，16，14，13，12，11，10，9，7，5，1\n\n- 当 before=21,after为空,limit=5, 返回 28，27，26，22，相当于上一页\n- 当 before为空，after=22, limit=5, 返回 21, 19，17，16，14，相当于下一页\n- 当 before为空，after=14, limit=5, 返回 13，12，11，10，9，相当于下一页\n\n## 总结\n\n本文简单介绍了 Phabricator 的 conduit API 的使用，关键点在于通过 Phabricator 生成的 cURL 参数来构造 Java 查询。\n","slug":"Phabricator 的 conduit API 使用说明","published":1,"updated":"2018-01-01T12:55:41.358Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfto0q7t000v18c7bcj10zbn","content":"<h2 id=\"基本介绍\"><a href=\"#基本介绍\" class=\"headerlink\" title=\"基本介绍\"></a>基本介绍</h2><p>Phabricator 的 conduit API 地址在 <code>http://test.pha.com/conduit/</code>, 在使用 API 前需要生成一个访问用的 Token,地址在 <code>http://test.pha.com/settings/user/chen_k/page/apitokens/</code> 其中 <code>chen_k</code> 是自己的用户名.</p>\n<p>这里举一个查询任务的API，地址在<code>http://test.pha.com/conduit/method/maniphest.search/</code>.</p>\n<h2 id=\"参数介绍\"><a href=\"#参数介绍\" class=\"headerlink\" title=\"参数介绍\"></a>参数介绍</h2><p><img src=\"http://7xt8a6.com1.z0.glb.clouddn.com/pha-api-param.PNG\" alt=\"pha-api-param\"></p>\n<ul>\n<li>queryKey 表示 Phabricator 内置的查询对象，具体有 “assigned”, “authored”, “subscribed”, “open”, “all”, 当然也可以自定义查询后在这里使用</li>\n<li>constraints ： 查询条件，<code>{&quot;statuses&quot;: [&quot;open&quot;]}</code> 表示任务状态为 open 的</li>\n<li>attachments 任务对象关联其他对象查询， <code>{ &quot;subscribers&quot;: true}</code> 表示查询任务的订阅者</li>\n<li>order 排序，内置的有 “priority”,”updated”,”outdated”,”newest”,”oldest”,”title”, “priority” 表示 <code>order by priority, subpriority, id</code></li>\n<li>before 表示分页中的 上一页</li>\n<li>after 表示分页中的 下一页</li>\n<li>limit 表示分页中的 每页记录数</li>\n</ul>\n<h2 id=\"使用-Java-访问-API\"><a href=\"#使用-Java-访问-API\" class=\"headerlink\" title=\"使用 Java 访问 API\"></a>使用 Java 访问 API</h2><p>点击 <code>Call Method</code> 后，生成的 cURL 查询格式如下</p>\n<p><img src=\"http://7xt8a6.com1.z0.glb.clouddn.com/pha-api-param-2.PNG\" alt=\"pha-api-param-2\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl http://test.pha.com/api/maniphest.search \\</span><br><span class=\"line\">    -d api.token=api-token \\</span><br><span class=\"line\">    -d queryKey=all \\</span><br><span class=\"line\">    -d constraints[statuses][0]=open \\</span><br><span class=\"line\">    -d attachments[subscribers]=1 \\</span><br><span class=\"line\">    -d order[0]=id</span><br></pre></td></tr></table></figure>\n<p>在 Java 中查询方式如下, 主要就是根据生成的 cURL 参数来构造查询</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testPhabricatorAPI</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\tResponse res = Request.Post(<span class=\"string\">\"http://test.pha.com/api/maniphest.search\"</span>)</span><br><span class=\"line\">\t\t\t\t.bodyForm(Form.form()</span><br><span class=\"line\">\t\t\t\t.add(<span class=\"string\">\"api.token\"</span>, <span class=\"string\">\"api-6mlsh56cb5uexqbxgpnvah6djhmc\"</span>)</span><br><span class=\"line\">\t\t\t\t.add(<span class=\"string\">\"queryKey\"</span>, <span class=\"string\">\"all\"</span>)</span><br><span class=\"line\">\t\t\t\t.add(<span class=\"string\">\"constraints[statuses][0]\"</span>, <span class=\"string\">\"open\"</span>)</span><br><span class=\"line\">\t\t\t\t.add(<span class=\"string\">\"attachments[subscribers]\"</span>, <span class=\"string\">\"1\"</span>)</span><br><span class=\"line\">\t\t\t\t.add(<span class=\"string\">\"order[0]\"</span>, <span class=\"string\">\"id\"</span>)</span><br><span class=\"line\">\t\t\t\t.build())</span><br><span class=\"line\">\t\t\t\t.execute();</span><br><span class=\"line\">\t\tContent content = res.returnContent();</span><br><span class=\"line\">\t\tSystem.out.println(content.toString());</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (ClientProtocolException e) &#123;</span><br><span class=\"line\">\t\te.printStackTrace();</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">\t\te.printStackTrace();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里使用的 Maven 依赖如下</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.httpcomponents<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>fluent-hc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.3.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.httpcomponents<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>httpclient<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.3.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.httpcomponents<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>httpcore<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.3.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"使用-before，after-和-limit-进行翻页查询\"><a href=\"#使用-before，after-和-limit-进行翻页查询\" class=\"headerlink\" title=\"使用 before，after 和 limit 进行翻页查询\"></a>使用 before，after 和 limit 进行翻页查询</h2><p><img src=\"http://7xt8a6.com1.z0.glb.clouddn.com/pha-api-param-1.PNG\" alt=\"pha-api-param-1\"></p>\n<p>这里举个例子，当 before，after 和 limit 三个参数为空的时候<br>返回的任务 id 分别是：28，27，26，22，21，19，17，16，14，13，12，11，10，9，7，5，1</p>\n<ul>\n<li>当 before=21,after为空,limit=5, 返回 28，27，26，22，相当于上一页</li>\n<li>当 before为空，after=22, limit=5, 返回 21, 19，17，16，14，相当于下一页</li>\n<li>当 before为空，after=14, limit=5, 返回 13，12，11，10，9，相当于下一页</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>本文简单介绍了 Phabricator 的 conduit API 的使用，关键点在于通过 Phabricator 生成的 cURL 参数来构造 Java 查询。</p>\n","excerpt":"","more":"<h2 id=\"基本介绍\"><a href=\"#基本介绍\" class=\"headerlink\" title=\"基本介绍\"></a>基本介绍</h2><p>Phabricator 的 conduit API 地址在 <code>http://test.pha.com/conduit/</code>, 在使用 API 前需要生成一个访问用的 Token,地址在 <code>http://test.pha.com/settings/user/chen_k/page/apitokens/</code> 其中 <code>chen_k</code> 是自己的用户名.</p>\n<p>这里举一个查询任务的API，地址在<code>http://test.pha.com/conduit/method/maniphest.search/</code>.</p>\n<h2 id=\"参数介绍\"><a href=\"#参数介绍\" class=\"headerlink\" title=\"参数介绍\"></a>参数介绍</h2><p><img src=\"http://7xt8a6.com1.z0.glb.clouddn.com/pha-api-param.PNG\" alt=\"pha-api-param\"></p>\n<ul>\n<li>queryKey 表示 Phabricator 内置的查询对象，具体有 “assigned”, “authored”, “subscribed”, “open”, “all”, 当然也可以自定义查询后在这里使用</li>\n<li>constraints ： 查询条件，<code>{&quot;statuses&quot;: [&quot;open&quot;]}</code> 表示任务状态为 open 的</li>\n<li>attachments 任务对象关联其他对象查询， <code>{ &quot;subscribers&quot;: true}</code> 表示查询任务的订阅者</li>\n<li>order 排序，内置的有 “priority”,”updated”,”outdated”,”newest”,”oldest”,”title”, “priority” 表示 <code>order by priority, subpriority, id</code></li>\n<li>before 表示分页中的 上一页</li>\n<li>after 表示分页中的 下一页</li>\n<li>limit 表示分页中的 每页记录数</li>\n</ul>\n<h2 id=\"使用-Java-访问-API\"><a href=\"#使用-Java-访问-API\" class=\"headerlink\" title=\"使用 Java 访问 API\"></a>使用 Java 访问 API</h2><p>点击 <code>Call Method</code> 后，生成的 cURL 查询格式如下</p>\n<p><img src=\"http://7xt8a6.com1.z0.glb.clouddn.com/pha-api-param-2.PNG\" alt=\"pha-api-param-2\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl http://test.pha.com/api/maniphest.search \\</span><br><span class=\"line\">    -d api.token=api-token \\</span><br><span class=\"line\">    -d queryKey=all \\</span><br><span class=\"line\">    -d constraints[statuses][0]=open \\</span><br><span class=\"line\">    -d attachments[subscribers]=1 \\</span><br><span class=\"line\">    -d order[0]=id</span><br></pre></td></tr></table></figure>\n<p>在 Java 中查询方式如下, 主要就是根据生成的 cURL 参数来构造查询</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testPhabricatorAPI</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\tResponse res = Request.Post(<span class=\"string\">\"http://test.pha.com/api/maniphest.search\"</span>)</span><br><span class=\"line\">\t\t\t\t.bodyForm(Form.form()</span><br><span class=\"line\">\t\t\t\t.add(<span class=\"string\">\"api.token\"</span>, <span class=\"string\">\"api-6mlsh56cb5uexqbxgpnvah6djhmc\"</span>)</span><br><span class=\"line\">\t\t\t\t.add(<span class=\"string\">\"queryKey\"</span>, <span class=\"string\">\"all\"</span>)</span><br><span class=\"line\">\t\t\t\t.add(<span class=\"string\">\"constraints[statuses][0]\"</span>, <span class=\"string\">\"open\"</span>)</span><br><span class=\"line\">\t\t\t\t.add(<span class=\"string\">\"attachments[subscribers]\"</span>, <span class=\"string\">\"1\"</span>)</span><br><span class=\"line\">\t\t\t\t.add(<span class=\"string\">\"order[0]\"</span>, <span class=\"string\">\"id\"</span>)</span><br><span class=\"line\">\t\t\t\t.build())</span><br><span class=\"line\">\t\t\t\t.execute();</span><br><span class=\"line\">\t\tContent content = res.returnContent();</span><br><span class=\"line\">\t\tSystem.out.println(content.toString());</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (ClientProtocolException e) &#123;</span><br><span class=\"line\">\t\te.printStackTrace();</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">\t\te.printStackTrace();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里使用的 Maven 依赖如下</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.httpcomponents<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>fluent-hc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.3.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.httpcomponents<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>httpclient<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.3.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.httpcomponents<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>httpcore<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.3.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"使用-before，after-和-limit-进行翻页查询\"><a href=\"#使用-before，after-和-limit-进行翻页查询\" class=\"headerlink\" title=\"使用 before，after 和 limit 进行翻页查询\"></a>使用 before，after 和 limit 进行翻页查询</h2><p><img src=\"http://7xt8a6.com1.z0.glb.clouddn.com/pha-api-param-1.PNG\" alt=\"pha-api-param-1\"></p>\n<p>这里举个例子，当 before，after 和 limit 三个参数为空的时候<br>返回的任务 id 分别是：28，27，26，22，21，19，17，16，14，13，12，11，10，9，7，5，1</p>\n<ul>\n<li>当 before=21,after为空,limit=5, 返回 28，27，26，22，相当于上一页</li>\n<li>当 before为空，after=22, limit=5, 返回 21, 19，17，16，14，相当于下一页</li>\n<li>当 before为空，after=14, limit=5, 返回 13，12，11，10，9，相当于下一页</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>本文简单介绍了 Phabricator 的 conduit API 的使用，关键点在于通过 Phabricator 生成的 cURL 参数来构造 Java 查询。</p>\n"},{"title":"Swagger2 在 SpringMVC 项目中的应用","title_url":"Swagger2-SpringMVC","date":"2017-06-13T16:00:00.000Z","description":"Swagger2 在 SpringMVC 项目中的应用","_content":"\n## 添加 Maven 依赖\n\n```xml\n<dependency>\n\t<groupId>io.springfox</groupId>\n\t<artifactId>springfox-swagger2</artifactId>\n\t<version>2.5.0</version>\n</dependency> \n<dependency>\n\t<groupId>io.springfox</groupId>\n\t<artifactId>springfox-swagger-ui</artifactId>\n\t<version>2.5.0</version>\n</dependency>\n\n<dependency>\n\t<groupId>com.fasterxml.jackson.core</groupId>\n\t<artifactId>jackson-annotations</artifactId>\n\t<version>2.7.4</version>\n</dependency>\n<dependency>\n\t<groupId>com.fasterxml.jackson.core</groupId>\n\t<artifactId>jackson-databind</artifactId>\n\t<version>2.7.4</version>\n</dependency>\n<dependency>\n\t<groupId>com.fasterxml.jackson.core</groupId>\n\t<artifactId>jackson-core</artifactId>\n\t<version>2.7.4</version>\n</dependency>\n```\n\n其中 `springfox-swagger2` 用于在访问 `http://myapp/v2/api-docs` 时生成API的 json 数据, `springfox-swagger-ui`则用于将 json 数据以 HTML 的形式将API展示出来,便于在线调试. \n\n`v2/api-docs` 这个路径定义在 `springfox-swagger2` 项目中的 [Swagger2Controller](https://github.com/springfox/springfox/blob/master/springfox-swagger2/src/main/java/springfox/documentation/swagger2/web/Swagger2Controller.java) 类中, 每次访问 `http://myapp/v2/api-docs` 都将生成一个 Swagger 对象,并使用 jackson 的 ObjectMapper 对象将 Swagger 对象转成 json 返回给浏览器,因此这里也要添加 jackson 的相关依赖.\n\nspringfox 的相关仓库地址如下\n\n- Release\n\n```xml\n<repositories>\n    <repository>\n      <id>jcenter-Release</id>\n      <name>jcenter</name>\n      <url>https://jcenter.bintray.com/</url>\n    </repository>\n</repositories>\n```\n\n- Snapshots\n\n```xml\n<repositories>\n    <repository>\n      <id>jcenter-snapshots</id>\n      <name>jcenter</name>\n      <url>http://oss.jfrog.org/artifactory/oss-snapshot-local/</url>\n    </repository>\n</repositories>\n```\n\n## 添加 SwaggerConfig 配置类\n\n```java\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.servlet.config.annotation.EnableWebMvc;\n\nimport com.ckjava.test.web.ApiController;\n\nimport io.swagger.annotations.Api;\nimport springfox.documentation.builders.ApiInfoBuilder;\nimport springfox.documentation.builders.PathSelectors;\nimport springfox.documentation.builders.RequestHandlerSelectors;\nimport springfox.documentation.service.ApiInfo;\nimport springfox.documentation.spi.DocumentationType;\nimport springfox.documentation.spring.web.plugins.Docket;\nimport springfox.documentation.swagger2.annotations.EnableSwagger2;\n\n@Configuration\n@EnableWebMvc\n@EnableSwagger2\n/* @ComponentScan(basePackageClasses = { ApiController.class }) */\n@ComponentScan(basePackages = \"com.ckjava.test.web\")\npublic class SwaggerConfig {\n\n    @Bean\n    public Docket api(){\n        return new Docket(DocumentationType.SWAGGER_2)\n            .select()\n            .apis(RequestHandlerSelectors.withClassAnnotation(Api.class))\n            .paths(PathSelectors.any())\n            .build()\n            .apiInfo(apiInfo());\n    }\n\n    private ApiInfo apiInfo() {\n        return new ApiInfoBuilder()\n            .title(\"TITLE\")\n            .description(\"DESCRIPTION\")\n            .version(\"VERSION\")\n            .termsOfServiceUrl(\"http://terms-of-services.url\")\n            .license(\"LICENSE\")\n            .licenseUrl(\"http://url-to-license.com\")\n            .build();\n    }\n\n}\n```\n\n- 其中 `@ComponentScan(basePackages = \"com.ckjava.test.web\")` 指出 `@Controller` 类所在的包名.\n- 也可以通过 `@ComponentScan(basePackageClasses = { ApiController.class })` 指出具体的 `@Controller` 类\n- 其中 `RequestHandlerSelectors.withClassAnnotation(Api.class)` 指出只扫描带有 `io.swagger.annotations.Api` 注解的类\n\n- WebAppConfig 配置类用于配置展示 Swagger 的 UI, 具体如下\n\n```java\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.servlet.config.annotation.EnableWebMvc;\nimport org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;\n\n@Configuration\n@EnableWebMvc\npublic class WebAppConfig extends WebMvcConfigurerAdapter {\n\n    @Override \n    public void addResourceHandlers(ResourceHandlerRegistry registry) {\n        registry.addResourceHandler(\"swagger-ui.html\").addResourceLocations(\"classpath:/META-INF/resources/\");\n        registry.addResourceHandler(\"/webjars/**\").addResourceLocations(\"classpath:/META-INF/resources/webjars/\");\n    }\n\n}\n```\n\n- 等项目启动后可以通过 `http://myapp/swagger-ui.html` 访问到开放的API\n\n## 可能遇到的问题\n\n- 项目启动中遇到 `java.lang.NoClassDefFoundError: com/fasterxml/classmate/members/ResolvedParameterizedMember` 异常\n\n原因如下:\n由于在 springfox-swagger2 中依赖了 classmate-1.3.1.jar 而项目中使用了 hibernate-validator 其中又依赖了 classmate-1.0.0.jar,需要在 hibernate-validator 排除 classmate 依赖\n\n解决如下:\n```xml\n<dependency>\n\t<groupId>org.hibernate</groupId>\n\t<artifactId>hibernate-validator</artifactId>\n\t<version>${validator.version}</version>\n\t<exclusions>\n\t\t<exclusion>\n\t\t\t<groupId>com.fasterxml</groupId>\n\t\t\t<artifactId>classmate</artifactId>\n\t\t</exclusion>\n\t</exclusions>\n</dependency>\n```\n\n## 使用的Demo\n\n- [plainWebApi](https://github.com/toulezu/play/tree/master/plainWebApi)\n\n## 参考\n\n- [A 'simple' way to implement Swagger in a Spring MVC application](https://stackoverflow.com/questions/26720090/a-simple-way-to-implement-swagger-in-a-spring-mvc-application)\n- [springfox docs](http://springfox.github.io/springfox/docs/current/)\n","source":"_posts/Swagger2 在 SpringMVC 项目中的应用.md","raw":"---\ntitle: Swagger2 在 SpringMVC 项目中的应用\ntitle_url: Swagger2-SpringMVC\ndate: 2017-06-14\ntags: [Swagger2,SpringMVC]\ncategories: 技术\ndescription: Swagger2 在 SpringMVC 项目中的应用\n---\n\n## 添加 Maven 依赖\n\n```xml\n<dependency>\n\t<groupId>io.springfox</groupId>\n\t<artifactId>springfox-swagger2</artifactId>\n\t<version>2.5.0</version>\n</dependency> \n<dependency>\n\t<groupId>io.springfox</groupId>\n\t<artifactId>springfox-swagger-ui</artifactId>\n\t<version>2.5.0</version>\n</dependency>\n\n<dependency>\n\t<groupId>com.fasterxml.jackson.core</groupId>\n\t<artifactId>jackson-annotations</artifactId>\n\t<version>2.7.4</version>\n</dependency>\n<dependency>\n\t<groupId>com.fasterxml.jackson.core</groupId>\n\t<artifactId>jackson-databind</artifactId>\n\t<version>2.7.4</version>\n</dependency>\n<dependency>\n\t<groupId>com.fasterxml.jackson.core</groupId>\n\t<artifactId>jackson-core</artifactId>\n\t<version>2.7.4</version>\n</dependency>\n```\n\n其中 `springfox-swagger2` 用于在访问 `http://myapp/v2/api-docs` 时生成API的 json 数据, `springfox-swagger-ui`则用于将 json 数据以 HTML 的形式将API展示出来,便于在线调试. \n\n`v2/api-docs` 这个路径定义在 `springfox-swagger2` 项目中的 [Swagger2Controller](https://github.com/springfox/springfox/blob/master/springfox-swagger2/src/main/java/springfox/documentation/swagger2/web/Swagger2Controller.java) 类中, 每次访问 `http://myapp/v2/api-docs` 都将生成一个 Swagger 对象,并使用 jackson 的 ObjectMapper 对象将 Swagger 对象转成 json 返回给浏览器,因此这里也要添加 jackson 的相关依赖.\n\nspringfox 的相关仓库地址如下\n\n- Release\n\n```xml\n<repositories>\n    <repository>\n      <id>jcenter-Release</id>\n      <name>jcenter</name>\n      <url>https://jcenter.bintray.com/</url>\n    </repository>\n</repositories>\n```\n\n- Snapshots\n\n```xml\n<repositories>\n    <repository>\n      <id>jcenter-snapshots</id>\n      <name>jcenter</name>\n      <url>http://oss.jfrog.org/artifactory/oss-snapshot-local/</url>\n    </repository>\n</repositories>\n```\n\n## 添加 SwaggerConfig 配置类\n\n```java\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.servlet.config.annotation.EnableWebMvc;\n\nimport com.ckjava.test.web.ApiController;\n\nimport io.swagger.annotations.Api;\nimport springfox.documentation.builders.ApiInfoBuilder;\nimport springfox.documentation.builders.PathSelectors;\nimport springfox.documentation.builders.RequestHandlerSelectors;\nimport springfox.documentation.service.ApiInfo;\nimport springfox.documentation.spi.DocumentationType;\nimport springfox.documentation.spring.web.plugins.Docket;\nimport springfox.documentation.swagger2.annotations.EnableSwagger2;\n\n@Configuration\n@EnableWebMvc\n@EnableSwagger2\n/* @ComponentScan(basePackageClasses = { ApiController.class }) */\n@ComponentScan(basePackages = \"com.ckjava.test.web\")\npublic class SwaggerConfig {\n\n    @Bean\n    public Docket api(){\n        return new Docket(DocumentationType.SWAGGER_2)\n            .select()\n            .apis(RequestHandlerSelectors.withClassAnnotation(Api.class))\n            .paths(PathSelectors.any())\n            .build()\n            .apiInfo(apiInfo());\n    }\n\n    private ApiInfo apiInfo() {\n        return new ApiInfoBuilder()\n            .title(\"TITLE\")\n            .description(\"DESCRIPTION\")\n            .version(\"VERSION\")\n            .termsOfServiceUrl(\"http://terms-of-services.url\")\n            .license(\"LICENSE\")\n            .licenseUrl(\"http://url-to-license.com\")\n            .build();\n    }\n\n}\n```\n\n- 其中 `@ComponentScan(basePackages = \"com.ckjava.test.web\")` 指出 `@Controller` 类所在的包名.\n- 也可以通过 `@ComponentScan(basePackageClasses = { ApiController.class })` 指出具体的 `@Controller` 类\n- 其中 `RequestHandlerSelectors.withClassAnnotation(Api.class)` 指出只扫描带有 `io.swagger.annotations.Api` 注解的类\n\n- WebAppConfig 配置类用于配置展示 Swagger 的 UI, 具体如下\n\n```java\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.servlet.config.annotation.EnableWebMvc;\nimport org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;\n\n@Configuration\n@EnableWebMvc\npublic class WebAppConfig extends WebMvcConfigurerAdapter {\n\n    @Override \n    public void addResourceHandlers(ResourceHandlerRegistry registry) {\n        registry.addResourceHandler(\"swagger-ui.html\").addResourceLocations(\"classpath:/META-INF/resources/\");\n        registry.addResourceHandler(\"/webjars/**\").addResourceLocations(\"classpath:/META-INF/resources/webjars/\");\n    }\n\n}\n```\n\n- 等项目启动后可以通过 `http://myapp/swagger-ui.html` 访问到开放的API\n\n## 可能遇到的问题\n\n- 项目启动中遇到 `java.lang.NoClassDefFoundError: com/fasterxml/classmate/members/ResolvedParameterizedMember` 异常\n\n原因如下:\n由于在 springfox-swagger2 中依赖了 classmate-1.3.1.jar 而项目中使用了 hibernate-validator 其中又依赖了 classmate-1.0.0.jar,需要在 hibernate-validator 排除 classmate 依赖\n\n解决如下:\n```xml\n<dependency>\n\t<groupId>org.hibernate</groupId>\n\t<artifactId>hibernate-validator</artifactId>\n\t<version>${validator.version}</version>\n\t<exclusions>\n\t\t<exclusion>\n\t\t\t<groupId>com.fasterxml</groupId>\n\t\t\t<artifactId>classmate</artifactId>\n\t\t</exclusion>\n\t</exclusions>\n</dependency>\n```\n\n## 使用的Demo\n\n- [plainWebApi](https://github.com/toulezu/play/tree/master/plainWebApi)\n\n## 参考\n\n- [A 'simple' way to implement Swagger in a Spring MVC application](https://stackoverflow.com/questions/26720090/a-simple-way-to-implement-swagger-in-a-spring-mvc-application)\n- [springfox docs](http://springfox.github.io/springfox/docs/current/)\n","slug":"Swagger2 在 SpringMVC 项目中的应用","published":1,"updated":"2017-06-20T14:11:13.923Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfto0q7w000x18c7wiqsuix8","content":"<h2 id=\"添加-Maven-依赖\"><a href=\"#添加-Maven-依赖\" class=\"headerlink\" title=\"添加 Maven 依赖\"></a>添加 Maven 依赖</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.springfox<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>springfox-swagger2<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.5.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.springfox<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>springfox-swagger-ui<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.5.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-annotations<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.7.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-databind<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.7.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.7.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>其中 <code>springfox-swagger2</code> 用于在访问 <code>http://myapp/v2/api-docs</code> 时生成API的 json 数据, <code>springfox-swagger-ui</code>则用于将 json 数据以 HTML 的形式将API展示出来,便于在线调试. </p>\n<p><code>v2/api-docs</code> 这个路径定义在 <code>springfox-swagger2</code> 项目中的 <a href=\"https://github.com/springfox/springfox/blob/master/springfox-swagger2/src/main/java/springfox/documentation/swagger2/web/Swagger2Controller.java\" target=\"_blank\" rel=\"external\">Swagger2Controller</a> 类中, 每次访问 <code>http://myapp/v2/api-docs</code> 都将生成一个 Swagger 对象,并使用 jackson 的 ObjectMapper 对象将 Swagger 对象转成 json 返回给浏览器,因此这里也要添加 jackson 的相关依赖.</p>\n<p>springfox 的相关仓库地址如下</p>\n<ul>\n<li>Release</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">repositories</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>jcenter-Release<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>jcenter<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>https://jcenter.bintray.com/<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">repositories</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>Snapshots</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">repositories</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>jcenter-snapshots<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>jcenter<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://oss.jfrog.org/artifactory/oss-snapshot-local/<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">repositories</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"添加-SwaggerConfig-配置类\"><a href=\"#添加-SwaggerConfig-配置类\" class=\"headerlink\" title=\"添加 SwaggerConfig 配置类\"></a>添加 SwaggerConfig 配置类</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.config.annotation.EnableWebMvc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.ckjava.test.web.ApiController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.swagger.annotations.Api;</span><br><span class=\"line\"><span class=\"keyword\">import</span> springfox.documentation.builders.ApiInfoBuilder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> springfox.documentation.builders.PathSelectors;</span><br><span class=\"line\"><span class=\"keyword\">import</span> springfox.documentation.builders.RequestHandlerSelectors;</span><br><span class=\"line\"><span class=\"keyword\">import</span> springfox.documentation.service.ApiInfo;</span><br><span class=\"line\"><span class=\"keyword\">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class=\"line\"><span class=\"keyword\">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class=\"line\"><span class=\"keyword\">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableWebMvc</span></span><br><span class=\"line\"><span class=\"meta\">@EnableSwagger</span>2</span><br><span class=\"line\"><span class=\"comment\">/* @ComponentScan(basePackageClasses = &#123; ApiController.class &#125;) */</span></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan</span>(basePackages = <span class=\"string\">\"com.ckjava.test.web\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SwaggerConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Docket <span class=\"title\">api</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class=\"line\">            .select()</span><br><span class=\"line\">            .apis(RequestHandlerSelectors.withClassAnnotation(Api.class))</span><br><span class=\"line\">            .paths(PathSelectors.any())</span><br><span class=\"line\">            .build()</span><br><span class=\"line\">            .apiInfo(apiInfo());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> ApiInfo <span class=\"title\">apiInfo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ApiInfoBuilder()</span><br><span class=\"line\">            .title(<span class=\"string\">\"TITLE\"</span>)</span><br><span class=\"line\">            .description(<span class=\"string\">\"DESCRIPTION\"</span>)</span><br><span class=\"line\">            .version(<span class=\"string\">\"VERSION\"</span>)</span><br><span class=\"line\">            .termsOfServiceUrl(<span class=\"string\">\"http://terms-of-services.url\"</span>)</span><br><span class=\"line\">            .license(<span class=\"string\">\"LICENSE\"</span>)</span><br><span class=\"line\">            .licenseUrl(<span class=\"string\">\"http://url-to-license.com\"</span>)</span><br><span class=\"line\">            .build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>其中 <code>@ComponentScan(basePackages = &quot;com.ckjava.test.web&quot;)</code> 指出 <code>@Controller</code> 类所在的包名.</li>\n<li>也可以通过 <code>@ComponentScan(basePackageClasses = { ApiController.class })</code> 指出具体的 <code>@Controller</code> 类</li>\n<li><p>其中 <code>RequestHandlerSelectors.withClassAnnotation(Api.class)</code> 指出只扫描带有 <code>io.swagger.annotations.Api</code> 注解的类</p>\n</li>\n<li><p>WebAppConfig 配置类用于配置展示 Swagger 的 UI, 具体如下</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.config.annotation.EnableWebMvc;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableWebMvc</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebAppConfig</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addResourceHandlers</span><span class=\"params\">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class=\"line\">        registry.addResourceHandler(<span class=\"string\">\"swagger-ui.html\"</span>).addResourceLocations(<span class=\"string\">\"classpath:/META-INF/resources/\"</span>);</span><br><span class=\"line\">        registry.addResourceHandler(<span class=\"string\">\"/webjars/**\"</span>).addResourceLocations(<span class=\"string\">\"classpath:/META-INF/resources/webjars/\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>等项目启动后可以通过 <code>http://myapp/swagger-ui.html</code> 访问到开放的API</li>\n</ul>\n<h2 id=\"可能遇到的问题\"><a href=\"#可能遇到的问题\" class=\"headerlink\" title=\"可能遇到的问题\"></a>可能遇到的问题</h2><ul>\n<li>项目启动中遇到 <code>java.lang.NoClassDefFoundError: com/fasterxml/classmate/members/ResolvedParameterizedMember</code> 异常</li>\n</ul>\n<p>原因如下:<br>由于在 springfox-swagger2 中依赖了 classmate-1.3.1.jar 而项目中使用了 hibernate-validator 其中又依赖了 classmate-1.0.0.jar,需要在 hibernate-validator 排除 classmate 依赖</p>\n<p>解决如下:<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.hibernate<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hibernate-validator<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;validator.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>classmate<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"使用的Demo\"><a href=\"#使用的Demo\" class=\"headerlink\" title=\"使用的Demo\"></a>使用的Demo</h2><ul>\n<li><a href=\"https://github.com/toulezu/play/tree/master/plainWebApi\" target=\"_blank\" rel=\"external\">plainWebApi</a></li>\n</ul>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://stackoverflow.com/questions/26720090/a-simple-way-to-implement-swagger-in-a-spring-mvc-application\" target=\"_blank\" rel=\"external\">A ‘simple’ way to implement Swagger in a Spring MVC application</a></li>\n<li><a href=\"http://springfox.github.io/springfox/docs/current/\" target=\"_blank\" rel=\"external\">springfox docs</a></li>\n</ul>\n","excerpt":"","more":"<h2 id=\"添加-Maven-依赖\"><a href=\"#添加-Maven-依赖\" class=\"headerlink\" title=\"添加 Maven 依赖\"></a>添加 Maven 依赖</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.springfox<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>springfox-swagger2<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.5.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.springfox<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>springfox-swagger-ui<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.5.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-annotations<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.7.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-databind<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.7.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.7.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>其中 <code>springfox-swagger2</code> 用于在访问 <code>http://myapp/v2/api-docs</code> 时生成API的 json 数据, <code>springfox-swagger-ui</code>则用于将 json 数据以 HTML 的形式将API展示出来,便于在线调试. </p>\n<p><code>v2/api-docs</code> 这个路径定义在 <code>springfox-swagger2</code> 项目中的 <a href=\"https://github.com/springfox/springfox/blob/master/springfox-swagger2/src/main/java/springfox/documentation/swagger2/web/Swagger2Controller.java\">Swagger2Controller</a> 类中, 每次访问 <code>http://myapp/v2/api-docs</code> 都将生成一个 Swagger 对象,并使用 jackson 的 ObjectMapper 对象将 Swagger 对象转成 json 返回给浏览器,因此这里也要添加 jackson 的相关依赖.</p>\n<p>springfox 的相关仓库地址如下</p>\n<ul>\n<li>Release</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">repositories</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>jcenter-Release<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>jcenter<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>https://jcenter.bintray.com/<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">repositories</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>Snapshots</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">repositories</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>jcenter-snapshots<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>jcenter<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://oss.jfrog.org/artifactory/oss-snapshot-local/<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">repositories</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"添加-SwaggerConfig-配置类\"><a href=\"#添加-SwaggerConfig-配置类\" class=\"headerlink\" title=\"添加 SwaggerConfig 配置类\"></a>添加 SwaggerConfig 配置类</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.config.annotation.EnableWebMvc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.ckjava.test.web.ApiController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.swagger.annotations.Api;</span><br><span class=\"line\"><span class=\"keyword\">import</span> springfox.documentation.builders.ApiInfoBuilder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> springfox.documentation.builders.PathSelectors;</span><br><span class=\"line\"><span class=\"keyword\">import</span> springfox.documentation.builders.RequestHandlerSelectors;</span><br><span class=\"line\"><span class=\"keyword\">import</span> springfox.documentation.service.ApiInfo;</span><br><span class=\"line\"><span class=\"keyword\">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class=\"line\"><span class=\"keyword\">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class=\"line\"><span class=\"keyword\">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableWebMvc</span></span><br><span class=\"line\"><span class=\"meta\">@EnableSwagger</span>2</span><br><span class=\"line\"><span class=\"comment\">/* @ComponentScan(basePackageClasses = &#123; ApiController.class &#125;) */</span></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan</span>(basePackages = <span class=\"string\">\"com.ckjava.test.web\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SwaggerConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Docket <span class=\"title\">api</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class=\"line\">            .select()</span><br><span class=\"line\">            .apis(RequestHandlerSelectors.withClassAnnotation(Api.class))</span><br><span class=\"line\">            .paths(PathSelectors.any())</span><br><span class=\"line\">            .build()</span><br><span class=\"line\">            .apiInfo(apiInfo());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> ApiInfo <span class=\"title\">apiInfo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ApiInfoBuilder()</span><br><span class=\"line\">            .title(<span class=\"string\">\"TITLE\"</span>)</span><br><span class=\"line\">            .description(<span class=\"string\">\"DESCRIPTION\"</span>)</span><br><span class=\"line\">            .version(<span class=\"string\">\"VERSION\"</span>)</span><br><span class=\"line\">            .termsOfServiceUrl(<span class=\"string\">\"http://terms-of-services.url\"</span>)</span><br><span class=\"line\">            .license(<span class=\"string\">\"LICENSE\"</span>)</span><br><span class=\"line\">            .licenseUrl(<span class=\"string\">\"http://url-to-license.com\"</span>)</span><br><span class=\"line\">            .build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>其中 <code>@ComponentScan(basePackages = &quot;com.ckjava.test.web&quot;)</code> 指出 <code>@Controller</code> 类所在的包名.</li>\n<li>也可以通过 <code>@ComponentScan(basePackageClasses = { ApiController.class })</code> 指出具体的 <code>@Controller</code> 类</li>\n<li><p>其中 <code>RequestHandlerSelectors.withClassAnnotation(Api.class)</code> 指出只扫描带有 <code>io.swagger.annotations.Api</code> 注解的类</p>\n</li>\n<li><p>WebAppConfig 配置类用于配置展示 Swagger 的 UI, 具体如下</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.config.annotation.EnableWebMvc;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableWebMvc</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebAppConfig</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addResourceHandlers</span><span class=\"params\">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class=\"line\">        registry.addResourceHandler(<span class=\"string\">\"swagger-ui.html\"</span>).addResourceLocations(<span class=\"string\">\"classpath:/META-INF/resources/\"</span>);</span><br><span class=\"line\">        registry.addResourceHandler(<span class=\"string\">\"/webjars/**\"</span>).addResourceLocations(<span class=\"string\">\"classpath:/META-INF/resources/webjars/\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>等项目启动后可以通过 <code>http://myapp/swagger-ui.html</code> 访问到开放的API</li>\n</ul>\n<h2 id=\"可能遇到的问题\"><a href=\"#可能遇到的问题\" class=\"headerlink\" title=\"可能遇到的问题\"></a>可能遇到的问题</h2><ul>\n<li>项目启动中遇到 <code>java.lang.NoClassDefFoundError: com/fasterxml/classmate/members/ResolvedParameterizedMember</code> 异常</li>\n</ul>\n<p>原因如下:<br>由于在 springfox-swagger2 中依赖了 classmate-1.3.1.jar 而项目中使用了 hibernate-validator 其中又依赖了 classmate-1.0.0.jar,需要在 hibernate-validator 排除 classmate 依赖</p>\n<p>解决如下:<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.hibernate<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hibernate-validator<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;validator.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>classmate<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">exclusion</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">exclusions</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"使用的Demo\"><a href=\"#使用的Demo\" class=\"headerlink\" title=\"使用的Demo\"></a>使用的Demo</h2><ul>\n<li><a href=\"https://github.com/toulezu/play/tree/master/plainWebApi\">plainWebApi</a></li>\n</ul>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://stackoverflow.com/questions/26720090/a-simple-way-to-implement-swagger-in-a-spring-mvc-application\">A ‘simple’ way to implement Swagger in a Spring MVC application</a></li>\n<li><a href=\"http://springfox.github.io/springfox/docs/current/\">springfox docs</a></li>\n</ul>\n"},{"title":"Windows下自动上传war到Linux服务器，自动部署，自动重启Tomcat的系列脚本","title_url":"Windows-auto-deploy-war-to-Linux","date":"2016-12-19T16:00:00.000Z","description":"Windows下自动上传war到Linux服务器，自动部署，自动重启Tomcat的系列脚本,用于本地自动化部署","_content":"\n## Windows 下自动上传 war 到 Linux 服务器\n\n- 下面的 cmd 脚本通过 Maven 命令执行打包，生成 war\n- 通过 pscp 将 war 上传到服务器\n- 通过 plink 远程调用 Linux 上的 shell 脚本\n- 其中 pscp 来自 PUTTY\n- putty_privatekey 用于 plink 无密码登录 Linux，也可以通过用户名和密码的方式\n- 其中 test-web-deploy.sh 用于自动部署 war\n\n```\n@echo off\nset project_path=D:\\svn-workspace\\test-web\nset local_file=%project_path%\\target\\test-web.war\nset putty_privatekey=D:\\soft\\keys\\test-privatekey.ppk\nset deploy-shell=test-web-deploy.sh\n \nset server_user_1=dev\nset server_passwd_1=123\nset server_ip_1=10.32.22.61\n \nset server_path=/usr/local/apps\n\necho ---------------------------------------------- execute mvn clean install\nD:\ncd %project_path%\ncall mvn clean install -Dmaven.test.skip=true -Ptest\n \necho ---------------------------------------------- upload war file to server \ncall pscp -l %server_user_1% -pw %server_passwd_1% -r %local_file% %server_ip_1%:%server_path%\n\necho ---------------------------------------------- execute %deploy-shell%\ncall plink -i %putty_privatekey% %server_user_1%@%server_ip_1% sh %deploy-shell%\n \npause\n```\n\n## Linux 自动部署 war\n\n- 在下面的脚本是 test-web-deploy.sh，会调用 tomcat_restart.sh，用于重启 Tomcat\n\n```\n#!/bin/bash\napp_name=test-web\napp_path=/usr/local/apps\ntomcat_path=/usr/local/soft/tomcat-test-web\n\ncd $app_path\nif [ -f ${app_name}.war ];then\n    echo find ${app_name}.war, unpack the file then restart the tomcat\n    rm -rvf ./${app_name}/*\n    mv ./${app_name}.war $app_path/${app_name}/\n    cd $app_path/${app_name}\n    jar -xvf ${app_name}.war\n    rm -rvf ${app_name}.war\n  else\n    echo not find ${app_name}.war, only restart the tomcat\nfi\n\ncd $tomcat_path\nsh tomcat_restart.sh\n```\n\n## 自动重启 Tomcat\n\n- 下面的脚本是 tomcat_restart.sh，基本思路是通过 Tomcat 安装路径找到进程pid，杀死后再重启\n\n```\n#!/bin/bash\n# 首先找到tomcat根目录， 确保当前脚本在tomcat根目录下\ntomcat_path=/usr/local/soft/tomcat-test-web\necho tomcat path is $tomcat_path\n\n# 找到tomcat的进程id\ntomcat_pid=$(ps -ef|grep $tomcat_path|gawk '$0 !~/grep/ {print $2}' |tr -s '\\n' ' ')\nif [ \"$tomcat_pid\" ];then\n  echo tomcat process id is $tomcat_pid\n  # 杀掉tomcat进程\n  if\n    kill -9 $tomcat_pid\n  then\n    echo kill tomcat process success\n  else\n   echo kill tomcat process fail\n  fi\nelse\n  echo tomcat is already dead\nfi\n\n# 启动tomcat并重定向到日志输出\nsh $tomcat_path/bin/startup.sh\ntail -f $tomcat_path/logs/catalina.out\n```\n\n## 可能遇到的问题\n\n### 执行 `jar -xvf xxx.war` 的时候提示:`/bin/bash: jar: command not found`\n### 解决如下\n\n```\ncd /usr/bin\nsudo ln -s -f /usr/lib/jvm/jdk1.6.0_30/bin/jar\n```\n**jdk安装目录按自己实际情况更改**\n\n如果提示`javah：commond not found`，于是照葫芦画瓢，输入命令\n\n```\ncd /usr/bin\nln -s -f /usr/lib/jvm/jdk1.6.0_30/bin/javah\n```\n\n## 总结\n\n- 该系列脚本解决了自动部署问题，非常适用于敏捷开发\n- 基于该系列脚本可以实现自动发布系统的开发 :)","source":"_posts/windows下自动上传war到Linux服务器，自动部署，自动重启Tomcat的系列脚本.md","raw":"---\ntitle: Windows下自动上传war到Linux服务器，自动部署，自动重启Tomcat的系列脚本\ntitle_url: Windows-auto-deploy-war-to-Linux\ndate: 2016-12-20\ntags: [自动部署]\ncategories: 技术\ndescription: Windows下自动上传war到Linux服务器，自动部署，自动重启Tomcat的系列脚本,用于本地自动化部署\n---\n\n## Windows 下自动上传 war 到 Linux 服务器\n\n- 下面的 cmd 脚本通过 Maven 命令执行打包，生成 war\n- 通过 pscp 将 war 上传到服务器\n- 通过 plink 远程调用 Linux 上的 shell 脚本\n- 其中 pscp 来自 PUTTY\n- putty_privatekey 用于 plink 无密码登录 Linux，也可以通过用户名和密码的方式\n- 其中 test-web-deploy.sh 用于自动部署 war\n\n```\n@echo off\nset project_path=D:\\svn-workspace\\test-web\nset local_file=%project_path%\\target\\test-web.war\nset putty_privatekey=D:\\soft\\keys\\test-privatekey.ppk\nset deploy-shell=test-web-deploy.sh\n \nset server_user_1=dev\nset server_passwd_1=123\nset server_ip_1=10.32.22.61\n \nset server_path=/usr/local/apps\n\necho ---------------------------------------------- execute mvn clean install\nD:\ncd %project_path%\ncall mvn clean install -Dmaven.test.skip=true -Ptest\n \necho ---------------------------------------------- upload war file to server \ncall pscp -l %server_user_1% -pw %server_passwd_1% -r %local_file% %server_ip_1%:%server_path%\n\necho ---------------------------------------------- execute %deploy-shell%\ncall plink -i %putty_privatekey% %server_user_1%@%server_ip_1% sh %deploy-shell%\n \npause\n```\n\n## Linux 自动部署 war\n\n- 在下面的脚本是 test-web-deploy.sh，会调用 tomcat_restart.sh，用于重启 Tomcat\n\n```\n#!/bin/bash\napp_name=test-web\napp_path=/usr/local/apps\ntomcat_path=/usr/local/soft/tomcat-test-web\n\ncd $app_path\nif [ -f ${app_name}.war ];then\n    echo find ${app_name}.war, unpack the file then restart the tomcat\n    rm -rvf ./${app_name}/*\n    mv ./${app_name}.war $app_path/${app_name}/\n    cd $app_path/${app_name}\n    jar -xvf ${app_name}.war\n    rm -rvf ${app_name}.war\n  else\n    echo not find ${app_name}.war, only restart the tomcat\nfi\n\ncd $tomcat_path\nsh tomcat_restart.sh\n```\n\n## 自动重启 Tomcat\n\n- 下面的脚本是 tomcat_restart.sh，基本思路是通过 Tomcat 安装路径找到进程pid，杀死后再重启\n\n```\n#!/bin/bash\n# 首先找到tomcat根目录， 确保当前脚本在tomcat根目录下\ntomcat_path=/usr/local/soft/tomcat-test-web\necho tomcat path is $tomcat_path\n\n# 找到tomcat的进程id\ntomcat_pid=$(ps -ef|grep $tomcat_path|gawk '$0 !~/grep/ {print $2}' |tr -s '\\n' ' ')\nif [ \"$tomcat_pid\" ];then\n  echo tomcat process id is $tomcat_pid\n  # 杀掉tomcat进程\n  if\n    kill -9 $tomcat_pid\n  then\n    echo kill tomcat process success\n  else\n   echo kill tomcat process fail\n  fi\nelse\n  echo tomcat is already dead\nfi\n\n# 启动tomcat并重定向到日志输出\nsh $tomcat_path/bin/startup.sh\ntail -f $tomcat_path/logs/catalina.out\n```\n\n## 可能遇到的问题\n\n### 执行 `jar -xvf xxx.war` 的时候提示:`/bin/bash: jar: command not found`\n### 解决如下\n\n```\ncd /usr/bin\nsudo ln -s -f /usr/lib/jvm/jdk1.6.0_30/bin/jar\n```\n**jdk安装目录按自己实际情况更改**\n\n如果提示`javah：commond not found`，于是照葫芦画瓢，输入命令\n\n```\ncd /usr/bin\nln -s -f /usr/lib/jvm/jdk1.6.0_30/bin/javah\n```\n\n## 总结\n\n- 该系列脚本解决了自动部署问题，非常适用于敏捷开发\n- 基于该系列脚本可以实现自动发布系统的开发 :)","slug":"windows下自动上传war到Linux服务器，自动部署，自动重启Tomcat的系列脚本","published":1,"updated":"2017-06-20T14:11:13.937Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfto0q7z001118c7qyw0c570","content":"<h2 id=\"Windows-下自动上传-war-到-Linux-服务器\"><a href=\"#Windows-下自动上传-war-到-Linux-服务器\" class=\"headerlink\" title=\"Windows 下自动上传 war 到 Linux 服务器\"></a>Windows 下自动上传 war 到 Linux 服务器</h2><ul>\n<li>下面的 cmd 脚本通过 Maven 命令执行打包，生成 war</li>\n<li>通过 pscp 将 war 上传到服务器</li>\n<li>通过 plink 远程调用 Linux 上的 shell 脚本</li>\n<li>其中 pscp 来自 PUTTY</li>\n<li>putty_privatekey 用于 plink 无密码登录 Linux，也可以通过用户名和密码的方式</li>\n<li>其中 test-web-deploy.sh 用于自动部署 war</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@echo off</span><br><span class=\"line\">set project_path=D:\\svn-workspace\\test-web</span><br><span class=\"line\">set local_file=%project_path%\\target\\test-web.war</span><br><span class=\"line\">set putty_privatekey=D:\\soft\\keys\\test-privatekey.ppk</span><br><span class=\"line\">set deploy-shell=test-web-deploy.sh</span><br><span class=\"line\"> </span><br><span class=\"line\">set server_user_1=dev</span><br><span class=\"line\">set server_passwd_1=123</span><br><span class=\"line\">set server_ip_1=10.32.22.61</span><br><span class=\"line\"> </span><br><span class=\"line\">set server_path=/usr/local/apps</span><br><span class=\"line\"></span><br><span class=\"line\">echo ---------------------------------------------- execute mvn clean install</span><br><span class=\"line\">D:</span><br><span class=\"line\">cd %project_path%</span><br><span class=\"line\">call mvn clean install -Dmaven.test.skip=true -Ptest</span><br><span class=\"line\"> </span><br><span class=\"line\">echo ---------------------------------------------- upload war file to server </span><br><span class=\"line\">call pscp -l %server_user_1% -pw %server_passwd_1% -r %local_file% %server_ip_1%:%server_path%</span><br><span class=\"line\"></span><br><span class=\"line\">echo ---------------------------------------------- execute %deploy-shell%</span><br><span class=\"line\">call plink -i %putty_privatekey% %server_user_1%@%server_ip_1% sh %deploy-shell%</span><br><span class=\"line\"> </span><br><span class=\"line\">pause</span><br></pre></td></tr></table></figure>\n<h2 id=\"Linux-自动部署-war\"><a href=\"#Linux-自动部署-war\" class=\"headerlink\" title=\"Linux 自动部署 war\"></a>Linux 自动部署 war</h2><ul>\n<li>在下面的脚本是 test-web-deploy.sh，会调用 tomcat_restart.sh，用于重启 Tomcat</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">app_name=test-web</span><br><span class=\"line\">app_path=/usr/local/apps</span><br><span class=\"line\">tomcat_path=/usr/local/soft/tomcat-test-web</span><br><span class=\"line\"></span><br><span class=\"line\">cd $app_path</span><br><span class=\"line\">if [ -f $&#123;app_name&#125;.war ];then</span><br><span class=\"line\">    echo find $&#123;app_name&#125;.war, unpack the file then restart the tomcat</span><br><span class=\"line\">    rm -rvf ./$&#123;app_name&#125;/*</span><br><span class=\"line\">    mv ./$&#123;app_name&#125;.war $app_path/$&#123;app_name&#125;/</span><br><span class=\"line\">    cd $app_path/$&#123;app_name&#125;</span><br><span class=\"line\">    jar -xvf $&#123;app_name&#125;.war</span><br><span class=\"line\">    rm -rvf $&#123;app_name&#125;.war</span><br><span class=\"line\">  else</span><br><span class=\"line\">    echo not find $&#123;app_name&#125;.war, only restart the tomcat</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">cd $tomcat_path</span><br><span class=\"line\">sh tomcat_restart.sh</span><br></pre></td></tr></table></figure>\n<h2 id=\"自动重启-Tomcat\"><a href=\"#自动重启-Tomcat\" class=\"headerlink\" title=\"自动重启 Tomcat\"></a>自动重启 Tomcat</h2><ul>\n<li>下面的脚本是 tomcat_restart.sh，基本思路是通过 Tomcat 安装路径找到进程pid，杀死后再重启</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"># 首先找到tomcat根目录， 确保当前脚本在tomcat根目录下</span><br><span class=\"line\">tomcat_path=/usr/local/soft/tomcat-test-web</span><br><span class=\"line\">echo tomcat path is $tomcat_path</span><br><span class=\"line\"></span><br><span class=\"line\"># 找到tomcat的进程id</span><br><span class=\"line\">tomcat_pid=$(ps -ef|grep $tomcat_path|gawk &apos;$0 !~/grep/ &#123;print $2&#125;&apos; |tr -s &apos;\\n&apos; &apos; &apos;)</span><br><span class=\"line\">if [ &quot;$tomcat_pid&quot; ];then</span><br><span class=\"line\">  echo tomcat process id is $tomcat_pid</span><br><span class=\"line\">  # 杀掉tomcat进程</span><br><span class=\"line\">  if</span><br><span class=\"line\">    kill -9 $tomcat_pid</span><br><span class=\"line\">  then</span><br><span class=\"line\">    echo kill tomcat process success</span><br><span class=\"line\">  else</span><br><span class=\"line\">   echo kill tomcat process fail</span><br><span class=\"line\">  fi</span><br><span class=\"line\">else</span><br><span class=\"line\">  echo tomcat is already dead</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\"># 启动tomcat并重定向到日志输出</span><br><span class=\"line\">sh $tomcat_path/bin/startup.sh</span><br><span class=\"line\">tail -f $tomcat_path/logs/catalina.out</span><br></pre></td></tr></table></figure>\n<h2 id=\"可能遇到的问题\"><a href=\"#可能遇到的问题\" class=\"headerlink\" title=\"可能遇到的问题\"></a>可能遇到的问题</h2><h3 id=\"执行-jar-xvf-xxx-war-的时候提示-bin-bash-jar-command-not-found\"><a href=\"#执行-jar-xvf-xxx-war-的时候提示-bin-bash-jar-command-not-found\" class=\"headerlink\" title=\"执行 jar -xvf xxx.war 的时候提示:/bin/bash: jar: command not found\"></a>执行 <code>jar -xvf xxx.war</code> 的时候提示:<code>/bin/bash: jar: command not found</code></h3><h3 id=\"解决如下\"><a href=\"#解决如下\" class=\"headerlink\" title=\"解决如下\"></a>解决如下</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/bin</span><br><span class=\"line\">sudo ln -s -f /usr/lib/jvm/jdk1.6.0_30/bin/jar</span><br></pre></td></tr></table></figure>\n<p><strong>jdk安装目录按自己实际情况更改</strong></p>\n<p>如果提示<code>javah：commond not found</code>，于是照葫芦画瓢，输入命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/bin</span><br><span class=\"line\">ln -s -f /usr/lib/jvm/jdk1.6.0_30/bin/javah</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>该系列脚本解决了自动部署问题，非常适用于敏捷开发</li>\n<li>基于该系列脚本可以实现自动发布系统的开发 :)</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"Windows-下自动上传-war-到-Linux-服务器\"><a href=\"#Windows-下自动上传-war-到-Linux-服务器\" class=\"headerlink\" title=\"Windows 下自动上传 war 到 Linux 服务器\"></a>Windows 下自动上传 war 到 Linux 服务器</h2><ul>\n<li>下面的 cmd 脚本通过 Maven 命令执行打包，生成 war</li>\n<li>通过 pscp 将 war 上传到服务器</li>\n<li>通过 plink 远程调用 Linux 上的 shell 脚本</li>\n<li>其中 pscp 来自 PUTTY</li>\n<li>putty_privatekey 用于 plink 无密码登录 Linux，也可以通过用户名和密码的方式</li>\n<li>其中 test-web-deploy.sh 用于自动部署 war</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@echo off</span><br><span class=\"line\">set project_path=D:\\svn-workspace\\test-web</span><br><span class=\"line\">set local_file=%project_path%\\target\\test-web.war</span><br><span class=\"line\">set putty_privatekey=D:\\soft\\keys\\test-privatekey.ppk</span><br><span class=\"line\">set deploy-shell=test-web-deploy.sh</span><br><span class=\"line\"> </span><br><span class=\"line\">set server_user_1=dev</span><br><span class=\"line\">set server_passwd_1=123</span><br><span class=\"line\">set server_ip_1=10.32.22.61</span><br><span class=\"line\"> </span><br><span class=\"line\">set server_path=/usr/local/apps</span><br><span class=\"line\"></span><br><span class=\"line\">echo ---------------------------------------------- execute mvn clean install</span><br><span class=\"line\">D:</span><br><span class=\"line\">cd %project_path%</span><br><span class=\"line\">call mvn clean install -Dmaven.test.skip=true -Ptest</span><br><span class=\"line\"> </span><br><span class=\"line\">echo ---------------------------------------------- upload war file to server </span><br><span class=\"line\">call pscp -l %server_user_1% -pw %server_passwd_1% -r %local_file% %server_ip_1%:%server_path%</span><br><span class=\"line\"></span><br><span class=\"line\">echo ---------------------------------------------- execute %deploy-shell%</span><br><span class=\"line\">call plink -i %putty_privatekey% %server_user_1%@%server_ip_1% sh %deploy-shell%</span><br><span class=\"line\"> </span><br><span class=\"line\">pause</span><br></pre></td></tr></table></figure>\n<h2 id=\"Linux-自动部署-war\"><a href=\"#Linux-自动部署-war\" class=\"headerlink\" title=\"Linux 自动部署 war\"></a>Linux 自动部署 war</h2><ul>\n<li>在下面的脚本是 test-web-deploy.sh，会调用 tomcat_restart.sh，用于重启 Tomcat</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">app_name=test-web</span><br><span class=\"line\">app_path=/usr/local/apps</span><br><span class=\"line\">tomcat_path=/usr/local/soft/tomcat-test-web</span><br><span class=\"line\"></span><br><span class=\"line\">cd $app_path</span><br><span class=\"line\">if [ -f $&#123;app_name&#125;.war ];then</span><br><span class=\"line\">    echo find $&#123;app_name&#125;.war, unpack the file then restart the tomcat</span><br><span class=\"line\">    rm -rvf ./$&#123;app_name&#125;/*</span><br><span class=\"line\">    mv ./$&#123;app_name&#125;.war $app_path/$&#123;app_name&#125;/</span><br><span class=\"line\">    cd $app_path/$&#123;app_name&#125;</span><br><span class=\"line\">    jar -xvf $&#123;app_name&#125;.war</span><br><span class=\"line\">    rm -rvf $&#123;app_name&#125;.war</span><br><span class=\"line\">  else</span><br><span class=\"line\">    echo not find $&#123;app_name&#125;.war, only restart the tomcat</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">cd $tomcat_path</span><br><span class=\"line\">sh tomcat_restart.sh</span><br></pre></td></tr></table></figure>\n<h2 id=\"自动重启-Tomcat\"><a href=\"#自动重启-Tomcat\" class=\"headerlink\" title=\"自动重启 Tomcat\"></a>自动重启 Tomcat</h2><ul>\n<li>下面的脚本是 tomcat_restart.sh，基本思路是通过 Tomcat 安装路径找到进程pid，杀死后再重启</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"># 首先找到tomcat根目录， 确保当前脚本在tomcat根目录下</span><br><span class=\"line\">tomcat_path=/usr/local/soft/tomcat-test-web</span><br><span class=\"line\">echo tomcat path is $tomcat_path</span><br><span class=\"line\"></span><br><span class=\"line\"># 找到tomcat的进程id</span><br><span class=\"line\">tomcat_pid=$(ps -ef|grep $tomcat_path|gawk &apos;$0 !~/grep/ &#123;print $2&#125;&apos; |tr -s &apos;\\n&apos; &apos; &apos;)</span><br><span class=\"line\">if [ &quot;$tomcat_pid&quot; ];then</span><br><span class=\"line\">  echo tomcat process id is $tomcat_pid</span><br><span class=\"line\">  # 杀掉tomcat进程</span><br><span class=\"line\">  if</span><br><span class=\"line\">    kill -9 $tomcat_pid</span><br><span class=\"line\">  then</span><br><span class=\"line\">    echo kill tomcat process success</span><br><span class=\"line\">  else</span><br><span class=\"line\">   echo kill tomcat process fail</span><br><span class=\"line\">  fi</span><br><span class=\"line\">else</span><br><span class=\"line\">  echo tomcat is already dead</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\"># 启动tomcat并重定向到日志输出</span><br><span class=\"line\">sh $tomcat_path/bin/startup.sh</span><br><span class=\"line\">tail -f $tomcat_path/logs/catalina.out</span><br></pre></td></tr></table></figure>\n<h2 id=\"可能遇到的问题\"><a href=\"#可能遇到的问题\" class=\"headerlink\" title=\"可能遇到的问题\"></a>可能遇到的问题</h2><h3 id=\"执行-jar-xvf-xxx-war-的时候提示-bin-bash-jar-command-not-found\"><a href=\"#执行-jar-xvf-xxx-war-的时候提示-bin-bash-jar-command-not-found\" class=\"headerlink\" title=\"执行 jar -xvf xxx.war 的时候提示:/bin/bash: jar: command not found\"></a>执行 <code>jar -xvf xxx.war</code> 的时候提示:<code>/bin/bash: jar: command not found</code></h3><h3 id=\"解决如下\"><a href=\"#解决如下\" class=\"headerlink\" title=\"解决如下\"></a>解决如下</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/bin</span><br><span class=\"line\">sudo ln -s -f /usr/lib/jvm/jdk1.6.0_30/bin/jar</span><br></pre></td></tr></table></figure>\n<p><strong>jdk安装目录按自己实际情况更改</strong></p>\n<p>如果提示<code>javah：commond not found</code>，于是照葫芦画瓢，输入命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/bin</span><br><span class=\"line\">ln -s -f /usr/lib/jvm/jdk1.6.0_30/bin/javah</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>该系列脚本解决了自动部署问题，非常适用于敏捷开发</li>\n<li>基于该系列脚本可以实现自动发布系统的开发 :)</li>\n</ul>\n"},{"title":"一个从 Jar 文件中获取所有的类路径的工具类","title_url":"load-jar-file-class","date":"2016-11-16T16:00:00.000Z","description":"一个从 Jar 文件中获取所有的类路径的工具类","_content":"\n```java\nimport java.io.File;\nimport java.io.IOException;\nimport java.lang.reflect.Modifier;\nimport java.util.ArrayList;\nimport java.util.Enumeration;\nimport java.util.List;\nimport java.util.Set;\nimport java.util.TreeSet;\nimport java.util.zip.ZipEntry;\nimport java.util.zip.ZipFile;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n/**\n * 关于类的工具类\n * 参考 @see org.apache.jorphan.reflect.ClassFinder\n * \n * @author chen_k\n *\n * 2016年11月17日-上午10:30:59\n */\npublic class ClassUtil {\n\t\n\tprivate static final Logger log = LoggerFactory.getLogger(ClassUtil.class);\n\t\n\tprivate static final String DOT_CLASS = \".class\";\n\tprivate static final int DOT_CLASS_LEN = DOT_CLASS.length();\n\n\t/**\n\t * 从指定的 jar 文件中获取类的路径列表\n\t * @param jarFile File jar 文件对象\n\t * @param parents Class<?>[] 继承或者实现的接口\n\t * @param inner 是否包含内部类\n\t * @param contain 类路径中含有的字符串，比如 .function.\n\t * @param notContain 类路径中不含有的字符串 .gui.\n\t * @return List<String>\n\t * @throws IOException\n\t */\n\tpublic static List<String> getClassList(File jarFile, Class<?>[] parents, boolean inner, String contain, String notContain) throws IOException {\n\t\tSet<String> listClasses = new TreeSet<>();\n\n\t\tZipFile zipFile = null;\n\t\ttry {\n\t\t\tzipFile = new ZipFile(jarFile);\n\t\t\tEnumeration<? extends ZipEntry> entries = zipFile.entries();\n\t\t\twhile (entries.hasMoreElements()) {\n\t\t\t\tString strEntry = entries.nextElement().toString();\n\t\t\t\tif (strEntry.endsWith(DOT_CLASS)) {\n\t\t\t\t\tString fixedClassName = fixClassName(strEntry);\n\t\t\t\t\tif (accept(parents, fixedClassName, contain, notContain, inner)) {\n\t\t\t\t\t\tlistClasses.add(fixedClassName);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\tthrow e;\n\t\t} finally {\n\t\t\tif (zipFile != null) {\n\t\t\t\ttry {\n\t\t\t\t\tzipFile.close();\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn new ArrayList<>(listClasses);\n\t}\n\t\n\tpublic static String fixClassName(String strClassName) {\n\t\tstrClassName = strClassName.replace('\\\\', '.');\n\t\tstrClassName = strClassName.replace('/', '.');\n\t\t// remove \".class\"\n\t\tstrClassName = strClassName.substring(0, strClassName.length() - DOT_CLASS_LEN);\n\t\treturn strClassName;\n\t}\n\n\tpublic static boolean accept(Class<?>[] parents, String className, String contains, String notContains,\n\t\t\tboolean inner) {\n\n\t\tif (contains != null && !className.contains(contains)) {\n\t\t\treturn false; // It does not contain a required string\n\t\t}\n\t\tif (notContains != null && className.contains(notContains)) {\n\t\t\treturn false; // It contains a banned string\n\t\t}\n\t\tif (!className.contains(\"$\") || inner) { // $NON-NLS-1$\n\t\t\tif (isChildOf(parents, className, Thread.currentThread().getContextClassLoader())) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic static boolean isChildOf(Class<?>[] parentClasses, String strClassName, ClassLoader contextClassLoader) {\n\t\t// might throw an exception, assume this is ignorable\n\t\ttry {\n\t\t\tClass<?> c = Class.forName(strClassName, false, contextClassLoader);\n\n\t\t\tif (!c.isInterface() && !Modifier.isAbstract(c.getModifiers())) {\n\t\t\t\tfor (Class<?> parentClass : parentClasses) {\n\t\t\t\t\tif (parentClass.isAssignableFrom(c)) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (UnsupportedClassVersionError | ClassNotFoundException | NoClassDefFoundError e) {\n\t\t\tlog.debug(e.getLocalizedMessage());\n\t\t}\n\t\treturn false;\n\t}\n\n}\n\n```\n\n比如 jar 文件在 `D:/soft/apache-jmeter-3.0/lib/ext/ApacheJMeter_functions.jar`\n``` java\nList<String> classes = ClassUtil.getClassList(new File(\"D:/soft/apache-jmeter-3.0/lib/ext/ApacheJMeter_functions.jar\"), new Class[] { Function.class }, true, \".functions.\", \".gui.\");\n// Function.class 是 org.apache.jmeter.functions.Function\n```\n\n打印 classes，输出如下：\n```\norg.apache.jmeter.functions.BeanShell\norg.apache.jmeter.functions.CSVRead\norg.apache.jmeter.functions.CharFunction\norg.apache.jmeter.functions.EscapeHtml\norg.apache.jmeter.functions.EscapeOroRegexpChars\norg.apache.jmeter.functions.EvalFunction\norg.apache.jmeter.functions.EvalVarFunction\norg.apache.jmeter.functions.FileToString\norg.apache.jmeter.functions.IntSum\norg.apache.jmeter.functions.IterationCounter\norg.apache.jmeter.functions.JavaScript\norg.apache.jmeter.functions.Jexl2Function\norg.apache.jmeter.functions.Jexl3Function\norg.apache.jmeter.functions.JexlFunction\norg.apache.jmeter.functions.LogFunction\norg.apache.jmeter.functions.LogFunction2\norg.apache.jmeter.functions.LongSum\norg.apache.jmeter.functions.MachineIP\norg.apache.jmeter.functions.MachineName\norg.apache.jmeter.functions.Property\norg.apache.jmeter.functions.Property2\norg.apache.jmeter.functions.Random\norg.apache.jmeter.functions.RandomString\norg.apache.jmeter.functions.RegexFunction\norg.apache.jmeter.functions.SamplerName\norg.apache.jmeter.functions.SetProperty\norg.apache.jmeter.functions.SplitFunction\norg.apache.jmeter.functions.StringFromFile\norg.apache.jmeter.functions.TestPlanName\norg.apache.jmeter.functions.ThreadNumber\norg.apache.jmeter.functions.TimeFunction\norg.apache.jmeter.functions.UnEscape\norg.apache.jmeter.functions.UnEscapeHtml\norg.apache.jmeter.functions.UrlDecode\norg.apache.jmeter.functions.UrlEncode\norg.apache.jmeter.functions.Uuid\norg.apache.jmeter.functions.Variable\norg.apache.jmeter.functions.XPath\n```","source":"_posts/一个从 Jar 文件中获取所有的类路径的工具类.md","raw":"---\ntitle: 一个从 Jar 文件中获取所有的类路径的工具类\ntitle_url: load-jar-file-class\ndate: 2016-11-17\ntags: [Java]\ncategories: 技术\ndescription: 一个从 Jar 文件中获取所有的类路径的工具类\n---\n\n```java\nimport java.io.File;\nimport java.io.IOException;\nimport java.lang.reflect.Modifier;\nimport java.util.ArrayList;\nimport java.util.Enumeration;\nimport java.util.List;\nimport java.util.Set;\nimport java.util.TreeSet;\nimport java.util.zip.ZipEntry;\nimport java.util.zip.ZipFile;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n/**\n * 关于类的工具类\n * 参考 @see org.apache.jorphan.reflect.ClassFinder\n * \n * @author chen_k\n *\n * 2016年11月17日-上午10:30:59\n */\npublic class ClassUtil {\n\t\n\tprivate static final Logger log = LoggerFactory.getLogger(ClassUtil.class);\n\t\n\tprivate static final String DOT_CLASS = \".class\";\n\tprivate static final int DOT_CLASS_LEN = DOT_CLASS.length();\n\n\t/**\n\t * 从指定的 jar 文件中获取类的路径列表\n\t * @param jarFile File jar 文件对象\n\t * @param parents Class<?>[] 继承或者实现的接口\n\t * @param inner 是否包含内部类\n\t * @param contain 类路径中含有的字符串，比如 .function.\n\t * @param notContain 类路径中不含有的字符串 .gui.\n\t * @return List<String>\n\t * @throws IOException\n\t */\n\tpublic static List<String> getClassList(File jarFile, Class<?>[] parents, boolean inner, String contain, String notContain) throws IOException {\n\t\tSet<String> listClasses = new TreeSet<>();\n\n\t\tZipFile zipFile = null;\n\t\ttry {\n\t\t\tzipFile = new ZipFile(jarFile);\n\t\t\tEnumeration<? extends ZipEntry> entries = zipFile.entries();\n\t\t\twhile (entries.hasMoreElements()) {\n\t\t\t\tString strEntry = entries.nextElement().toString();\n\t\t\t\tif (strEntry.endsWith(DOT_CLASS)) {\n\t\t\t\t\tString fixedClassName = fixClassName(strEntry);\n\t\t\t\t\tif (accept(parents, fixedClassName, contain, notContain, inner)) {\n\t\t\t\t\t\tlistClasses.add(fixedClassName);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\tthrow e;\n\t\t} finally {\n\t\t\tif (zipFile != null) {\n\t\t\t\ttry {\n\t\t\t\t\tzipFile.close();\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn new ArrayList<>(listClasses);\n\t}\n\t\n\tpublic static String fixClassName(String strClassName) {\n\t\tstrClassName = strClassName.replace('\\\\', '.');\n\t\tstrClassName = strClassName.replace('/', '.');\n\t\t// remove \".class\"\n\t\tstrClassName = strClassName.substring(0, strClassName.length() - DOT_CLASS_LEN);\n\t\treturn strClassName;\n\t}\n\n\tpublic static boolean accept(Class<?>[] parents, String className, String contains, String notContains,\n\t\t\tboolean inner) {\n\n\t\tif (contains != null && !className.contains(contains)) {\n\t\t\treturn false; // It does not contain a required string\n\t\t}\n\t\tif (notContains != null && className.contains(notContains)) {\n\t\t\treturn false; // It contains a banned string\n\t\t}\n\t\tif (!className.contains(\"$\") || inner) { // $NON-NLS-1$\n\t\t\tif (isChildOf(parents, className, Thread.currentThread().getContextClassLoader())) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic static boolean isChildOf(Class<?>[] parentClasses, String strClassName, ClassLoader contextClassLoader) {\n\t\t// might throw an exception, assume this is ignorable\n\t\ttry {\n\t\t\tClass<?> c = Class.forName(strClassName, false, contextClassLoader);\n\n\t\t\tif (!c.isInterface() && !Modifier.isAbstract(c.getModifiers())) {\n\t\t\t\tfor (Class<?> parentClass : parentClasses) {\n\t\t\t\t\tif (parentClass.isAssignableFrom(c)) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (UnsupportedClassVersionError | ClassNotFoundException | NoClassDefFoundError e) {\n\t\t\tlog.debug(e.getLocalizedMessage());\n\t\t}\n\t\treturn false;\n\t}\n\n}\n\n```\n\n比如 jar 文件在 `D:/soft/apache-jmeter-3.0/lib/ext/ApacheJMeter_functions.jar`\n``` java\nList<String> classes = ClassUtil.getClassList(new File(\"D:/soft/apache-jmeter-3.0/lib/ext/ApacheJMeter_functions.jar\"), new Class[] { Function.class }, true, \".functions.\", \".gui.\");\n// Function.class 是 org.apache.jmeter.functions.Function\n```\n\n打印 classes，输出如下：\n```\norg.apache.jmeter.functions.BeanShell\norg.apache.jmeter.functions.CSVRead\norg.apache.jmeter.functions.CharFunction\norg.apache.jmeter.functions.EscapeHtml\norg.apache.jmeter.functions.EscapeOroRegexpChars\norg.apache.jmeter.functions.EvalFunction\norg.apache.jmeter.functions.EvalVarFunction\norg.apache.jmeter.functions.FileToString\norg.apache.jmeter.functions.IntSum\norg.apache.jmeter.functions.IterationCounter\norg.apache.jmeter.functions.JavaScript\norg.apache.jmeter.functions.Jexl2Function\norg.apache.jmeter.functions.Jexl3Function\norg.apache.jmeter.functions.JexlFunction\norg.apache.jmeter.functions.LogFunction\norg.apache.jmeter.functions.LogFunction2\norg.apache.jmeter.functions.LongSum\norg.apache.jmeter.functions.MachineIP\norg.apache.jmeter.functions.MachineName\norg.apache.jmeter.functions.Property\norg.apache.jmeter.functions.Property2\norg.apache.jmeter.functions.Random\norg.apache.jmeter.functions.RandomString\norg.apache.jmeter.functions.RegexFunction\norg.apache.jmeter.functions.SamplerName\norg.apache.jmeter.functions.SetProperty\norg.apache.jmeter.functions.SplitFunction\norg.apache.jmeter.functions.StringFromFile\norg.apache.jmeter.functions.TestPlanName\norg.apache.jmeter.functions.ThreadNumber\norg.apache.jmeter.functions.TimeFunction\norg.apache.jmeter.functions.UnEscape\norg.apache.jmeter.functions.UnEscapeHtml\norg.apache.jmeter.functions.UrlDecode\norg.apache.jmeter.functions.UrlEncode\norg.apache.jmeter.functions.Uuid\norg.apache.jmeter.functions.Variable\norg.apache.jmeter.functions.XPath\n```","slug":"一个从 Jar 文件中获取所有的类路径的工具类","published":1,"updated":"2017-05-26T14:35:31.154Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfto0q82001318c7rqqmyxus","content":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Modifier;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Enumeration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Set;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.TreeSet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.zip.ZipEntry;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.zip.ZipFile;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.Logger;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.LoggerFactory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * 关于类的工具类</span><br><span class=\"line\"> * 参考 <span class=\"doctag\">@see</span> org.apache.jorphan.reflect.ClassFinder</span><br><span class=\"line\"> * </span><br><span class=\"line\"> * <span class=\"doctag\">@author</span> chen_k</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * 2016年11月17日-上午10:30:59</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClassUtil</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Logger log = LoggerFactory.getLogger(ClassUtil.class);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String DOT_CLASS = <span class=\"string\">\".class\"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> DOT_CLASS_LEN = DOT_CLASS.length();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span><br><span class=\"line\">\t * 从指定的 jar 文件中获取类的路径列表</span><br><span class=\"line\">\t * <span class=\"doctag\">@param</span> jarFile File jar 文件对象</span><br><span class=\"line\">\t * <span class=\"doctag\">@param</span> parents Class&lt;?&gt;[] 继承或者实现的接口</span><br><span class=\"line\">\t * <span class=\"doctag\">@param</span> inner 是否包含内部类</span><br><span class=\"line\">\t * <span class=\"doctag\">@param</span> contain 类路径中含有的字符串，比如 .function.</span><br><span class=\"line\">\t * <span class=\"doctag\">@param</span> notContain 类路径中不含有的字符串 .gui.</span><br><span class=\"line\">\t * <span class=\"doctag\">@return</span> List&lt;String&gt;</span><br><span class=\"line\">\t * <span class=\"doctag\">@throws</span> IOException</span><br><span class=\"line\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;String&gt; <span class=\"title\">getClassList</span><span class=\"params\">(File jarFile, Class&lt;?&gt;[] parents, <span class=\"keyword\">boolean</span> inner, String contain, String notContain)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">\t\tSet&lt;String&gt; listClasses = <span class=\"keyword\">new</span> TreeSet&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tZipFile zipFile = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tzipFile = <span class=\"keyword\">new</span> ZipFile(jarFile);</span><br><span class=\"line\">\t\t\tEnumeration&lt;? extends ZipEntry&gt; entries = zipFile.entries();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span> (entries.hasMoreElements()) &#123;</span><br><span class=\"line\">\t\t\t\tString strEntry = entries.nextElement().toString();</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (strEntry.endsWith(DOT_CLASS)) &#123;</span><br><span class=\"line\">\t\t\t\t\tString fixedClassName = fixClassName(strEntry);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (accept(parents, fixedClassName, contain, notContain, inner)) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tlistClasses.add(fixedClassName);</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> e;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (zipFile != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\t\tzipFile.close();</span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ArrayList&lt;&gt;(listClasses);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">fixClassName</span><span class=\"params\">(String strClassName)</span> </span>&#123;</span><br><span class=\"line\">\t\tstrClassName = strClassName.replace(<span class=\"string\">'\\\\'</span>, <span class=\"string\">'.'</span>);</span><br><span class=\"line\">\t\tstrClassName = strClassName.replace(<span class=\"string\">'/'</span>, <span class=\"string\">'.'</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// remove \".class\"</span></span><br><span class=\"line\">\t\tstrClassName = strClassName.substring(<span class=\"number\">0</span>, strClassName.length() - DOT_CLASS_LEN);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> strClassName;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">accept</span><span class=\"params\">(Class&lt;?&gt;[] parents, String className, String contains, String notContains,</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">boolean</span> inner)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (contains != <span class=\"keyword\">null</span> &amp;&amp; !className.contains(contains)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>; <span class=\"comment\">// It does not contain a required string</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (notContains != <span class=\"keyword\">null</span> &amp;&amp; className.contains(notContains)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>; <span class=\"comment\">// It contains a banned string</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!className.contains(<span class=\"string\">\"$\"</span>) || inner) &#123; <span class=\"comment\">// $NON-NLS-1$</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (isChildOf(parents, className, Thread.currentThread().getContextClassLoader())) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isChildOf</span><span class=\"params\">(Class&lt;?&gt;[] parentClasses, String strClassName, ClassLoader contextClassLoader)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// might throw an exception, assume this is ignorable</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tClass&lt;?&gt; c = Class.forName(strClassName, <span class=\"keyword\">false</span>, contextClassLoader);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!c.isInterface() &amp;&amp; !Modifier.isAbstract(c.getModifiers())) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> (Class&lt;?&gt; parentClass : parentClasses) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (parentClass.isAssignableFrom(c)) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (UnsupportedClassVersionError | ClassNotFoundException | NoClassDefFoundError e) &#123;</span><br><span class=\"line\">\t\t\tlog.debug(e.getLocalizedMessage());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>比如 jar 文件在 <code>D:/soft/apache-jmeter-3.0/lib/ext/ApacheJMeter_functions.jar</code><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; classes = ClassUtil.getClassList(<span class=\"keyword\">new</span> File(<span class=\"string\">\"D:/soft/apache-jmeter-3.0/lib/ext/ApacheJMeter_functions.jar\"</span>), <span class=\"keyword\">new</span> Class[] &#123; Function.class &#125;, <span class=\"keyword\">true</span>, <span class=\"string\">\".functions.\"</span>, <span class=\"string\">\".gui.\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// Function.class 是 org.apache.jmeter.functions.Function</span></span><br></pre></td></tr></table></figure></p>\n<p>打印 classes，输出如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.apache.jmeter.functions.BeanShell</span><br><span class=\"line\">org.apache.jmeter.functions.CSVRead</span><br><span class=\"line\">org.apache.jmeter.functions.CharFunction</span><br><span class=\"line\">org.apache.jmeter.functions.EscapeHtml</span><br><span class=\"line\">org.apache.jmeter.functions.EscapeOroRegexpChars</span><br><span class=\"line\">org.apache.jmeter.functions.EvalFunction</span><br><span class=\"line\">org.apache.jmeter.functions.EvalVarFunction</span><br><span class=\"line\">org.apache.jmeter.functions.FileToString</span><br><span class=\"line\">org.apache.jmeter.functions.IntSum</span><br><span class=\"line\">org.apache.jmeter.functions.IterationCounter</span><br><span class=\"line\">org.apache.jmeter.functions.JavaScript</span><br><span class=\"line\">org.apache.jmeter.functions.Jexl2Function</span><br><span class=\"line\">org.apache.jmeter.functions.Jexl3Function</span><br><span class=\"line\">org.apache.jmeter.functions.JexlFunction</span><br><span class=\"line\">org.apache.jmeter.functions.LogFunction</span><br><span class=\"line\">org.apache.jmeter.functions.LogFunction2</span><br><span class=\"line\">org.apache.jmeter.functions.LongSum</span><br><span class=\"line\">org.apache.jmeter.functions.MachineIP</span><br><span class=\"line\">org.apache.jmeter.functions.MachineName</span><br><span class=\"line\">org.apache.jmeter.functions.Property</span><br><span class=\"line\">org.apache.jmeter.functions.Property2</span><br><span class=\"line\">org.apache.jmeter.functions.Random</span><br><span class=\"line\">org.apache.jmeter.functions.RandomString</span><br><span class=\"line\">org.apache.jmeter.functions.RegexFunction</span><br><span class=\"line\">org.apache.jmeter.functions.SamplerName</span><br><span class=\"line\">org.apache.jmeter.functions.SetProperty</span><br><span class=\"line\">org.apache.jmeter.functions.SplitFunction</span><br><span class=\"line\">org.apache.jmeter.functions.StringFromFile</span><br><span class=\"line\">org.apache.jmeter.functions.TestPlanName</span><br><span class=\"line\">org.apache.jmeter.functions.ThreadNumber</span><br><span class=\"line\">org.apache.jmeter.functions.TimeFunction</span><br><span class=\"line\">org.apache.jmeter.functions.UnEscape</span><br><span class=\"line\">org.apache.jmeter.functions.UnEscapeHtml</span><br><span class=\"line\">org.apache.jmeter.functions.UrlDecode</span><br><span class=\"line\">org.apache.jmeter.functions.UrlEncode</span><br><span class=\"line\">org.apache.jmeter.functions.Uuid</span><br><span class=\"line\">org.apache.jmeter.functions.Variable</span><br><span class=\"line\">org.apache.jmeter.functions.XPath</span><br></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Modifier;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Enumeration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Set;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.TreeSet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.zip.ZipEntry;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.zip.ZipFile;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.Logger;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.LoggerFactory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * 关于类的工具类</span><br><span class=\"line\"> * 参考 <span class=\"doctag\">@see</span> org.apache.jorphan.reflect.ClassFinder</span><br><span class=\"line\"> * </span><br><span class=\"line\"> * <span class=\"doctag\">@author</span> chen_k</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * 2016年11月17日-上午10:30:59</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClassUtil</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Logger log = LoggerFactory.getLogger(ClassUtil.class);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String DOT_CLASS = <span class=\"string\">\".class\"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> DOT_CLASS_LEN = DOT_CLASS.length();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span><br><span class=\"line\">\t * 从指定的 jar 文件中获取类的路径列表</span><br><span class=\"line\">\t * <span class=\"doctag\">@param</span> jarFile File jar 文件对象</span><br><span class=\"line\">\t * <span class=\"doctag\">@param</span> parents Class&lt;?&gt;[] 继承或者实现的接口</span><br><span class=\"line\">\t * <span class=\"doctag\">@param</span> inner 是否包含内部类</span><br><span class=\"line\">\t * <span class=\"doctag\">@param</span> contain 类路径中含有的字符串，比如 .function.</span><br><span class=\"line\">\t * <span class=\"doctag\">@param</span> notContain 类路径中不含有的字符串 .gui.</span><br><span class=\"line\">\t * <span class=\"doctag\">@return</span> List&lt;String&gt;</span><br><span class=\"line\">\t * <span class=\"doctag\">@throws</span> IOException</span><br><span class=\"line\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> List&lt;String&gt; <span class=\"title\">getClassList</span><span class=\"params\">(File jarFile, Class&lt;?&gt;[] parents, <span class=\"keyword\">boolean</span> inner, String contain, String notContain)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">\t\tSet&lt;String&gt; listClasses = <span class=\"keyword\">new</span> TreeSet&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tZipFile zipFile = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tzipFile = <span class=\"keyword\">new</span> ZipFile(jarFile);</span><br><span class=\"line\">\t\t\tEnumeration&lt;? extends ZipEntry&gt; entries = zipFile.entries();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span> (entries.hasMoreElements()) &#123;</span><br><span class=\"line\">\t\t\t\tString strEntry = entries.nextElement().toString();</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (strEntry.endsWith(DOT_CLASS)) &#123;</span><br><span class=\"line\">\t\t\t\t\tString fixedClassName = fixClassName(strEntry);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (accept(parents, fixedClassName, contain, notContain, inner)) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tlistClasses.add(fixedClassName);</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> e;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (zipFile != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\t\tzipFile.close();</span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ArrayList&lt;&gt;(listClasses);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">fixClassName</span><span class=\"params\">(String strClassName)</span> </span>&#123;</span><br><span class=\"line\">\t\tstrClassName = strClassName.replace(<span class=\"string\">'\\\\'</span>, <span class=\"string\">'.'</span>);</span><br><span class=\"line\">\t\tstrClassName = strClassName.replace(<span class=\"string\">'/'</span>, <span class=\"string\">'.'</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// remove \".class\"</span></span><br><span class=\"line\">\t\tstrClassName = strClassName.substring(<span class=\"number\">0</span>, strClassName.length() - DOT_CLASS_LEN);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> strClassName;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">accept</span><span class=\"params\">(Class&lt;?&gt;[] parents, String className, String contains, String notContains,</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">boolean</span> inner)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (contains != <span class=\"keyword\">null</span> &amp;&amp; !className.contains(contains)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>; <span class=\"comment\">// It does not contain a required string</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (notContains != <span class=\"keyword\">null</span> &amp;&amp; className.contains(notContains)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>; <span class=\"comment\">// It contains a banned string</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!className.contains(<span class=\"string\">\"$\"</span>) || inner) &#123; <span class=\"comment\">// $NON-NLS-1$</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (isChildOf(parents, className, Thread.currentThread().getContextClassLoader())) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isChildOf</span><span class=\"params\">(Class&lt;?&gt;[] parentClasses, String strClassName, ClassLoader contextClassLoader)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// might throw an exception, assume this is ignorable</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tClass&lt;?&gt; c = Class.forName(strClassName, <span class=\"keyword\">false</span>, contextClassLoader);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!c.isInterface() &amp;&amp; !Modifier.isAbstract(c.getModifiers())) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> (Class&lt;?&gt; parentClass : parentClasses) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (parentClass.isAssignableFrom(c)) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (UnsupportedClassVersionError | ClassNotFoundException | NoClassDefFoundError e) &#123;</span><br><span class=\"line\">\t\t\tlog.debug(e.getLocalizedMessage());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>比如 jar 文件在 <code>D:/soft/apache-jmeter-3.0/lib/ext/ApacheJMeter_functions.jar</code><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; classes = ClassUtil.getClassList(<span class=\"keyword\">new</span> File(<span class=\"string\">\"D:/soft/apache-jmeter-3.0/lib/ext/ApacheJMeter_functions.jar\"</span>), <span class=\"keyword\">new</span> Class[] &#123; Function.class &#125;, <span class=\"keyword\">true</span>, <span class=\"string\">\".functions.\"</span>, <span class=\"string\">\".gui.\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// Function.class 是 org.apache.jmeter.functions.Function</span></span><br></pre></td></tr></table></figure></p>\n<p>打印 classes，输出如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.apache.jmeter.functions.BeanShell</span><br><span class=\"line\">org.apache.jmeter.functions.CSVRead</span><br><span class=\"line\">org.apache.jmeter.functions.CharFunction</span><br><span class=\"line\">org.apache.jmeter.functions.EscapeHtml</span><br><span class=\"line\">org.apache.jmeter.functions.EscapeOroRegexpChars</span><br><span class=\"line\">org.apache.jmeter.functions.EvalFunction</span><br><span class=\"line\">org.apache.jmeter.functions.EvalVarFunction</span><br><span class=\"line\">org.apache.jmeter.functions.FileToString</span><br><span class=\"line\">org.apache.jmeter.functions.IntSum</span><br><span class=\"line\">org.apache.jmeter.functions.IterationCounter</span><br><span class=\"line\">org.apache.jmeter.functions.JavaScript</span><br><span class=\"line\">org.apache.jmeter.functions.Jexl2Function</span><br><span class=\"line\">org.apache.jmeter.functions.Jexl3Function</span><br><span class=\"line\">org.apache.jmeter.functions.JexlFunction</span><br><span class=\"line\">org.apache.jmeter.functions.LogFunction</span><br><span class=\"line\">org.apache.jmeter.functions.LogFunction2</span><br><span class=\"line\">org.apache.jmeter.functions.LongSum</span><br><span class=\"line\">org.apache.jmeter.functions.MachineIP</span><br><span class=\"line\">org.apache.jmeter.functions.MachineName</span><br><span class=\"line\">org.apache.jmeter.functions.Property</span><br><span class=\"line\">org.apache.jmeter.functions.Property2</span><br><span class=\"line\">org.apache.jmeter.functions.Random</span><br><span class=\"line\">org.apache.jmeter.functions.RandomString</span><br><span class=\"line\">org.apache.jmeter.functions.RegexFunction</span><br><span class=\"line\">org.apache.jmeter.functions.SamplerName</span><br><span class=\"line\">org.apache.jmeter.functions.SetProperty</span><br><span class=\"line\">org.apache.jmeter.functions.SplitFunction</span><br><span class=\"line\">org.apache.jmeter.functions.StringFromFile</span><br><span class=\"line\">org.apache.jmeter.functions.TestPlanName</span><br><span class=\"line\">org.apache.jmeter.functions.ThreadNumber</span><br><span class=\"line\">org.apache.jmeter.functions.TimeFunction</span><br><span class=\"line\">org.apache.jmeter.functions.UnEscape</span><br><span class=\"line\">org.apache.jmeter.functions.UnEscapeHtml</span><br><span class=\"line\">org.apache.jmeter.functions.UrlDecode</span><br><span class=\"line\">org.apache.jmeter.functions.UrlEncode</span><br><span class=\"line\">org.apache.jmeter.functions.Uuid</span><br><span class=\"line\">org.apache.jmeter.functions.Variable</span><br><span class=\"line\">org.apache.jmeter.functions.XPath</span><br></pre></td></tr></table></figure></p>\n"},{"title":"一次恢复误删除 git 提交的经历","title_url":"git-commit-recovery","date":"2018-01-10T16:00:00.000Z","description":"一次恢复误删除 git 提交的经历","_content":"\n## 情况\n\n在 SourceTree 中代码 commit 到了本地仓库，没有 push 到远端, 此时不小心把 commit 到本地的那次提交给删除了或者弄丢了.\n\n## 具体操作\n\n使用命令行模式进入到项目所在路径, 然后执行如下命令:\n\n- `git log -g` 找到丢失代码的分支的 commit_id\n\n- `git branch recover_branch commit_id` 使用 commit_id 来创建分支 recover_branch, 这样丢失的代码就在 recover_branch 分支上了.\n\n## 如何回退 commit\n\n在 SourceTree 中代码 commit 到了本地仓库，没有 push 到远端, 可以在想回退的 commit 上面\n\n```\n右键 -> 选择(重置当前分支到此次提交) -> 选择(混合合并 - 保持工作副本并重置索引)\n```\n\n点击确定即可.\n\n## 参考\n\n- [从Git仓库中恢复已删除的分支、文件或丢失的commit](http://sumsung753.blog.163.com/blog/static/146364501201301711943864/)","source":"_posts/一次恢复误删除 git 提交的经历.md","raw":"---\ntitle: 一次恢复误删除 git 提交的经历\ntitle_url: git-commit-recovery\ndate: 2018-01-11\ntags: git\ncategories: [git]\ndescription: 一次恢复误删除 git 提交的经历\n---\n\n## 情况\n\n在 SourceTree 中代码 commit 到了本地仓库，没有 push 到远端, 此时不小心把 commit 到本地的那次提交给删除了或者弄丢了.\n\n## 具体操作\n\n使用命令行模式进入到项目所在路径, 然后执行如下命令:\n\n- `git log -g` 找到丢失代码的分支的 commit_id\n\n- `git branch recover_branch commit_id` 使用 commit_id 来创建分支 recover_branch, 这样丢失的代码就在 recover_branch 分支上了.\n\n## 如何回退 commit\n\n在 SourceTree 中代码 commit 到了本地仓库，没有 push 到远端, 可以在想回退的 commit 上面\n\n```\n右键 -> 选择(重置当前分支到此次提交) -> 选择(混合合并 - 保持工作副本并重置索引)\n```\n\n点击确定即可.\n\n## 参考\n\n- [从Git仓库中恢复已删除的分支、文件或丢失的commit](http://sumsung753.blog.163.com/blog/static/146364501201301711943864/)","slug":"一次恢复误删除 git 提交的经历","published":1,"updated":"2018-03-17T10:36:21.903Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfto0q89001718c7bon74eem","content":"<h2 id=\"情况\"><a href=\"#情况\" class=\"headerlink\" title=\"情况\"></a>情况</h2><p>在 SourceTree 中代码 commit 到了本地仓库，没有 push 到远端, 此时不小心把 commit 到本地的那次提交给删除了或者弄丢了.</p>\n<h2 id=\"具体操作\"><a href=\"#具体操作\" class=\"headerlink\" title=\"具体操作\"></a>具体操作</h2><p>使用命令行模式进入到项目所在路径, 然后执行如下命令:</p>\n<ul>\n<li><p><code>git log -g</code> 找到丢失代码的分支的 commit_id</p>\n</li>\n<li><p><code>git branch recover_branch commit_id</code> 使用 commit_id 来创建分支 recover_branch, 这样丢失的代码就在 recover_branch 分支上了.</p>\n</li>\n</ul>\n<h2 id=\"如何回退-commit\"><a href=\"#如何回退-commit\" class=\"headerlink\" title=\"如何回退 commit\"></a>如何回退 commit</h2><p>在 SourceTree 中代码 commit 到了本地仓库，没有 push 到远端, 可以在想回退的 commit 上面</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">右键 -&gt; 选择(重置当前分支到此次提交) -&gt; 选择(混合合并 - 保持工作副本并重置索引)</span><br></pre></td></tr></table></figure>\n<p>点击确定即可.</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"http://sumsung753.blog.163.com/blog/static/146364501201301711943864/\" target=\"_blank\" rel=\"external\">从Git仓库中恢复已删除的分支、文件或丢失的commit</a></li>\n</ul>\n","excerpt":"","more":"<h2 id=\"情况\"><a href=\"#情况\" class=\"headerlink\" title=\"情况\"></a>情况</h2><p>在 SourceTree 中代码 commit 到了本地仓库，没有 push 到远端, 此时不小心把 commit 到本地的那次提交给删除了或者弄丢了.</p>\n<h2 id=\"具体操作\"><a href=\"#具体操作\" class=\"headerlink\" title=\"具体操作\"></a>具体操作</h2><p>使用命令行模式进入到项目所在路径, 然后执行如下命令:</p>\n<ul>\n<li><p><code>git log -g</code> 找到丢失代码的分支的 commit_id</p>\n</li>\n<li><p><code>git branch recover_branch commit_id</code> 使用 commit_id 来创建分支 recover_branch, 这样丢失的代码就在 recover_branch 分支上了.</p>\n</li>\n</ul>\n<h2 id=\"如何回退-commit\"><a href=\"#如何回退-commit\" class=\"headerlink\" title=\"如何回退 commit\"></a>如何回退 commit</h2><p>在 SourceTree 中代码 commit 到了本地仓库，没有 push 到远端, 可以在想回退的 commit 上面</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">右键 -&gt; 选择(重置当前分支到此次提交) -&gt; 选择(混合合并 - 保持工作副本并重置索引)</span><br></pre></td></tr></table></figure>\n<p>点击确定即可.</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"http://sumsung753.blog.163.com/blog/static/146364501201301711943864/\">从Git仓库中恢复已删除的分支、文件或丢失的commit</a></li>\n</ul>\n"},{"title":"使用Maven的profiles和testResource进行Junit单元测试","title_url":"Maven-profiles-testResource-Junit","date":"2016-07-10T16:00:00.000Z","description":"使用Maven的profiles和testResource进行Junit单元测试","_content":"\n## Maven的profiles配置使用\n\nMaven的profiles可根据不同的环境将POM的配置应用到配置文件中的`${}`变量中，具体步骤如下：\n\n- POM的profiles配置如下\n```xml\n<project>\n\t\n\t<profiles>\n\t\t<profile>\n\t\t\t<id>dev</id>\n\t\t\t<activation>\n\t\t\t\t<activeByDefault>true</activeByDefault>\n\t\t\t</activation>\n\t\t\t<properties>\n\t\t\t\t<!-- 日志 -->\n\t\t\t\t<log.root.level>DEBUG</log.root.level>\n\t\t\t\t<log.root.name>Service</log.root.name>\n\t\t\t\t<log.special>Console</log.special>\n\t\t\t</properties>\n\t\t</profile>\n\t\t<profile>\n\t\t\t<id>test</id>\n\t\t\t<properties>\n\t\t\t\t<!-- 日志 -->\n\t\t\t\t<log.root.level>DEBUG</log.root.level>\n\t\t\t\t<log.root.name>Service</log.root.name>\n\t\t\t\t<log.special>Console</log.special>\n\t\t\t</properties>\n\t\t</profile>\n\t</profiles>\n</project>\n```\n\n- 为了在编译的时候就将POM的配置应用到文件中的`${}`变量中需要加入如下配置，具体会将profiles中的配置应用到`src/main/resources`目录下含有`${}`变量，\n这些变量可以在xml或者properties文件中\n```xml\n<project>\n\n\t<build>\n\t\t<resources>\n\t\t\t<resource>\n\t\t\t\t<directory>src/main/resources</directory>\n\t\t\t\t<includes>\n\t\t\t\t\t<include>*/*</include>\n\t\t\t\t\t<include>*</include>\n\t\t\t\t</includes>\n\t\t\t\t<filtering>true</filtering>\n\t\t\t</resource>\n\t\t</resources>\n\t</build>\n</project>\n```\n\n比如在`src/main/resources/log4j.properties`中有如下配置\n```\nlog4j.rootLogger=${log.root.level},${log.root.name},${log.special}\n\n#Console\nlog4j.appender.Console=org.apache.log4j.ConsoleAppender\nlog4j.appender.Console.layout=org.apache.log4j.PatternLayout\nlog4j.appender.Console.layout.ConversionPattern=%d{dd\\u65e5 HH:mm:ss,SSS} : %-5p %C{1}.%M() - %m%n\n```\n\n那么编译后在`target\\classes\\log4j.properties`文件中的内容如下：\n```\nlog4j.rootLogger=DEBUG,Service,Console\n\n#Console\nlog4j.appender.Console=org.apache.log4j.ConsoleAppender\nlog4j.appender.Console.layout=org.apache.log4j.PatternLayout\nlog4j.appender.Console.layout.ConversionPattern=%d{dd\\u65e5 HH:mm:ss,SSS} : %-5p %C{1}.%M() - %m%n\n```\n\n## 在Junit单元测试中利用profiles配置来区分不同环境\n\n在上面的介绍中是通过profiles配置来区分不同环境方便打包发布，这里介绍通过profiles配置区分不同环境进行单元测试，确保系统在发布前不仅能通过本地环境的单元测试，还能够通过线上环境的单元测试。\n\n- POM的profiles配置和上面的一样\n\n- 在`build`节点下新增`testResources`，确保在本地执行`mvn test -Ptest` 的时候将profiles配置应用到`src/test/resources`目录下含有`${}`变量并执行Junit单元测试\n```xml\n<project>\n\n\t<build>\n\t\t<testResources>\n\t\t\t<testResource>\n\t\t\t\t<directory>src/test/resources</directory>\n\t\t\t\t<includes>\n\t\t\t\t\t<include>*/*</include>\n\t\t\t\t\t<include>*</include>\n\t\t\t\t</includes>\n\t\t\t\t<filtering>true</filtering>\n\t\t\t</testResource>\n\t\t</testResources>\n\t</build>\n</project>\n```\n\n- 在`src/test/resources`目录下新建`test`文件夹，将properties文件移到该目录下，Maven在执行单元测试的时候默认从该目录读取properties文件\n\n- **注意**，在 Eclipse 中右键项目执行`Maven->Update Maven Project`后，需要右键项目在`Java Build Path`节点中选择`Source`选项卡，\n选中`src/main/resources`和`src/test/resources`下的`Excluded`选项点击右边的`Remove`按钮，最后点击下面的`Ok`按钮，才能将相关资源文件编译到`target`目录下\n\n## 编写一个Spring MVC的Controller层Junit单元测试\n\n- Controller层Junit单元测试与Service层有所不同，需要引入spring-test和spring-mock\n```xml\n<dependency>\n\t<groupId>org.springframework</groupId>\n\t<artifactId>spring-test</artifactId>\n\t<version>3.2.8.RELEASE</version>\n</dependency>\n<dependency>\n\t<groupId>org.springframework</groupId>\n\t<artifactId>spring-mock</artifactId>\n\t<version>2.0.8</version>\n</dependency>\n```\n\n- Controller层代码如下\n```java\n@ResponseBody\n@ApiOperation(value = \"获取用户信息\", notes = \"获取用户信息\", response = JsonResponses.class)\n@RequestMapping(value = \"/user_info\", method = RequestMethod.GET, produces = \"application/json; charset=utf-8\")\npublic void getUserInfo(@ModelAttribute BasicInfoBean basicInfo, \n\t\tHttpServletResponse response, HttpServletRequest request) throws Exception {\n\t\n\t// 验证uid是否存在\n\tInteger uid = basicInfo.getUid();\n\tif (uid == null) {\n\t\tHttpUtil.returnJson(new JsonResponses(API.CODE.kCodeParamsError, API.MESSAGE.PARAM_FAILED.concat(\":uid为空\")), response);\n\t\treturn;\n\t}\n\t\n\tUsers user = userServicebyUC.getUsersByUid(uid);\n\tfinal Map<String, Object> dataMap = new LinkedHashMap<>();\n\tsetUserModelMap(user, dataMap, basicInfo);\n\t\n\tHttpUtil.returnJson(new JsonResponses(API.CODE.kCodeSuccess, API.MESSAGE.SUCCESS, dataMap), response);\n}\n```\n\n- Junit代码如下\n```java\n@RunWith(SpringJUnit4ClassRunner.class)\n@WebAppConfiguration\n@ContextConfiguration(locations = { \"classpath:spring/*-config.xml\", \"classpath:spring/*-servlet.xml\" })\npublic class BaseController {\n\t\n\tprotected static String uid;\n\t\n\tstatic {\n\t\t// 加载配置文件\n\t\tProperties config = new Properties();\n\t\tInputStream input = null;\n\t\ttry {\n\t\t\tinput = API.class.getClassLoader().getResourceAsStream(\"test/test.properties\");\n\t\t\tReader reader = new InputStreamReader(input, \"UTF-8\");\n\t\t\tconfig.load(reader);\n\n\t\t\tuid = config.getProperty(\"uid\");\n\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tif (null != input) {\n\t\t\t\ttry {\n\t\t\t\t\tinput.close();\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// @Autowired\n\t// private WebApplicationContext wac;\n\t\n}\n\npublic class TestUserController extends BaseController {\n\t\n\tprivate Logger logger = LoggerFactory.getLogger(this.getClass());\n\t\n\t@Autowired\n\tprotected UserController userController;\n\n\tprotected MockMvc mockMvc;\n\n\t@Before\n\tpublic void setup() {\n\t\tmockMvc = MockMvcBuilders.standaloneSetup(userController).build();\n\t}\n\n\t@Test\n\tpublic void testFindPageUsers() throws Exception {\n\t\tlogger.info(\"uid is {}\", uid);\n\t\t\n\t\tResultActions ra = mockMvc.perform(MockMvcRequestBuilders.get(\"/user/user_info\")\n\t\t\t\t.accept(MediaType.APPLICATION_JSON).param(\"test\", \"1\").param(\"uid\", uid));\n\t\tMvcResult mr = ra.andReturn();\n\t\tMockHttpServletResponse resp = mr.getResponse();\n\t\tAssert.assertEquals(resp.getStatus(), 200);\n\t\t\n\t\tJSONObject obj = JSONObject.parseObject(resp.getContentAsString());\n\t\tJSONObject dataObj = obj.getJSONObject(\"data\");\n\t\tAssert.assertEquals(StringUtil.getStr(dataObj.get(\"uid\")), uid);\n\t}\n\n}\n```\n\n## 如何去掉单元测试\n\n- 在执行Maven命令的时候加上`-Dmaven.test.skip=true`即可，比如`clean install -Dmaven.test.skip=true`，这样就会在执行的过程中跳过单元测试 `[INFO] Tests are skipped.`，也可以在profiles的properties中增加`<maven.test.skip>true</maven.test.skip>`，具体如下\n```xml\n<project>\n\t\n\t<profiles>\n\t\t<profile>\n\t\t\t<id>dev</id>\n\t\t\t<activation>\n\t\t\t\t<activeByDefault>true</activeByDefault>\n\t\t\t</activation>\n\t\t\t<properties>\n\t\t\t\t<maven.test.skip>false</maven.test.skip>\n\t\t\t\t<!-- 日志 -->\n\t\t\t\t<log.root.level>DEBUG</log.root.level>\n\t\t\t\t<log.root.name>Service</log.root.name>\n\t\t\t\t<log.special>Console</log.special>\n\t\t\t</properties>\n\t\t</profile>\n\t\t<profile>\n\t\t\t<id>test</id>\n\t\t\t<properties>\n\t\t\t\t<maven.test.skip>true</maven.test.skip>\n\t\t\t\t<!-- 日志 -->\n\t\t\t\t<log.root.level>DEBUG</log.root.level>\n\t\t\t\t<log.root.name>Service</log.root.name>\n\t\t\t\t<log.special>Console</log.special>\n\t\t\t</properties>\n\t\t</profile>\n\t</profiles>\n</project>\n```\n\n## 参考如下\n- [Maven的profiles介绍](https://maven.apache.org/guides/introduction/introduction-to-profiles.html)\n- [MAVEN 属性定义与使用](http://www.tmser.com/post-178.html)\n- [Maven的生命周期和插件](http://www.open-open.com/lib/view/open1452138592011.html)\n- [利用maven中resources插件的copy-resources目标进行资源copy和过滤](http://xigua366.iteye.com/blog/2080668?utm_source=tuicool&utm_medium=referral)","source":"_posts/使用Maven的profile和testResource进行Junit单元测试.md","raw":"---\ntitle: 使用Maven的profiles和testResource进行Junit单元测试\ntitle_url: Maven-profiles-testResource-Junit\ndate: 2016-07-11\ntags: [Maven,Junit]\ncategories: 技术\ndescription: 使用Maven的profiles和testResource进行Junit单元测试\n---\n\n## Maven的profiles配置使用\n\nMaven的profiles可根据不同的环境将POM的配置应用到配置文件中的`${}`变量中，具体步骤如下：\n\n- POM的profiles配置如下\n```xml\n<project>\n\t\n\t<profiles>\n\t\t<profile>\n\t\t\t<id>dev</id>\n\t\t\t<activation>\n\t\t\t\t<activeByDefault>true</activeByDefault>\n\t\t\t</activation>\n\t\t\t<properties>\n\t\t\t\t<!-- 日志 -->\n\t\t\t\t<log.root.level>DEBUG</log.root.level>\n\t\t\t\t<log.root.name>Service</log.root.name>\n\t\t\t\t<log.special>Console</log.special>\n\t\t\t</properties>\n\t\t</profile>\n\t\t<profile>\n\t\t\t<id>test</id>\n\t\t\t<properties>\n\t\t\t\t<!-- 日志 -->\n\t\t\t\t<log.root.level>DEBUG</log.root.level>\n\t\t\t\t<log.root.name>Service</log.root.name>\n\t\t\t\t<log.special>Console</log.special>\n\t\t\t</properties>\n\t\t</profile>\n\t</profiles>\n</project>\n```\n\n- 为了在编译的时候就将POM的配置应用到文件中的`${}`变量中需要加入如下配置，具体会将profiles中的配置应用到`src/main/resources`目录下含有`${}`变量，\n这些变量可以在xml或者properties文件中\n```xml\n<project>\n\n\t<build>\n\t\t<resources>\n\t\t\t<resource>\n\t\t\t\t<directory>src/main/resources</directory>\n\t\t\t\t<includes>\n\t\t\t\t\t<include>*/*</include>\n\t\t\t\t\t<include>*</include>\n\t\t\t\t</includes>\n\t\t\t\t<filtering>true</filtering>\n\t\t\t</resource>\n\t\t</resources>\n\t</build>\n</project>\n```\n\n比如在`src/main/resources/log4j.properties`中有如下配置\n```\nlog4j.rootLogger=${log.root.level},${log.root.name},${log.special}\n\n#Console\nlog4j.appender.Console=org.apache.log4j.ConsoleAppender\nlog4j.appender.Console.layout=org.apache.log4j.PatternLayout\nlog4j.appender.Console.layout.ConversionPattern=%d{dd\\u65e5 HH:mm:ss,SSS} : %-5p %C{1}.%M() - %m%n\n```\n\n那么编译后在`target\\classes\\log4j.properties`文件中的内容如下：\n```\nlog4j.rootLogger=DEBUG,Service,Console\n\n#Console\nlog4j.appender.Console=org.apache.log4j.ConsoleAppender\nlog4j.appender.Console.layout=org.apache.log4j.PatternLayout\nlog4j.appender.Console.layout.ConversionPattern=%d{dd\\u65e5 HH:mm:ss,SSS} : %-5p %C{1}.%M() - %m%n\n```\n\n## 在Junit单元测试中利用profiles配置来区分不同环境\n\n在上面的介绍中是通过profiles配置来区分不同环境方便打包发布，这里介绍通过profiles配置区分不同环境进行单元测试，确保系统在发布前不仅能通过本地环境的单元测试，还能够通过线上环境的单元测试。\n\n- POM的profiles配置和上面的一样\n\n- 在`build`节点下新增`testResources`，确保在本地执行`mvn test -Ptest` 的时候将profiles配置应用到`src/test/resources`目录下含有`${}`变量并执行Junit单元测试\n```xml\n<project>\n\n\t<build>\n\t\t<testResources>\n\t\t\t<testResource>\n\t\t\t\t<directory>src/test/resources</directory>\n\t\t\t\t<includes>\n\t\t\t\t\t<include>*/*</include>\n\t\t\t\t\t<include>*</include>\n\t\t\t\t</includes>\n\t\t\t\t<filtering>true</filtering>\n\t\t\t</testResource>\n\t\t</testResources>\n\t</build>\n</project>\n```\n\n- 在`src/test/resources`目录下新建`test`文件夹，将properties文件移到该目录下，Maven在执行单元测试的时候默认从该目录读取properties文件\n\n- **注意**，在 Eclipse 中右键项目执行`Maven->Update Maven Project`后，需要右键项目在`Java Build Path`节点中选择`Source`选项卡，\n选中`src/main/resources`和`src/test/resources`下的`Excluded`选项点击右边的`Remove`按钮，最后点击下面的`Ok`按钮，才能将相关资源文件编译到`target`目录下\n\n## 编写一个Spring MVC的Controller层Junit单元测试\n\n- Controller层Junit单元测试与Service层有所不同，需要引入spring-test和spring-mock\n```xml\n<dependency>\n\t<groupId>org.springframework</groupId>\n\t<artifactId>spring-test</artifactId>\n\t<version>3.2.8.RELEASE</version>\n</dependency>\n<dependency>\n\t<groupId>org.springframework</groupId>\n\t<artifactId>spring-mock</artifactId>\n\t<version>2.0.8</version>\n</dependency>\n```\n\n- Controller层代码如下\n```java\n@ResponseBody\n@ApiOperation(value = \"获取用户信息\", notes = \"获取用户信息\", response = JsonResponses.class)\n@RequestMapping(value = \"/user_info\", method = RequestMethod.GET, produces = \"application/json; charset=utf-8\")\npublic void getUserInfo(@ModelAttribute BasicInfoBean basicInfo, \n\t\tHttpServletResponse response, HttpServletRequest request) throws Exception {\n\t\n\t// 验证uid是否存在\n\tInteger uid = basicInfo.getUid();\n\tif (uid == null) {\n\t\tHttpUtil.returnJson(new JsonResponses(API.CODE.kCodeParamsError, API.MESSAGE.PARAM_FAILED.concat(\":uid为空\")), response);\n\t\treturn;\n\t}\n\t\n\tUsers user = userServicebyUC.getUsersByUid(uid);\n\tfinal Map<String, Object> dataMap = new LinkedHashMap<>();\n\tsetUserModelMap(user, dataMap, basicInfo);\n\t\n\tHttpUtil.returnJson(new JsonResponses(API.CODE.kCodeSuccess, API.MESSAGE.SUCCESS, dataMap), response);\n}\n```\n\n- Junit代码如下\n```java\n@RunWith(SpringJUnit4ClassRunner.class)\n@WebAppConfiguration\n@ContextConfiguration(locations = { \"classpath:spring/*-config.xml\", \"classpath:spring/*-servlet.xml\" })\npublic class BaseController {\n\t\n\tprotected static String uid;\n\t\n\tstatic {\n\t\t// 加载配置文件\n\t\tProperties config = new Properties();\n\t\tInputStream input = null;\n\t\ttry {\n\t\t\tinput = API.class.getClassLoader().getResourceAsStream(\"test/test.properties\");\n\t\t\tReader reader = new InputStreamReader(input, \"UTF-8\");\n\t\t\tconfig.load(reader);\n\n\t\t\tuid = config.getProperty(\"uid\");\n\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tif (null != input) {\n\t\t\t\ttry {\n\t\t\t\t\tinput.close();\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// @Autowired\n\t// private WebApplicationContext wac;\n\t\n}\n\npublic class TestUserController extends BaseController {\n\t\n\tprivate Logger logger = LoggerFactory.getLogger(this.getClass());\n\t\n\t@Autowired\n\tprotected UserController userController;\n\n\tprotected MockMvc mockMvc;\n\n\t@Before\n\tpublic void setup() {\n\t\tmockMvc = MockMvcBuilders.standaloneSetup(userController).build();\n\t}\n\n\t@Test\n\tpublic void testFindPageUsers() throws Exception {\n\t\tlogger.info(\"uid is {}\", uid);\n\t\t\n\t\tResultActions ra = mockMvc.perform(MockMvcRequestBuilders.get(\"/user/user_info\")\n\t\t\t\t.accept(MediaType.APPLICATION_JSON).param(\"test\", \"1\").param(\"uid\", uid));\n\t\tMvcResult mr = ra.andReturn();\n\t\tMockHttpServletResponse resp = mr.getResponse();\n\t\tAssert.assertEquals(resp.getStatus(), 200);\n\t\t\n\t\tJSONObject obj = JSONObject.parseObject(resp.getContentAsString());\n\t\tJSONObject dataObj = obj.getJSONObject(\"data\");\n\t\tAssert.assertEquals(StringUtil.getStr(dataObj.get(\"uid\")), uid);\n\t}\n\n}\n```\n\n## 如何去掉单元测试\n\n- 在执行Maven命令的时候加上`-Dmaven.test.skip=true`即可，比如`clean install -Dmaven.test.skip=true`，这样就会在执行的过程中跳过单元测试 `[INFO] Tests are skipped.`，也可以在profiles的properties中增加`<maven.test.skip>true</maven.test.skip>`，具体如下\n```xml\n<project>\n\t\n\t<profiles>\n\t\t<profile>\n\t\t\t<id>dev</id>\n\t\t\t<activation>\n\t\t\t\t<activeByDefault>true</activeByDefault>\n\t\t\t</activation>\n\t\t\t<properties>\n\t\t\t\t<maven.test.skip>false</maven.test.skip>\n\t\t\t\t<!-- 日志 -->\n\t\t\t\t<log.root.level>DEBUG</log.root.level>\n\t\t\t\t<log.root.name>Service</log.root.name>\n\t\t\t\t<log.special>Console</log.special>\n\t\t\t</properties>\n\t\t</profile>\n\t\t<profile>\n\t\t\t<id>test</id>\n\t\t\t<properties>\n\t\t\t\t<maven.test.skip>true</maven.test.skip>\n\t\t\t\t<!-- 日志 -->\n\t\t\t\t<log.root.level>DEBUG</log.root.level>\n\t\t\t\t<log.root.name>Service</log.root.name>\n\t\t\t\t<log.special>Console</log.special>\n\t\t\t</properties>\n\t\t</profile>\n\t</profiles>\n</project>\n```\n\n## 参考如下\n- [Maven的profiles介绍](https://maven.apache.org/guides/introduction/introduction-to-profiles.html)\n- [MAVEN 属性定义与使用](http://www.tmser.com/post-178.html)\n- [Maven的生命周期和插件](http://www.open-open.com/lib/view/open1452138592011.html)\n- [利用maven中resources插件的copy-resources目标进行资源copy和过滤](http://xigua366.iteye.com/blog/2080668?utm_source=tuicool&utm_medium=referral)","slug":"使用Maven的profile和testResource进行Junit单元测试","published":1,"updated":"2016-08-23T13:43:30.705Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfto0q8b001a18c7fzy90efp","content":"<h2 id=\"Maven的profiles配置使用\"><a href=\"#Maven的profiles配置使用\" class=\"headerlink\" title=\"Maven的profiles配置使用\"></a>Maven的profiles配置使用</h2><p>Maven的profiles可根据不同的环境将POM的配置应用到配置文件中的<code>${}</code>变量中，具体步骤如下：</p>\n<ul>\n<li><p>POM的profiles配置如下</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">profiles</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>dev<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">activation</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">activeByDefault</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">activeByDefault</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">activation</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">&lt;!-- 日志 --&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">log.root.level</span>&gt;</span>DEBUG<span class=\"tag\">&lt;/<span class=\"name\">log.root.level</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">log.root.name</span>&gt;</span>Service<span class=\"tag\">&lt;/<span class=\"name\">log.root.name</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">log.special</span>&gt;</span>Console<span class=\"tag\">&lt;/<span class=\"name\">log.special</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">&lt;!-- 日志 --&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">log.root.level</span>&gt;</span>DEBUG<span class=\"tag\">&lt;/<span class=\"name\">log.root.level</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">log.root.name</span>&gt;</span>Service<span class=\"tag\">&lt;/<span class=\"name\">log.root.name</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">log.special</span>&gt;</span>Console<span class=\"tag\">&lt;/<span class=\"name\">log.special</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">profiles</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>为了在编译的时候就将POM的配置应用到文件中的<code>${}</code>变量中需要加入如下配置，具体会将profiles中的配置应用到<code>src/main/resources</code>目录下含有<code>${}</code>变量，<br>这些变量可以在xml或者properties文件中</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/resources<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>*/*<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>*<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">filtering</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">filtering</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>比如在<code>src/main/resources/log4j.properties</code>中有如下配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">log4j.rootLogger=$&#123;log.root.level&#125;,$&#123;log.root.name&#125;,$&#123;log.special&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#Console</span><br><span class=\"line\">log4j.appender.Console=org.apache.log4j.ConsoleAppender</span><br><span class=\"line\">log4j.appender.Console.layout=org.apache.log4j.PatternLayout</span><br><span class=\"line\">log4j.appender.Console.layout.ConversionPattern=%d&#123;dd\\u65e5 HH:mm:ss,SSS&#125; : %-5p %C&#123;1&#125;.%M() - %m%n</span><br></pre></td></tr></table></figure></p>\n<p>那么编译后在<code>target\\classes\\log4j.properties</code>文件中的内容如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">log4j.rootLogger=DEBUG,Service,Console</span><br><span class=\"line\"></span><br><span class=\"line\">#Console</span><br><span class=\"line\">log4j.appender.Console=org.apache.log4j.ConsoleAppender</span><br><span class=\"line\">log4j.appender.Console.layout=org.apache.log4j.PatternLayout</span><br><span class=\"line\">log4j.appender.Console.layout.ConversionPattern=%d&#123;dd\\u65e5 HH:mm:ss,SSS&#125; : %-5p %C&#123;1&#125;.%M() - %m%n</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"在Junit单元测试中利用profiles配置来区分不同环境\"><a href=\"#在Junit单元测试中利用profiles配置来区分不同环境\" class=\"headerlink\" title=\"在Junit单元测试中利用profiles配置来区分不同环境\"></a>在Junit单元测试中利用profiles配置来区分不同环境</h2><p>在上面的介绍中是通过profiles配置来区分不同环境方便打包发布，这里介绍通过profiles配置区分不同环境进行单元测试，确保系统在发布前不仅能通过本地环境的单元测试，还能够通过线上环境的单元测试。</p>\n<ul>\n<li><p>POM的profiles配置和上面的一样</p>\n</li>\n<li><p>在<code>build</code>节点下新增<code>testResources</code>，确保在本地执行<code>mvn test -Ptest</code> 的时候将profiles配置应用到<code>src/test/resources</code>目录下含有<code>${}</code>变量并执行Junit单元测试</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">testResources</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">testResource</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/test/resources<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>*/*<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>*<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">filtering</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">filtering</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">testResource</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">testResources</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在<code>src/test/resources</code>目录下新建<code>test</code>文件夹，将properties文件移到该目录下，Maven在执行单元测试的时候默认从该目录读取properties文件</p>\n</li>\n<li><p><strong>注意</strong>，在 Eclipse 中右键项目执行<code>Maven-&gt;Update Maven Project</code>后，需要右键项目在<code>Java Build Path</code>节点中选择<code>Source</code>选项卡，<br>选中<code>src/main/resources</code>和<code>src/test/resources</code>下的<code>Excluded</code>选项点击右边的<code>Remove</code>按钮，最后点击下面的<code>Ok</code>按钮，才能将相关资源文件编译到<code>target</code>目录下</p>\n</li>\n</ul>\n<h2 id=\"编写一个Spring-MVC的Controller层Junit单元测试\"><a href=\"#编写一个Spring-MVC的Controller层Junit单元测试\" class=\"headerlink\" title=\"编写一个Spring MVC的Controller层Junit单元测试\"></a>编写一个Spring MVC的Controller层Junit单元测试</h2><ul>\n<li><p>Controller层Junit单元测试与Service层有所不同，需要引入spring-test和spring-mock</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.2.8.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-mock<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.0.8<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Controller层代码如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\"><span class=\"meta\">@ApiOperation</span>(value = <span class=\"string\">\"获取用户信息\"</span>, notes = <span class=\"string\">\"获取用户信息\"</span>, response = JsonResponses.class)</span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/user_info\"</span>, method = RequestMethod.GET, produces = <span class=\"string\">\"application/json; charset=utf-8\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getUserInfo</span><span class=\"params\">(@ModelAttribute BasicInfoBean basicInfo, </span><br><span class=\"line\">\t\tHttpServletResponse response, HttpServletRequest request)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 验证uid是否存在</span></span><br><span class=\"line\">\tInteger uid = basicInfo.getUid();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (uid == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\tHttpUtil.returnJson(<span class=\"keyword\">new</span> JsonResponses(API.CODE.kCodeParamsError, API.MESSAGE.PARAM_FAILED.concat(<span class=\"string\">\":uid为空\"</span>)), response);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tUsers user = userServicebyUC.getUsersByUid(uid);</span><br><span class=\"line\">\t<span class=\"keyword\">final</span> Map&lt;String, Object&gt; dataMap = <span class=\"keyword\">new</span> LinkedHashMap&lt;&gt;();</span><br><span class=\"line\">\tsetUserModelMap(user, dataMap, basicInfo);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tHttpUtil.returnJson(<span class=\"keyword\">new</span> JsonResponses(API.CODE.kCodeSuccess, API.MESSAGE.SUCCESS, dataMap), response);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Junit代码如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class=\"line\"><span class=\"meta\">@WebAppConfiguration</span></span><br><span class=\"line\"><span class=\"meta\">@ContextConfiguration</span>(locations = &#123; <span class=\"string\">\"classpath:spring/*-config.xml\"</span>, <span class=\"string\">\"classpath:spring/*-servlet.xml\"</span> &#125;)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseController</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> String uid;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 加载配置文件</span></span><br><span class=\"line\">\t\tProperties config = <span class=\"keyword\">new</span> Properties();</span><br><span class=\"line\">\t\tInputStream input = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tinput = API.class.getClassLoader().getResourceAsStream(<span class=\"string\">\"test/test.properties\"</span>);</span><br><span class=\"line\">\t\t\tReader reader = <span class=\"keyword\">new</span> InputStreamReader(input, <span class=\"string\">\"UTF-8\"</span>);</span><br><span class=\"line\">\t\t\tconfig.load(reader);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tuid = config.getProperty(<span class=\"string\">\"uid\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != input) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\t\tinput.close();</span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// @Autowired</span></span><br><span class=\"line\">\t<span class=\"comment\">// private WebApplicationContext wac;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestUserController</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseController</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Logger logger = LoggerFactory.getLogger(<span class=\"keyword\">this</span>.getClass());</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Autowired</span></span><br><span class=\"line\">\t<span class=\"keyword\">protected</span> UserController userController;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">protected</span> MockMvc mockMvc;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Before</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setup</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tmockMvc = MockMvcBuilders.standaloneSetup(userController).build();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Test</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testFindPageUsers</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\tlogger.info(<span class=\"string\">\"uid is &#123;&#125;\"</span>, uid);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tResultActions ra = mockMvc.perform(MockMvcRequestBuilders.get(<span class=\"string\">\"/user/user_info\"</span>)</span><br><span class=\"line\">\t\t\t\t.accept(MediaType.APPLICATION_JSON).param(<span class=\"string\">\"test\"</span>, <span class=\"string\">\"1\"</span>).param(<span class=\"string\">\"uid\"</span>, uid));</span><br><span class=\"line\">\t\tMvcResult mr = ra.andReturn();</span><br><span class=\"line\">\t\tMockHttpServletResponse resp = mr.getResponse();</span><br><span class=\"line\">\t\tAssert.assertEquals(resp.getStatus(), <span class=\"number\">200</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tJSONObject obj = JSONObject.parseObject(resp.getContentAsString());</span><br><span class=\"line\">\t\tJSONObject dataObj = obj.getJSONObject(<span class=\"string\">\"data\"</span>);</span><br><span class=\"line\">\t\tAssert.assertEquals(StringUtil.getStr(dataObj.get(<span class=\"string\">\"uid\"</span>)), uid);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"如何去掉单元测试\"><a href=\"#如何去掉单元测试\" class=\"headerlink\" title=\"如何去掉单元测试\"></a>如何去掉单元测试</h2><ul>\n<li>在执行Maven命令的时候加上<code>-Dmaven.test.skip=true</code>即可，比如<code>clean install -Dmaven.test.skip=true</code>，这样就会在执行的过程中跳过单元测试 <code>[INFO] Tests are skipped.</code>，也可以在profiles的properties中增加<code>&lt;maven.test.skip&gt;true&lt;/maven.test.skip&gt;</code>，具体如下<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">profiles</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>dev<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">activation</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">activeByDefault</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">activeByDefault</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">activation</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">maven.test.skip</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">maven.test.skip</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">&lt;!-- 日志 --&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">log.root.level</span>&gt;</span>DEBUG<span class=\"tag\">&lt;/<span class=\"name\">log.root.level</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">log.root.name</span>&gt;</span>Service<span class=\"tag\">&lt;/<span class=\"name\">log.root.name</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">log.special</span>&gt;</span>Console<span class=\"tag\">&lt;/<span class=\"name\">log.special</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">maven.test.skip</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">maven.test.skip</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">&lt;!-- 日志 --&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">log.root.level</span>&gt;</span>DEBUG<span class=\"tag\">&lt;/<span class=\"name\">log.root.level</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">log.root.name</span>&gt;</span>Service<span class=\"tag\">&lt;/<span class=\"name\">log.root.name</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">log.special</span>&gt;</span>Console<span class=\"tag\">&lt;/<span class=\"name\">log.special</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">profiles</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"参考如下\"><a href=\"#参考如下\" class=\"headerlink\" title=\"参考如下\"></a>参考如下</h2><ul>\n<li><a href=\"https://maven.apache.org/guides/introduction/introduction-to-profiles.html\" target=\"_blank\" rel=\"external\">Maven的profiles介绍</a></li>\n<li><a href=\"http://www.tmser.com/post-178.html\" target=\"_blank\" rel=\"external\">MAVEN 属性定义与使用</a></li>\n<li><a href=\"http://www.open-open.com/lib/view/open1452138592011.html\" target=\"_blank\" rel=\"external\">Maven的生命周期和插件</a></li>\n<li><a href=\"http://xigua366.iteye.com/blog/2080668?utm_source=tuicool&amp;utm_medium=referral\" target=\"_blank\" rel=\"external\">利用maven中resources插件的copy-resources目标进行资源copy和过滤</a></li>\n</ul>\n","excerpt":"","more":"<h2 id=\"Maven的profiles配置使用\"><a href=\"#Maven的profiles配置使用\" class=\"headerlink\" title=\"Maven的profiles配置使用\"></a>Maven的profiles配置使用</h2><p>Maven的profiles可根据不同的环境将POM的配置应用到配置文件中的<code>${}</code>变量中，具体步骤如下：</p>\n<ul>\n<li><p>POM的profiles配置如下</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">profiles</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>dev<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">activation</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">activeByDefault</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">activeByDefault</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">activation</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">&lt;!-- 日志 --&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">log.root.level</span>&gt;</span>DEBUG<span class=\"tag\">&lt;/<span class=\"name\">log.root.level</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">log.root.name</span>&gt;</span>Service<span class=\"tag\">&lt;/<span class=\"name\">log.root.name</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">log.special</span>&gt;</span>Console<span class=\"tag\">&lt;/<span class=\"name\">log.special</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">&lt;!-- 日志 --&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">log.root.level</span>&gt;</span>DEBUG<span class=\"tag\">&lt;/<span class=\"name\">log.root.level</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">log.root.name</span>&gt;</span>Service<span class=\"tag\">&lt;/<span class=\"name\">log.root.name</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">log.special</span>&gt;</span>Console<span class=\"tag\">&lt;/<span class=\"name\">log.special</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">profiles</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>为了在编译的时候就将POM的配置应用到文件中的<code>${}</code>变量中需要加入如下配置，具体会将profiles中的配置应用到<code>src/main/resources</code>目录下含有<code>${}</code>变量，<br>这些变量可以在xml或者properties文件中</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/main/resources<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>*/*<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>*<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">filtering</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">filtering</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>比如在<code>src/main/resources/log4j.properties</code>中有如下配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">log4j.rootLogger=$&#123;log.root.level&#125;,$&#123;log.root.name&#125;,$&#123;log.special&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">#Console</span><br><span class=\"line\">log4j.appender.Console=org.apache.log4j.ConsoleAppender</span><br><span class=\"line\">log4j.appender.Console.layout=org.apache.log4j.PatternLayout</span><br><span class=\"line\">log4j.appender.Console.layout.ConversionPattern=%d&#123;dd\\u65e5 HH:mm:ss,SSS&#125; : %-5p %C&#123;1&#125;.%M() - %m%n</span><br></pre></td></tr></table></figure></p>\n<p>那么编译后在<code>target\\classes\\log4j.properties</code>文件中的内容如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">log4j.rootLogger=DEBUG,Service,Console</span><br><span class=\"line\"></span><br><span class=\"line\">#Console</span><br><span class=\"line\">log4j.appender.Console=org.apache.log4j.ConsoleAppender</span><br><span class=\"line\">log4j.appender.Console.layout=org.apache.log4j.PatternLayout</span><br><span class=\"line\">log4j.appender.Console.layout.ConversionPattern=%d&#123;dd\\u65e5 HH:mm:ss,SSS&#125; : %-5p %C&#123;1&#125;.%M() - %m%n</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"在Junit单元测试中利用profiles配置来区分不同环境\"><a href=\"#在Junit单元测试中利用profiles配置来区分不同环境\" class=\"headerlink\" title=\"在Junit单元测试中利用profiles配置来区分不同环境\"></a>在Junit单元测试中利用profiles配置来区分不同环境</h2><p>在上面的介绍中是通过profiles配置来区分不同环境方便打包发布，这里介绍通过profiles配置区分不同环境进行单元测试，确保系统在发布前不仅能通过本地环境的单元测试，还能够通过线上环境的单元测试。</p>\n<ul>\n<li><p>POM的profiles配置和上面的一样</p>\n</li>\n<li><p>在<code>build</code>节点下新增<code>testResources</code>，确保在本地执行<code>mvn test -Ptest</code> 的时候将profiles配置应用到<code>src/test/resources</code>目录下含有<code>${}</code>变量并执行Junit单元测试</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">testResources</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">testResource</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>src/test/resources<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>*/*<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>*<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">filtering</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">filtering</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">testResource</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">testResources</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在<code>src/test/resources</code>目录下新建<code>test</code>文件夹，将properties文件移到该目录下，Maven在执行单元测试的时候默认从该目录读取properties文件</p>\n</li>\n<li><p><strong>注意</strong>，在 Eclipse 中右键项目执行<code>Maven-&gt;Update Maven Project</code>后，需要右键项目在<code>Java Build Path</code>节点中选择<code>Source</code>选项卡，<br>选中<code>src/main/resources</code>和<code>src/test/resources</code>下的<code>Excluded</code>选项点击右边的<code>Remove</code>按钮，最后点击下面的<code>Ok</code>按钮，才能将相关资源文件编译到<code>target</code>目录下</p>\n</li>\n</ul>\n<h2 id=\"编写一个Spring-MVC的Controller层Junit单元测试\"><a href=\"#编写一个Spring-MVC的Controller层Junit单元测试\" class=\"headerlink\" title=\"编写一个Spring MVC的Controller层Junit单元测试\"></a>编写一个Spring MVC的Controller层Junit单元测试</h2><ul>\n<li><p>Controller层Junit单元测试与Service层有所不同，需要引入spring-test和spring-mock</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.2.8.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-mock<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.0.8<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Controller层代码如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\"><span class=\"meta\">@ApiOperation</span>(value = <span class=\"string\">\"获取用户信息\"</span>, notes = <span class=\"string\">\"获取用户信息\"</span>, response = JsonResponses.class)</span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/user_info\"</span>, method = RequestMethod.GET, produces = <span class=\"string\">\"application/json; charset=utf-8\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getUserInfo</span><span class=\"params\">(@ModelAttribute BasicInfoBean basicInfo, </span><br><span class=\"line\">\t\tHttpServletResponse response, HttpServletRequest request)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 验证uid是否存在</span></span><br><span class=\"line\">\tInteger uid = basicInfo.getUid();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (uid == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\tHttpUtil.returnJson(<span class=\"keyword\">new</span> JsonResponses(API.CODE.kCodeParamsError, API.MESSAGE.PARAM_FAILED.concat(<span class=\"string\">\":uid为空\"</span>)), response);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tUsers user = userServicebyUC.getUsersByUid(uid);</span><br><span class=\"line\">\t<span class=\"keyword\">final</span> Map&lt;String, Object&gt; dataMap = <span class=\"keyword\">new</span> LinkedHashMap&lt;&gt;();</span><br><span class=\"line\">\tsetUserModelMap(user, dataMap, basicInfo);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tHttpUtil.returnJson(<span class=\"keyword\">new</span> JsonResponses(API.CODE.kCodeSuccess, API.MESSAGE.SUCCESS, dataMap), response);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Junit代码如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class=\"line\"><span class=\"meta\">@WebAppConfiguration</span></span><br><span class=\"line\"><span class=\"meta\">@ContextConfiguration</span>(locations = &#123; <span class=\"string\">\"classpath:spring/*-config.xml\"</span>, <span class=\"string\">\"classpath:spring/*-servlet.xml\"</span> &#125;)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseController</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> String uid;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 加载配置文件</span></span><br><span class=\"line\">\t\tProperties config = <span class=\"keyword\">new</span> Properties();</span><br><span class=\"line\">\t\tInputStream input = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tinput = API.class.getClassLoader().getResourceAsStream(<span class=\"string\">\"test/test.properties\"</span>);</span><br><span class=\"line\">\t\t\tReader reader = <span class=\"keyword\">new</span> InputStreamReader(input, <span class=\"string\">\"UTF-8\"</span>);</span><br><span class=\"line\">\t\t\tconfig.load(reader);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tuid = config.getProperty(<span class=\"string\">\"uid\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != input) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\t\tinput.close();</span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// @Autowired</span></span><br><span class=\"line\">\t<span class=\"comment\">// private WebApplicationContext wac;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestUserController</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseController</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Logger logger = LoggerFactory.getLogger(<span class=\"keyword\">this</span>.getClass());</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Autowired</span></span><br><span class=\"line\">\t<span class=\"keyword\">protected</span> UserController userController;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">protected</span> MockMvc mockMvc;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Before</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setup</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tmockMvc = MockMvcBuilders.standaloneSetup(userController).build();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Test</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testFindPageUsers</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\tlogger.info(<span class=\"string\">\"uid is &#123;&#125;\"</span>, uid);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tResultActions ra = mockMvc.perform(MockMvcRequestBuilders.get(<span class=\"string\">\"/user/user_info\"</span>)</span><br><span class=\"line\">\t\t\t\t.accept(MediaType.APPLICATION_JSON).param(<span class=\"string\">\"test\"</span>, <span class=\"string\">\"1\"</span>).param(<span class=\"string\">\"uid\"</span>, uid));</span><br><span class=\"line\">\t\tMvcResult mr = ra.andReturn();</span><br><span class=\"line\">\t\tMockHttpServletResponse resp = mr.getResponse();</span><br><span class=\"line\">\t\tAssert.assertEquals(resp.getStatus(), <span class=\"number\">200</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tJSONObject obj = JSONObject.parseObject(resp.getContentAsString());</span><br><span class=\"line\">\t\tJSONObject dataObj = obj.getJSONObject(<span class=\"string\">\"data\"</span>);</span><br><span class=\"line\">\t\tAssert.assertEquals(StringUtil.getStr(dataObj.get(<span class=\"string\">\"uid\"</span>)), uid);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"如何去掉单元测试\"><a href=\"#如何去掉单元测试\" class=\"headerlink\" title=\"如何去掉单元测试\"></a>如何去掉单元测试</h2><ul>\n<li>在执行Maven命令的时候加上<code>-Dmaven.test.skip=true</code>即可，比如<code>clean install -Dmaven.test.skip=true</code>，这样就会在执行的过程中跳过单元测试 <code>[INFO] Tests are skipped.</code>，也可以在profiles的properties中增加<code>&lt;maven.test.skip&gt;true&lt;/maven.test.skip&gt;</code>，具体如下<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">profiles</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>dev<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">activation</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">activeByDefault</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">activeByDefault</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">activation</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">maven.test.skip</span>&gt;</span>false<span class=\"tag\">&lt;/<span class=\"name\">maven.test.skip</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">&lt;!-- 日志 --&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">log.root.level</span>&gt;</span>DEBUG<span class=\"tag\">&lt;/<span class=\"name\">log.root.level</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">log.root.name</span>&gt;</span>Service<span class=\"tag\">&lt;/<span class=\"name\">log.root.name</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">log.special</span>&gt;</span>Console<span class=\"tag\">&lt;/<span class=\"name\">log.special</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">maven.test.skip</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">maven.test.skip</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">&lt;!-- 日志 --&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">log.root.level</span>&gt;</span>DEBUG<span class=\"tag\">&lt;/<span class=\"name\">log.root.level</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">log.root.name</span>&gt;</span>Service<span class=\"tag\">&lt;/<span class=\"name\">log.root.name</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">log.special</span>&gt;</span>Console<span class=\"tag\">&lt;/<span class=\"name\">log.special</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">profiles</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"参考如下\"><a href=\"#参考如下\" class=\"headerlink\" title=\"参考如下\"></a>参考如下</h2><ul>\n<li><a href=\"https://maven.apache.org/guides/introduction/introduction-to-profiles.html\">Maven的profiles介绍</a></li>\n<li><a href=\"http://www.tmser.com/post-178.html\">MAVEN 属性定义与使用</a></li>\n<li><a href=\"http://www.open-open.com/lib/view/open1452138592011.html\">Maven的生命周期和插件</a></li>\n<li><a href=\"http://xigua366.iteye.com/blog/2080668?utm_source=tuicool&amp;utm_medium=referral\">利用maven中resources插件的copy-resources目标进行资源copy和过滤</a></li>\n</ul>\n"},{"title":"写在github上的第一篇博客","title_url":"blog-github-some-thinking","date":"2016-05-31T16:00:00.000Z","description":"关于技术和生活的一些感想","_content":"\n这是我的第一篇写在 github 上的博客，但不会是最后一篇。\n\n在这里，我将分享自己在技术学习上的心得，和一些读书笔记，以及在看过他人技术类博客之后的一些个人感想，总之，在这里将会展现我技术，人生成长的点点滴滴。\n\n- 关于技术，我的分享点将侧重于`Java`，`数据库`，`JavaScript`，`Android`，以及对一些开源技术的学习。\n\n- 关于人生，我将分享个人的技术成长心路，对技术发展的看法，对社会生活百态的感想，对爱情，家庭以及生活的感悟。\n","source":"_posts/写在github上的第一篇博客.md","raw":"---\ntitle: 写在github上的第一篇博客\ntitle_url: blog-github-some-thinking\ndate: 2016-06-01\ntags: 感想\ncategories: 生活\ndescription: 关于技术和生活的一些感想\n---\n\n这是我的第一篇写在 github 上的博客，但不会是最后一篇。\n\n在这里，我将分享自己在技术学习上的心得，和一些读书笔记，以及在看过他人技术类博客之后的一些个人感想，总之，在这里将会展现我技术，人生成长的点点滴滴。\n\n- 关于技术，我的分享点将侧重于`Java`，`数据库`，`JavaScript`，`Android`，以及对一些开源技术的学习。\n\n- 关于人生，我将分享个人的技术成长心路，对技术发展的看法，对社会生活百态的感想，对爱情，家庭以及生活的感悟。\n","slug":"写在github上的第一篇博客","published":1,"updated":"2016-08-23T13:43:30.706Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfto0q8e001d18c78in1mqpj","content":"<p>这是我的第一篇写在 github 上的博客，但不会是最后一篇。</p>\n<p>在这里，我将分享自己在技术学习上的心得，和一些读书笔记，以及在看过他人技术类博客之后的一些个人感想，总之，在这里将会展现我技术，人生成长的点点滴滴。</p>\n<ul>\n<li><p>关于技术，我的分享点将侧重于<code>Java</code>，<code>数据库</code>，<code>JavaScript</code>，<code>Android</code>，以及对一些开源技术的学习。</p>\n</li>\n<li><p>关于人生，我将分享个人的技术成长心路，对技术发展的看法，对社会生活百态的感想，对爱情，家庭以及生活的感悟。</p>\n</li>\n</ul>\n","excerpt":"","more":"<p>这是我的第一篇写在 github 上的博客，但不会是最后一篇。</p>\n<p>在这里，我将分享自己在技术学习上的心得，和一些读书笔记，以及在看过他人技术类博客之后的一些个人感想，总之，在这里将会展现我技术，人生成长的点点滴滴。</p>\n<ul>\n<li><p>关于技术，我的分享点将侧重于<code>Java</code>，<code>数据库</code>，<code>JavaScript</code>，<code>Android</code>，以及对一些开源技术的学习。</p>\n</li>\n<li><p>关于人生，我将分享个人的技术成长心路，对技术发展的看法，对社会生活百态的感想，对爱情，家庭以及生活的感悟。</p>\n</li>\n</ul>\n"},{"title":"关于Java多线程在提升程序性能上的一些实践","title_url":"Java-Thread-Runnable-Executor-Practice","date":"2016-08-29T16:00:00.000Z","description":"关于Java多线程在提升程序性能上的一些实践","_content":"\n## 需要使用多个线程的背景以及约束\n\n- 多个任务并行，不分先后\n\n- 对资源没有争抢\n\n- 需要在所有任务都执行完毕后再返回给调用者\n\n在以上条件下无需过多考虑同步问题，能使用的线程数只取决于机器的性能。\n\n## 使用串行执行的方式带来的性能问题\n\n程序的执行逻辑是从上到下，从左到右。长期的编程习惯使我们想当然的在日常开发中使用串行的开发思维来编写程序，使本来可以通过多线程并行的方式来执行任务，由于习惯还是通过单线程串行的方式。具体如下。\n```java\n// 假设有10个任务，每个任务花费的时间如下\nprivate long[] spendTime = new long[] { 1000, 2000, 3000, 5000, 500, 100, 10, 9000, 1000, 6000 };\n\n/**\n * 在单线程的情况下\n */\n@SuppressWarnings(\"static-access\")\n@Test\npublic void TestWithoutExecuteService() {\n\tlong begin = System.currentTimeMillis();\n\tfor (long l : spendTime) {\n\t\ttry {\n\t\t\tThread.currentThread().sleep(l);\n\t\t} catch (InterruptedException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\tSystem.out.println(\"total spend : \" + (System.currentTimeMillis() - begin));\n}\n```\n\n## 通过 Thread 和 Runnable 来实现\n\n上面通过串行的方式执行任务，所花时间是所有任务执行时间之和。如果通过多个线程并行执行任务，那么在确保所有任务执行完毕，所花时间取决于耗时最长的那个任务。\n通过 Thread 和 Runnable 来实现需要维持一个变量来确保所有的任务都执行完毕了，引入同步变量增加了程序的复杂度，具体实现如下。\n```java\n/**\n * 使用一般的多线程来完成并行任务，也就是 Thread,Runnable\n */\n@Test\npublic void TestWithMultiThread() {\n\tlong begin = System.currentTimeMillis();\n\t// 通过一个同步的Map来确保所有的任务都执行完毕\n\tMap<String, String> result = Collections.synchronizedMap(new HashMap<String, String>());\n\n\tList<Thread> taskList = new ArrayList<Thread>();\n\tfor (long l : spendTime) {\n\t\tThread taskThread = new Thread(new TaskThread2(l, result));\n\t\ttaskList.add(taskThread);\n\t\ttaskThread.start();\n\t}\n\twhile (true) { // 这部分代码可以确保所有的线程都执行完毕了\n\t\tif (result.size() == taskList.size()) {\n\t\t\tbreak;\n\t\t}\n\t}\n\tfor (Iterator<String> it = result.keySet().iterator(); it.hasNext();) {\n\t\tString key = it.next();\n\t\tSystem.out.println(key + result.get(key));\n\t}\n\tSystem.out.println(\"total spend : \" + (System.currentTimeMillis() - begin));\n}\n\n/**\n * 使用Runnable来实现线程\n * \n * @author ck\n *\n */\nprivate class TaskThread2 implements Runnable {\n\n\tprivate long processTime;\n\tprivate Map<String, String> result;\n\n\tpublic TaskThread2(long processTime, Map<String, String> result) {\n\t\tthis.processTime = processTime;\n\t\tthis.result = result;\n\t}\n\n\t@SuppressWarnings(\"static-access\")\n\t@Override\n\tpublic void run() {\n\t\ttry {\n\t\t\tThread.currentThread().sleep(processTime);\n\t\t} catch (InterruptedException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\tresult.put(Thread.currentThread().getName(), \": SUCCESS, spend: \" + processTime);\n\t}\n\n}\n```\n\n## 通过ExecutorService来实现\n\n在传统的方法中需要引入同步的变量来确保所有的任务都执行完毕，增加了程序的复杂程度，因为线程在执行完毕后无法通知调用者是否执行完毕，缺少通知机制。如果通过ExecutorService来实现，那么在提交任务后，只需要调用invokeAll方法，调用者线程将会阻塞，直到所有的任务都执行完毕，调用者线程才能继续向下执行，大大简化了程度复杂度。具体如下。\n```java\n/**\n * 在使用 ExecuteService 的情况下，通过invokeAll确保所有的线程都执行完毕\n */\n@Test\npublic void TestWithExecuteService() {\n\tlong begin = System.currentTimeMillis();\n\n\tExecutorService executorService = Executors.newCachedThreadPool();\n\n\tList<TaskThread> taskList = new ArrayList<TaskThread>();\n\tfor (long l : spendTime) {\n\t\ttaskList.add(new TaskThread(l));\n\t}\n\ttry {\n\t\tList<Future<String>> taskResult = executorService.invokeAll(taskList); // 可以确保所有的线程都执行完成\n\t\tif (taskResult != null) {\n\t\t\tfor (Future<String> future : taskResult) {\n\t\t\t\tSystem.out.println(future.get()); // 获取线程的执行结果\n\t\t\t}\n\t\t}\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t} finally {\n\t\texecutorService.shutdown();\n\t}\n\n\tSystem.out.println(\"total spend : \" + (System.currentTimeMillis() - begin));\n}\n```\n\n## 总结\n\n`java.util.concurrent` 包下面还有很多有意思的类和接口方便多线程的开发，以后还会继续探索，以具体的例子和对比来显示使用和不使用这些类和接口带来的好处。关于Java多线程方面的知识，最近在看一本书，强烈推荐=>《Java并发编程实践》。\n关于本页面涉及到的所有的代码点击[这里](https://github.com/toulezu/play/tree/master/TestThread01)。\n\n","source":"_posts/关于Java多线程在提升程序性能上的一些实践.md","raw":"---\ntitle: 关于Java多线程在提升程序性能上的一些实践\ntitle_url: Java-Thread-Runnable-Executor-Practice\ndate: 2016-08-30\ntags: [Java,Thread,Runnable,Executor]\ncategories: 多线程\ndescription: 关于Java多线程在提升程序性能上的一些实践\n---\n\n## 需要使用多个线程的背景以及约束\n\n- 多个任务并行，不分先后\n\n- 对资源没有争抢\n\n- 需要在所有任务都执行完毕后再返回给调用者\n\n在以上条件下无需过多考虑同步问题，能使用的线程数只取决于机器的性能。\n\n## 使用串行执行的方式带来的性能问题\n\n程序的执行逻辑是从上到下，从左到右。长期的编程习惯使我们想当然的在日常开发中使用串行的开发思维来编写程序，使本来可以通过多线程并行的方式来执行任务，由于习惯还是通过单线程串行的方式。具体如下。\n```java\n// 假设有10个任务，每个任务花费的时间如下\nprivate long[] spendTime = new long[] { 1000, 2000, 3000, 5000, 500, 100, 10, 9000, 1000, 6000 };\n\n/**\n * 在单线程的情况下\n */\n@SuppressWarnings(\"static-access\")\n@Test\npublic void TestWithoutExecuteService() {\n\tlong begin = System.currentTimeMillis();\n\tfor (long l : spendTime) {\n\t\ttry {\n\t\t\tThread.currentThread().sleep(l);\n\t\t} catch (InterruptedException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\tSystem.out.println(\"total spend : \" + (System.currentTimeMillis() - begin));\n}\n```\n\n## 通过 Thread 和 Runnable 来实现\n\n上面通过串行的方式执行任务，所花时间是所有任务执行时间之和。如果通过多个线程并行执行任务，那么在确保所有任务执行完毕，所花时间取决于耗时最长的那个任务。\n通过 Thread 和 Runnable 来实现需要维持一个变量来确保所有的任务都执行完毕了，引入同步变量增加了程序的复杂度，具体实现如下。\n```java\n/**\n * 使用一般的多线程来完成并行任务，也就是 Thread,Runnable\n */\n@Test\npublic void TestWithMultiThread() {\n\tlong begin = System.currentTimeMillis();\n\t// 通过一个同步的Map来确保所有的任务都执行完毕\n\tMap<String, String> result = Collections.synchronizedMap(new HashMap<String, String>());\n\n\tList<Thread> taskList = new ArrayList<Thread>();\n\tfor (long l : spendTime) {\n\t\tThread taskThread = new Thread(new TaskThread2(l, result));\n\t\ttaskList.add(taskThread);\n\t\ttaskThread.start();\n\t}\n\twhile (true) { // 这部分代码可以确保所有的线程都执行完毕了\n\t\tif (result.size() == taskList.size()) {\n\t\t\tbreak;\n\t\t}\n\t}\n\tfor (Iterator<String> it = result.keySet().iterator(); it.hasNext();) {\n\t\tString key = it.next();\n\t\tSystem.out.println(key + result.get(key));\n\t}\n\tSystem.out.println(\"total spend : \" + (System.currentTimeMillis() - begin));\n}\n\n/**\n * 使用Runnable来实现线程\n * \n * @author ck\n *\n */\nprivate class TaskThread2 implements Runnable {\n\n\tprivate long processTime;\n\tprivate Map<String, String> result;\n\n\tpublic TaskThread2(long processTime, Map<String, String> result) {\n\t\tthis.processTime = processTime;\n\t\tthis.result = result;\n\t}\n\n\t@SuppressWarnings(\"static-access\")\n\t@Override\n\tpublic void run() {\n\t\ttry {\n\t\t\tThread.currentThread().sleep(processTime);\n\t\t} catch (InterruptedException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\tresult.put(Thread.currentThread().getName(), \": SUCCESS, spend: \" + processTime);\n\t}\n\n}\n```\n\n## 通过ExecutorService来实现\n\n在传统的方法中需要引入同步的变量来确保所有的任务都执行完毕，增加了程序的复杂程度，因为线程在执行完毕后无法通知调用者是否执行完毕，缺少通知机制。如果通过ExecutorService来实现，那么在提交任务后，只需要调用invokeAll方法，调用者线程将会阻塞，直到所有的任务都执行完毕，调用者线程才能继续向下执行，大大简化了程度复杂度。具体如下。\n```java\n/**\n * 在使用 ExecuteService 的情况下，通过invokeAll确保所有的线程都执行完毕\n */\n@Test\npublic void TestWithExecuteService() {\n\tlong begin = System.currentTimeMillis();\n\n\tExecutorService executorService = Executors.newCachedThreadPool();\n\n\tList<TaskThread> taskList = new ArrayList<TaskThread>();\n\tfor (long l : spendTime) {\n\t\ttaskList.add(new TaskThread(l));\n\t}\n\ttry {\n\t\tList<Future<String>> taskResult = executorService.invokeAll(taskList); // 可以确保所有的线程都执行完成\n\t\tif (taskResult != null) {\n\t\t\tfor (Future<String> future : taskResult) {\n\t\t\t\tSystem.out.println(future.get()); // 获取线程的执行结果\n\t\t\t}\n\t\t}\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t} finally {\n\t\texecutorService.shutdown();\n\t}\n\n\tSystem.out.println(\"total spend : \" + (System.currentTimeMillis() - begin));\n}\n```\n\n## 总结\n\n`java.util.concurrent` 包下面还有很多有意思的类和接口方便多线程的开发，以后还会继续探索，以具体的例子和对比来显示使用和不使用这些类和接口带来的好处。关于Java多线程方面的知识，最近在看一本书，强烈推荐=>《Java并发编程实践》。\n关于本页面涉及到的所有的代码点击[这里](https://github.com/toulezu/play/tree/master/TestThread01)。\n\n","slug":"关于Java多线程在提升程序性能上的一些实践","published":1,"updated":"2016-09-04T04:29:37.309Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfto0q8i001h18c739sufkdm","content":"<h2 id=\"需要使用多个线程的背景以及约束\"><a href=\"#需要使用多个线程的背景以及约束\" class=\"headerlink\" title=\"需要使用多个线程的背景以及约束\"></a>需要使用多个线程的背景以及约束</h2><ul>\n<li><p>多个任务并行，不分先后</p>\n</li>\n<li><p>对资源没有争抢</p>\n</li>\n<li><p>需要在所有任务都执行完毕后再返回给调用者</p>\n</li>\n</ul>\n<p>在以上条件下无需过多考虑同步问题，能使用的线程数只取决于机器的性能。</p>\n<h2 id=\"使用串行执行的方式带来的性能问题\"><a href=\"#使用串行执行的方式带来的性能问题\" class=\"headerlink\" title=\"使用串行执行的方式带来的性能问题\"></a>使用串行执行的方式带来的性能问题</h2><p>程序的执行逻辑是从上到下，从左到右。长期的编程习惯使我们想当然的在日常开发中使用串行的开发思维来编写程序，使本来可以通过多线程并行的方式来执行任务，由于习惯还是通过单线程串行的方式。具体如下。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 假设有10个任务，每个任务花费的时间如下</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">long</span>[] spendTime = <span class=\"keyword\">new</span> <span class=\"keyword\">long</span>[] &#123; <span class=\"number\">1000</span>, <span class=\"number\">2000</span>, <span class=\"number\">3000</span>, <span class=\"number\">5000</span>, <span class=\"number\">500</span>, <span class=\"number\">100</span>, <span class=\"number\">10</span>, <span class=\"number\">9000</span>, <span class=\"number\">1000</span>, <span class=\"number\">6000</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * 在单线程的情况下</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"static-access\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">TestWithoutExecuteService</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">long</span> begin = System.currentTimeMillis();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">long</span> l : spendTime) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tThread.currentThread().sleep(l);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"total spend : \"</span> + (System.currentTimeMillis() - begin));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"通过-Thread-和-Runnable-来实现\"><a href=\"#通过-Thread-和-Runnable-来实现\" class=\"headerlink\" title=\"通过 Thread 和 Runnable 来实现\"></a>通过 Thread 和 Runnable 来实现</h2><p>上面通过串行的方式执行任务，所花时间是所有任务执行时间之和。如果通过多个线程并行执行任务，那么在确保所有任务执行完毕，所花时间取决于耗时最长的那个任务。<br>通过 Thread 和 Runnable 来实现需要维持一个变量来确保所有的任务都执行完毕了，引入同步变量增加了程序的复杂度，具体实现如下。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * 使用一般的多线程来完成并行任务，也就是 Thread,Runnable</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">TestWithMultiThread</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">long</span> begin = System.currentTimeMillis();</span><br><span class=\"line\">\t<span class=\"comment\">// 通过一个同步的Map来确保所有的任务都执行完毕</span></span><br><span class=\"line\">\tMap&lt;String, String&gt; result = Collections.synchronizedMap(<span class=\"keyword\">new</span> HashMap&lt;String, String&gt;());</span><br><span class=\"line\"></span><br><span class=\"line\">\tList&lt;Thread&gt; taskList = <span class=\"keyword\">new</span> ArrayList&lt;Thread&gt;();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">long</span> l : spendTime) &#123;</span><br><span class=\"line\">\t\tThread taskThread = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> TaskThread2(l, result));</span><br><span class=\"line\">\t\ttaskList.add(taskThread);</span><br><span class=\"line\">\t\ttaskThread.start();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123; <span class=\"comment\">// 这部分代码可以确保所有的线程都执行完毕了</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (result.size() == taskList.size()) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (Iterator&lt;String&gt; it = result.keySet().iterator(); it.hasNext();) &#123;</span><br><span class=\"line\">\t\tString key = it.next();</span><br><span class=\"line\">\t\tSystem.out.println(key + result.get(key));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"total spend : \"</span> + (System.currentTimeMillis() - begin));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * 使用Runnable来实现线程</span><br><span class=\"line\"> * </span><br><span class=\"line\"> * <span class=\"doctag\">@author</span> ck</span><br><span class=\"line\"> *</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TaskThread2</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">long</span> processTime;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Map&lt;String, String&gt; result;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TaskThread2</span><span class=\"params\">(<span class=\"keyword\">long</span> processTime, Map&lt;String, String&gt; result)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.processTime = processTime;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.result = result;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"static-access\"</span>)</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tThread.currentThread().sleep(processTime);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tresult.put(Thread.currentThread().getName(), <span class=\"string\">\": SUCCESS, spend: \"</span> + processTime);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"通过ExecutorService来实现\"><a href=\"#通过ExecutorService来实现\" class=\"headerlink\" title=\"通过ExecutorService来实现\"></a>通过ExecutorService来实现</h2><p>在传统的方法中需要引入同步的变量来确保所有的任务都执行完毕，增加了程序的复杂程度，因为线程在执行完毕后无法通知调用者是否执行完毕，缺少通知机制。如果通过ExecutorService来实现，那么在提交任务后，只需要调用invokeAll方法，调用者线程将会阻塞，直到所有的任务都执行完毕，调用者线程才能继续向下执行，大大简化了程度复杂度。具体如下。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * 在使用 ExecuteService 的情况下，通过invokeAll确保所有的线程都执行完毕</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">TestWithExecuteService</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">long</span> begin = System.currentTimeMillis();</span><br><span class=\"line\"></span><br><span class=\"line\">\tExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class=\"line\"></span><br><span class=\"line\">\tList&lt;TaskThread&gt; taskList = <span class=\"keyword\">new</span> ArrayList&lt;TaskThread&gt;();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">long</span> l : spendTime) &#123;</span><br><span class=\"line\">\t\ttaskList.add(<span class=\"keyword\">new</span> TaskThread(l));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\tList&lt;Future&lt;String&gt;&gt; taskResult = executorService.invokeAll(taskList); <span class=\"comment\">// 可以确保所有的线程都执行完成</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (taskResult != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (Future&lt;String&gt; future : taskResult) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(future.get()); <span class=\"comment\">// 获取线程的执行结果</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\te.printStackTrace();</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t\texecutorService.shutdown();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"total spend : \"</span> + (System.currentTimeMillis() - begin));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><code>java.util.concurrent</code> 包下面还有很多有意思的类和接口方便多线程的开发，以后还会继续探索，以具体的例子和对比来显示使用和不使用这些类和接口带来的好处。关于Java多线程方面的知识，最近在看一本书，强烈推荐=&gt;《Java并发编程实践》。<br>关于本页面涉及到的所有的代码点击<a href=\"https://github.com/toulezu/play/tree/master/TestThread01\" target=\"_blank\" rel=\"external\">这里</a>。</p>\n","excerpt":"","more":"<h2 id=\"需要使用多个线程的背景以及约束\"><a href=\"#需要使用多个线程的背景以及约束\" class=\"headerlink\" title=\"需要使用多个线程的背景以及约束\"></a>需要使用多个线程的背景以及约束</h2><ul>\n<li><p>多个任务并行，不分先后</p>\n</li>\n<li><p>对资源没有争抢</p>\n</li>\n<li><p>需要在所有任务都执行完毕后再返回给调用者</p>\n</li>\n</ul>\n<p>在以上条件下无需过多考虑同步问题，能使用的线程数只取决于机器的性能。</p>\n<h2 id=\"使用串行执行的方式带来的性能问题\"><a href=\"#使用串行执行的方式带来的性能问题\" class=\"headerlink\" title=\"使用串行执行的方式带来的性能问题\"></a>使用串行执行的方式带来的性能问题</h2><p>程序的执行逻辑是从上到下，从左到右。长期的编程习惯使我们想当然的在日常开发中使用串行的开发思维来编写程序，使本来可以通过多线程并行的方式来执行任务，由于习惯还是通过单线程串行的方式。具体如下。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 假设有10个任务，每个任务花费的时间如下</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">long</span>[] spendTime = <span class=\"keyword\">new</span> <span class=\"keyword\">long</span>[] &#123; <span class=\"number\">1000</span>, <span class=\"number\">2000</span>, <span class=\"number\">3000</span>, <span class=\"number\">5000</span>, <span class=\"number\">500</span>, <span class=\"number\">100</span>, <span class=\"number\">10</span>, <span class=\"number\">9000</span>, <span class=\"number\">1000</span>, <span class=\"number\">6000</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * 在单线程的情况下</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"static-access\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">TestWithoutExecuteService</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">long</span> begin = System.currentTimeMillis();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">long</span> l : spendTime) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tThread.currentThread().sleep(l);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"total spend : \"</span> + (System.currentTimeMillis() - begin));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"通过-Thread-和-Runnable-来实现\"><a href=\"#通过-Thread-和-Runnable-来实现\" class=\"headerlink\" title=\"通过 Thread 和 Runnable 来实现\"></a>通过 Thread 和 Runnable 来实现</h2><p>上面通过串行的方式执行任务，所花时间是所有任务执行时间之和。如果通过多个线程并行执行任务，那么在确保所有任务执行完毕，所花时间取决于耗时最长的那个任务。<br>通过 Thread 和 Runnable 来实现需要维持一个变量来确保所有的任务都执行完毕了，引入同步变量增加了程序的复杂度，具体实现如下。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * 使用一般的多线程来完成并行任务，也就是 Thread,Runnable</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">TestWithMultiThread</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">long</span> begin = System.currentTimeMillis();</span><br><span class=\"line\">\t<span class=\"comment\">// 通过一个同步的Map来确保所有的任务都执行完毕</span></span><br><span class=\"line\">\tMap&lt;String, String&gt; result = Collections.synchronizedMap(<span class=\"keyword\">new</span> HashMap&lt;String, String&gt;());</span><br><span class=\"line\"></span><br><span class=\"line\">\tList&lt;Thread&gt; taskList = <span class=\"keyword\">new</span> ArrayList&lt;Thread&gt;();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">long</span> l : spendTime) &#123;</span><br><span class=\"line\">\t\tThread taskThread = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> TaskThread2(l, result));</span><br><span class=\"line\">\t\ttaskList.add(taskThread);</span><br><span class=\"line\">\t\ttaskThread.start();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123; <span class=\"comment\">// 这部分代码可以确保所有的线程都执行完毕了</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (result.size() == taskList.size()) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (Iterator&lt;String&gt; it = result.keySet().iterator(); it.hasNext();) &#123;</span><br><span class=\"line\">\t\tString key = it.next();</span><br><span class=\"line\">\t\tSystem.out.println(key + result.get(key));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"total spend : \"</span> + (System.currentTimeMillis() - begin));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * 使用Runnable来实现线程</span><br><span class=\"line\"> * </span><br><span class=\"line\"> * <span class=\"doctag\">@author</span> ck</span><br><span class=\"line\"> *</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TaskThread2</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">long</span> processTime;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Map&lt;String, String&gt; result;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TaskThread2</span><span class=\"params\">(<span class=\"keyword\">long</span> processTime, Map&lt;String, String&gt; result)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.processTime = processTime;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.result = result;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"static-access\"</span>)</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tThread.currentThread().sleep(processTime);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tresult.put(Thread.currentThread().getName(), <span class=\"string\">\": SUCCESS, spend: \"</span> + processTime);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"通过ExecutorService来实现\"><a href=\"#通过ExecutorService来实现\" class=\"headerlink\" title=\"通过ExecutorService来实现\"></a>通过ExecutorService来实现</h2><p>在传统的方法中需要引入同步的变量来确保所有的任务都执行完毕，增加了程序的复杂程度，因为线程在执行完毕后无法通知调用者是否执行完毕，缺少通知机制。如果通过ExecutorService来实现，那么在提交任务后，只需要调用invokeAll方法，调用者线程将会阻塞，直到所有的任务都执行完毕，调用者线程才能继续向下执行，大大简化了程度复杂度。具体如下。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * 在使用 ExecuteService 的情况下，通过invokeAll确保所有的线程都执行完毕</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">TestWithExecuteService</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">long</span> begin = System.currentTimeMillis();</span><br><span class=\"line\"></span><br><span class=\"line\">\tExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class=\"line\"></span><br><span class=\"line\">\tList&lt;TaskThread&gt; taskList = <span class=\"keyword\">new</span> ArrayList&lt;TaskThread&gt;();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">long</span> l : spendTime) &#123;</span><br><span class=\"line\">\t\ttaskList.add(<span class=\"keyword\">new</span> TaskThread(l));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\tList&lt;Future&lt;String&gt;&gt; taskResult = executorService.invokeAll(taskList); <span class=\"comment\">// 可以确保所有的线程都执行完成</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (taskResult != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (Future&lt;String&gt; future : taskResult) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(future.get()); <span class=\"comment\">// 获取线程的执行结果</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\te.printStackTrace();</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t\texecutorService.shutdown();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tSystem.out.println(<span class=\"string\">\"total spend : \"</span> + (System.currentTimeMillis() - begin));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><code>java.util.concurrent</code> 包下面还有很多有意思的类和接口方便多线程的开发，以后还会继续探索，以具体的例子和对比来显示使用和不使用这些类和接口带来的好处。关于Java多线程方面的知识，最近在看一本书，强烈推荐=&gt;《Java并发编程实践》。<br>关于本页面涉及到的所有的代码点击<a href=\"https://github.com/toulezu/play/tree/master/TestThread01\">这里</a>。</p>\n"},{"title":"在 Linux 上监控 Tomcat 是否关闭, 如果关闭自动重启","title_url":"Linux-monitor-Tomcat","date":"2017-05-14T16:00:00.000Z","description":"在 Linux 上监控 Tomcat 是否关闭, 如果关闭自动重启","_content":"\n## 新建cron文件`auto.cron`如下\n\n- 每分钟执行一次监控\n- 每天早上10点清理Tomcat的 catalina.out 文件\n\n```\n# auto restart tomcat\n*/1 * * * * sh /opt/AppData/cron/shell/tomcat_check_and_start.sh\n0 10 * * * cat /dev/null > /opt/AppData/tomcat/logs/catalina.out\n```\n\n## crontab的文件格式\n\n分 | 时 | 日 | 月 | 星期 | 要执行的命令\n---|---|---|---|---|---\n分钟0～59 | 小时0～23（0表示子夜）| 日1～31 | 月1～12 | 星期0～7（0和7表示星期天）| 要运行的命令\n\n## 监控tomcat进程脚本如下\n\n```\n#!/bin/bash\n# 首先找到tomcat根目录， 确保当前脚本在tomcat根目录下\ntomcat_path=/opt/AppData/tomcat-datamonitor\n\n# 找到tomcat的进程id\ntomcat_pid=$(ps -ef|grep $tomcat_path|gawk '$0 !~/grep/ {print $2}' |tr -s '\\n' ' ')\nif [ -z \"$tomcat_pid\" ];then\n  sh $tomcat_path/bin/startup.sh\n  echo tomcat is dead,restart at `date \"+%Y-%m-%d %H:%M:%S\"` >> $tomcat_path/tomcat_auto_restart.log\nfi\n```\n\n## 使定时监控生效\n\n```\ncrontab auto.cron\n```\n\n**注意:执行该命令前先执行下`crontab -l`看看已经存在的定时任务,以避免覆盖已经存在的定时任务**\n\n使用 `crontab -l`可以列出当前用户生效的定时任务\n\n## 参考\n\n- [linux下添加定时任务](http://blog.csdn.net/hi_kevin/article/details/8983746)\n- [crontab 定时任务](http://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/crontab.html)","source":"_posts/在 Linux 上监控 Tomcat 是否关闭, 如果关闭自动重启.md","raw":"---\ntitle: 在 Linux 上监控 Tomcat 是否关闭, 如果关闭自动重启\ntitle_url: Linux-monitor-Tomcat\ndate: 2017-05-15\ntags: [Linux,系统监控,Tomcat]\ncategories: 技术\ndescription: 在 Linux 上监控 Tomcat 是否关闭, 如果关闭自动重启\n---\n\n## 新建cron文件`auto.cron`如下\n\n- 每分钟执行一次监控\n- 每天早上10点清理Tomcat的 catalina.out 文件\n\n```\n# auto restart tomcat\n*/1 * * * * sh /opt/AppData/cron/shell/tomcat_check_and_start.sh\n0 10 * * * cat /dev/null > /opt/AppData/tomcat/logs/catalina.out\n```\n\n## crontab的文件格式\n\n分 | 时 | 日 | 月 | 星期 | 要执行的命令\n---|---|---|---|---|---\n分钟0～59 | 小时0～23（0表示子夜）| 日1～31 | 月1～12 | 星期0～7（0和7表示星期天）| 要运行的命令\n\n## 监控tomcat进程脚本如下\n\n```\n#!/bin/bash\n# 首先找到tomcat根目录， 确保当前脚本在tomcat根目录下\ntomcat_path=/opt/AppData/tomcat-datamonitor\n\n# 找到tomcat的进程id\ntomcat_pid=$(ps -ef|grep $tomcat_path|gawk '$0 !~/grep/ {print $2}' |tr -s '\\n' ' ')\nif [ -z \"$tomcat_pid\" ];then\n  sh $tomcat_path/bin/startup.sh\n  echo tomcat is dead,restart at `date \"+%Y-%m-%d %H:%M:%S\"` >> $tomcat_path/tomcat_auto_restart.log\nfi\n```\n\n## 使定时监控生效\n\n```\ncrontab auto.cron\n```\n\n**注意:执行该命令前先执行下`crontab -l`看看已经存在的定时任务,以避免覆盖已经存在的定时任务**\n\n使用 `crontab -l`可以列出当前用户生效的定时任务\n\n## 参考\n\n- [linux下添加定时任务](http://blog.csdn.net/hi_kevin/article/details/8983746)\n- [crontab 定时任务](http://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/crontab.html)","slug":"在 Linux 上监控 Tomcat 是否关闭, 如果关闭自动重启","published":1,"updated":"2017-06-20T14:11:13.974Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfto0q8l001k18c7dodyglmn","content":"<h2 id=\"新建cron文件auto-cron如下\"><a href=\"#新建cron文件auto-cron如下\" class=\"headerlink\" title=\"新建cron文件auto.cron如下\"></a>新建cron文件<code>auto.cron</code>如下</h2><ul>\n<li>每分钟执行一次监控</li>\n<li>每天早上10点清理Tomcat的 catalina.out 文件</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># auto restart tomcat</span><br><span class=\"line\">*/1 * * * * sh /opt/AppData/cron/shell/tomcat_check_and_start.sh</span><br><span class=\"line\">0 10 * * * cat /dev/null &gt; /opt/AppData/tomcat/logs/catalina.out</span><br></pre></td></tr></table></figure>\n<h2 id=\"crontab的文件格式\"><a href=\"#crontab的文件格式\" class=\"headerlink\" title=\"crontab的文件格式\"></a>crontab的文件格式</h2><table>\n<thead>\n<tr>\n<th>分</th>\n<th>时</th>\n<th>日</th>\n<th>月</th>\n<th>星期</th>\n<th>要执行的命令</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>分钟0～59</td>\n<td>小时0～23（0表示子夜）</td>\n<td>日1～31</td>\n<td>月1～12</td>\n<td>星期0～7（0和7表示星期天）</td>\n<td>要运行的命令</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"监控tomcat进程脚本如下\"><a href=\"#监控tomcat进程脚本如下\" class=\"headerlink\" title=\"监控tomcat进程脚本如下\"></a>监控tomcat进程脚本如下</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"># 首先找到tomcat根目录， 确保当前脚本在tomcat根目录下</span><br><span class=\"line\">tomcat_path=/opt/AppData/tomcat-datamonitor</span><br><span class=\"line\"></span><br><span class=\"line\"># 找到tomcat的进程id</span><br><span class=\"line\">tomcat_pid=$(ps -ef|grep $tomcat_path|gawk &apos;$0 !~/grep/ &#123;print $2&#125;&apos; |tr -s &apos;\\n&apos; &apos; &apos;)</span><br><span class=\"line\">if [ -z &quot;$tomcat_pid&quot; ];then</span><br><span class=\"line\">  sh $tomcat_path/bin/startup.sh</span><br><span class=\"line\">  echo tomcat is dead,restart at `date &quot;+%Y-%m-%d %H:%M:%S&quot;` &gt;&gt; $tomcat_path/tomcat_auto_restart.log</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>\n<h2 id=\"使定时监控生效\"><a href=\"#使定时监控生效\" class=\"headerlink\" title=\"使定时监控生效\"></a>使定时监控生效</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crontab auto.cron</span><br></pre></td></tr></table></figure>\n<p><strong>注意:执行该命令前先执行下<code>crontab -l</code>看看已经存在的定时任务,以避免覆盖已经存在的定时任务</strong></p>\n<p>使用 <code>crontab -l</code>可以列出当前用户生效的定时任务</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"http://blog.csdn.net/hi_kevin/article/details/8983746\" target=\"_blank\" rel=\"external\">linux下添加定时任务</a></li>\n<li><a href=\"http://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/crontab.html\" target=\"_blank\" rel=\"external\">crontab 定时任务</a></li>\n</ul>\n","excerpt":"","more":"<h2 id=\"新建cron文件auto-cron如下\"><a href=\"#新建cron文件auto-cron如下\" class=\"headerlink\" title=\"新建cron文件auto.cron如下\"></a>新建cron文件<code>auto.cron</code>如下</h2><ul>\n<li>每分钟执行一次监控</li>\n<li>每天早上10点清理Tomcat的 catalina.out 文件</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># auto restart tomcat</span><br><span class=\"line\">*/1 * * * * sh /opt/AppData/cron/shell/tomcat_check_and_start.sh</span><br><span class=\"line\">0 10 * * * cat /dev/null &gt; /opt/AppData/tomcat/logs/catalina.out</span><br></pre></td></tr></table></figure>\n<h2 id=\"crontab的文件格式\"><a href=\"#crontab的文件格式\" class=\"headerlink\" title=\"crontab的文件格式\"></a>crontab的文件格式</h2><table>\n<thead>\n<tr>\n<th>分</th>\n<th>时</th>\n<th>日</th>\n<th>月</th>\n<th>星期</th>\n<th>要执行的命令</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>分钟0～59</td>\n<td>小时0～23（0表示子夜）</td>\n<td>日1～31</td>\n<td>月1～12</td>\n<td>星期0～7（0和7表示星期天）</td>\n<td>要运行的命令</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"监控tomcat进程脚本如下\"><a href=\"#监控tomcat进程脚本如下\" class=\"headerlink\" title=\"监控tomcat进程脚本如下\"></a>监控tomcat进程脚本如下</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"># 首先找到tomcat根目录， 确保当前脚本在tomcat根目录下</span><br><span class=\"line\">tomcat_path=/opt/AppData/tomcat-datamonitor</span><br><span class=\"line\"></span><br><span class=\"line\"># 找到tomcat的进程id</span><br><span class=\"line\">tomcat_pid=$(ps -ef|grep $tomcat_path|gawk &apos;$0 !~/grep/ &#123;print $2&#125;&apos; |tr -s &apos;\\n&apos; &apos; &apos;)</span><br><span class=\"line\">if [ -z &quot;$tomcat_pid&quot; ];then</span><br><span class=\"line\">  sh $tomcat_path/bin/startup.sh</span><br><span class=\"line\">  echo tomcat is dead,restart at `date &quot;+%Y-%m-%d %H:%M:%S&quot;` &gt;&gt; $tomcat_path/tomcat_auto_restart.log</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>\n<h2 id=\"使定时监控生效\"><a href=\"#使定时监控生效\" class=\"headerlink\" title=\"使定时监控生效\"></a>使定时监控生效</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crontab auto.cron</span><br></pre></td></tr></table></figure>\n<p><strong>注意:执行该命令前先执行下<code>crontab -l</code>看看已经存在的定时任务,以避免覆盖已经存在的定时任务</strong></p>\n<p>使用 <code>crontab -l</code>可以列出当前用户生效的定时任务</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"http://blog.csdn.net/hi_kevin/article/details/8983746\">linux下添加定时任务</a></li>\n<li><a href=\"http://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/crontab.html\">crontab 定时任务</a></li>\n</ul>\n"},{"title":"在 Phabricator 中控制不同类型的任务表单 status 字段显示不同的选项列表","title_url":"Phabricator-task-subType","date":"2017-08-10T16:00:00.000Z","description":"在 Phabricator 中控制不同类型的任务表单 status 字段显示不同的选项列表","_content":"\n## 需求背景\n\n在使用 Phabricator 过程中,会有不同的任务类型:主任务,开发子任务,测试子任务,Bug, 通过现有的配置,所有的任务表单的 status 字段的选项列表都是一样的.所以需要通过修改代码来实现这一功能.\n\n## 具体实现\n\n在修改过程中具体要注意两点:新建任务和修改任务.\n\n1. 新建任务的地方修改如下\n\n- PhabricatorEditEngine.php 的 buildEditResponse 方法\n\n```php\nprivate function buildEditResponse($object) {\n    $viewer = $this->getViewer();\n    $controller = $this->getController();\n    $request = $controller->getRequest();\n\n    $fields = $this->buildEditFields($object);\n    $template = $object->getApplicationTransactionTemplate();\n\n    if ($this->getIsCreate()) {\n      $cancel_uri = $this->getObjectCreateCancelURI($object);\n      $submit_button = $this->getObjectCreateButtonText($object);\n    } else {\n      $cancel_uri = $this->getEffectiveObjectEditCancelURI($object);\n      $submit_button = $this->getObjectEditButtonText($object);\n    }\n\n    $config = $this->getEditEngineConfiguration()\n      ->attachEngine($this);\n\n    // 新增任务的时候根据form的配置来手动定义status下拉框的值\n    $status_editfield = $fields['status'];\n    if ($object instanceof ManiphestTask &&\n      $status_editfield instanceof PhabricatorSelectEditField) {\n\n      $status_option = array();\n      if ($config->getSubtype() === 'default') {\n        $status_option = array(\n         'open' => 'Open',\n         'test' => 'Test',\n         'closed' => 'Closed',\n        );\n      }\n      if ($config->getSubtype() === 'test') {\n        $status_option = array(\n         'open' => 'Open',\n         'closed' => 'Closed',\n        );\n      }\n      if ($config->getSubtype() === 'dev') {\n        $status_option = array(\n         'open' => 'Open',\n         'closed' => 'Closed',\n        );\n      }\n      if ($config->getSubtype() === 'bug') {\n        $status_option = array(\n         'open' => 'Open',\n         'resolved' => 'Resolved',\n         'wontfix' => 'Wontfix',\n         'invalid' => 'Invalid',\n         'closed' => 'Closed',\n        );\n      }\n\n      $status_editfield->setOptions($status_option);\n    }\n    \n    //...\n}\n```\n\n新建任务的时候,任务对象的 subtype 字段默认为 'default',这时只能根据 PhabricatorEditEngineConfiguration 对象的 subtype 字段来判断新建的任务使用的是那种表单类型.\n\n这里根据 `$status_editfield = $fields['status'];` 来获取 status 下拉框对象,然后重置选项列表.\n\n2. 修改任务的地方修改如下\n\n- PhabricatorSelectEditField.php 的 getOptions 方法\n\n```php\n  public function getOptions() {\n    if ($this->options === null) {\n      throw new PhutilInvalidStateException('setOptions');\n    }\n    // 编辑任务对象,任务对象必须存在,根据不同类型的任务对象来设置不同的 status 选项\n    if ($this->getObject() !== null &&\n        $this->getObject()->getPHID() !== null &&\n        $this->getObject() instanceof ManiphestTask &&\n        $this->getKey() === 'status') {\n      if ($this->getObject()->getEditEngineSubtype() === 'default') {\n        return array(\n         'open' => 'Open',\n         'test' => 'Test',\n         'closed' => 'Closed',\n        );\n      }\n      if ($this->getObject()->getEditEngineSubtype() === 'test') {\n        return array(\n         'open' => 'Open',\n         'closed' => 'Closed',\n        );\n      }\n      if ($this->getObject()->getEditEngineSubtype() === 'dev') {\n        return array(\n         'open' => 'Open',\n         'closed' => 'Closed',\n        );\n      }\n      if ($this->getObject()->getEditEngineSubtype() === 'bug') {\n        return array(\n         'open' => 'Open',\n         'resolved' => 'Resolved',\n         'wontfix' => 'Wontfix',\n         'invalid' => 'Invalid',\n         'closed' => 'Closed',\n        );\n      }\n    }\n\n    return $this->options;\n  }\n```\n\n修改任务的时候已经可以根据任务对象的 getEditEngineSubtype() 字段来区分不同的表单,随后就重置选项列表.","source":"_posts/在 Phabricator 中控制不同类型的任务表单 status 字段显示不同的选项列表.md","raw":"---\ntitle: 在 Phabricator 中控制不同类型的任务表单 status 字段显示不同的选项列表\ntitle_url: Phabricator-task-subType\ndate: 2017-08-11\ntags: Phabricator\ncategories: [Phabricator,PHP]\ndescription: 在 Phabricator 中控制不同类型的任务表单 status 字段显示不同的选项列表\n---\n\n## 需求背景\n\n在使用 Phabricator 过程中,会有不同的任务类型:主任务,开发子任务,测试子任务,Bug, 通过现有的配置,所有的任务表单的 status 字段的选项列表都是一样的.所以需要通过修改代码来实现这一功能.\n\n## 具体实现\n\n在修改过程中具体要注意两点:新建任务和修改任务.\n\n1. 新建任务的地方修改如下\n\n- PhabricatorEditEngine.php 的 buildEditResponse 方法\n\n```php\nprivate function buildEditResponse($object) {\n    $viewer = $this->getViewer();\n    $controller = $this->getController();\n    $request = $controller->getRequest();\n\n    $fields = $this->buildEditFields($object);\n    $template = $object->getApplicationTransactionTemplate();\n\n    if ($this->getIsCreate()) {\n      $cancel_uri = $this->getObjectCreateCancelURI($object);\n      $submit_button = $this->getObjectCreateButtonText($object);\n    } else {\n      $cancel_uri = $this->getEffectiveObjectEditCancelURI($object);\n      $submit_button = $this->getObjectEditButtonText($object);\n    }\n\n    $config = $this->getEditEngineConfiguration()\n      ->attachEngine($this);\n\n    // 新增任务的时候根据form的配置来手动定义status下拉框的值\n    $status_editfield = $fields['status'];\n    if ($object instanceof ManiphestTask &&\n      $status_editfield instanceof PhabricatorSelectEditField) {\n\n      $status_option = array();\n      if ($config->getSubtype() === 'default') {\n        $status_option = array(\n         'open' => 'Open',\n         'test' => 'Test',\n         'closed' => 'Closed',\n        );\n      }\n      if ($config->getSubtype() === 'test') {\n        $status_option = array(\n         'open' => 'Open',\n         'closed' => 'Closed',\n        );\n      }\n      if ($config->getSubtype() === 'dev') {\n        $status_option = array(\n         'open' => 'Open',\n         'closed' => 'Closed',\n        );\n      }\n      if ($config->getSubtype() === 'bug') {\n        $status_option = array(\n         'open' => 'Open',\n         'resolved' => 'Resolved',\n         'wontfix' => 'Wontfix',\n         'invalid' => 'Invalid',\n         'closed' => 'Closed',\n        );\n      }\n\n      $status_editfield->setOptions($status_option);\n    }\n    \n    //...\n}\n```\n\n新建任务的时候,任务对象的 subtype 字段默认为 'default',这时只能根据 PhabricatorEditEngineConfiguration 对象的 subtype 字段来判断新建的任务使用的是那种表单类型.\n\n这里根据 `$status_editfield = $fields['status'];` 来获取 status 下拉框对象,然后重置选项列表.\n\n2. 修改任务的地方修改如下\n\n- PhabricatorSelectEditField.php 的 getOptions 方法\n\n```php\n  public function getOptions() {\n    if ($this->options === null) {\n      throw new PhutilInvalidStateException('setOptions');\n    }\n    // 编辑任务对象,任务对象必须存在,根据不同类型的任务对象来设置不同的 status 选项\n    if ($this->getObject() !== null &&\n        $this->getObject()->getPHID() !== null &&\n        $this->getObject() instanceof ManiphestTask &&\n        $this->getKey() === 'status') {\n      if ($this->getObject()->getEditEngineSubtype() === 'default') {\n        return array(\n         'open' => 'Open',\n         'test' => 'Test',\n         'closed' => 'Closed',\n        );\n      }\n      if ($this->getObject()->getEditEngineSubtype() === 'test') {\n        return array(\n         'open' => 'Open',\n         'closed' => 'Closed',\n        );\n      }\n      if ($this->getObject()->getEditEngineSubtype() === 'dev') {\n        return array(\n         'open' => 'Open',\n         'closed' => 'Closed',\n        );\n      }\n      if ($this->getObject()->getEditEngineSubtype() === 'bug') {\n        return array(\n         'open' => 'Open',\n         'resolved' => 'Resolved',\n         'wontfix' => 'Wontfix',\n         'invalid' => 'Invalid',\n         'closed' => 'Closed',\n        );\n      }\n    }\n\n    return $this->options;\n  }\n```\n\n修改任务的时候已经可以根据任务对象的 getEditEngineSubtype() 字段来区分不同的表单,随后就重置选项列表.","slug":"在 Phabricator 中控制不同类型的任务表单 status 字段显示不同的选项列表","published":1,"updated":"2018-01-01T12:55:41.560Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfto0q8p001o18c7e3r5g958","content":"<h2 id=\"需求背景\"><a href=\"#需求背景\" class=\"headerlink\" title=\"需求背景\"></a>需求背景</h2><p>在使用 Phabricator 过程中,会有不同的任务类型:主任务,开发子任务,测试子任务,Bug, 通过现有的配置,所有的任务表单的 status 字段的选项列表都是一样的.所以需要通过修改代码来实现这一功能.</p>\n<h2 id=\"具体实现\"><a href=\"#具体实现\" class=\"headerlink\" title=\"具体实现\"></a>具体实现</h2><p>在修改过程中具体要注意两点:新建任务和修改任务.</p>\n<ol>\n<li>新建任务的地方修改如下</li>\n</ol>\n<ul>\n<li>PhabricatorEditEngine.php 的 buildEditResponse 方法</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">buildEditResponse</span><span class=\"params\">($object)</span> </span>&#123;</span><br><span class=\"line\">    $viewer = <span class=\"keyword\">$this</span>-&gt;getViewer();</span><br><span class=\"line\">    $controller = <span class=\"keyword\">$this</span>-&gt;getController();</span><br><span class=\"line\">    $request = $controller-&gt;getRequest();</span><br><span class=\"line\"></span><br><span class=\"line\">    $fields = <span class=\"keyword\">$this</span>-&gt;buildEditFields($object);</span><br><span class=\"line\">    $template = $object-&gt;getApplicationTransactionTemplate();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">$this</span>-&gt;getIsCreate()) &#123;</span><br><span class=\"line\">      $cancel_uri = <span class=\"keyword\">$this</span>-&gt;getObjectCreateCancelURI($object);</span><br><span class=\"line\">      $submit_button = <span class=\"keyword\">$this</span>-&gt;getObjectCreateButtonText($object);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      $cancel_uri = <span class=\"keyword\">$this</span>-&gt;getEffectiveObjectEditCancelURI($object);</span><br><span class=\"line\">      $submit_button = <span class=\"keyword\">$this</span>-&gt;getObjectEditButtonText($object);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    $config = <span class=\"keyword\">$this</span>-&gt;getEditEngineConfiguration()</span><br><span class=\"line\">      -&gt;attachEngine(<span class=\"keyword\">$this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 新增任务的时候根据form的配置来手动定义status下拉框的值</span></span><br><span class=\"line\">    $status_editfield = $fields[<span class=\"string\">'status'</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($object <span class=\"keyword\">instanceof</span> ManiphestTask &amp;&amp;</span><br><span class=\"line\">      $status_editfield <span class=\"keyword\">instanceof</span> PhabricatorSelectEditField) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      $status_option = <span class=\"keyword\">array</span>();</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ($config-&gt;getSubtype() === <span class=\"string\">'default'</span>) &#123;</span><br><span class=\"line\">        $status_option = <span class=\"keyword\">array</span>(</span><br><span class=\"line\">         <span class=\"string\">'open'</span> =&gt; <span class=\"string\">'Open'</span>,</span><br><span class=\"line\">         <span class=\"string\">'test'</span> =&gt; <span class=\"string\">'Test'</span>,</span><br><span class=\"line\">         <span class=\"string\">'closed'</span> =&gt; <span class=\"string\">'Closed'</span>,</span><br><span class=\"line\">        );</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ($config-&gt;getSubtype() === <span class=\"string\">'test'</span>) &#123;</span><br><span class=\"line\">        $status_option = <span class=\"keyword\">array</span>(</span><br><span class=\"line\">         <span class=\"string\">'open'</span> =&gt; <span class=\"string\">'Open'</span>,</span><br><span class=\"line\">         <span class=\"string\">'closed'</span> =&gt; <span class=\"string\">'Closed'</span>,</span><br><span class=\"line\">        );</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ($config-&gt;getSubtype() === <span class=\"string\">'dev'</span>) &#123;</span><br><span class=\"line\">        $status_option = <span class=\"keyword\">array</span>(</span><br><span class=\"line\">         <span class=\"string\">'open'</span> =&gt; <span class=\"string\">'Open'</span>,</span><br><span class=\"line\">         <span class=\"string\">'closed'</span> =&gt; <span class=\"string\">'Closed'</span>,</span><br><span class=\"line\">        );</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ($config-&gt;getSubtype() === <span class=\"string\">'bug'</span>) &#123;</span><br><span class=\"line\">        $status_option = <span class=\"keyword\">array</span>(</span><br><span class=\"line\">         <span class=\"string\">'open'</span> =&gt; <span class=\"string\">'Open'</span>,</span><br><span class=\"line\">         <span class=\"string\">'resolved'</span> =&gt; <span class=\"string\">'Resolved'</span>,</span><br><span class=\"line\">         <span class=\"string\">'wontfix'</span> =&gt; <span class=\"string\">'Wontfix'</span>,</span><br><span class=\"line\">         <span class=\"string\">'invalid'</span> =&gt; <span class=\"string\">'Invalid'</span>,</span><br><span class=\"line\">         <span class=\"string\">'closed'</span> =&gt; <span class=\"string\">'Closed'</span>,</span><br><span class=\"line\">        );</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      $status_editfield-&gt;setOptions($status_option);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>新建任务的时候,任务对象的 subtype 字段默认为 ‘default’,这时只能根据 PhabricatorEditEngineConfiguration 对象的 subtype 字段来判断新建的任务使用的是那种表单类型.</p>\n<p>这里根据 <code>$status_editfield = $fields[&#39;status&#39;];</code> 来获取 status 下拉框对象,然后重置选项列表.</p>\n<ol>\n<li>修改任务的地方修改如下</li>\n</ol>\n<ul>\n<li>PhabricatorSelectEditField.php 的 getOptions 方法</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getOptions</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">$this</span>-&gt;options === <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> PhutilInvalidStateException(<span class=\"string\">'setOptions'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 编辑任务对象,任务对象必须存在,根据不同类型的任务对象来设置不同的 status 选项</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">$this</span>-&gt;getObject() !== <span class=\"keyword\">null</span> &amp;&amp;</span><br><span class=\"line\">      <span class=\"keyword\">$this</span>-&gt;getObject()-&gt;getPHID() !== <span class=\"keyword\">null</span> &amp;&amp;</span><br><span class=\"line\">      <span class=\"keyword\">$this</span>-&gt;getObject() <span class=\"keyword\">instanceof</span> ManiphestTask &amp;&amp;</span><br><span class=\"line\">      <span class=\"keyword\">$this</span>-&gt;getKey() === <span class=\"string\">'status'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">$this</span>-&gt;getObject()-&gt;getEditEngineSubtype() === <span class=\"string\">'default'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">array</span>(</span><br><span class=\"line\">       <span class=\"string\">'open'</span> =&gt; <span class=\"string\">'Open'</span>,</span><br><span class=\"line\">       <span class=\"string\">'test'</span> =&gt; <span class=\"string\">'Test'</span>,</span><br><span class=\"line\">       <span class=\"string\">'closed'</span> =&gt; <span class=\"string\">'Closed'</span>,</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">$this</span>-&gt;getObject()-&gt;getEditEngineSubtype() === <span class=\"string\">'test'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">array</span>(</span><br><span class=\"line\">       <span class=\"string\">'open'</span> =&gt; <span class=\"string\">'Open'</span>,</span><br><span class=\"line\">       <span class=\"string\">'closed'</span> =&gt; <span class=\"string\">'Closed'</span>,</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">$this</span>-&gt;getObject()-&gt;getEditEngineSubtype() === <span class=\"string\">'dev'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">array</span>(</span><br><span class=\"line\">       <span class=\"string\">'open'</span> =&gt; <span class=\"string\">'Open'</span>,</span><br><span class=\"line\">       <span class=\"string\">'closed'</span> =&gt; <span class=\"string\">'Closed'</span>,</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">$this</span>-&gt;getObject()-&gt;getEditEngineSubtype() === <span class=\"string\">'bug'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">array</span>(</span><br><span class=\"line\">       <span class=\"string\">'open'</span> =&gt; <span class=\"string\">'Open'</span>,</span><br><span class=\"line\">       <span class=\"string\">'resolved'</span> =&gt; <span class=\"string\">'Resolved'</span>,</span><br><span class=\"line\">       <span class=\"string\">'wontfix'</span> =&gt; <span class=\"string\">'Wontfix'</span>,</span><br><span class=\"line\">       <span class=\"string\">'invalid'</span> =&gt; <span class=\"string\">'Invalid'</span>,</span><br><span class=\"line\">       <span class=\"string\">'closed'</span> =&gt; <span class=\"string\">'Closed'</span>,</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;options;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>修改任务的时候已经可以根据任务对象的 getEditEngineSubtype() 字段来区分不同的表单,随后就重置选项列表.</p>\n","excerpt":"","more":"<h2 id=\"需求背景\"><a href=\"#需求背景\" class=\"headerlink\" title=\"需求背景\"></a>需求背景</h2><p>在使用 Phabricator 过程中,会有不同的任务类型:主任务,开发子任务,测试子任务,Bug, 通过现有的配置,所有的任务表单的 status 字段的选项列表都是一样的.所以需要通过修改代码来实现这一功能.</p>\n<h2 id=\"具体实现\"><a href=\"#具体实现\" class=\"headerlink\" title=\"具体实现\"></a>具体实现</h2><p>在修改过程中具体要注意两点:新建任务和修改任务.</p>\n<ol>\n<li>新建任务的地方修改如下</li>\n</ol>\n<ul>\n<li>PhabricatorEditEngine.php 的 buildEditResponse 方法</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">buildEditResponse</span><span class=\"params\">($object)</span> </span>&#123;</span><br><span class=\"line\">    $viewer = <span class=\"keyword\">$this</span>-&gt;getViewer();</span><br><span class=\"line\">    $controller = <span class=\"keyword\">$this</span>-&gt;getController();</span><br><span class=\"line\">    $request = $controller-&gt;getRequest();</span><br><span class=\"line\"></span><br><span class=\"line\">    $fields = <span class=\"keyword\">$this</span>-&gt;buildEditFields($object);</span><br><span class=\"line\">    $template = $object-&gt;getApplicationTransactionTemplate();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">$this</span>-&gt;getIsCreate()) &#123;</span><br><span class=\"line\">      $cancel_uri = <span class=\"keyword\">$this</span>-&gt;getObjectCreateCancelURI($object);</span><br><span class=\"line\">      $submit_button = <span class=\"keyword\">$this</span>-&gt;getObjectCreateButtonText($object);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      $cancel_uri = <span class=\"keyword\">$this</span>-&gt;getEffectiveObjectEditCancelURI($object);</span><br><span class=\"line\">      $submit_button = <span class=\"keyword\">$this</span>-&gt;getObjectEditButtonText($object);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    $config = <span class=\"keyword\">$this</span>-&gt;getEditEngineConfiguration()</span><br><span class=\"line\">      -&gt;attachEngine(<span class=\"keyword\">$this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 新增任务的时候根据form的配置来手动定义status下拉框的值</span></span><br><span class=\"line\">    $status_editfield = $fields[<span class=\"string\">'status'</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($object <span class=\"keyword\">instanceof</span> ManiphestTask &amp;&amp;</span><br><span class=\"line\">      $status_editfield <span class=\"keyword\">instanceof</span> PhabricatorSelectEditField) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      $status_option = <span class=\"keyword\">array</span>();</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ($config-&gt;getSubtype() === <span class=\"string\">'default'</span>) &#123;</span><br><span class=\"line\">        $status_option = <span class=\"keyword\">array</span>(</span><br><span class=\"line\">         <span class=\"string\">'open'</span> =&gt; <span class=\"string\">'Open'</span>,</span><br><span class=\"line\">         <span class=\"string\">'test'</span> =&gt; <span class=\"string\">'Test'</span>,</span><br><span class=\"line\">         <span class=\"string\">'closed'</span> =&gt; <span class=\"string\">'Closed'</span>,</span><br><span class=\"line\">        );</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ($config-&gt;getSubtype() === <span class=\"string\">'test'</span>) &#123;</span><br><span class=\"line\">        $status_option = <span class=\"keyword\">array</span>(</span><br><span class=\"line\">         <span class=\"string\">'open'</span> =&gt; <span class=\"string\">'Open'</span>,</span><br><span class=\"line\">         <span class=\"string\">'closed'</span> =&gt; <span class=\"string\">'Closed'</span>,</span><br><span class=\"line\">        );</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ($config-&gt;getSubtype() === <span class=\"string\">'dev'</span>) &#123;</span><br><span class=\"line\">        $status_option = <span class=\"keyword\">array</span>(</span><br><span class=\"line\">         <span class=\"string\">'open'</span> =&gt; <span class=\"string\">'Open'</span>,</span><br><span class=\"line\">         <span class=\"string\">'closed'</span> =&gt; <span class=\"string\">'Closed'</span>,</span><br><span class=\"line\">        );</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ($config-&gt;getSubtype() === <span class=\"string\">'bug'</span>) &#123;</span><br><span class=\"line\">        $status_option = <span class=\"keyword\">array</span>(</span><br><span class=\"line\">         <span class=\"string\">'open'</span> =&gt; <span class=\"string\">'Open'</span>,</span><br><span class=\"line\">         <span class=\"string\">'resolved'</span> =&gt; <span class=\"string\">'Resolved'</span>,</span><br><span class=\"line\">         <span class=\"string\">'wontfix'</span> =&gt; <span class=\"string\">'Wontfix'</span>,</span><br><span class=\"line\">         <span class=\"string\">'invalid'</span> =&gt; <span class=\"string\">'Invalid'</span>,</span><br><span class=\"line\">         <span class=\"string\">'closed'</span> =&gt; <span class=\"string\">'Closed'</span>,</span><br><span class=\"line\">        );</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      $status_editfield-&gt;setOptions($status_option);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>新建任务的时候,任务对象的 subtype 字段默认为 ‘default’,这时只能根据 PhabricatorEditEngineConfiguration 对象的 subtype 字段来判断新建的任务使用的是那种表单类型.</p>\n<p>这里根据 <code>$status_editfield = $fields[&#39;status&#39;];</code> 来获取 status 下拉框对象,然后重置选项列表.</p>\n<ol>\n<li>修改任务的地方修改如下</li>\n</ol>\n<ul>\n<li>PhabricatorSelectEditField.php 的 getOptions 方法</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getOptions</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">$this</span>-&gt;options === <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> PhutilInvalidStateException(<span class=\"string\">'setOptions'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 编辑任务对象,任务对象必须存在,根据不同类型的任务对象来设置不同的 status 选项</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">$this</span>-&gt;getObject() !== <span class=\"keyword\">null</span> &amp;&amp;</span><br><span class=\"line\">      <span class=\"keyword\">$this</span>-&gt;getObject()-&gt;getPHID() !== <span class=\"keyword\">null</span> &amp;&amp;</span><br><span class=\"line\">      <span class=\"keyword\">$this</span>-&gt;getObject() <span class=\"keyword\">instanceof</span> ManiphestTask &amp;&amp;</span><br><span class=\"line\">      <span class=\"keyword\">$this</span>-&gt;getKey() === <span class=\"string\">'status'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">$this</span>-&gt;getObject()-&gt;getEditEngineSubtype() === <span class=\"string\">'default'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">array</span>(</span><br><span class=\"line\">       <span class=\"string\">'open'</span> =&gt; <span class=\"string\">'Open'</span>,</span><br><span class=\"line\">       <span class=\"string\">'test'</span> =&gt; <span class=\"string\">'Test'</span>,</span><br><span class=\"line\">       <span class=\"string\">'closed'</span> =&gt; <span class=\"string\">'Closed'</span>,</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">$this</span>-&gt;getObject()-&gt;getEditEngineSubtype() === <span class=\"string\">'test'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">array</span>(</span><br><span class=\"line\">       <span class=\"string\">'open'</span> =&gt; <span class=\"string\">'Open'</span>,</span><br><span class=\"line\">       <span class=\"string\">'closed'</span> =&gt; <span class=\"string\">'Closed'</span>,</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">$this</span>-&gt;getObject()-&gt;getEditEngineSubtype() === <span class=\"string\">'dev'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">array</span>(</span><br><span class=\"line\">       <span class=\"string\">'open'</span> =&gt; <span class=\"string\">'Open'</span>,</span><br><span class=\"line\">       <span class=\"string\">'closed'</span> =&gt; <span class=\"string\">'Closed'</span>,</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">$this</span>-&gt;getObject()-&gt;getEditEngineSubtype() === <span class=\"string\">'bug'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">array</span>(</span><br><span class=\"line\">       <span class=\"string\">'open'</span> =&gt; <span class=\"string\">'Open'</span>,</span><br><span class=\"line\">       <span class=\"string\">'resolved'</span> =&gt; <span class=\"string\">'Resolved'</span>,</span><br><span class=\"line\">       <span class=\"string\">'wontfix'</span> =&gt; <span class=\"string\">'Wontfix'</span>,</span><br><span class=\"line\">       <span class=\"string\">'invalid'</span> =&gt; <span class=\"string\">'Invalid'</span>,</span><br><span class=\"line\">       <span class=\"string\">'closed'</span> =&gt; <span class=\"string\">'Closed'</span>,</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;options;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>修改任务的时候已经可以根据任务对象的 getEditEngineSubtype() 字段来区分不同的表单,随后就重置选项列表.</p>\n"},{"title":"在 Phabricator 任务详情页右边增加创建子任务的快捷链接","title_url":"Phabricator-subtask","date":"2017-07-31T16:00:00.000Z","description":"在 Phabricator 任务详情页右边增加创建子任务的快捷链接","_content":"\n## 需求背景\n\n在使用 Phabricator 过程中需要创建不同的任务,又要确保这些任务之间有关联.比如在项目创建了一个主任务后,相关的测试任务和开发任务需要挂在该主任务下,默认情况下 Phabricator 只能在某个任务下创建子任务,不能创建不同的子任务,具体如下\n\n![subtask](http://7xt8a6.com1.z0.glb.clouddn.com/subtask-1.PNG)\n\n这个时候就需要创建不同的任务form(测试任务form和开发任务form),并将这些form的快捷链接放到任务详情页右边,同时将这些form设置为只能编辑,具体如下\n\n![subtask](http://7xt8a6.com1.z0.glb.clouddn.com/subtask-2.PNG)\n\n![subtask](http://7xt8a6.com1.z0.glb.clouddn.com/subtask-3.PNG)\n\n限制 `TestTask` 和 `DevTask` 只能 Edit 不能 Create\n\n![subtask](http://7xt8a6.com1.z0.glb.clouddn.com/subtask-4.PNG)\n\n## 代码变更\n\n根据需求,这里只需要将原来的 `Create Subtask` 链接修改成 `Create TestTask` 和 `Create DevTask` 即可.相关的代码在 `phabricator\\src\\applications\\maniphest\\controller\\ManiphestTaskDetailController.php` 的 buildCurtain 方法中\n\n具体如下\n\n```php\n  private function buildCurtain(\n    ManiphestTask $task,\n    PhabricatorEditEngine $edit_engine) {\n    $viewer = $this->getViewer();\n\n    $id = $task->getID();\n    $phid = $task->getPHID();\n\n    $can_edit = PhabricatorPolicyFilter::hasCapability(\n      $viewer,\n      $task,\n      PhabricatorPolicyCapability::CAN_EDIT);\n\n    $can_interact = PhabricatorPolicyFilter::canInteract($viewer, $task);\n\n    // We expect a policy dialog if you can't edit the task, and expect a\n    // lock override dialog if you can't interact with it.\n    $workflow_edit = (!$can_edit || !$can_interact);\n\n    $curtain = $this->newCurtainView($task);\n\n    $curtain->addAction(\n      id(new PhabricatorActionView())\n        ->setName(pht('Edit Task'))\n        ->setIcon('fa-pencil')\n        ->setHref($this->getApplicationURI(\"/task/edit/{$id}/\"))\n        ->setDisabled(!$can_edit)\n        ->setWorkflow($workflow_edit));\n\n    $edit_config = $edit_engine->loadDefaultEditConfiguration($task);\n    $can_create = (bool)$edit_config;\n\n    $can_reassign = $edit_engine->hasEditAccessToTransaction(\n      ManiphestTaskOwnerTransaction::TRANSACTIONTYPE);\n\n    if ($can_create) {\n      $form_key = $edit_config->getIdentifier();\n      $edit_uri = id(new PhutilURI(\"/task/edit/form/{$form_key}/\"))\n        ->setQueryParam('parent', $id)\n        ->setQueryParam('template', $id)\n        ->setQueryParam('status', ManiphestTaskStatus::getDefaultStatus());\n      $edit_uri = $this->getApplicationURI($edit_uri);\n\n      // 这里将创建子任务修改成 Create TestTask\n      $testtask_edit_uri = id(new PhutilURI(\"/task/edit/form/6/\"))\n       ->setQueryParam('parent', $id)\n       ->setQueryParam('template', $id)\n       ->setQueryParam('subtype', 'test')\n       ->setQueryParam('status', ManiphestTaskStatus::getDefaultStatus());\n      $testtask_edit_uri = $this->getApplicationURI($testtask_edit_uri);\n\n      // 和 Create DevTask\n      $devtask_edit_uri = id(new PhutilURI(\"/task/edit/form/1/\"))\n       ->setQueryParam('parent', $id)\n       ->setQueryParam('template', $id)\n       ->setQueryParam('subtype', 'dev')\n       ->setQueryParam('status', ManiphestTaskStatus::getDefaultStatus());\n      $devtask_edit_uri = $this->getApplicationURI($devtask_edit_uri);\n\n    } else {\n      // TODO: This will usually give us a somewhat-reasonable error page, but\n      // could be a bit cleaner.\n      $edit_uri = \"/task/edit/{$id}/\";\n      $edit_uri = $this->getApplicationURI($edit_uri);\n\n      $testtask_edit_uri = \"/task/edit/6/\";\n      $testtask_edit_uri = $this->getApplicationURI($testtask_edit_uri);\n\n      $devtask_edit_uri = \"/task/edit/1/\";\n      $devtask_edit_uri = $this->getApplicationURI($devtask_edit_uri);\n    }\n\n    $subtask_item = id(new PhabricatorActionView())\n      ->setName(pht('Create Subtask'))\n      ->setHref($edit_uri)\n      ->setIcon('fa-level-down')\n      ->setDisabled(!$can_create)\n      ->setWorkflow(!$can_create);\n\n    // 测试子任务\n    $testtask_item = id(new PhabricatorActionView())\n     ->setName(pht('Create TestTask'))\n     ->setHref($testtask_edit_uri)\n     ->setIcon('fa-level-down')\n     ->setDisabled(!$can_create)\n     ->setWorkflow(!$can_create);\n\n    // 开发子任务\n    $devtask_item = id(new PhabricatorActionView())\n     ->setName(pht('Create DevTask'))\n     ->setHref($devtask_edit_uri)\n     ->setIcon('fa-level-down')\n     ->setDisabled(!$can_create)\n     ->setWorkflow(!$can_create);\n\n    $relationship_list = PhabricatorObjectRelationshipList::newForObject(\n      $viewer,\n      $task);\n\n    $submenu_actions = array(\n      //$subtask_item,\n      $testtask_item,\n      $devtask_item,\n      ManiphestTaskHasParentRelationship::RELATIONSHIPKEY,\n      ManiphestTaskHasSubtaskRelationship::RELATIONSHIPKEY,\n      ManiphestTaskMergeInRelationship::RELATIONSHIPKEY,\n      ManiphestTaskCloseAsDuplicateRelationship::RELATIONSHIPKEY,\n    );\n\n    $task_submenu = $relationship_list->newActionSubmenu($submenu_actions)\n      ->setName(pht('Edit Related Tasks...'))\n      ->setIcon('fa-anchor');\n\n    $curtain->addAction($task_submenu);\n\n    $relationship_submenu = $relationship_list->newActionMenu();\n    if ($relationship_submenu) {\n      $curtain->addAction($relationship_submenu);\n    }\n\n    $owner_phid = $task->getOwnerPHID();\n    $author_phid = $task->getAuthorPHID();\n    $handles = $viewer->loadHandles(array($owner_phid, $author_phid));\n\n    if ($owner_phid) {\n      $image_uri = $handles[$owner_phid]->getImageURI();\n      $image_href = $handles[$owner_phid]->getURI();\n      $owner = $viewer->renderHandle($owner_phid)->render();\n      $content = phutil_tag('strong', array(), $owner);\n      $assigned_to = id(new PHUIHeadThingView())\n        ->setImage($image_uri)\n        ->setImageHref($image_href)\n        ->setContent($content);\n    } else {\n      $assigned_to = phutil_tag('em', array(), pht('None'));\n    }\n\n    $curtain->newPanel()\n      ->setHeaderText(pht('Assigned To'))\n      ->appendChild($assigned_to);\n\n    $author_uri = $handles[$author_phid]->getImageURI();\n    $author_href = $handles[$author_phid]->getURI();\n    $author = $viewer->renderHandle($author_phid)->render();\n    $content = phutil_tag('strong', array(), $author);\n    $date = phabricator_date($task->getDateCreated(), $viewer);\n    $content = pht('%s, %s', $content, $date);\n    $authored_by = id(new PHUIHeadThingView())\n      ->setImage($author_uri)\n      ->setImageHref($author_href)\n      ->setContent($content);\n\n    $curtain->newPanel()\n      ->setHeaderText(pht('Authored By'))\n      ->appendChild($authored_by);\n\n    return $curtain;\n  }\n```\n\n其中的 \"/task/edit/form/6/\" 和 \"/task/edit/form/1/\" 链接中的数字 6 和 1 对应自定义form的编号\n\n```php\n// 这里将创建子任务修改成 Create TestTask\n$testtask_edit_uri = id(new PhutilURI(\"/task/edit/form/6/\"))\n->setQueryParam('parent', $id)\n->setQueryParam('template', $id)\n->setQueryParam('subtype', 'test')\n->setQueryParam('status', ManiphestTaskStatus::getDefaultStatus());\n$testtask_edit_uri = $this->getApplicationURI($testtask_edit_uri);\n\n// 和 Create DevTask\n$devtask_edit_uri = id(new PhutilURI(\"/task/edit/form/1/\"))\n->setQueryParam('parent', $id)\n->setQueryParam('template', $id)\n->setQueryParam('subtype', 'dev')\n->setQueryParam('status', ManiphestTaskStatus::getDefaultStatus());\n$devtask_edit_uri = $this->getApplicationURI($devtask_edit_uri);\n```\n\n具体的替换 `Create Subtask` 链接的代码如下\n\n```php\n$subtask_item = id(new PhabricatorActionView())\n  ->setName(pht('Create Subtask'))\n  ->setHref($edit_uri)\n  ->setIcon('fa-level-down')\n  ->setDisabled(!$can_create)\n  ->setWorkflow(!$can_create);\n\n// 测试子任务\n$testtask_item = id(new PhabricatorActionView())\n ->setName(pht('Create TestTask'))\n ->setHref($testtask_edit_uri)\n ->setIcon('fa-level-down')\n ->setDisabled(!$can_create)\n ->setWorkflow(!$can_create);\n\n// 开发子任务\n$devtask_item = id(new PhabricatorActionView())\n ->setName(pht('Create DevTask'))\n ->setHref($devtask_edit_uri)\n ->setIcon('fa-level-down')\n ->setDisabled(!$can_create)\n ->setWorkflow(!$can_create);\n\n$relationship_list = PhabricatorObjectRelationshipList::newForObject(\n  $viewer,\n  $task);\n\n$submenu_actions = array(\n  //$subtask_item,\n  $testtask_item,\n  $devtask_item,\n  ManiphestTaskHasParentRelationship::RELATIONSHIPKEY,\n  ManiphestTaskHasSubtaskRelationship::RELATIONSHIPKEY,\n  ManiphestTaskMergeInRelationship::RELATIONSHIPKEY,\n  ManiphestTaskCloseAsDuplicateRelationship::RELATIONSHIPKEY,\n);\n```\n\n## 具体提交\n\n[提交](https://github.com/toulezu/phabricator/pull/3)\n\n## 总结\n\n通过实现这个需求,可以了解到如下 Phabricator 技术细节\n\n- `PHUICurtainView` 对象用来构建右边的操作菜单.\n- 通过 subType 字段来区分不同的 Task 对象\n- Task 对象之间的依赖关系","source":"_posts/在 Phabricator 任务详情页右边增加创建子任务的快捷链接.md","raw":"---\ntitle: 在 Phabricator 任务详情页右边增加创建子任务的快捷链接\ntitle_url: Phabricator-subtask\ndate: 2017-08-01\ntags: Phabricator\ncategories: [Phabricator,PHP]\ndescription: 在 Phabricator 任务详情页右边增加创建子任务的快捷链接\n---\n\n## 需求背景\n\n在使用 Phabricator 过程中需要创建不同的任务,又要确保这些任务之间有关联.比如在项目创建了一个主任务后,相关的测试任务和开发任务需要挂在该主任务下,默认情况下 Phabricator 只能在某个任务下创建子任务,不能创建不同的子任务,具体如下\n\n![subtask](http://7xt8a6.com1.z0.glb.clouddn.com/subtask-1.PNG)\n\n这个时候就需要创建不同的任务form(测试任务form和开发任务form),并将这些form的快捷链接放到任务详情页右边,同时将这些form设置为只能编辑,具体如下\n\n![subtask](http://7xt8a6.com1.z0.glb.clouddn.com/subtask-2.PNG)\n\n![subtask](http://7xt8a6.com1.z0.glb.clouddn.com/subtask-3.PNG)\n\n限制 `TestTask` 和 `DevTask` 只能 Edit 不能 Create\n\n![subtask](http://7xt8a6.com1.z0.glb.clouddn.com/subtask-4.PNG)\n\n## 代码变更\n\n根据需求,这里只需要将原来的 `Create Subtask` 链接修改成 `Create TestTask` 和 `Create DevTask` 即可.相关的代码在 `phabricator\\src\\applications\\maniphest\\controller\\ManiphestTaskDetailController.php` 的 buildCurtain 方法中\n\n具体如下\n\n```php\n  private function buildCurtain(\n    ManiphestTask $task,\n    PhabricatorEditEngine $edit_engine) {\n    $viewer = $this->getViewer();\n\n    $id = $task->getID();\n    $phid = $task->getPHID();\n\n    $can_edit = PhabricatorPolicyFilter::hasCapability(\n      $viewer,\n      $task,\n      PhabricatorPolicyCapability::CAN_EDIT);\n\n    $can_interact = PhabricatorPolicyFilter::canInteract($viewer, $task);\n\n    // We expect a policy dialog if you can't edit the task, and expect a\n    // lock override dialog if you can't interact with it.\n    $workflow_edit = (!$can_edit || !$can_interact);\n\n    $curtain = $this->newCurtainView($task);\n\n    $curtain->addAction(\n      id(new PhabricatorActionView())\n        ->setName(pht('Edit Task'))\n        ->setIcon('fa-pencil')\n        ->setHref($this->getApplicationURI(\"/task/edit/{$id}/\"))\n        ->setDisabled(!$can_edit)\n        ->setWorkflow($workflow_edit));\n\n    $edit_config = $edit_engine->loadDefaultEditConfiguration($task);\n    $can_create = (bool)$edit_config;\n\n    $can_reassign = $edit_engine->hasEditAccessToTransaction(\n      ManiphestTaskOwnerTransaction::TRANSACTIONTYPE);\n\n    if ($can_create) {\n      $form_key = $edit_config->getIdentifier();\n      $edit_uri = id(new PhutilURI(\"/task/edit/form/{$form_key}/\"))\n        ->setQueryParam('parent', $id)\n        ->setQueryParam('template', $id)\n        ->setQueryParam('status', ManiphestTaskStatus::getDefaultStatus());\n      $edit_uri = $this->getApplicationURI($edit_uri);\n\n      // 这里将创建子任务修改成 Create TestTask\n      $testtask_edit_uri = id(new PhutilURI(\"/task/edit/form/6/\"))\n       ->setQueryParam('parent', $id)\n       ->setQueryParam('template', $id)\n       ->setQueryParam('subtype', 'test')\n       ->setQueryParam('status', ManiphestTaskStatus::getDefaultStatus());\n      $testtask_edit_uri = $this->getApplicationURI($testtask_edit_uri);\n\n      // 和 Create DevTask\n      $devtask_edit_uri = id(new PhutilURI(\"/task/edit/form/1/\"))\n       ->setQueryParam('parent', $id)\n       ->setQueryParam('template', $id)\n       ->setQueryParam('subtype', 'dev')\n       ->setQueryParam('status', ManiphestTaskStatus::getDefaultStatus());\n      $devtask_edit_uri = $this->getApplicationURI($devtask_edit_uri);\n\n    } else {\n      // TODO: This will usually give us a somewhat-reasonable error page, but\n      // could be a bit cleaner.\n      $edit_uri = \"/task/edit/{$id}/\";\n      $edit_uri = $this->getApplicationURI($edit_uri);\n\n      $testtask_edit_uri = \"/task/edit/6/\";\n      $testtask_edit_uri = $this->getApplicationURI($testtask_edit_uri);\n\n      $devtask_edit_uri = \"/task/edit/1/\";\n      $devtask_edit_uri = $this->getApplicationURI($devtask_edit_uri);\n    }\n\n    $subtask_item = id(new PhabricatorActionView())\n      ->setName(pht('Create Subtask'))\n      ->setHref($edit_uri)\n      ->setIcon('fa-level-down')\n      ->setDisabled(!$can_create)\n      ->setWorkflow(!$can_create);\n\n    // 测试子任务\n    $testtask_item = id(new PhabricatorActionView())\n     ->setName(pht('Create TestTask'))\n     ->setHref($testtask_edit_uri)\n     ->setIcon('fa-level-down')\n     ->setDisabled(!$can_create)\n     ->setWorkflow(!$can_create);\n\n    // 开发子任务\n    $devtask_item = id(new PhabricatorActionView())\n     ->setName(pht('Create DevTask'))\n     ->setHref($devtask_edit_uri)\n     ->setIcon('fa-level-down')\n     ->setDisabled(!$can_create)\n     ->setWorkflow(!$can_create);\n\n    $relationship_list = PhabricatorObjectRelationshipList::newForObject(\n      $viewer,\n      $task);\n\n    $submenu_actions = array(\n      //$subtask_item,\n      $testtask_item,\n      $devtask_item,\n      ManiphestTaskHasParentRelationship::RELATIONSHIPKEY,\n      ManiphestTaskHasSubtaskRelationship::RELATIONSHIPKEY,\n      ManiphestTaskMergeInRelationship::RELATIONSHIPKEY,\n      ManiphestTaskCloseAsDuplicateRelationship::RELATIONSHIPKEY,\n    );\n\n    $task_submenu = $relationship_list->newActionSubmenu($submenu_actions)\n      ->setName(pht('Edit Related Tasks...'))\n      ->setIcon('fa-anchor');\n\n    $curtain->addAction($task_submenu);\n\n    $relationship_submenu = $relationship_list->newActionMenu();\n    if ($relationship_submenu) {\n      $curtain->addAction($relationship_submenu);\n    }\n\n    $owner_phid = $task->getOwnerPHID();\n    $author_phid = $task->getAuthorPHID();\n    $handles = $viewer->loadHandles(array($owner_phid, $author_phid));\n\n    if ($owner_phid) {\n      $image_uri = $handles[$owner_phid]->getImageURI();\n      $image_href = $handles[$owner_phid]->getURI();\n      $owner = $viewer->renderHandle($owner_phid)->render();\n      $content = phutil_tag('strong', array(), $owner);\n      $assigned_to = id(new PHUIHeadThingView())\n        ->setImage($image_uri)\n        ->setImageHref($image_href)\n        ->setContent($content);\n    } else {\n      $assigned_to = phutil_tag('em', array(), pht('None'));\n    }\n\n    $curtain->newPanel()\n      ->setHeaderText(pht('Assigned To'))\n      ->appendChild($assigned_to);\n\n    $author_uri = $handles[$author_phid]->getImageURI();\n    $author_href = $handles[$author_phid]->getURI();\n    $author = $viewer->renderHandle($author_phid)->render();\n    $content = phutil_tag('strong', array(), $author);\n    $date = phabricator_date($task->getDateCreated(), $viewer);\n    $content = pht('%s, %s', $content, $date);\n    $authored_by = id(new PHUIHeadThingView())\n      ->setImage($author_uri)\n      ->setImageHref($author_href)\n      ->setContent($content);\n\n    $curtain->newPanel()\n      ->setHeaderText(pht('Authored By'))\n      ->appendChild($authored_by);\n\n    return $curtain;\n  }\n```\n\n其中的 \"/task/edit/form/6/\" 和 \"/task/edit/form/1/\" 链接中的数字 6 和 1 对应自定义form的编号\n\n```php\n// 这里将创建子任务修改成 Create TestTask\n$testtask_edit_uri = id(new PhutilURI(\"/task/edit/form/6/\"))\n->setQueryParam('parent', $id)\n->setQueryParam('template', $id)\n->setQueryParam('subtype', 'test')\n->setQueryParam('status', ManiphestTaskStatus::getDefaultStatus());\n$testtask_edit_uri = $this->getApplicationURI($testtask_edit_uri);\n\n// 和 Create DevTask\n$devtask_edit_uri = id(new PhutilURI(\"/task/edit/form/1/\"))\n->setQueryParam('parent', $id)\n->setQueryParam('template', $id)\n->setQueryParam('subtype', 'dev')\n->setQueryParam('status', ManiphestTaskStatus::getDefaultStatus());\n$devtask_edit_uri = $this->getApplicationURI($devtask_edit_uri);\n```\n\n具体的替换 `Create Subtask` 链接的代码如下\n\n```php\n$subtask_item = id(new PhabricatorActionView())\n  ->setName(pht('Create Subtask'))\n  ->setHref($edit_uri)\n  ->setIcon('fa-level-down')\n  ->setDisabled(!$can_create)\n  ->setWorkflow(!$can_create);\n\n// 测试子任务\n$testtask_item = id(new PhabricatorActionView())\n ->setName(pht('Create TestTask'))\n ->setHref($testtask_edit_uri)\n ->setIcon('fa-level-down')\n ->setDisabled(!$can_create)\n ->setWorkflow(!$can_create);\n\n// 开发子任务\n$devtask_item = id(new PhabricatorActionView())\n ->setName(pht('Create DevTask'))\n ->setHref($devtask_edit_uri)\n ->setIcon('fa-level-down')\n ->setDisabled(!$can_create)\n ->setWorkflow(!$can_create);\n\n$relationship_list = PhabricatorObjectRelationshipList::newForObject(\n  $viewer,\n  $task);\n\n$submenu_actions = array(\n  //$subtask_item,\n  $testtask_item,\n  $devtask_item,\n  ManiphestTaskHasParentRelationship::RELATIONSHIPKEY,\n  ManiphestTaskHasSubtaskRelationship::RELATIONSHIPKEY,\n  ManiphestTaskMergeInRelationship::RELATIONSHIPKEY,\n  ManiphestTaskCloseAsDuplicateRelationship::RELATIONSHIPKEY,\n);\n```\n\n## 具体提交\n\n[提交](https://github.com/toulezu/phabricator/pull/3)\n\n## 总结\n\n通过实现这个需求,可以了解到如下 Phabricator 技术细节\n\n- `PHUICurtainView` 对象用来构建右边的操作菜单.\n- 通过 subType 字段来区分不同的 Task 对象\n- Task 对象之间的依赖关系","slug":"在 Phabricator 任务详情页右边增加创建子任务的快捷链接","published":1,"updated":"2018-01-01T12:55:41.575Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfto0q8r001q18c7uebmiy3w","content":"<h2 id=\"需求背景\"><a href=\"#需求背景\" class=\"headerlink\" title=\"需求背景\"></a>需求背景</h2><p>在使用 Phabricator 过程中需要创建不同的任务,又要确保这些任务之间有关联.比如在项目创建了一个主任务后,相关的测试任务和开发任务需要挂在该主任务下,默认情况下 Phabricator 只能在某个任务下创建子任务,不能创建不同的子任务,具体如下</p>\n<p><img src=\"http://7xt8a6.com1.z0.glb.clouddn.com/subtask-1.PNG\" alt=\"subtask\"></p>\n<p>这个时候就需要创建不同的任务form(测试任务form和开发任务form),并将这些form的快捷链接放到任务详情页右边,同时将这些form设置为只能编辑,具体如下</p>\n<p><img src=\"http://7xt8a6.com1.z0.glb.clouddn.com/subtask-2.PNG\" alt=\"subtask\"></p>\n<p><img src=\"http://7xt8a6.com1.z0.glb.clouddn.com/subtask-3.PNG\" alt=\"subtask\"></p>\n<p>限制 <code>TestTask</code> 和 <code>DevTask</code> 只能 Edit 不能 Create</p>\n<p><img src=\"http://7xt8a6.com1.z0.glb.clouddn.com/subtask-4.PNG\" alt=\"subtask\"></p>\n<h2 id=\"代码变更\"><a href=\"#代码变更\" class=\"headerlink\" title=\"代码变更\"></a>代码变更</h2><p>根据需求,这里只需要将原来的 <code>Create Subtask</code> 链接修改成 <code>Create TestTask</code> 和 <code>Create DevTask</code> 即可.相关的代码在 <code>phabricator\\src\\applications\\maniphest\\controller\\ManiphestTaskDetailController.php</code> 的 buildCurtain 方法中</p>\n<p>具体如下</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">buildCurtain</span><span class=\"params\">(</span><br><span class=\"line\">  ManiphestTask $task,</span><br><span class=\"line\">  PhabricatorEditEngine $edit_engine)</span> </span>&#123;</span><br><span class=\"line\">  $viewer = <span class=\"keyword\">$this</span>-&gt;getViewer();</span><br><span class=\"line\"></span><br><span class=\"line\">  $id = $task-&gt;getID();</span><br><span class=\"line\">  $phid = $task-&gt;getPHID();</span><br><span class=\"line\"></span><br><span class=\"line\">  $can_edit = PhabricatorPolicyFilter::hasCapability(</span><br><span class=\"line\">    $viewer,</span><br><span class=\"line\">    $task,</span><br><span class=\"line\">    PhabricatorPolicyCapability::CAN_EDIT);</span><br><span class=\"line\"></span><br><span class=\"line\">  $can_interact = PhabricatorPolicyFilter::canInteract($viewer, $task);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// We expect a policy dialog if you can't edit the task, and expect a</span></span><br><span class=\"line\">  <span class=\"comment\">// lock override dialog if you can't interact with it.</span></span><br><span class=\"line\">  $workflow_edit = (!$can_edit || !$can_interact);</span><br><span class=\"line\"></span><br><span class=\"line\">  $curtain = <span class=\"keyword\">$this</span>-&gt;newCurtainView($task);</span><br><span class=\"line\"></span><br><span class=\"line\">  $curtain-&gt;addAction(</span><br><span class=\"line\">    id(<span class=\"keyword\">new</span> PhabricatorActionView())</span><br><span class=\"line\">      -&gt;setName(pht(<span class=\"string\">'Edit Task'</span>))</span><br><span class=\"line\">      -&gt;setIcon(<span class=\"string\">'fa-pencil'</span>)</span><br><span class=\"line\">      -&gt;setHref(<span class=\"keyword\">$this</span>-&gt;getApplicationURI(<span class=\"string\">\"/task/edit/&#123;$id&#125;/\"</span>))</span><br><span class=\"line\">      -&gt;setDisabled(!$can_edit)</span><br><span class=\"line\">      -&gt;setWorkflow($workflow_edit));</span><br><span class=\"line\"></span><br><span class=\"line\">  $edit_config = $edit_engine-&gt;loadDefaultEditConfiguration($task);</span><br><span class=\"line\">  $can_create = (bool)$edit_config;</span><br><span class=\"line\"></span><br><span class=\"line\">  $can_reassign = $edit_engine-&gt;hasEditAccessToTransaction(</span><br><span class=\"line\">    ManiphestTaskOwnerTransaction::TRANSACTIONTYPE);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> ($can_create) &#123;</span><br><span class=\"line\">    $form_key = $edit_config-&gt;getIdentifier();</span><br><span class=\"line\">    $edit_uri = id(<span class=\"keyword\">new</span> PhutilURI(<span class=\"string\">\"/task/edit/form/&#123;$form_key&#125;/\"</span>))</span><br><span class=\"line\">      -&gt;setQueryParam(<span class=\"string\">'parent'</span>, $id)</span><br><span class=\"line\">      -&gt;setQueryParam(<span class=\"string\">'template'</span>, $id)</span><br><span class=\"line\">      -&gt;setQueryParam(<span class=\"string\">'status'</span>, ManiphestTaskStatus::getDefaultStatus());</span><br><span class=\"line\">    $edit_uri = <span class=\"keyword\">$this</span>-&gt;getApplicationURI($edit_uri);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 这里将创建子任务修改成 Create TestTask</span></span><br><span class=\"line\">    $testtask_edit_uri = id(<span class=\"keyword\">new</span> PhutilURI(<span class=\"string\">\"/task/edit/form/6/\"</span>))</span><br><span class=\"line\">     -&gt;setQueryParam(<span class=\"string\">'parent'</span>, $id)</span><br><span class=\"line\">     -&gt;setQueryParam(<span class=\"string\">'template'</span>, $id)</span><br><span class=\"line\">     -&gt;setQueryParam(<span class=\"string\">'subtype'</span>, <span class=\"string\">'test'</span>)</span><br><span class=\"line\">     -&gt;setQueryParam(<span class=\"string\">'status'</span>, ManiphestTaskStatus::getDefaultStatus());</span><br><span class=\"line\">    $testtask_edit_uri = <span class=\"keyword\">$this</span>-&gt;getApplicationURI($testtask_edit_uri);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 和 Create DevTask</span></span><br><span class=\"line\">    $devtask_edit_uri = id(<span class=\"keyword\">new</span> PhutilURI(<span class=\"string\">\"/task/edit/form/1/\"</span>))</span><br><span class=\"line\">     -&gt;setQueryParam(<span class=\"string\">'parent'</span>, $id)</span><br><span class=\"line\">     -&gt;setQueryParam(<span class=\"string\">'template'</span>, $id)</span><br><span class=\"line\">     -&gt;setQueryParam(<span class=\"string\">'subtype'</span>, <span class=\"string\">'dev'</span>)</span><br><span class=\"line\">     -&gt;setQueryParam(<span class=\"string\">'status'</span>, ManiphestTaskStatus::getDefaultStatus());</span><br><span class=\"line\">    $devtask_edit_uri = <span class=\"keyword\">$this</span>-&gt;getApplicationURI($devtask_edit_uri);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// <span class=\"doctag\">TODO:</span> This will usually give us a somewhat-reasonable error page, but</span></span><br><span class=\"line\">    <span class=\"comment\">// could be a bit cleaner.</span></span><br><span class=\"line\">    $edit_uri = <span class=\"string\">\"/task/edit/&#123;$id&#125;/\"</span>;</span><br><span class=\"line\">    $edit_uri = <span class=\"keyword\">$this</span>-&gt;getApplicationURI($edit_uri);</span><br><span class=\"line\"></span><br><span class=\"line\">    $testtask_edit_uri = <span class=\"string\">\"/task/edit/6/\"</span>;</span><br><span class=\"line\">    $testtask_edit_uri = <span class=\"keyword\">$this</span>-&gt;getApplicationURI($testtask_edit_uri);</span><br><span class=\"line\"></span><br><span class=\"line\">    $devtask_edit_uri = <span class=\"string\">\"/task/edit/1/\"</span>;</span><br><span class=\"line\">    $devtask_edit_uri = <span class=\"keyword\">$this</span>-&gt;getApplicationURI($devtask_edit_uri);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  $subtask_item = id(<span class=\"keyword\">new</span> PhabricatorActionView())</span><br><span class=\"line\">    -&gt;setName(pht(<span class=\"string\">'Create Subtask'</span>))</span><br><span class=\"line\">    -&gt;setHref($edit_uri)</span><br><span class=\"line\">    -&gt;setIcon(<span class=\"string\">'fa-level-down'</span>)</span><br><span class=\"line\">    -&gt;setDisabled(!$can_create)</span><br><span class=\"line\">    -&gt;setWorkflow(!$can_create);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 测试子任务</span></span><br><span class=\"line\">  $testtask_item = id(<span class=\"keyword\">new</span> PhabricatorActionView())</span><br><span class=\"line\">   -&gt;setName(pht(<span class=\"string\">'Create TestTask'</span>))</span><br><span class=\"line\">   -&gt;setHref($testtask_edit_uri)</span><br><span class=\"line\">   -&gt;setIcon(<span class=\"string\">'fa-level-down'</span>)</span><br><span class=\"line\">   -&gt;setDisabled(!$can_create)</span><br><span class=\"line\">   -&gt;setWorkflow(!$can_create);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 开发子任务</span></span><br><span class=\"line\">  $devtask_item = id(<span class=\"keyword\">new</span> PhabricatorActionView())</span><br><span class=\"line\">   -&gt;setName(pht(<span class=\"string\">'Create DevTask'</span>))</span><br><span class=\"line\">   -&gt;setHref($devtask_edit_uri)</span><br><span class=\"line\">   -&gt;setIcon(<span class=\"string\">'fa-level-down'</span>)</span><br><span class=\"line\">   -&gt;setDisabled(!$can_create)</span><br><span class=\"line\">   -&gt;setWorkflow(!$can_create);</span><br><span class=\"line\"></span><br><span class=\"line\">  $relationship_list = PhabricatorObjectRelationshipList::newForObject(</span><br><span class=\"line\">    $viewer,</span><br><span class=\"line\">    $task);</span><br><span class=\"line\"></span><br><span class=\"line\">  $submenu_actions = <span class=\"keyword\">array</span>(</span><br><span class=\"line\">    <span class=\"comment\">//$subtask_item,</span></span><br><span class=\"line\">    $testtask_item,</span><br><span class=\"line\">    $devtask_item,</span><br><span class=\"line\">    ManiphestTaskHasParentRelationship::RELATIONSHIPKEY,</span><br><span class=\"line\">    ManiphestTaskHasSubtaskRelationship::RELATIONSHIPKEY,</span><br><span class=\"line\">    ManiphestTaskMergeInRelationship::RELATIONSHIPKEY,</span><br><span class=\"line\">    ManiphestTaskCloseAsDuplicateRelationship::RELATIONSHIPKEY,</span><br><span class=\"line\">  );</span><br><span class=\"line\"></span><br><span class=\"line\">  $task_submenu = $relationship_list-&gt;newActionSubmenu($submenu_actions)</span><br><span class=\"line\">    -&gt;setName(pht(<span class=\"string\">'Edit Related Tasks...'</span>))</span><br><span class=\"line\">    -&gt;setIcon(<span class=\"string\">'fa-anchor'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  $curtain-&gt;addAction($task_submenu);</span><br><span class=\"line\"></span><br><span class=\"line\">  $relationship_submenu = $relationship_list-&gt;newActionMenu();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ($relationship_submenu) &#123;</span><br><span class=\"line\">    $curtain-&gt;addAction($relationship_submenu);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  $owner_phid = $task-&gt;getOwnerPHID();</span><br><span class=\"line\">  $author_phid = $task-&gt;getAuthorPHID();</span><br><span class=\"line\">  $handles = $viewer-&gt;loadHandles(<span class=\"keyword\">array</span>($owner_phid, $author_phid));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> ($owner_phid) &#123;</span><br><span class=\"line\">    $image_uri = $handles[$owner_phid]-&gt;getImageURI();</span><br><span class=\"line\">    $image_href = $handles[$owner_phid]-&gt;getURI();</span><br><span class=\"line\">    $owner = $viewer-&gt;renderHandle($owner_phid)-&gt;render();</span><br><span class=\"line\">    $content = phutil_tag(<span class=\"string\">'strong'</span>, <span class=\"keyword\">array</span>(), $owner);</span><br><span class=\"line\">    $assigned_to = id(<span class=\"keyword\">new</span> PHUIHeadThingView())</span><br><span class=\"line\">      -&gt;setImage($image_uri)</span><br><span class=\"line\">      -&gt;setImageHref($image_href)</span><br><span class=\"line\">      -&gt;setContent($content);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    $assigned_to = phutil_tag(<span class=\"string\">'em'</span>, <span class=\"keyword\">array</span>(), pht(<span class=\"string\">'None'</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  $curtain-&gt;newPanel()</span><br><span class=\"line\">    -&gt;setHeaderText(pht(<span class=\"string\">'Assigned To'</span>))</span><br><span class=\"line\">    -&gt;appendChild($assigned_to);</span><br><span class=\"line\"></span><br><span class=\"line\">  $author_uri = $handles[$author_phid]-&gt;getImageURI();</span><br><span class=\"line\">  $author_href = $handles[$author_phid]-&gt;getURI();</span><br><span class=\"line\">  $author = $viewer-&gt;renderHandle($author_phid)-&gt;render();</span><br><span class=\"line\">  $content = phutil_tag(<span class=\"string\">'strong'</span>, <span class=\"keyword\">array</span>(), $author);</span><br><span class=\"line\">  $date = phabricator_date($task-&gt;getDateCreated(), $viewer);</span><br><span class=\"line\">  $content = pht(<span class=\"string\">'%s, %s'</span>, $content, $date);</span><br><span class=\"line\">  $authored_by = id(<span class=\"keyword\">new</span> PHUIHeadThingView())</span><br><span class=\"line\">    -&gt;setImage($author_uri)</span><br><span class=\"line\">    -&gt;setImageHref($author_href)</span><br><span class=\"line\">    -&gt;setContent($content);</span><br><span class=\"line\"></span><br><span class=\"line\">  $curtain-&gt;newPanel()</span><br><span class=\"line\">    -&gt;setHeaderText(pht(<span class=\"string\">'Authored By'</span>))</span><br><span class=\"line\">    -&gt;appendChild($authored_by);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> $curtain;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中的 “/task/edit/form/6/“ 和 “/task/edit/form/1/“ 链接中的数字 6 和 1 对应自定义form的编号</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这里将创建子任务修改成 Create TestTask</span></span><br><span class=\"line\">$testtask_edit_uri = id(<span class=\"keyword\">new</span> PhutilURI(<span class=\"string\">\"/task/edit/form/6/\"</span>))</span><br><span class=\"line\">-&gt;setQueryParam(<span class=\"string\">'parent'</span>, $id)</span><br><span class=\"line\">-&gt;setQueryParam(<span class=\"string\">'template'</span>, $id)</span><br><span class=\"line\">-&gt;setQueryParam(<span class=\"string\">'subtype'</span>, <span class=\"string\">'test'</span>)</span><br><span class=\"line\">-&gt;setQueryParam(<span class=\"string\">'status'</span>, ManiphestTaskStatus::getDefaultStatus());</span><br><span class=\"line\">$testtask_edit_uri = <span class=\"keyword\">$this</span>-&gt;getApplicationURI($testtask_edit_uri);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 和 Create DevTask</span></span><br><span class=\"line\">$devtask_edit_uri = id(<span class=\"keyword\">new</span> PhutilURI(<span class=\"string\">\"/task/edit/form/1/\"</span>))</span><br><span class=\"line\">-&gt;setQueryParam(<span class=\"string\">'parent'</span>, $id)</span><br><span class=\"line\">-&gt;setQueryParam(<span class=\"string\">'template'</span>, $id)</span><br><span class=\"line\">-&gt;setQueryParam(<span class=\"string\">'subtype'</span>, <span class=\"string\">'dev'</span>)</span><br><span class=\"line\">-&gt;setQueryParam(<span class=\"string\">'status'</span>, ManiphestTaskStatus::getDefaultStatus());</span><br><span class=\"line\">$devtask_edit_uri = <span class=\"keyword\">$this</span>-&gt;getApplicationURI($devtask_edit_uri);</span><br></pre></td></tr></table></figure>\n<p>具体的替换 <code>Create Subtask</code> 链接的代码如下</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$subtask_item = id(<span class=\"keyword\">new</span> PhabricatorActionView())</span><br><span class=\"line\">  -&gt;setName(pht(<span class=\"string\">'Create Subtask'</span>))</span><br><span class=\"line\">  -&gt;setHref($edit_uri)</span><br><span class=\"line\">  -&gt;setIcon(<span class=\"string\">'fa-level-down'</span>)</span><br><span class=\"line\">  -&gt;setDisabled(!$can_create)</span><br><span class=\"line\">  -&gt;setWorkflow(!$can_create);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 测试子任务</span></span><br><span class=\"line\">$testtask_item = id(<span class=\"keyword\">new</span> PhabricatorActionView())</span><br><span class=\"line\"> -&gt;setName(pht(<span class=\"string\">'Create TestTask'</span>))</span><br><span class=\"line\"> -&gt;setHref($testtask_edit_uri)</span><br><span class=\"line\"> -&gt;setIcon(<span class=\"string\">'fa-level-down'</span>)</span><br><span class=\"line\"> -&gt;setDisabled(!$can_create)</span><br><span class=\"line\"> -&gt;setWorkflow(!$can_create);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 开发子任务</span></span><br><span class=\"line\">$devtask_item = id(<span class=\"keyword\">new</span> PhabricatorActionView())</span><br><span class=\"line\"> -&gt;setName(pht(<span class=\"string\">'Create DevTask'</span>))</span><br><span class=\"line\"> -&gt;setHref($devtask_edit_uri)</span><br><span class=\"line\"> -&gt;setIcon(<span class=\"string\">'fa-level-down'</span>)</span><br><span class=\"line\"> -&gt;setDisabled(!$can_create)</span><br><span class=\"line\"> -&gt;setWorkflow(!$can_create);</span><br><span class=\"line\"></span><br><span class=\"line\">$relationship_list = PhabricatorObjectRelationshipList::newForObject(</span><br><span class=\"line\">  $viewer,</span><br><span class=\"line\">  $task);</span><br><span class=\"line\"></span><br><span class=\"line\">$submenu_actions = <span class=\"keyword\">array</span>(</span><br><span class=\"line\">  <span class=\"comment\">//$subtask_item,</span></span><br><span class=\"line\">  $testtask_item,</span><br><span class=\"line\">  $devtask_item,</span><br><span class=\"line\">  ManiphestTaskHasParentRelationship::RELATIONSHIPKEY,</span><br><span class=\"line\">  ManiphestTaskHasSubtaskRelationship::RELATIONSHIPKEY,</span><br><span class=\"line\">  ManiphestTaskMergeInRelationship::RELATIONSHIPKEY,</span><br><span class=\"line\">  ManiphestTaskCloseAsDuplicateRelationship::RELATIONSHIPKEY,</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h2 id=\"具体提交\"><a href=\"#具体提交\" class=\"headerlink\" title=\"具体提交\"></a>具体提交</h2><p><a href=\"https://github.com/toulezu/phabricator/pull/3\" target=\"_blank\" rel=\"external\">提交</a></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>通过实现这个需求,可以了解到如下 Phabricator 技术细节</p>\n<ul>\n<li><code>PHUICurtainView</code> 对象用来构建右边的操作菜单.</li>\n<li>通过 subType 字段来区分不同的 Task 对象</li>\n<li>Task 对象之间的依赖关系</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"需求背景\"><a href=\"#需求背景\" class=\"headerlink\" title=\"需求背景\"></a>需求背景</h2><p>在使用 Phabricator 过程中需要创建不同的任务,又要确保这些任务之间有关联.比如在项目创建了一个主任务后,相关的测试任务和开发任务需要挂在该主任务下,默认情况下 Phabricator 只能在某个任务下创建子任务,不能创建不同的子任务,具体如下</p>\n<p><img src=\"http://7xt8a6.com1.z0.glb.clouddn.com/subtask-1.PNG\" alt=\"subtask\"></p>\n<p>这个时候就需要创建不同的任务form(测试任务form和开发任务form),并将这些form的快捷链接放到任务详情页右边,同时将这些form设置为只能编辑,具体如下</p>\n<p><img src=\"http://7xt8a6.com1.z0.glb.clouddn.com/subtask-2.PNG\" alt=\"subtask\"></p>\n<p><img src=\"http://7xt8a6.com1.z0.glb.clouddn.com/subtask-3.PNG\" alt=\"subtask\"></p>\n<p>限制 <code>TestTask</code> 和 <code>DevTask</code> 只能 Edit 不能 Create</p>\n<p><img src=\"http://7xt8a6.com1.z0.glb.clouddn.com/subtask-4.PNG\" alt=\"subtask\"></p>\n<h2 id=\"代码变更\"><a href=\"#代码变更\" class=\"headerlink\" title=\"代码变更\"></a>代码变更</h2><p>根据需求,这里只需要将原来的 <code>Create Subtask</code> 链接修改成 <code>Create TestTask</code> 和 <code>Create DevTask</code> 即可.相关的代码在 <code>phabricator\\src\\applications\\maniphest\\controller\\ManiphestTaskDetailController.php</code> 的 buildCurtain 方法中</p>\n<p>具体如下</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">buildCurtain</span><span class=\"params\">(</span><br><span class=\"line\">  ManiphestTask $task,</span><br><span class=\"line\">  PhabricatorEditEngine $edit_engine)</span> </span>&#123;</span><br><span class=\"line\">  $viewer = <span class=\"keyword\">$this</span>-&gt;getViewer();</span><br><span class=\"line\"></span><br><span class=\"line\">  $id = $task-&gt;getID();</span><br><span class=\"line\">  $phid = $task-&gt;getPHID();</span><br><span class=\"line\"></span><br><span class=\"line\">  $can_edit = PhabricatorPolicyFilter::hasCapability(</span><br><span class=\"line\">    $viewer,</span><br><span class=\"line\">    $task,</span><br><span class=\"line\">    PhabricatorPolicyCapability::CAN_EDIT);</span><br><span class=\"line\"></span><br><span class=\"line\">  $can_interact = PhabricatorPolicyFilter::canInteract($viewer, $task);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// We expect a policy dialog if you can't edit the task, and expect a</span></span><br><span class=\"line\">  <span class=\"comment\">// lock override dialog if you can't interact with it.</span></span><br><span class=\"line\">  $workflow_edit = (!$can_edit || !$can_interact);</span><br><span class=\"line\"></span><br><span class=\"line\">  $curtain = <span class=\"keyword\">$this</span>-&gt;newCurtainView($task);</span><br><span class=\"line\"></span><br><span class=\"line\">  $curtain-&gt;addAction(</span><br><span class=\"line\">    id(<span class=\"keyword\">new</span> PhabricatorActionView())</span><br><span class=\"line\">      -&gt;setName(pht(<span class=\"string\">'Edit Task'</span>))</span><br><span class=\"line\">      -&gt;setIcon(<span class=\"string\">'fa-pencil'</span>)</span><br><span class=\"line\">      -&gt;setHref(<span class=\"keyword\">$this</span>-&gt;getApplicationURI(<span class=\"string\">\"/task/edit/&#123;$id&#125;/\"</span>))</span><br><span class=\"line\">      -&gt;setDisabled(!$can_edit)</span><br><span class=\"line\">      -&gt;setWorkflow($workflow_edit));</span><br><span class=\"line\"></span><br><span class=\"line\">  $edit_config = $edit_engine-&gt;loadDefaultEditConfiguration($task);</span><br><span class=\"line\">  $can_create = (bool)$edit_config;</span><br><span class=\"line\"></span><br><span class=\"line\">  $can_reassign = $edit_engine-&gt;hasEditAccessToTransaction(</span><br><span class=\"line\">    ManiphestTaskOwnerTransaction::TRANSACTIONTYPE);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> ($can_create) &#123;</span><br><span class=\"line\">    $form_key = $edit_config-&gt;getIdentifier();</span><br><span class=\"line\">    $edit_uri = id(<span class=\"keyword\">new</span> PhutilURI(<span class=\"string\">\"/task/edit/form/&#123;$form_key&#125;/\"</span>))</span><br><span class=\"line\">      -&gt;setQueryParam(<span class=\"string\">'parent'</span>, $id)</span><br><span class=\"line\">      -&gt;setQueryParam(<span class=\"string\">'template'</span>, $id)</span><br><span class=\"line\">      -&gt;setQueryParam(<span class=\"string\">'status'</span>, ManiphestTaskStatus::getDefaultStatus());</span><br><span class=\"line\">    $edit_uri = <span class=\"keyword\">$this</span>-&gt;getApplicationURI($edit_uri);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 这里将创建子任务修改成 Create TestTask</span></span><br><span class=\"line\">    $testtask_edit_uri = id(<span class=\"keyword\">new</span> PhutilURI(<span class=\"string\">\"/task/edit/form/6/\"</span>))</span><br><span class=\"line\">     -&gt;setQueryParam(<span class=\"string\">'parent'</span>, $id)</span><br><span class=\"line\">     -&gt;setQueryParam(<span class=\"string\">'template'</span>, $id)</span><br><span class=\"line\">     -&gt;setQueryParam(<span class=\"string\">'subtype'</span>, <span class=\"string\">'test'</span>)</span><br><span class=\"line\">     -&gt;setQueryParam(<span class=\"string\">'status'</span>, ManiphestTaskStatus::getDefaultStatus());</span><br><span class=\"line\">    $testtask_edit_uri = <span class=\"keyword\">$this</span>-&gt;getApplicationURI($testtask_edit_uri);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 和 Create DevTask</span></span><br><span class=\"line\">    $devtask_edit_uri = id(<span class=\"keyword\">new</span> PhutilURI(<span class=\"string\">\"/task/edit/form/1/\"</span>))</span><br><span class=\"line\">     -&gt;setQueryParam(<span class=\"string\">'parent'</span>, $id)</span><br><span class=\"line\">     -&gt;setQueryParam(<span class=\"string\">'template'</span>, $id)</span><br><span class=\"line\">     -&gt;setQueryParam(<span class=\"string\">'subtype'</span>, <span class=\"string\">'dev'</span>)</span><br><span class=\"line\">     -&gt;setQueryParam(<span class=\"string\">'status'</span>, ManiphestTaskStatus::getDefaultStatus());</span><br><span class=\"line\">    $devtask_edit_uri = <span class=\"keyword\">$this</span>-&gt;getApplicationURI($devtask_edit_uri);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// <span class=\"doctag\">TODO:</span> This will usually give us a somewhat-reasonable error page, but</span></span><br><span class=\"line\">    <span class=\"comment\">// could be a bit cleaner.</span></span><br><span class=\"line\">    $edit_uri = <span class=\"string\">\"/task/edit/&#123;$id&#125;/\"</span>;</span><br><span class=\"line\">    $edit_uri = <span class=\"keyword\">$this</span>-&gt;getApplicationURI($edit_uri);</span><br><span class=\"line\"></span><br><span class=\"line\">    $testtask_edit_uri = <span class=\"string\">\"/task/edit/6/\"</span>;</span><br><span class=\"line\">    $testtask_edit_uri = <span class=\"keyword\">$this</span>-&gt;getApplicationURI($testtask_edit_uri);</span><br><span class=\"line\"></span><br><span class=\"line\">    $devtask_edit_uri = <span class=\"string\">\"/task/edit/1/\"</span>;</span><br><span class=\"line\">    $devtask_edit_uri = <span class=\"keyword\">$this</span>-&gt;getApplicationURI($devtask_edit_uri);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  $subtask_item = id(<span class=\"keyword\">new</span> PhabricatorActionView())</span><br><span class=\"line\">    -&gt;setName(pht(<span class=\"string\">'Create Subtask'</span>))</span><br><span class=\"line\">    -&gt;setHref($edit_uri)</span><br><span class=\"line\">    -&gt;setIcon(<span class=\"string\">'fa-level-down'</span>)</span><br><span class=\"line\">    -&gt;setDisabled(!$can_create)</span><br><span class=\"line\">    -&gt;setWorkflow(!$can_create);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 测试子任务</span></span><br><span class=\"line\">  $testtask_item = id(<span class=\"keyword\">new</span> PhabricatorActionView())</span><br><span class=\"line\">   -&gt;setName(pht(<span class=\"string\">'Create TestTask'</span>))</span><br><span class=\"line\">   -&gt;setHref($testtask_edit_uri)</span><br><span class=\"line\">   -&gt;setIcon(<span class=\"string\">'fa-level-down'</span>)</span><br><span class=\"line\">   -&gt;setDisabled(!$can_create)</span><br><span class=\"line\">   -&gt;setWorkflow(!$can_create);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 开发子任务</span></span><br><span class=\"line\">  $devtask_item = id(<span class=\"keyword\">new</span> PhabricatorActionView())</span><br><span class=\"line\">   -&gt;setName(pht(<span class=\"string\">'Create DevTask'</span>))</span><br><span class=\"line\">   -&gt;setHref($devtask_edit_uri)</span><br><span class=\"line\">   -&gt;setIcon(<span class=\"string\">'fa-level-down'</span>)</span><br><span class=\"line\">   -&gt;setDisabled(!$can_create)</span><br><span class=\"line\">   -&gt;setWorkflow(!$can_create);</span><br><span class=\"line\"></span><br><span class=\"line\">  $relationship_list = PhabricatorObjectRelationshipList::newForObject(</span><br><span class=\"line\">    $viewer,</span><br><span class=\"line\">    $task);</span><br><span class=\"line\"></span><br><span class=\"line\">  $submenu_actions = <span class=\"keyword\">array</span>(</span><br><span class=\"line\">    <span class=\"comment\">//$subtask_item,</span></span><br><span class=\"line\">    $testtask_item,</span><br><span class=\"line\">    $devtask_item,</span><br><span class=\"line\">    ManiphestTaskHasParentRelationship::RELATIONSHIPKEY,</span><br><span class=\"line\">    ManiphestTaskHasSubtaskRelationship::RELATIONSHIPKEY,</span><br><span class=\"line\">    ManiphestTaskMergeInRelationship::RELATIONSHIPKEY,</span><br><span class=\"line\">    ManiphestTaskCloseAsDuplicateRelationship::RELATIONSHIPKEY,</span><br><span class=\"line\">  );</span><br><span class=\"line\"></span><br><span class=\"line\">  $task_submenu = $relationship_list-&gt;newActionSubmenu($submenu_actions)</span><br><span class=\"line\">    -&gt;setName(pht(<span class=\"string\">'Edit Related Tasks...'</span>))</span><br><span class=\"line\">    -&gt;setIcon(<span class=\"string\">'fa-anchor'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  $curtain-&gt;addAction($task_submenu);</span><br><span class=\"line\"></span><br><span class=\"line\">  $relationship_submenu = $relationship_list-&gt;newActionMenu();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ($relationship_submenu) &#123;</span><br><span class=\"line\">    $curtain-&gt;addAction($relationship_submenu);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  $owner_phid = $task-&gt;getOwnerPHID();</span><br><span class=\"line\">  $author_phid = $task-&gt;getAuthorPHID();</span><br><span class=\"line\">  $handles = $viewer-&gt;loadHandles(<span class=\"keyword\">array</span>($owner_phid, $author_phid));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> ($owner_phid) &#123;</span><br><span class=\"line\">    $image_uri = $handles[$owner_phid]-&gt;getImageURI();</span><br><span class=\"line\">    $image_href = $handles[$owner_phid]-&gt;getURI();</span><br><span class=\"line\">    $owner = $viewer-&gt;renderHandle($owner_phid)-&gt;render();</span><br><span class=\"line\">    $content = phutil_tag(<span class=\"string\">'strong'</span>, <span class=\"keyword\">array</span>(), $owner);</span><br><span class=\"line\">    $assigned_to = id(<span class=\"keyword\">new</span> PHUIHeadThingView())</span><br><span class=\"line\">      -&gt;setImage($image_uri)</span><br><span class=\"line\">      -&gt;setImageHref($image_href)</span><br><span class=\"line\">      -&gt;setContent($content);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    $assigned_to = phutil_tag(<span class=\"string\">'em'</span>, <span class=\"keyword\">array</span>(), pht(<span class=\"string\">'None'</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  $curtain-&gt;newPanel()</span><br><span class=\"line\">    -&gt;setHeaderText(pht(<span class=\"string\">'Assigned To'</span>))</span><br><span class=\"line\">    -&gt;appendChild($assigned_to);</span><br><span class=\"line\"></span><br><span class=\"line\">  $author_uri = $handles[$author_phid]-&gt;getImageURI();</span><br><span class=\"line\">  $author_href = $handles[$author_phid]-&gt;getURI();</span><br><span class=\"line\">  $author = $viewer-&gt;renderHandle($author_phid)-&gt;render();</span><br><span class=\"line\">  $content = phutil_tag(<span class=\"string\">'strong'</span>, <span class=\"keyword\">array</span>(), $author);</span><br><span class=\"line\">  $date = phabricator_date($task-&gt;getDateCreated(), $viewer);</span><br><span class=\"line\">  $content = pht(<span class=\"string\">'%s, %s'</span>, $content, $date);</span><br><span class=\"line\">  $authored_by = id(<span class=\"keyword\">new</span> PHUIHeadThingView())</span><br><span class=\"line\">    -&gt;setImage($author_uri)</span><br><span class=\"line\">    -&gt;setImageHref($author_href)</span><br><span class=\"line\">    -&gt;setContent($content);</span><br><span class=\"line\"></span><br><span class=\"line\">  $curtain-&gt;newPanel()</span><br><span class=\"line\">    -&gt;setHeaderText(pht(<span class=\"string\">'Authored By'</span>))</span><br><span class=\"line\">    -&gt;appendChild($authored_by);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> $curtain;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中的 “/task/edit/form/6/“ 和 “/task/edit/form/1/“ 链接中的数字 6 和 1 对应自定义form的编号</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这里将创建子任务修改成 Create TestTask</span></span><br><span class=\"line\">$testtask_edit_uri = id(<span class=\"keyword\">new</span> PhutilURI(<span class=\"string\">\"/task/edit/form/6/\"</span>))</span><br><span class=\"line\">-&gt;setQueryParam(<span class=\"string\">'parent'</span>, $id)</span><br><span class=\"line\">-&gt;setQueryParam(<span class=\"string\">'template'</span>, $id)</span><br><span class=\"line\">-&gt;setQueryParam(<span class=\"string\">'subtype'</span>, <span class=\"string\">'test'</span>)</span><br><span class=\"line\">-&gt;setQueryParam(<span class=\"string\">'status'</span>, ManiphestTaskStatus::getDefaultStatus());</span><br><span class=\"line\">$testtask_edit_uri = <span class=\"keyword\">$this</span>-&gt;getApplicationURI($testtask_edit_uri);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 和 Create DevTask</span></span><br><span class=\"line\">$devtask_edit_uri = id(<span class=\"keyword\">new</span> PhutilURI(<span class=\"string\">\"/task/edit/form/1/\"</span>))</span><br><span class=\"line\">-&gt;setQueryParam(<span class=\"string\">'parent'</span>, $id)</span><br><span class=\"line\">-&gt;setQueryParam(<span class=\"string\">'template'</span>, $id)</span><br><span class=\"line\">-&gt;setQueryParam(<span class=\"string\">'subtype'</span>, <span class=\"string\">'dev'</span>)</span><br><span class=\"line\">-&gt;setQueryParam(<span class=\"string\">'status'</span>, ManiphestTaskStatus::getDefaultStatus());</span><br><span class=\"line\">$devtask_edit_uri = <span class=\"keyword\">$this</span>-&gt;getApplicationURI($devtask_edit_uri);</span><br></pre></td></tr></table></figure>\n<p>具体的替换 <code>Create Subtask</code> 链接的代码如下</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$subtask_item = id(<span class=\"keyword\">new</span> PhabricatorActionView())</span><br><span class=\"line\">  -&gt;setName(pht(<span class=\"string\">'Create Subtask'</span>))</span><br><span class=\"line\">  -&gt;setHref($edit_uri)</span><br><span class=\"line\">  -&gt;setIcon(<span class=\"string\">'fa-level-down'</span>)</span><br><span class=\"line\">  -&gt;setDisabled(!$can_create)</span><br><span class=\"line\">  -&gt;setWorkflow(!$can_create);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 测试子任务</span></span><br><span class=\"line\">$testtask_item = id(<span class=\"keyword\">new</span> PhabricatorActionView())</span><br><span class=\"line\"> -&gt;setName(pht(<span class=\"string\">'Create TestTask'</span>))</span><br><span class=\"line\"> -&gt;setHref($testtask_edit_uri)</span><br><span class=\"line\"> -&gt;setIcon(<span class=\"string\">'fa-level-down'</span>)</span><br><span class=\"line\"> -&gt;setDisabled(!$can_create)</span><br><span class=\"line\"> -&gt;setWorkflow(!$can_create);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 开发子任务</span></span><br><span class=\"line\">$devtask_item = id(<span class=\"keyword\">new</span> PhabricatorActionView())</span><br><span class=\"line\"> -&gt;setName(pht(<span class=\"string\">'Create DevTask'</span>))</span><br><span class=\"line\"> -&gt;setHref($devtask_edit_uri)</span><br><span class=\"line\"> -&gt;setIcon(<span class=\"string\">'fa-level-down'</span>)</span><br><span class=\"line\"> -&gt;setDisabled(!$can_create)</span><br><span class=\"line\"> -&gt;setWorkflow(!$can_create);</span><br><span class=\"line\"></span><br><span class=\"line\">$relationship_list = PhabricatorObjectRelationshipList::newForObject(</span><br><span class=\"line\">  $viewer,</span><br><span class=\"line\">  $task);</span><br><span class=\"line\"></span><br><span class=\"line\">$submenu_actions = <span class=\"keyword\">array</span>(</span><br><span class=\"line\">  <span class=\"comment\">//$subtask_item,</span></span><br><span class=\"line\">  $testtask_item,</span><br><span class=\"line\">  $devtask_item,</span><br><span class=\"line\">  ManiphestTaskHasParentRelationship::RELATIONSHIPKEY,</span><br><span class=\"line\">  ManiphestTaskHasSubtaskRelationship::RELATIONSHIPKEY,</span><br><span class=\"line\">  ManiphestTaskMergeInRelationship::RELATIONSHIPKEY,</span><br><span class=\"line\">  ManiphestTaskCloseAsDuplicateRelationship::RELATIONSHIPKEY,</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h2 id=\"具体提交\"><a href=\"#具体提交\" class=\"headerlink\" title=\"具体提交\"></a>具体提交</h2><p><a href=\"https://github.com/toulezu/phabricator/pull/3\">提交</a></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>通过实现这个需求,可以了解到如下 Phabricator 技术细节</p>\n<ul>\n<li><code>PHUICurtainView</code> 对象用来构建右边的操作菜单.</li>\n<li>通过 subType 字段来区分不同的 Task 对象</li>\n<li>Task 对象之间的依赖关系</li>\n</ul>\n"},{"title":"在 Phabricator workborad 的卡片上显示开始和结束时间","title_url":"Phabricator-workborad-card-task","date":"2017-07-24T16:00:00.000Z","description":"在 Phabricator workborad 的卡片上显示开始和结束时间","_content":"\n## 需求背景\n\n在 Phabricator workborad 的卡片上需要显示更多的信息,比如任务的开始和结束时间等等.\n\n## workboard 的渲染过程\n\n根据项目 workboard 的访问路径 `http://test.pha.com/project/board/9/` 和 PhabricatorProjectApplication 中定义的路由规则,可以找到 workboard 对应的 Controller 为 PhabricatorProjectBoardViewController. \n\n由此找到具体渲染 workboard 上卡片的具体过程如下\n\n```php\nPhabricatorProjectBoardViewController 362\n\tPhabricatorBoardRenderingEngine ->renderCard 56\n\t\tProjectBoardTaskCard ->getItem \n```\n\n在 getItem 方法中可以发现每个 workboard 卡片对应一个 PHUIObjectItemView 对象\n\n## 具体的修改\n\n其中 getItem 方法对应的修改如下\n\n```php\npublic function getItem() {\n    $task = $this->getTask();\n    $owner = $this->getOwner();\n    $can_edit = $this->getCanEdit();\n    $viewer = $this->getViewer();\n\n    $color_map = ManiphestTaskPriority::getColorMap();\n    $bar_color = idx($color_map, $task->getPriority(), 'grey');\n\n    // 获取每个任务对象的完整字段\n    $maniphest_fields = id(new ManiphestEditEngine())\n     ->setViewer($viewer)\n     ->loadObjectFields($task);\n\n    // 获取每个任务对象的自定义字段的 开始时间 和 结束时间\n    $start_date = '';\n    $end_date = '';\n    foreach ($maniphest_fields as $key => $field) {\n      if (strstr($key, 'start date')) {\n        $start_date = $field->getValueForDefaults();\n      }\n      if (strstr($key, 'finish-date')) {\n        $end_date = $field->getValueForDefaults();\n      }\n    }\n\n    $start = '';\n    if ($start_date !== '') {\n      $start = date(\"m-d H:i\", $start_date);\n    }\n\n    $end = '';\n    if ($end_date !== '') {\n      $end = date(\"m-d H:i\", $end_date);\n    }\n\n    $card = id(new PHUIObjectItemView())\n      ->setObject($task)\n      ->setUser($viewer)\n      ->setObjectName('T'.$task->getID())\n      ->setHeader($task->getTitle().' '.$start.'-'.$end)\n      ->setGrippable($can_edit)\n      ->setHref('/T'.$task->getID())\n      ->addSigil('project-card')\n      ->setDisabled($task->isClosed())\n      ->addAction(\n        id(new PHUIListItemView())\n        ->setName(pht('Edit'))\n        ->setIcon('fa-pencil')\n        ->addSigil('edit-project-card')\n        ->setHref('/maniphest/task/edit/'.$task->getID().'/'))\n      ->setBarColor($bar_color);\n\n    if ($owner) {\n      $card->addHandleIcon($owner, $owner->getName());\n    }\n\n    $cover_file = $this->getCoverImageFile();\n    if ($cover_file) {\n      $card->setCoverImage($cover_file->getBestURI());\n    }\n\n    if (ManiphestTaskPoints::getIsEnabled()) {\n      $points = $task->getPoints();\n      if ($points !== null) {\n        $points_tag = id(new PHUITagView())\n          ->setType(PHUITagView::TYPE_SHADE)\n          ->setColor(PHUITagView::COLOR_GREY)\n          ->setSlimShady(true)\n          ->setName($points)\n          ->addClass('phui-workcard-points');\n        $card->addAttribute($points_tag);\n      }\n    }\n\n    $subtype = $task->newSubtypeObject();\n    if ($subtype && $subtype->hasTagView()) {\n      $subtype_tag = $subtype->newTagView()\n        ->setSlimShady(true);\n      $card->addAttribute($subtype_tag);\n    }\n\n    if ($task->isClosed()) {\n      $icon = ManiphestTaskStatus::getStatusIcon($task->getStatus());\n      $icon = id(new PHUIIconView())\n        ->setIcon($icon.' grey');\n      $card->addAttribute($icon);\n      $card->setBarColor('grey');\n    }\n\n    $project_handles = $this->getProjectHandles();\n\n    // Remove any archived projects from the list.\n    if ($project_handles) {\n      foreach ($project_handles as $key => $handle) {\n        if ($handle->getStatus() == PhabricatorObjectHandle::STATUS_CLOSED) {\n          unset($project_handles[$key]);\n        }\n      }\n    }\n\n    if ($project_handles) {\n      $project_handles = array_reverse($project_handles);\n      $tag_list = id(new PHUIHandleTagListView())\n        ->setSlim(true)\n        ->setHandles($project_handles);\n      $card->addAttribute($tag_list);\n    }\n\n    $card->addClass('phui-workcard');\n\n    return $card;\n  }\n```\n\n上面方法中的 $task 由于默认没有自定义字段,并且开始时间和结束时间是定义在自定义字段中的,这里通过如下方式获取到任务对象 $task 的完整字段\n\n```php\n// 获取每个任务对象的完整字段\n$maniphest_fields = id(new ManiphestEditEngine())\n ->setViewer($viewer)\n ->loadObjectFields($task);\n```\n\n其中的 loadObjectFields 方法定义在 ManiphestEditEngine 的父类 PhabricatorEditEngine 中,具体如下\n\n```php\n  /**\n   * 获取对象的所有字段对象(PhabricatorCustomFieldEditField)\n   *\n   * author ck\n   *\n   * @param $object\n   * @return array|dict\n   */\n  public function loadObjectFields($object) {\n    $this->loadDefaultConfiguration();\n    return $this->buildEditFields($object);\n  }\n```\n\n## 参考加载编辑任务的流程\n\n这里获取到任务对象 $task 所有的字段,具体参考到了点击编辑任务到加载一个任务的编辑页面的流程,具体如下\n\n```php\nManiphestTaskEditController\n\tManiphestEditEngine\n\t\textends PhabricatorEditEngine -> buildResponse -> buildEditResponse -> buildEditFields\n```\n\n- 其中 buildEditFields 方法可以拿到一个任务对象的所有字段,包括自定义字段\t\t\n\n- 其中 buildResponse 方法中根据从请求对象 $request 中获取一个 $task 对象的id 获取了一个 $task 对象\n\n```php\n$capabilities = array();\n...\n$id = $request->getURIData('id');\n....\n$object = $this->newObjectFromID($id, $capabilities);\n```\n\n## 最终的效果\n\n![workboard-date](http://7xt8a6.com1.z0.glb.clouddn.com/workboard-1.PNG)\n\n## 总结\n\n通过做这个需求，了解了 Phabricator 如下的技术细节\n\n- workboard 的渲染过程\n- PhabricatorEditEngine 加载一个对象的过程","source":"_posts/在 Phabricator workborad 的卡片上显示开始和结束时间.md","raw":"---\ntitle: 在 Phabricator workborad 的卡片上显示开始和结束时间\ntitle_url: Phabricator-workborad-card-task\ndate: 2017-07-25\ntags: Phabricator\ncategories: [Phabricator,PHP]\ndescription: 在 Phabricator workborad 的卡片上显示开始和结束时间\n---\n\n## 需求背景\n\n在 Phabricator workborad 的卡片上需要显示更多的信息,比如任务的开始和结束时间等等.\n\n## workboard 的渲染过程\n\n根据项目 workboard 的访问路径 `http://test.pha.com/project/board/9/` 和 PhabricatorProjectApplication 中定义的路由规则,可以找到 workboard 对应的 Controller 为 PhabricatorProjectBoardViewController. \n\n由此找到具体渲染 workboard 上卡片的具体过程如下\n\n```php\nPhabricatorProjectBoardViewController 362\n\tPhabricatorBoardRenderingEngine ->renderCard 56\n\t\tProjectBoardTaskCard ->getItem \n```\n\n在 getItem 方法中可以发现每个 workboard 卡片对应一个 PHUIObjectItemView 对象\n\n## 具体的修改\n\n其中 getItem 方法对应的修改如下\n\n```php\npublic function getItem() {\n    $task = $this->getTask();\n    $owner = $this->getOwner();\n    $can_edit = $this->getCanEdit();\n    $viewer = $this->getViewer();\n\n    $color_map = ManiphestTaskPriority::getColorMap();\n    $bar_color = idx($color_map, $task->getPriority(), 'grey');\n\n    // 获取每个任务对象的完整字段\n    $maniphest_fields = id(new ManiphestEditEngine())\n     ->setViewer($viewer)\n     ->loadObjectFields($task);\n\n    // 获取每个任务对象的自定义字段的 开始时间 和 结束时间\n    $start_date = '';\n    $end_date = '';\n    foreach ($maniphest_fields as $key => $field) {\n      if (strstr($key, 'start date')) {\n        $start_date = $field->getValueForDefaults();\n      }\n      if (strstr($key, 'finish-date')) {\n        $end_date = $field->getValueForDefaults();\n      }\n    }\n\n    $start = '';\n    if ($start_date !== '') {\n      $start = date(\"m-d H:i\", $start_date);\n    }\n\n    $end = '';\n    if ($end_date !== '') {\n      $end = date(\"m-d H:i\", $end_date);\n    }\n\n    $card = id(new PHUIObjectItemView())\n      ->setObject($task)\n      ->setUser($viewer)\n      ->setObjectName('T'.$task->getID())\n      ->setHeader($task->getTitle().' '.$start.'-'.$end)\n      ->setGrippable($can_edit)\n      ->setHref('/T'.$task->getID())\n      ->addSigil('project-card')\n      ->setDisabled($task->isClosed())\n      ->addAction(\n        id(new PHUIListItemView())\n        ->setName(pht('Edit'))\n        ->setIcon('fa-pencil')\n        ->addSigil('edit-project-card')\n        ->setHref('/maniphest/task/edit/'.$task->getID().'/'))\n      ->setBarColor($bar_color);\n\n    if ($owner) {\n      $card->addHandleIcon($owner, $owner->getName());\n    }\n\n    $cover_file = $this->getCoverImageFile();\n    if ($cover_file) {\n      $card->setCoverImage($cover_file->getBestURI());\n    }\n\n    if (ManiphestTaskPoints::getIsEnabled()) {\n      $points = $task->getPoints();\n      if ($points !== null) {\n        $points_tag = id(new PHUITagView())\n          ->setType(PHUITagView::TYPE_SHADE)\n          ->setColor(PHUITagView::COLOR_GREY)\n          ->setSlimShady(true)\n          ->setName($points)\n          ->addClass('phui-workcard-points');\n        $card->addAttribute($points_tag);\n      }\n    }\n\n    $subtype = $task->newSubtypeObject();\n    if ($subtype && $subtype->hasTagView()) {\n      $subtype_tag = $subtype->newTagView()\n        ->setSlimShady(true);\n      $card->addAttribute($subtype_tag);\n    }\n\n    if ($task->isClosed()) {\n      $icon = ManiphestTaskStatus::getStatusIcon($task->getStatus());\n      $icon = id(new PHUIIconView())\n        ->setIcon($icon.' grey');\n      $card->addAttribute($icon);\n      $card->setBarColor('grey');\n    }\n\n    $project_handles = $this->getProjectHandles();\n\n    // Remove any archived projects from the list.\n    if ($project_handles) {\n      foreach ($project_handles as $key => $handle) {\n        if ($handle->getStatus() == PhabricatorObjectHandle::STATUS_CLOSED) {\n          unset($project_handles[$key]);\n        }\n      }\n    }\n\n    if ($project_handles) {\n      $project_handles = array_reverse($project_handles);\n      $tag_list = id(new PHUIHandleTagListView())\n        ->setSlim(true)\n        ->setHandles($project_handles);\n      $card->addAttribute($tag_list);\n    }\n\n    $card->addClass('phui-workcard');\n\n    return $card;\n  }\n```\n\n上面方法中的 $task 由于默认没有自定义字段,并且开始时间和结束时间是定义在自定义字段中的,这里通过如下方式获取到任务对象 $task 的完整字段\n\n```php\n// 获取每个任务对象的完整字段\n$maniphest_fields = id(new ManiphestEditEngine())\n ->setViewer($viewer)\n ->loadObjectFields($task);\n```\n\n其中的 loadObjectFields 方法定义在 ManiphestEditEngine 的父类 PhabricatorEditEngine 中,具体如下\n\n```php\n  /**\n   * 获取对象的所有字段对象(PhabricatorCustomFieldEditField)\n   *\n   * author ck\n   *\n   * @param $object\n   * @return array|dict\n   */\n  public function loadObjectFields($object) {\n    $this->loadDefaultConfiguration();\n    return $this->buildEditFields($object);\n  }\n```\n\n## 参考加载编辑任务的流程\n\n这里获取到任务对象 $task 所有的字段,具体参考到了点击编辑任务到加载一个任务的编辑页面的流程,具体如下\n\n```php\nManiphestTaskEditController\n\tManiphestEditEngine\n\t\textends PhabricatorEditEngine -> buildResponse -> buildEditResponse -> buildEditFields\n```\n\n- 其中 buildEditFields 方法可以拿到一个任务对象的所有字段,包括自定义字段\t\t\n\n- 其中 buildResponse 方法中根据从请求对象 $request 中获取一个 $task 对象的id 获取了一个 $task 对象\n\n```php\n$capabilities = array();\n...\n$id = $request->getURIData('id');\n....\n$object = $this->newObjectFromID($id, $capabilities);\n```\n\n## 最终的效果\n\n![workboard-date](http://7xt8a6.com1.z0.glb.clouddn.com/workboard-1.PNG)\n\n## 总结\n\n通过做这个需求，了解了 Phabricator 如下的技术细节\n\n- workboard 的渲染过程\n- PhabricatorEditEngine 加载一个对象的过程","slug":"在 Phabricator workborad 的卡片上显示开始和结束时间","published":1,"updated":"2018-01-01T12:55:41.541Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfto0q8u001u18c7fpnhb10q","content":"<h2 id=\"需求背景\"><a href=\"#需求背景\" class=\"headerlink\" title=\"需求背景\"></a>需求背景</h2><p>在 Phabricator workborad 的卡片上需要显示更多的信息,比如任务的开始和结束时间等等.</p>\n<h2 id=\"workboard-的渲染过程\"><a href=\"#workboard-的渲染过程\" class=\"headerlink\" title=\"workboard 的渲染过程\"></a>workboard 的渲染过程</h2><p>根据项目 workboard 的访问路径 <code>http://test.pha.com/project/board/9/</code> 和 PhabricatorProjectApplication 中定义的路由规则,可以找到 workboard 对应的 Controller 为 PhabricatorProjectBoardViewController. </p>\n<p>由此找到具体渲染 workboard 上卡片的具体过程如下</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PhabricatorProjectBoardViewController <span class=\"number\">362</span></span><br><span class=\"line\">\tPhabricatorBoardRenderingEngine -&gt;renderCard <span class=\"number\">56</span></span><br><span class=\"line\">\t\tProjectBoardTaskCard -&gt;getItem</span><br></pre></td></tr></table></figure>\n<p>在 getItem 方法中可以发现每个 workboard 卡片对应一个 PHUIObjectItemView 对象</p>\n<h2 id=\"具体的修改\"><a href=\"#具体的修改\" class=\"headerlink\" title=\"具体的修改\"></a>具体的修改</h2><p>其中 getItem 方法对应的修改如下</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getItem</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    $task = <span class=\"keyword\">$this</span>-&gt;getTask();</span><br><span class=\"line\">    $owner = <span class=\"keyword\">$this</span>-&gt;getOwner();</span><br><span class=\"line\">    $can_edit = <span class=\"keyword\">$this</span>-&gt;getCanEdit();</span><br><span class=\"line\">    $viewer = <span class=\"keyword\">$this</span>-&gt;getViewer();</span><br><span class=\"line\"></span><br><span class=\"line\">    $color_map = ManiphestTaskPriority::getColorMap();</span><br><span class=\"line\">    $bar_color = idx($color_map, $task-&gt;getPriority(), <span class=\"string\">'grey'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取每个任务对象的完整字段</span></span><br><span class=\"line\">    $maniphest_fields = id(<span class=\"keyword\">new</span> ManiphestEditEngine())</span><br><span class=\"line\">     -&gt;setViewer($viewer)</span><br><span class=\"line\">     -&gt;loadObjectFields($task);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取每个任务对象的自定义字段的 开始时间 和 结束时间</span></span><br><span class=\"line\">    $start_date = <span class=\"string\">''</span>;</span><br><span class=\"line\">    $end_date = <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> ($maniphest_fields <span class=\"keyword\">as</span> $key =&gt; $field) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (strstr($key, <span class=\"string\">'start date'</span>)) &#123;</span><br><span class=\"line\">        $start_date = $field-&gt;getValueForDefaults();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (strstr($key, <span class=\"string\">'finish-date'</span>)) &#123;</span><br><span class=\"line\">        $end_date = $field-&gt;getValueForDefaults();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    $start = <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($start_date !== <span class=\"string\">''</span>) &#123;</span><br><span class=\"line\">      $start = date(<span class=\"string\">\"m-d H:i\"</span>, $start_date);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    $end = <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($end_date !== <span class=\"string\">''</span>) &#123;</span><br><span class=\"line\">      $end = date(<span class=\"string\">\"m-d H:i\"</span>, $end_date);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    $card = id(<span class=\"keyword\">new</span> PHUIObjectItemView())</span><br><span class=\"line\">      -&gt;setObject($task)</span><br><span class=\"line\">      -&gt;setUser($viewer)</span><br><span class=\"line\">      -&gt;setObjectName(<span class=\"string\">'T'</span>.$task-&gt;getID())</span><br><span class=\"line\">      -&gt;setHeader($task-&gt;getTitle().<span class=\"string\">' '</span>.$start.<span class=\"string\">'-'</span>.$end)</span><br><span class=\"line\">      -&gt;setGrippable($can_edit)</span><br><span class=\"line\">      -&gt;setHref(<span class=\"string\">'/T'</span>.$task-&gt;getID())</span><br><span class=\"line\">      -&gt;addSigil(<span class=\"string\">'project-card'</span>)</span><br><span class=\"line\">      -&gt;setDisabled($task-&gt;isClosed())</span><br><span class=\"line\">      -&gt;addAction(</span><br><span class=\"line\">        id(<span class=\"keyword\">new</span> PHUIListItemView())</span><br><span class=\"line\">        -&gt;setName(pht(<span class=\"string\">'Edit'</span>))</span><br><span class=\"line\">        -&gt;setIcon(<span class=\"string\">'fa-pencil'</span>)</span><br><span class=\"line\">        -&gt;addSigil(<span class=\"string\">'edit-project-card'</span>)</span><br><span class=\"line\">        -&gt;setHref(<span class=\"string\">'/maniphest/task/edit/'</span>.$task-&gt;getID().<span class=\"string\">'/'</span>))</span><br><span class=\"line\">      -&gt;setBarColor($bar_color);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($owner) &#123;</span><br><span class=\"line\">      $card-&gt;addHandleIcon($owner, $owner-&gt;getName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    $cover_file = <span class=\"keyword\">$this</span>-&gt;getCoverImageFile();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($cover_file) &#123;</span><br><span class=\"line\">      $card-&gt;setCoverImage($cover_file-&gt;getBestURI());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ManiphestTaskPoints::getIsEnabled()) &#123;</span><br><span class=\"line\">      $points = $task-&gt;getPoints();</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ($points !== <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        $points_tag = id(<span class=\"keyword\">new</span> PHUITagView())</span><br><span class=\"line\">          -&gt;setType(PHUITagView::TYPE_SHADE)</span><br><span class=\"line\">          -&gt;setColor(PHUITagView::COLOR_GREY)</span><br><span class=\"line\">          -&gt;setSlimShady(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">          -&gt;setName($points)</span><br><span class=\"line\">          -&gt;addClass(<span class=\"string\">'phui-workcard-points'</span>);</span><br><span class=\"line\">        $card-&gt;addAttribute($points_tag);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    $subtype = $task-&gt;newSubtypeObject();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($subtype &amp;&amp; $subtype-&gt;hasTagView()) &#123;</span><br><span class=\"line\">      $subtype_tag = $subtype-&gt;newTagView()</span><br><span class=\"line\">        -&gt;setSlimShady(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">      $card-&gt;addAttribute($subtype_tag);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($task-&gt;isClosed()) &#123;</span><br><span class=\"line\">      $icon = ManiphestTaskStatus::getStatusIcon($task-&gt;getStatus());</span><br><span class=\"line\">      $icon = id(<span class=\"keyword\">new</span> PHUIIconView())</span><br><span class=\"line\">        -&gt;setIcon($icon.<span class=\"string\">' grey'</span>);</span><br><span class=\"line\">      $card-&gt;addAttribute($icon);</span><br><span class=\"line\">      $card-&gt;setBarColor(<span class=\"string\">'grey'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    $project_handles = <span class=\"keyword\">$this</span>-&gt;getProjectHandles();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Remove any archived projects from the list.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($project_handles) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">foreach</span> ($project_handles <span class=\"keyword\">as</span> $key =&gt; $handle) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($handle-&gt;getStatus() == PhabricatorObjectHandle::STATUS_CLOSED) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">unset</span>($project_handles[$key]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($project_handles) &#123;</span><br><span class=\"line\">      $project_handles = array_reverse($project_handles);</span><br><span class=\"line\">      $tag_list = id(<span class=\"keyword\">new</span> PHUIHandleTagListView())</span><br><span class=\"line\">        -&gt;setSlim(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">        -&gt;setHandles($project_handles);</span><br><span class=\"line\">      $card-&gt;addAttribute($tag_list);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    $card-&gt;addClass(<span class=\"string\">'phui-workcard'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> $card;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>上面方法中的 $task 由于默认没有自定义字段,并且开始时间和结束时间是定义在自定义字段中的,这里通过如下方式获取到任务对象 $task 的完整字段</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取每个任务对象的完整字段</span></span><br><span class=\"line\">$maniphest_fields = id(<span class=\"keyword\">new</span> ManiphestEditEngine())</span><br><span class=\"line\"> -&gt;setViewer($viewer)</span><br><span class=\"line\"> -&gt;loadObjectFields($task);</span><br></pre></td></tr></table></figure>\n<p>其中的 loadObjectFields 方法定义在 ManiphestEditEngine 的父类 PhabricatorEditEngine 中,具体如下</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * 获取对象的所有字段对象(PhabricatorCustomFieldEditField)</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * author ck</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * <span class=\"doctag\">@param</span> $object</span><br><span class=\"line\"> * <span class=\"doctag\">@return</span> array|dict</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadObjectFields</span><span class=\"params\">($object)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">$this</span>-&gt;loadDefaultConfiguration();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;buildEditFields($object);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考加载编辑任务的流程\"><a href=\"#参考加载编辑任务的流程\" class=\"headerlink\" title=\"参考加载编辑任务的流程\"></a>参考加载编辑任务的流程</h2><p>这里获取到任务对象 $task 所有的字段,具体参考到了点击编辑任务到加载一个任务的编辑页面的流程,具体如下</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ManiphestTaskEditController</span><br><span class=\"line\">\tManiphestEditEngine</span><br><span class=\"line\">\t\textends PhabricatorEditEngine -&gt; buildResponse -&gt; buildEditResponse -&gt; buildEditFields</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>其中 buildEditFields 方法可以拿到一个任务对象的所有字段,包括自定义字段        </p>\n</li>\n<li><p>其中 buildResponse 方法中根据从请求对象 $request 中获取一个 $task 对象的id 获取了一个 $task 对象</p>\n</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$capabilities = <span class=\"keyword\">array</span>();</span><br><span class=\"line\">...</span><br><span class=\"line\">$id = $request-&gt;getURIData(<span class=\"string\">'id'</span>);</span><br><span class=\"line\">....</span><br><span class=\"line\">$object = <span class=\"keyword\">$this</span>-&gt;newObjectFromID($id, $capabilities);</span><br></pre></td></tr></table></figure>\n<h2 id=\"最终的效果\"><a href=\"#最终的效果\" class=\"headerlink\" title=\"最终的效果\"></a>最终的效果</h2><p><img src=\"http://7xt8a6.com1.z0.glb.clouddn.com/workboard-1.PNG\" alt=\"workboard-date\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>通过做这个需求，了解了 Phabricator 如下的技术细节</p>\n<ul>\n<li>workboard 的渲染过程</li>\n<li>PhabricatorEditEngine 加载一个对象的过程</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"需求背景\"><a href=\"#需求背景\" class=\"headerlink\" title=\"需求背景\"></a>需求背景</h2><p>在 Phabricator workborad 的卡片上需要显示更多的信息,比如任务的开始和结束时间等等.</p>\n<h2 id=\"workboard-的渲染过程\"><a href=\"#workboard-的渲染过程\" class=\"headerlink\" title=\"workboard 的渲染过程\"></a>workboard 的渲染过程</h2><p>根据项目 workboard 的访问路径 <code>http://test.pha.com/project/board/9/</code> 和 PhabricatorProjectApplication 中定义的路由规则,可以找到 workboard 对应的 Controller 为 PhabricatorProjectBoardViewController. </p>\n<p>由此找到具体渲染 workboard 上卡片的具体过程如下</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PhabricatorProjectBoardViewController <span class=\"number\">362</span></span><br><span class=\"line\">\tPhabricatorBoardRenderingEngine -&gt;renderCard <span class=\"number\">56</span></span><br><span class=\"line\">\t\tProjectBoardTaskCard -&gt;getItem</span><br></pre></td></tr></table></figure>\n<p>在 getItem 方法中可以发现每个 workboard 卡片对应一个 PHUIObjectItemView 对象</p>\n<h2 id=\"具体的修改\"><a href=\"#具体的修改\" class=\"headerlink\" title=\"具体的修改\"></a>具体的修改</h2><p>其中 getItem 方法对应的修改如下</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getItem</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    $task = <span class=\"keyword\">$this</span>-&gt;getTask();</span><br><span class=\"line\">    $owner = <span class=\"keyword\">$this</span>-&gt;getOwner();</span><br><span class=\"line\">    $can_edit = <span class=\"keyword\">$this</span>-&gt;getCanEdit();</span><br><span class=\"line\">    $viewer = <span class=\"keyword\">$this</span>-&gt;getViewer();</span><br><span class=\"line\"></span><br><span class=\"line\">    $color_map = ManiphestTaskPriority::getColorMap();</span><br><span class=\"line\">    $bar_color = idx($color_map, $task-&gt;getPriority(), <span class=\"string\">'grey'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取每个任务对象的完整字段</span></span><br><span class=\"line\">    $maniphest_fields = id(<span class=\"keyword\">new</span> ManiphestEditEngine())</span><br><span class=\"line\">     -&gt;setViewer($viewer)</span><br><span class=\"line\">     -&gt;loadObjectFields($task);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 获取每个任务对象的自定义字段的 开始时间 和 结束时间</span></span><br><span class=\"line\">    $start_date = <span class=\"string\">''</span>;</span><br><span class=\"line\">    $end_date = <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"keyword\">foreach</span> ($maniphest_fields <span class=\"keyword\">as</span> $key =&gt; $field) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (strstr($key, <span class=\"string\">'start date'</span>)) &#123;</span><br><span class=\"line\">        $start_date = $field-&gt;getValueForDefaults();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (strstr($key, <span class=\"string\">'finish-date'</span>)) &#123;</span><br><span class=\"line\">        $end_date = $field-&gt;getValueForDefaults();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    $start = <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($start_date !== <span class=\"string\">''</span>) &#123;</span><br><span class=\"line\">      $start = date(<span class=\"string\">\"m-d H:i\"</span>, $start_date);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    $end = <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($end_date !== <span class=\"string\">''</span>) &#123;</span><br><span class=\"line\">      $end = date(<span class=\"string\">\"m-d H:i\"</span>, $end_date);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    $card = id(<span class=\"keyword\">new</span> PHUIObjectItemView())</span><br><span class=\"line\">      -&gt;setObject($task)</span><br><span class=\"line\">      -&gt;setUser($viewer)</span><br><span class=\"line\">      -&gt;setObjectName(<span class=\"string\">'T'</span>.$task-&gt;getID())</span><br><span class=\"line\">      -&gt;setHeader($task-&gt;getTitle().<span class=\"string\">' '</span>.$start.<span class=\"string\">'-'</span>.$end)</span><br><span class=\"line\">      -&gt;setGrippable($can_edit)</span><br><span class=\"line\">      -&gt;setHref(<span class=\"string\">'/T'</span>.$task-&gt;getID())</span><br><span class=\"line\">      -&gt;addSigil(<span class=\"string\">'project-card'</span>)</span><br><span class=\"line\">      -&gt;setDisabled($task-&gt;isClosed())</span><br><span class=\"line\">      -&gt;addAction(</span><br><span class=\"line\">        id(<span class=\"keyword\">new</span> PHUIListItemView())</span><br><span class=\"line\">        -&gt;setName(pht(<span class=\"string\">'Edit'</span>))</span><br><span class=\"line\">        -&gt;setIcon(<span class=\"string\">'fa-pencil'</span>)</span><br><span class=\"line\">        -&gt;addSigil(<span class=\"string\">'edit-project-card'</span>)</span><br><span class=\"line\">        -&gt;setHref(<span class=\"string\">'/maniphest/task/edit/'</span>.$task-&gt;getID().<span class=\"string\">'/'</span>))</span><br><span class=\"line\">      -&gt;setBarColor($bar_color);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($owner) &#123;</span><br><span class=\"line\">      $card-&gt;addHandleIcon($owner, $owner-&gt;getName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    $cover_file = <span class=\"keyword\">$this</span>-&gt;getCoverImageFile();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($cover_file) &#123;</span><br><span class=\"line\">      $card-&gt;setCoverImage($cover_file-&gt;getBestURI());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ManiphestTaskPoints::getIsEnabled()) &#123;</span><br><span class=\"line\">      $points = $task-&gt;getPoints();</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ($points !== <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        $points_tag = id(<span class=\"keyword\">new</span> PHUITagView())</span><br><span class=\"line\">          -&gt;setType(PHUITagView::TYPE_SHADE)</span><br><span class=\"line\">          -&gt;setColor(PHUITagView::COLOR_GREY)</span><br><span class=\"line\">          -&gt;setSlimShady(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">          -&gt;setName($points)</span><br><span class=\"line\">          -&gt;addClass(<span class=\"string\">'phui-workcard-points'</span>);</span><br><span class=\"line\">        $card-&gt;addAttribute($points_tag);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    $subtype = $task-&gt;newSubtypeObject();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($subtype &amp;&amp; $subtype-&gt;hasTagView()) &#123;</span><br><span class=\"line\">      $subtype_tag = $subtype-&gt;newTagView()</span><br><span class=\"line\">        -&gt;setSlimShady(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">      $card-&gt;addAttribute($subtype_tag);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($task-&gt;isClosed()) &#123;</span><br><span class=\"line\">      $icon = ManiphestTaskStatus::getStatusIcon($task-&gt;getStatus());</span><br><span class=\"line\">      $icon = id(<span class=\"keyword\">new</span> PHUIIconView())</span><br><span class=\"line\">        -&gt;setIcon($icon.<span class=\"string\">' grey'</span>);</span><br><span class=\"line\">      $card-&gt;addAttribute($icon);</span><br><span class=\"line\">      $card-&gt;setBarColor(<span class=\"string\">'grey'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    $project_handles = <span class=\"keyword\">$this</span>-&gt;getProjectHandles();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Remove any archived projects from the list.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($project_handles) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">foreach</span> ($project_handles <span class=\"keyword\">as</span> $key =&gt; $handle) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($handle-&gt;getStatus() == PhabricatorObjectHandle::STATUS_CLOSED) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">unset</span>($project_handles[$key]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($project_handles) &#123;</span><br><span class=\"line\">      $project_handles = array_reverse($project_handles);</span><br><span class=\"line\">      $tag_list = id(<span class=\"keyword\">new</span> PHUIHandleTagListView())</span><br><span class=\"line\">        -&gt;setSlim(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">        -&gt;setHandles($project_handles);</span><br><span class=\"line\">      $card-&gt;addAttribute($tag_list);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    $card-&gt;addClass(<span class=\"string\">'phui-workcard'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> $card;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>上面方法中的 $task 由于默认没有自定义字段,并且开始时间和结束时间是定义在自定义字段中的,这里通过如下方式获取到任务对象 $task 的完整字段</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取每个任务对象的完整字段</span></span><br><span class=\"line\">$maniphest_fields = id(<span class=\"keyword\">new</span> ManiphestEditEngine())</span><br><span class=\"line\"> -&gt;setViewer($viewer)</span><br><span class=\"line\"> -&gt;loadObjectFields($task);</span><br></pre></td></tr></table></figure>\n<p>其中的 loadObjectFields 方法定义在 ManiphestEditEngine 的父类 PhabricatorEditEngine 中,具体如下</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * 获取对象的所有字段对象(PhabricatorCustomFieldEditField)</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * author ck</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * <span class=\"doctag\">@param</span> $object</span><br><span class=\"line\"> * <span class=\"doctag\">@return</span> array|dict</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadObjectFields</span><span class=\"params\">($object)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">$this</span>-&gt;loadDefaultConfiguration();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;buildEditFields($object);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考加载编辑任务的流程\"><a href=\"#参考加载编辑任务的流程\" class=\"headerlink\" title=\"参考加载编辑任务的流程\"></a>参考加载编辑任务的流程</h2><p>这里获取到任务对象 $task 所有的字段,具体参考到了点击编辑任务到加载一个任务的编辑页面的流程,具体如下</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ManiphestTaskEditController</span><br><span class=\"line\">\tManiphestEditEngine</span><br><span class=\"line\">\t\textends PhabricatorEditEngine -&gt; buildResponse -&gt; buildEditResponse -&gt; buildEditFields</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>其中 buildEditFields 方法可以拿到一个任务对象的所有字段,包括自定义字段        </p>\n</li>\n<li><p>其中 buildResponse 方法中根据从请求对象 $request 中获取一个 $task 对象的id 获取了一个 $task 对象</p>\n</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$capabilities = <span class=\"keyword\">array</span>();</span><br><span class=\"line\">...</span><br><span class=\"line\">$id = $request-&gt;getURIData(<span class=\"string\">'id'</span>);</span><br><span class=\"line\">....</span><br><span class=\"line\">$object = <span class=\"keyword\">$this</span>-&gt;newObjectFromID($id, $capabilities);</span><br></pre></td></tr></table></figure>\n<h2 id=\"最终的效果\"><a href=\"#最终的效果\" class=\"headerlink\" title=\"最终的效果\"></a>最终的效果</h2><p><img src=\"http://7xt8a6.com1.z0.glb.clouddn.com/workboard-1.PNG\" alt=\"workboard-date\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>通过做这个需求，了解了 Phabricator 如下的技术细节</p>\n<ul>\n<li>workboard 的渲染过程</li>\n<li>PhabricatorEditEngine 加载一个对象的过程</li>\n</ul>\n"},{"title":"在 Phabricator 项目列表中增加任务数和最新任务的链接","title_url":"Phabricator-list-item-task","date":"2017-07-24T16:00:00.000Z","description":"在 Phabricator 项目列表中增加任务数和最新任务的链接","_content":"\n\n## 需求背景\n\n在 Phabricator 项目和任务之间的衔接并不连贯,根据反馈需要在项目列表中增加显示任务数和最新任务的链接.\n\n## Controller 间的跳转\n\n根据 PhabricatorProjectApplication 中的路由配置,当访问默认的项目列表具体的 Controller 就是 PhabricatorProjectListController\n\nPhabricatorProjectListController 中 handleRequest 方法如下\n\n```php\n  public function handleRequest(AphrontRequest $request) {\n    return id(new PhabricatorProjectSearchEngine())\n      ->setController($this)\n      ->buildResponse();\n  }\n```\n\n- 找到对应 PhabricatorProjectSearchEngine 的 buildResponse 方法如下\n\n```php\n  public function buildResponse() {\n    $controller = $this->getController();\n    $request = $controller->getRequest();\n\n    $search = id(new PhabricatorApplicationSearchController())\n      ->setQueryKey($request->getURIData('queryKey'))\n      ->setSearchEngine($this);\n\n    return $controller->delegateToController($search);\n  }\n```\n\n其中 delegateToController 方法是由 AphrontController 定义的,具体的继承关系如下\n\n```\nPhabricatorProjectListController\n\textends PhabricatorProjectController\n\t\textends PhabricatorController\n\t\t\textends AphrontController\n```\n\ndelegateToController 方法具体定义如下\n\n```php\n  final public function delegateToController(AphrontController $controller) {\n    $request = $this->getRequest();\n\n    $controller->setDelegatingController($this);\n    $controller->setRequest($request);\n\n    $application = $this->getCurrentApplication();\n    if ($application) {\n      $controller->setCurrentApplication($application);\n    }\n\n    return $controller->handleRequest($request);\n  }\n```\n\n- 其中传入的 $controller 对象是 PhabricatorApplicationSearchController, 由此我们可以知道 `$controller->handleRequest($request)` 是调用 PhabricatorApplicationSearchController 中的 handleRequest 方法, \n但是 PhabricatorApplicationSearchController 中并没有 handleRequest 方法, 说明调用的是 AphrontController 定义的\n\n- 其中的 handleRequest 方法具体定义如下\n\n```php\n  public function handleRequest(AphrontRequest $request) {\n    if (method_exists($this, 'processRequest')) {\n      return $this->processRequest();\n    }\n\n    throw new PhutilMethodNotImplementedException(\n      pht(\n        'Controllers must implement either %s (recommended) '.\n        'or %s (deprecated).',\n        'handleRequest()',\n        'processRequest()'));\n  }\n```\n\n其中 method_exists 方法中第一个参数表示当前对象, 第二个参数表示对象里面的方法,如果当前对象中有该方法,返回true,随后执行 processRequest 方法\n\n从上面的 Controller 继承关系中我们来一一查找下\n\t\n```php\nPhabricatorProjectListController // 没有 processRequest 方法\n\textends PhabricatorProjectController // 没有 processRequest 方法\n\t\textends PhabricatorController // 没有 processRequest 方法\n\t\t\textends AphrontController // 没有 processRequest 方法\n```\n\n发现都没有 processRequest 方法, 再来看看 PhabricatorApplicationSearchController 继承关系\n\n```php\nPhabricatorApplicationSearchController  //有 processRequest 方法\n\textends PhabricatorSearchBaseController // 没有 processRequest 方法\n\t\textends PhabricatorController // 没有 processRequest 方法\n\t\t\textends AphrontController // 没有 processRequest 方法\n```\n\n从上面的分析中可以得出的结论是 PhabricatorProjectListController 得到请求后经过 AphrontController 的 delegateToController 和 handleRequest 方法处理后最终是由 PhabricatorApplicationSearchController 的 processRequest 方法完成最终数据处理的.\n\n## 数据渲染过程\n\n在 PhabricatorApplicationSearchController 中的 processSearchRequest 方法中有如下关键的几行代码\n\n```\n$objects = $engine->executeQuery($query, $pager);\n....\n$list = $engine->renderResults($objects, $saved_query);\n.....\nif ($list->getTable()) {\n\t$box->setTable($list->getTable());\n}\n```\n\n其中 $engine 对象就是 PhabricatorProjectListController 中传入的 PhabricatorProjectSearchEngine, 这里调用了 renderResults 方法返回了一个列表数据,这些数据就是页面上展示的项目列表. PhabricatorProjectSearchEngine 的继承关系如下\n\n```php\nPhabricatorProjectSearchEngine-> // 有 renderResultList 没有 executeQuery 和 renderResults\n\textends PhabricatorApplicationSearchEngine // 有 executeQuery 和 renderResults , renderResultList 是 abstract 的,由子类实现\n```\n\n- 其中 executeQuery 用于执行具体的查询,将项目数据从数据库加载到应用中\n\n- 其中 renderResultList 具体如下,方法中的 PhabricatorProjectListView 负责将数据渲染为 HTML\n\n```php\n  protected function renderResultList(\n    array $projects,\n    PhabricatorSavedQuery $query,\n    array $handles) {\n    assert_instances_of($projects, 'PhabricatorProject');\n    $viewer = $this->requireViewer();\n\n    $list = id(new PhabricatorProjectListView())\n      ->setUser($viewer)\n      ->setProjects($projects)\n      ->setShowWatching(true)\n      ->setShowMember(true)\n      ->renderList();\n\n    return id(new PhabricatorApplicationSearchResultView())\n      ->setObjectList($list)\n      ->setNoDataString(pht('No projects found.'));\n  }\n```\n\n## 具体的修改\n\n- 下面的这个方法根据项目的 phid 获取项目对应的 Edge 对象列表, 此时的 Edge 对象中的 src 字段表示 PhabricatorProject 对象中的 phid 字段, dst 字段表示 ManiphestTask 对象中的 phid 字段\n\n- 具体位于 phabricator\\src\\infrastructure\\edges\\query\\PhabricatorEdgeQuery.php\n\n```php\n  /**\n   * 加载一组 Edge 数据\n   * @param $src_phid\n   * @param $edge_type\n   * @return mixed\n   */\n  public static function loadEdgeDatas($src_phid, $edge_type) {\n    $edges = id(new PhabricatorEdgeQuery())\n        ->withSourcePHIDs(array($src_phid))\n        ->withEdgeTypes(array($edge_type))\n        ->execute();\n\n    return $edges[$src_phid][$edge_type];\n  }\n```\n\n- PhabricatorProjectListView 对象中的 renderList 方法修改如下\n\n```php\n  public function renderList() {\n    $viewer = $this->getUser();\n    $viewer_phid = $viewer->getPHID();\n    $projects = $this->getProjects();\n\n    $handles = $viewer->loadHandles(mpull($projects, 'getPHID'));\n\n    $no_data = pht('No projects found.');\n    if ($this->noDataString) {\n      $no_data = $this->noDataString;\n    }\n\n    $list = id(new PHUIObjectItemListView())\n      ->setUser($viewer)\n      ->setNoDataString($no_data);\n\n    foreach ($projects as $key => $project) {\n      // 加载一个maniphest对象\n      $taskEdge = PhabricatorEdgeQuery::loadEdgeDatas(\n            $project->getPHID(),\n            '42',\n            '');\n\n      $task = new ManiphestTask();\n\n      $tasklink = \"\";\n      if (!empty($taskEdge)) {\n        foreach ($taskEdge as $key => $value) {\n          $taskPHID = $key;\n          $task = id(new ManiphestTask())->loadOneWhere(\"phid = '\".$key.\"'\");\n          if ($task !== null) {\n            // 任务的链接\n            $tasklink = phutil_tag(\n             'a',\n             array(\n              'href' => \"/T\".$task->getID(),\n              'class' => 'phui-oi-link',\n              'title' => $task->getTitle(),\n             ),\n             $task->getTitle());\n            // 这里只要最新的一个任务\n            break;\n          }\n        }\n      }\n\n      $id = $project->getID();\n\n      $icon = $project->getDisplayIconIcon();\n      $icon_icon = id(new PHUIIconView())\n        ->setIcon($icon);\n\n      $icon_name = $project->getDisplayIconName();\n\n      // 这里加上任务数量和最新的任务链接\n      $item = id(new PHUIObjectItemView())\n        ->setHeader($project->getName())\n        ->setHref(\"/project/view/{$id}/\")\n        ->setImageURI($project->getProfileImageURI())\n        ->addAttribute(\n          array(\n            $icon_icon,\n            ' ',\n            $icon_name,\n            ' ',\n            count($taskEdge),\n            ' ',\n            $tasklink,\n          ));\n\n      if ($project->getStatus() == PhabricatorProjectStatus::STATUS_ARCHIVED) {\n        $item->addIcon('fa-ban', pht('Archived'));\n        $item->setDisabled(true);\n      }\n\n      if ($this->showMember) {\n        $is_member = $project->isUserMember($viewer_phid);\n        if ($is_member) {\n          $item->addIcon('fa-user', pht('Member'));\n        }\n      }\n\n      if ($this->showWatching) {\n        $is_watcher = $project->isUserWatcher($viewer_phid);\n        if ($is_watcher) {\n          $item->addIcon('fa-eye', pht('Watching'));\n        }\n      }\n\n      $list->addItem($item);\n    }\n\n    return $list;\n  }\n```\n\n## 最终的效果\n\n![project-maniphest](http://7xt8a6.com1.z0.glb.clouddn.com/project-1.PNG)\n\n## 总结\n\n通过做这个需求，了解了 Phabricator 如下的技术细节\n\n- Controller 间的流转细节\n- 每个应用之间通过 Edge 进行关系连接，一对一，一对多的关系\n- 列表页面的渲染","source":"_posts/在 Phabricator 项目列表中增加任务数和最新任务的链接.md","raw":"---\ntitle: 在 Phabricator 项目列表中增加任务数和最新任务的链接\ntitle_url: Phabricator-list-item-task\ndate: 2017-07-25\ntags: Phabricator\ncategories: [Phabricator,PHP]\ndescription: 在 Phabricator 项目列表中增加任务数和最新任务的链接\n---\n\n\n## 需求背景\n\n在 Phabricator 项目和任务之间的衔接并不连贯,根据反馈需要在项目列表中增加显示任务数和最新任务的链接.\n\n## Controller 间的跳转\n\n根据 PhabricatorProjectApplication 中的路由配置,当访问默认的项目列表具体的 Controller 就是 PhabricatorProjectListController\n\nPhabricatorProjectListController 中 handleRequest 方法如下\n\n```php\n  public function handleRequest(AphrontRequest $request) {\n    return id(new PhabricatorProjectSearchEngine())\n      ->setController($this)\n      ->buildResponse();\n  }\n```\n\n- 找到对应 PhabricatorProjectSearchEngine 的 buildResponse 方法如下\n\n```php\n  public function buildResponse() {\n    $controller = $this->getController();\n    $request = $controller->getRequest();\n\n    $search = id(new PhabricatorApplicationSearchController())\n      ->setQueryKey($request->getURIData('queryKey'))\n      ->setSearchEngine($this);\n\n    return $controller->delegateToController($search);\n  }\n```\n\n其中 delegateToController 方法是由 AphrontController 定义的,具体的继承关系如下\n\n```\nPhabricatorProjectListController\n\textends PhabricatorProjectController\n\t\textends PhabricatorController\n\t\t\textends AphrontController\n```\n\ndelegateToController 方法具体定义如下\n\n```php\n  final public function delegateToController(AphrontController $controller) {\n    $request = $this->getRequest();\n\n    $controller->setDelegatingController($this);\n    $controller->setRequest($request);\n\n    $application = $this->getCurrentApplication();\n    if ($application) {\n      $controller->setCurrentApplication($application);\n    }\n\n    return $controller->handleRequest($request);\n  }\n```\n\n- 其中传入的 $controller 对象是 PhabricatorApplicationSearchController, 由此我们可以知道 `$controller->handleRequest($request)` 是调用 PhabricatorApplicationSearchController 中的 handleRequest 方法, \n但是 PhabricatorApplicationSearchController 中并没有 handleRequest 方法, 说明调用的是 AphrontController 定义的\n\n- 其中的 handleRequest 方法具体定义如下\n\n```php\n  public function handleRequest(AphrontRequest $request) {\n    if (method_exists($this, 'processRequest')) {\n      return $this->processRequest();\n    }\n\n    throw new PhutilMethodNotImplementedException(\n      pht(\n        'Controllers must implement either %s (recommended) '.\n        'or %s (deprecated).',\n        'handleRequest()',\n        'processRequest()'));\n  }\n```\n\n其中 method_exists 方法中第一个参数表示当前对象, 第二个参数表示对象里面的方法,如果当前对象中有该方法,返回true,随后执行 processRequest 方法\n\n从上面的 Controller 继承关系中我们来一一查找下\n\t\n```php\nPhabricatorProjectListController // 没有 processRequest 方法\n\textends PhabricatorProjectController // 没有 processRequest 方法\n\t\textends PhabricatorController // 没有 processRequest 方法\n\t\t\textends AphrontController // 没有 processRequest 方法\n```\n\n发现都没有 processRequest 方法, 再来看看 PhabricatorApplicationSearchController 继承关系\n\n```php\nPhabricatorApplicationSearchController  //有 processRequest 方法\n\textends PhabricatorSearchBaseController // 没有 processRequest 方法\n\t\textends PhabricatorController // 没有 processRequest 方法\n\t\t\textends AphrontController // 没有 processRequest 方法\n```\n\n从上面的分析中可以得出的结论是 PhabricatorProjectListController 得到请求后经过 AphrontController 的 delegateToController 和 handleRequest 方法处理后最终是由 PhabricatorApplicationSearchController 的 processRequest 方法完成最终数据处理的.\n\n## 数据渲染过程\n\n在 PhabricatorApplicationSearchController 中的 processSearchRequest 方法中有如下关键的几行代码\n\n```\n$objects = $engine->executeQuery($query, $pager);\n....\n$list = $engine->renderResults($objects, $saved_query);\n.....\nif ($list->getTable()) {\n\t$box->setTable($list->getTable());\n}\n```\n\n其中 $engine 对象就是 PhabricatorProjectListController 中传入的 PhabricatorProjectSearchEngine, 这里调用了 renderResults 方法返回了一个列表数据,这些数据就是页面上展示的项目列表. PhabricatorProjectSearchEngine 的继承关系如下\n\n```php\nPhabricatorProjectSearchEngine-> // 有 renderResultList 没有 executeQuery 和 renderResults\n\textends PhabricatorApplicationSearchEngine // 有 executeQuery 和 renderResults , renderResultList 是 abstract 的,由子类实现\n```\n\n- 其中 executeQuery 用于执行具体的查询,将项目数据从数据库加载到应用中\n\n- 其中 renderResultList 具体如下,方法中的 PhabricatorProjectListView 负责将数据渲染为 HTML\n\n```php\n  protected function renderResultList(\n    array $projects,\n    PhabricatorSavedQuery $query,\n    array $handles) {\n    assert_instances_of($projects, 'PhabricatorProject');\n    $viewer = $this->requireViewer();\n\n    $list = id(new PhabricatorProjectListView())\n      ->setUser($viewer)\n      ->setProjects($projects)\n      ->setShowWatching(true)\n      ->setShowMember(true)\n      ->renderList();\n\n    return id(new PhabricatorApplicationSearchResultView())\n      ->setObjectList($list)\n      ->setNoDataString(pht('No projects found.'));\n  }\n```\n\n## 具体的修改\n\n- 下面的这个方法根据项目的 phid 获取项目对应的 Edge 对象列表, 此时的 Edge 对象中的 src 字段表示 PhabricatorProject 对象中的 phid 字段, dst 字段表示 ManiphestTask 对象中的 phid 字段\n\n- 具体位于 phabricator\\src\\infrastructure\\edges\\query\\PhabricatorEdgeQuery.php\n\n```php\n  /**\n   * 加载一组 Edge 数据\n   * @param $src_phid\n   * @param $edge_type\n   * @return mixed\n   */\n  public static function loadEdgeDatas($src_phid, $edge_type) {\n    $edges = id(new PhabricatorEdgeQuery())\n        ->withSourcePHIDs(array($src_phid))\n        ->withEdgeTypes(array($edge_type))\n        ->execute();\n\n    return $edges[$src_phid][$edge_type];\n  }\n```\n\n- PhabricatorProjectListView 对象中的 renderList 方法修改如下\n\n```php\n  public function renderList() {\n    $viewer = $this->getUser();\n    $viewer_phid = $viewer->getPHID();\n    $projects = $this->getProjects();\n\n    $handles = $viewer->loadHandles(mpull($projects, 'getPHID'));\n\n    $no_data = pht('No projects found.');\n    if ($this->noDataString) {\n      $no_data = $this->noDataString;\n    }\n\n    $list = id(new PHUIObjectItemListView())\n      ->setUser($viewer)\n      ->setNoDataString($no_data);\n\n    foreach ($projects as $key => $project) {\n      // 加载一个maniphest对象\n      $taskEdge = PhabricatorEdgeQuery::loadEdgeDatas(\n            $project->getPHID(),\n            '42',\n            '');\n\n      $task = new ManiphestTask();\n\n      $tasklink = \"\";\n      if (!empty($taskEdge)) {\n        foreach ($taskEdge as $key => $value) {\n          $taskPHID = $key;\n          $task = id(new ManiphestTask())->loadOneWhere(\"phid = '\".$key.\"'\");\n          if ($task !== null) {\n            // 任务的链接\n            $tasklink = phutil_tag(\n             'a',\n             array(\n              'href' => \"/T\".$task->getID(),\n              'class' => 'phui-oi-link',\n              'title' => $task->getTitle(),\n             ),\n             $task->getTitle());\n            // 这里只要最新的一个任务\n            break;\n          }\n        }\n      }\n\n      $id = $project->getID();\n\n      $icon = $project->getDisplayIconIcon();\n      $icon_icon = id(new PHUIIconView())\n        ->setIcon($icon);\n\n      $icon_name = $project->getDisplayIconName();\n\n      // 这里加上任务数量和最新的任务链接\n      $item = id(new PHUIObjectItemView())\n        ->setHeader($project->getName())\n        ->setHref(\"/project/view/{$id}/\")\n        ->setImageURI($project->getProfileImageURI())\n        ->addAttribute(\n          array(\n            $icon_icon,\n            ' ',\n            $icon_name,\n            ' ',\n            count($taskEdge),\n            ' ',\n            $tasklink,\n          ));\n\n      if ($project->getStatus() == PhabricatorProjectStatus::STATUS_ARCHIVED) {\n        $item->addIcon('fa-ban', pht('Archived'));\n        $item->setDisabled(true);\n      }\n\n      if ($this->showMember) {\n        $is_member = $project->isUserMember($viewer_phid);\n        if ($is_member) {\n          $item->addIcon('fa-user', pht('Member'));\n        }\n      }\n\n      if ($this->showWatching) {\n        $is_watcher = $project->isUserWatcher($viewer_phid);\n        if ($is_watcher) {\n          $item->addIcon('fa-eye', pht('Watching'));\n        }\n      }\n\n      $list->addItem($item);\n    }\n\n    return $list;\n  }\n```\n\n## 最终的效果\n\n![project-maniphest](http://7xt8a6.com1.z0.glb.clouddn.com/project-1.PNG)\n\n## 总结\n\n通过做这个需求，了解了 Phabricator 如下的技术细节\n\n- Controller 间的流转细节\n- 每个应用之间通过 Edge 进行关系连接，一对一，一对多的关系\n- 列表页面的渲染","slug":"在 Phabricator 项目列表中增加任务数和最新任务的链接","published":1,"updated":"2017-07-25T00:59:37.189Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfto0q8y001w18c7svark7tj","content":"<h2 id=\"需求背景\"><a href=\"#需求背景\" class=\"headerlink\" title=\"需求背景\"></a>需求背景</h2><p>在 Phabricator 项目和任务之间的衔接并不连贯,根据反馈需要在项目列表中增加显示任务数和最新任务的链接.</p>\n<h2 id=\"Controller-间的跳转\"><a href=\"#Controller-间的跳转\" class=\"headerlink\" title=\"Controller 间的跳转\"></a>Controller 间的跳转</h2><p>根据 PhabricatorProjectApplication 中的路由配置,当访问默认的项目列表具体的 Controller 就是 PhabricatorProjectListController</p>\n<p>PhabricatorProjectListController 中 handleRequest 方法如下</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handleRequest</span><span class=\"params\">(AphrontRequest $request)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> id(<span class=\"keyword\">new</span> PhabricatorProjectSearchEngine())</span><br><span class=\"line\">    -&gt;setController(<span class=\"keyword\">$this</span>)</span><br><span class=\"line\">    -&gt;buildResponse();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>找到对应 PhabricatorProjectSearchEngine 的 buildResponse 方法如下</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">buildResponse</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  $controller = <span class=\"keyword\">$this</span>-&gt;getController();</span><br><span class=\"line\">  $request = $controller-&gt;getRequest();</span><br><span class=\"line\"></span><br><span class=\"line\">  $search = id(<span class=\"keyword\">new</span> PhabricatorApplicationSearchController())</span><br><span class=\"line\">    -&gt;setQueryKey($request-&gt;getURIData(<span class=\"string\">'queryKey'</span>))</span><br><span class=\"line\">    -&gt;setSearchEngine(<span class=\"keyword\">$this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> $controller-&gt;delegateToController($search);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中 delegateToController 方法是由 AphrontController 定义的,具体的继承关系如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PhabricatorProjectListController</span><br><span class=\"line\">\textends PhabricatorProjectController</span><br><span class=\"line\">\t\textends PhabricatorController</span><br><span class=\"line\">\t\t\textends AphrontController</span><br></pre></td></tr></table></figure>\n<p>delegateToController 方法具体定义如下</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">delegateToController</span><span class=\"params\">(AphrontController $controller)</span> </span>&#123;</span><br><span class=\"line\">  $request = <span class=\"keyword\">$this</span>-&gt;getRequest();</span><br><span class=\"line\"></span><br><span class=\"line\">  $controller-&gt;setDelegatingController(<span class=\"keyword\">$this</span>);</span><br><span class=\"line\">  $controller-&gt;setRequest($request);</span><br><span class=\"line\"></span><br><span class=\"line\">  $application = <span class=\"keyword\">$this</span>-&gt;getCurrentApplication();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ($application) &#123;</span><br><span class=\"line\">    $controller-&gt;setCurrentApplication($application);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> $controller-&gt;handleRequest($request);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>其中传入的 $controller 对象是 PhabricatorApplicationSearchController, 由此我们可以知道 <code>$controller-&gt;handleRequest($request)</code> 是调用 PhabricatorApplicationSearchController 中的 handleRequest 方法,<br>但是 PhabricatorApplicationSearchController 中并没有 handleRequest 方法, 说明调用的是 AphrontController 定义的</p>\n</li>\n<li><p>其中的 handleRequest 方法具体定义如下</p>\n</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handleRequest</span><span class=\"params\">(AphrontRequest $request)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (method_exists(<span class=\"keyword\">$this</span>, <span class=\"string\">'processRequest'</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;processRequest();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> PhutilMethodNotImplementedException(</span><br><span class=\"line\">    pht(</span><br><span class=\"line\">      <span class=\"string\">'Controllers must implement either %s (recommended) '</span>.</span><br><span class=\"line\">      <span class=\"string\">'or %s (deprecated).'</span>,</span><br><span class=\"line\">      <span class=\"string\">'handleRequest()'</span>,</span><br><span class=\"line\">      <span class=\"string\">'processRequest()'</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中 method_exists 方法中第一个参数表示当前对象, 第二个参数表示对象里面的方法,如果当前对象中有该方法,返回true,随后执行 processRequest 方法</p>\n<p>从上面的 Controller 继承关系中我们来一一查找下</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PhabricatorProjectListController <span class=\"comment\">// 没有 processRequest 方法</span></span><br><span class=\"line\">\textends PhabricatorProjectController <span class=\"comment\">// 没有 processRequest 方法</span></span><br><span class=\"line\">\t\textends PhabricatorController <span class=\"comment\">// 没有 processRequest 方法</span></span><br><span class=\"line\">\t\t\textends AphrontController <span class=\"comment\">// 没有 processRequest 方法</span></span><br></pre></td></tr></table></figure>\n<p>发现都没有 processRequest 方法, 再来看看 PhabricatorApplicationSearchController 继承关系</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PhabricatorApplicationSearchController  <span class=\"comment\">//有 processRequest 方法</span></span><br><span class=\"line\">\textends PhabricatorSearchBaseController <span class=\"comment\">// 没有 processRequest 方法</span></span><br><span class=\"line\">\t\textends PhabricatorController <span class=\"comment\">// 没有 processRequest 方法</span></span><br><span class=\"line\">\t\t\textends AphrontController <span class=\"comment\">// 没有 processRequest 方法</span></span><br></pre></td></tr></table></figure>\n<p>从上面的分析中可以得出的结论是 PhabricatorProjectListController 得到请求后经过 AphrontController 的 delegateToController 和 handleRequest 方法处理后最终是由 PhabricatorApplicationSearchController 的 processRequest 方法完成最终数据处理的.</p>\n<h2 id=\"数据渲染过程\"><a href=\"#数据渲染过程\" class=\"headerlink\" title=\"数据渲染过程\"></a>数据渲染过程</h2><p>在 PhabricatorApplicationSearchController 中的 processSearchRequest 方法中有如下关键的几行代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$objects = $engine-&gt;executeQuery($query, $pager);</span><br><span class=\"line\">....</span><br><span class=\"line\">$list = $engine-&gt;renderResults($objects, $saved_query);</span><br><span class=\"line\">.....</span><br><span class=\"line\">if ($list-&gt;getTable()) &#123;</span><br><span class=\"line\">\t$box-&gt;setTable($list-&gt;getTable());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中 $engine 对象就是 PhabricatorProjectListController 中传入的 PhabricatorProjectSearchEngine, 这里调用了 renderResults 方法返回了一个列表数据,这些数据就是页面上展示的项目列表. PhabricatorProjectSearchEngine 的继承关系如下</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PhabricatorProjectSearchEngine-&gt; <span class=\"comment\">// 有 renderResultList 没有 executeQuery 和 renderResults</span></span><br><span class=\"line\">\textends PhabricatorApplicationSearchEngine <span class=\"comment\">// 有 executeQuery 和 renderResults , renderResultList 是 abstract 的,由子类实现</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>其中 executeQuery 用于执行具体的查询,将项目数据从数据库加载到应用中</p>\n</li>\n<li><p>其中 renderResultList 具体如下,方法中的 PhabricatorProjectListView 负责将数据渲染为 HTML</p>\n</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">renderResultList</span><span class=\"params\">(</span><br><span class=\"line\">  array $projects,</span><br><span class=\"line\">  PhabricatorSavedQuery $query,</span><br><span class=\"line\">  array $handles)</span> </span>&#123;</span><br><span class=\"line\">  assert_instances_of($projects, <span class=\"string\">'PhabricatorProject'</span>);</span><br><span class=\"line\">  $viewer = <span class=\"keyword\">$this</span>-&gt;requireViewer();</span><br><span class=\"line\"></span><br><span class=\"line\">  $list = id(<span class=\"keyword\">new</span> PhabricatorProjectListView())</span><br><span class=\"line\">    -&gt;setUser($viewer)</span><br><span class=\"line\">    -&gt;setProjects($projects)</span><br><span class=\"line\">    -&gt;setShowWatching(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">    -&gt;setShowMember(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">    -&gt;renderList();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> id(<span class=\"keyword\">new</span> PhabricatorApplicationSearchResultView())</span><br><span class=\"line\">    -&gt;setObjectList($list)</span><br><span class=\"line\">    -&gt;setNoDataString(pht(<span class=\"string\">'No projects found.'</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"具体的修改\"><a href=\"#具体的修改\" class=\"headerlink\" title=\"具体的修改\"></a>具体的修改</h2><ul>\n<li><p>下面的这个方法根据项目的 phid 获取项目对应的 Edge 对象列表, 此时的 Edge 对象中的 src 字段表示 PhabricatorProject 对象中的 phid 字段, dst 字段表示 ManiphestTask 对象中的 phid 字段</p>\n</li>\n<li><p>具体位于 phabricator\\src\\infrastructure\\edges\\query\\PhabricatorEdgeQuery.php</p>\n</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * 加载一组 Edge 数据</span><br><span class=\"line\"> * <span class=\"doctag\">@param</span> $src_phid</span><br><span class=\"line\"> * <span class=\"doctag\">@param</span> $edge_type</span><br><span class=\"line\"> * <span class=\"doctag\">@return</span> mixed</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadEdgeDatas</span><span class=\"params\">($src_phid, $edge_type)</span> </span>&#123;</span><br><span class=\"line\">  $edges = id(<span class=\"keyword\">new</span> PhabricatorEdgeQuery())</span><br><span class=\"line\">      -&gt;withSourcePHIDs(<span class=\"keyword\">array</span>($src_phid))</span><br><span class=\"line\">      -&gt;withEdgeTypes(<span class=\"keyword\">array</span>($edge_type))</span><br><span class=\"line\">      -&gt;execute();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> $edges[$src_phid][$edge_type];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>PhabricatorProjectListView 对象中的 renderList 方法修改如下</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">renderList</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  $viewer = <span class=\"keyword\">$this</span>-&gt;getUser();</span><br><span class=\"line\">  $viewer_phid = $viewer-&gt;getPHID();</span><br><span class=\"line\">  $projects = <span class=\"keyword\">$this</span>-&gt;getProjects();</span><br><span class=\"line\"></span><br><span class=\"line\">  $handles = $viewer-&gt;loadHandles(mpull($projects, <span class=\"string\">'getPHID'</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">  $no_data = pht(<span class=\"string\">'No projects found.'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">$this</span>-&gt;noDataString) &#123;</span><br><span class=\"line\">    $no_data = <span class=\"keyword\">$this</span>-&gt;noDataString;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  $list = id(<span class=\"keyword\">new</span> PHUIObjectItemListView())</span><br><span class=\"line\">    -&gt;setUser($viewer)</span><br><span class=\"line\">    -&gt;setNoDataString($no_data);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">foreach</span> ($projects <span class=\"keyword\">as</span> $key =&gt; $project) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 加载一个maniphest对象</span></span><br><span class=\"line\">    $taskEdge = PhabricatorEdgeQuery::loadEdgeDatas(</span><br><span class=\"line\">          $project-&gt;getPHID(),</span><br><span class=\"line\">          <span class=\"string\">'42'</span>,</span><br><span class=\"line\">          <span class=\"string\">''</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    $task = <span class=\"keyword\">new</span> ManiphestTask();</span><br><span class=\"line\"></span><br><span class=\"line\">    $tasklink = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">empty</span>($taskEdge)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">foreach</span> ($taskEdge <span class=\"keyword\">as</span> $key =&gt; $value) &#123;</span><br><span class=\"line\">        $taskPHID = $key;</span><br><span class=\"line\">        $task = id(<span class=\"keyword\">new</span> ManiphestTask())-&gt;loadOneWhere(<span class=\"string\">\"phid = '\"</span>.$key.<span class=\"string\">\"'\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($task !== <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 任务的链接</span></span><br><span class=\"line\">          $tasklink = phutil_tag(</span><br><span class=\"line\">           <span class=\"string\">'a'</span>,</span><br><span class=\"line\">           <span class=\"keyword\">array</span>(</span><br><span class=\"line\">            <span class=\"string\">'href'</span> =&gt; <span class=\"string\">\"/T\"</span>.$task-&gt;getID(),</span><br><span class=\"line\">            <span class=\"string\">'class'</span> =&gt; <span class=\"string\">'phui-oi-link'</span>,</span><br><span class=\"line\">            <span class=\"string\">'title'</span> =&gt; $task-&gt;getTitle(),</span><br><span class=\"line\">           ),</span><br><span class=\"line\">           $task-&gt;getTitle());</span><br><span class=\"line\">          <span class=\"comment\">// 这里只要最新的一个任务</span></span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    $id = $project-&gt;getID();</span><br><span class=\"line\"></span><br><span class=\"line\">    $icon = $project-&gt;getDisplayIconIcon();</span><br><span class=\"line\">    $icon_icon = id(<span class=\"keyword\">new</span> PHUIIconView())</span><br><span class=\"line\">      -&gt;setIcon($icon);</span><br><span class=\"line\"></span><br><span class=\"line\">    $icon_name = $project-&gt;getDisplayIconName();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 这里加上任务数量和最新的任务链接</span></span><br><span class=\"line\">    $item = id(<span class=\"keyword\">new</span> PHUIObjectItemView())</span><br><span class=\"line\">      -&gt;setHeader($project-&gt;getName())</span><br><span class=\"line\">      -&gt;setHref(<span class=\"string\">\"/project/view/&#123;$id&#125;/\"</span>)</span><br><span class=\"line\">      -&gt;setImageURI($project-&gt;getProfileImageURI())</span><br><span class=\"line\">      -&gt;addAttribute(</span><br><span class=\"line\">        <span class=\"keyword\">array</span>(</span><br><span class=\"line\">          $icon_icon,</span><br><span class=\"line\">          <span class=\"string\">' '</span>,</span><br><span class=\"line\">          $icon_name,</span><br><span class=\"line\">          <span class=\"string\">' '</span>,</span><br><span class=\"line\">          count($taskEdge),</span><br><span class=\"line\">          <span class=\"string\">' '</span>,</span><br><span class=\"line\">          $tasklink,</span><br><span class=\"line\">        ));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($project-&gt;getStatus() == PhabricatorProjectStatus::STATUS_ARCHIVED) &#123;</span><br><span class=\"line\">      $item-&gt;addIcon(<span class=\"string\">'fa-ban'</span>, pht(<span class=\"string\">'Archived'</span>));</span><br><span class=\"line\">      $item-&gt;setDisabled(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">$this</span>-&gt;showMember) &#123;</span><br><span class=\"line\">      $is_member = $project-&gt;isUserMember($viewer_phid);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ($is_member) &#123;</span><br><span class=\"line\">        $item-&gt;addIcon(<span class=\"string\">'fa-user'</span>, pht(<span class=\"string\">'Member'</span>));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">$this</span>-&gt;showWatching) &#123;</span><br><span class=\"line\">      $is_watcher = $project-&gt;isUserWatcher($viewer_phid);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ($is_watcher) &#123;</span><br><span class=\"line\">        $item-&gt;addIcon(<span class=\"string\">'fa-eye'</span>, pht(<span class=\"string\">'Watching'</span>));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    $list-&gt;addItem($item);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> $list;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"最终的效果\"><a href=\"#最终的效果\" class=\"headerlink\" title=\"最终的效果\"></a>最终的效果</h2><p><img src=\"http://7xt8a6.com1.z0.glb.clouddn.com/project-1.PNG\" alt=\"project-maniphest\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>通过做这个需求，了解了 Phabricator 如下的技术细节</p>\n<ul>\n<li>Controller 间的流转细节</li>\n<li>每个应用之间通过 Edge 进行关系连接，一对一，一对多的关系</li>\n<li>列表页面的渲染</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"需求背景\"><a href=\"#需求背景\" class=\"headerlink\" title=\"需求背景\"></a>需求背景</h2><p>在 Phabricator 项目和任务之间的衔接并不连贯,根据反馈需要在项目列表中增加显示任务数和最新任务的链接.</p>\n<h2 id=\"Controller-间的跳转\"><a href=\"#Controller-间的跳转\" class=\"headerlink\" title=\"Controller 间的跳转\"></a>Controller 间的跳转</h2><p>根据 PhabricatorProjectApplication 中的路由配置,当访问默认的项目列表具体的 Controller 就是 PhabricatorProjectListController</p>\n<p>PhabricatorProjectListController 中 handleRequest 方法如下</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handleRequest</span><span class=\"params\">(AphrontRequest $request)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> id(<span class=\"keyword\">new</span> PhabricatorProjectSearchEngine())</span><br><span class=\"line\">    -&gt;setController(<span class=\"keyword\">$this</span>)</span><br><span class=\"line\">    -&gt;buildResponse();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>找到对应 PhabricatorProjectSearchEngine 的 buildResponse 方法如下</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">buildResponse</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  $controller = <span class=\"keyword\">$this</span>-&gt;getController();</span><br><span class=\"line\">  $request = $controller-&gt;getRequest();</span><br><span class=\"line\"></span><br><span class=\"line\">  $search = id(<span class=\"keyword\">new</span> PhabricatorApplicationSearchController())</span><br><span class=\"line\">    -&gt;setQueryKey($request-&gt;getURIData(<span class=\"string\">'queryKey'</span>))</span><br><span class=\"line\">    -&gt;setSearchEngine(<span class=\"keyword\">$this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> $controller-&gt;delegateToController($search);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中 delegateToController 方法是由 AphrontController 定义的,具体的继承关系如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PhabricatorProjectListController</span><br><span class=\"line\">\textends PhabricatorProjectController</span><br><span class=\"line\">\t\textends PhabricatorController</span><br><span class=\"line\">\t\t\textends AphrontController</span><br></pre></td></tr></table></figure>\n<p>delegateToController 方法具体定义如下</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">delegateToController</span><span class=\"params\">(AphrontController $controller)</span> </span>&#123;</span><br><span class=\"line\">  $request = <span class=\"keyword\">$this</span>-&gt;getRequest();</span><br><span class=\"line\"></span><br><span class=\"line\">  $controller-&gt;setDelegatingController(<span class=\"keyword\">$this</span>);</span><br><span class=\"line\">  $controller-&gt;setRequest($request);</span><br><span class=\"line\"></span><br><span class=\"line\">  $application = <span class=\"keyword\">$this</span>-&gt;getCurrentApplication();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ($application) &#123;</span><br><span class=\"line\">    $controller-&gt;setCurrentApplication($application);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> $controller-&gt;handleRequest($request);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>其中传入的 $controller 对象是 PhabricatorApplicationSearchController, 由此我们可以知道 <code>$controller-&gt;handleRequest($request)</code> 是调用 PhabricatorApplicationSearchController 中的 handleRequest 方法,<br>但是 PhabricatorApplicationSearchController 中并没有 handleRequest 方法, 说明调用的是 AphrontController 定义的</p>\n</li>\n<li><p>其中的 handleRequest 方法具体定义如下</p>\n</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handleRequest</span><span class=\"params\">(AphrontRequest $request)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (method_exists(<span class=\"keyword\">$this</span>, <span class=\"string\">'processRequest'</span>)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&gt;processRequest();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> PhutilMethodNotImplementedException(</span><br><span class=\"line\">    pht(</span><br><span class=\"line\">      <span class=\"string\">'Controllers must implement either %s (recommended) '</span>.</span><br><span class=\"line\">      <span class=\"string\">'or %s (deprecated).'</span>,</span><br><span class=\"line\">      <span class=\"string\">'handleRequest()'</span>,</span><br><span class=\"line\">      <span class=\"string\">'processRequest()'</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中 method_exists 方法中第一个参数表示当前对象, 第二个参数表示对象里面的方法,如果当前对象中有该方法,返回true,随后执行 processRequest 方法</p>\n<p>从上面的 Controller 继承关系中我们来一一查找下</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PhabricatorProjectListController <span class=\"comment\">// 没有 processRequest 方法</span></span><br><span class=\"line\">\textends PhabricatorProjectController <span class=\"comment\">// 没有 processRequest 方法</span></span><br><span class=\"line\">\t\textends PhabricatorController <span class=\"comment\">// 没有 processRequest 方法</span></span><br><span class=\"line\">\t\t\textends AphrontController <span class=\"comment\">// 没有 processRequest 方法</span></span><br></pre></td></tr></table></figure>\n<p>发现都没有 processRequest 方法, 再来看看 PhabricatorApplicationSearchController 继承关系</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PhabricatorApplicationSearchController  <span class=\"comment\">//有 processRequest 方法</span></span><br><span class=\"line\">\textends PhabricatorSearchBaseController <span class=\"comment\">// 没有 processRequest 方法</span></span><br><span class=\"line\">\t\textends PhabricatorController <span class=\"comment\">// 没有 processRequest 方法</span></span><br><span class=\"line\">\t\t\textends AphrontController <span class=\"comment\">// 没有 processRequest 方法</span></span><br></pre></td></tr></table></figure>\n<p>从上面的分析中可以得出的结论是 PhabricatorProjectListController 得到请求后经过 AphrontController 的 delegateToController 和 handleRequest 方法处理后最终是由 PhabricatorApplicationSearchController 的 processRequest 方法完成最终数据处理的.</p>\n<h2 id=\"数据渲染过程\"><a href=\"#数据渲染过程\" class=\"headerlink\" title=\"数据渲染过程\"></a>数据渲染过程</h2><p>在 PhabricatorApplicationSearchController 中的 processSearchRequest 方法中有如下关键的几行代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$objects = $engine-&gt;executeQuery($query, $pager);</span><br><span class=\"line\">....</span><br><span class=\"line\">$list = $engine-&gt;renderResults($objects, $saved_query);</span><br><span class=\"line\">.....</span><br><span class=\"line\">if ($list-&gt;getTable()) &#123;</span><br><span class=\"line\">\t$box-&gt;setTable($list-&gt;getTable());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中 $engine 对象就是 PhabricatorProjectListController 中传入的 PhabricatorProjectSearchEngine, 这里调用了 renderResults 方法返回了一个列表数据,这些数据就是页面上展示的项目列表. PhabricatorProjectSearchEngine 的继承关系如下</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PhabricatorProjectSearchEngine-&gt; <span class=\"comment\">// 有 renderResultList 没有 executeQuery 和 renderResults</span></span><br><span class=\"line\">\textends PhabricatorApplicationSearchEngine <span class=\"comment\">// 有 executeQuery 和 renderResults , renderResultList 是 abstract 的,由子类实现</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>其中 executeQuery 用于执行具体的查询,将项目数据从数据库加载到应用中</p>\n</li>\n<li><p>其中 renderResultList 具体如下,方法中的 PhabricatorProjectListView 负责将数据渲染为 HTML</p>\n</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">renderResultList</span><span class=\"params\">(</span><br><span class=\"line\">  array $projects,</span><br><span class=\"line\">  PhabricatorSavedQuery $query,</span><br><span class=\"line\">  array $handles)</span> </span>&#123;</span><br><span class=\"line\">  assert_instances_of($projects, <span class=\"string\">'PhabricatorProject'</span>);</span><br><span class=\"line\">  $viewer = <span class=\"keyword\">$this</span>-&gt;requireViewer();</span><br><span class=\"line\"></span><br><span class=\"line\">  $list = id(<span class=\"keyword\">new</span> PhabricatorProjectListView())</span><br><span class=\"line\">    -&gt;setUser($viewer)</span><br><span class=\"line\">    -&gt;setProjects($projects)</span><br><span class=\"line\">    -&gt;setShowWatching(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">    -&gt;setShowMember(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">    -&gt;renderList();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> id(<span class=\"keyword\">new</span> PhabricatorApplicationSearchResultView())</span><br><span class=\"line\">    -&gt;setObjectList($list)</span><br><span class=\"line\">    -&gt;setNoDataString(pht(<span class=\"string\">'No projects found.'</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"具体的修改\"><a href=\"#具体的修改\" class=\"headerlink\" title=\"具体的修改\"></a>具体的修改</h2><ul>\n<li><p>下面的这个方法根据项目的 phid 获取项目对应的 Edge 对象列表, 此时的 Edge 对象中的 src 字段表示 PhabricatorProject 对象中的 phid 字段, dst 字段表示 ManiphestTask 对象中的 phid 字段</p>\n</li>\n<li><p>具体位于 phabricator\\src\\infrastructure\\edges\\query\\PhabricatorEdgeQuery.php</p>\n</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * 加载一组 Edge 数据</span><br><span class=\"line\"> * <span class=\"doctag\">@param</span> $src_phid</span><br><span class=\"line\"> * <span class=\"doctag\">@param</span> $edge_type</span><br><span class=\"line\"> * <span class=\"doctag\">@return</span> mixed</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadEdgeDatas</span><span class=\"params\">($src_phid, $edge_type)</span> </span>&#123;</span><br><span class=\"line\">  $edges = id(<span class=\"keyword\">new</span> PhabricatorEdgeQuery())</span><br><span class=\"line\">      -&gt;withSourcePHIDs(<span class=\"keyword\">array</span>($src_phid))</span><br><span class=\"line\">      -&gt;withEdgeTypes(<span class=\"keyword\">array</span>($edge_type))</span><br><span class=\"line\">      -&gt;execute();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> $edges[$src_phid][$edge_type];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>PhabricatorProjectListView 对象中的 renderList 方法修改如下</li>\n</ul>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">renderList</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  $viewer = <span class=\"keyword\">$this</span>-&gt;getUser();</span><br><span class=\"line\">  $viewer_phid = $viewer-&gt;getPHID();</span><br><span class=\"line\">  $projects = <span class=\"keyword\">$this</span>-&gt;getProjects();</span><br><span class=\"line\"></span><br><span class=\"line\">  $handles = $viewer-&gt;loadHandles(mpull($projects, <span class=\"string\">'getPHID'</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">  $no_data = pht(<span class=\"string\">'No projects found.'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">$this</span>-&gt;noDataString) &#123;</span><br><span class=\"line\">    $no_data = <span class=\"keyword\">$this</span>-&gt;noDataString;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  $list = id(<span class=\"keyword\">new</span> PHUIObjectItemListView())</span><br><span class=\"line\">    -&gt;setUser($viewer)</span><br><span class=\"line\">    -&gt;setNoDataString($no_data);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">foreach</span> ($projects <span class=\"keyword\">as</span> $key =&gt; $project) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 加载一个maniphest对象</span></span><br><span class=\"line\">    $taskEdge = PhabricatorEdgeQuery::loadEdgeDatas(</span><br><span class=\"line\">          $project-&gt;getPHID(),</span><br><span class=\"line\">          <span class=\"string\">'42'</span>,</span><br><span class=\"line\">          <span class=\"string\">''</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    $task = <span class=\"keyword\">new</span> ManiphestTask();</span><br><span class=\"line\"></span><br><span class=\"line\">    $tasklink = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">empty</span>($taskEdge)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">foreach</span> ($taskEdge <span class=\"keyword\">as</span> $key =&gt; $value) &#123;</span><br><span class=\"line\">        $taskPHID = $key;</span><br><span class=\"line\">        $task = id(<span class=\"keyword\">new</span> ManiphestTask())-&gt;loadOneWhere(<span class=\"string\">\"phid = '\"</span>.$key.<span class=\"string\">\"'\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($task !== <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 任务的链接</span></span><br><span class=\"line\">          $tasklink = phutil_tag(</span><br><span class=\"line\">           <span class=\"string\">'a'</span>,</span><br><span class=\"line\">           <span class=\"keyword\">array</span>(</span><br><span class=\"line\">            <span class=\"string\">'href'</span> =&gt; <span class=\"string\">\"/T\"</span>.$task-&gt;getID(),</span><br><span class=\"line\">            <span class=\"string\">'class'</span> =&gt; <span class=\"string\">'phui-oi-link'</span>,</span><br><span class=\"line\">            <span class=\"string\">'title'</span> =&gt; $task-&gt;getTitle(),</span><br><span class=\"line\">           ),</span><br><span class=\"line\">           $task-&gt;getTitle());</span><br><span class=\"line\">          <span class=\"comment\">// 这里只要最新的一个任务</span></span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    $id = $project-&gt;getID();</span><br><span class=\"line\"></span><br><span class=\"line\">    $icon = $project-&gt;getDisplayIconIcon();</span><br><span class=\"line\">    $icon_icon = id(<span class=\"keyword\">new</span> PHUIIconView())</span><br><span class=\"line\">      -&gt;setIcon($icon);</span><br><span class=\"line\"></span><br><span class=\"line\">    $icon_name = $project-&gt;getDisplayIconName();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 这里加上任务数量和最新的任务链接</span></span><br><span class=\"line\">    $item = id(<span class=\"keyword\">new</span> PHUIObjectItemView())</span><br><span class=\"line\">      -&gt;setHeader($project-&gt;getName())</span><br><span class=\"line\">      -&gt;setHref(<span class=\"string\">\"/project/view/&#123;$id&#125;/\"</span>)</span><br><span class=\"line\">      -&gt;setImageURI($project-&gt;getProfileImageURI())</span><br><span class=\"line\">      -&gt;addAttribute(</span><br><span class=\"line\">        <span class=\"keyword\">array</span>(</span><br><span class=\"line\">          $icon_icon,</span><br><span class=\"line\">          <span class=\"string\">' '</span>,</span><br><span class=\"line\">          $icon_name,</span><br><span class=\"line\">          <span class=\"string\">' '</span>,</span><br><span class=\"line\">          count($taskEdge),</span><br><span class=\"line\">          <span class=\"string\">' '</span>,</span><br><span class=\"line\">          $tasklink,</span><br><span class=\"line\">        ));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ($project-&gt;getStatus() == PhabricatorProjectStatus::STATUS_ARCHIVED) &#123;</span><br><span class=\"line\">      $item-&gt;addIcon(<span class=\"string\">'fa-ban'</span>, pht(<span class=\"string\">'Archived'</span>));</span><br><span class=\"line\">      $item-&gt;setDisabled(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">$this</span>-&gt;showMember) &#123;</span><br><span class=\"line\">      $is_member = $project-&gt;isUserMember($viewer_phid);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ($is_member) &#123;</span><br><span class=\"line\">        $item-&gt;addIcon(<span class=\"string\">'fa-user'</span>, pht(<span class=\"string\">'Member'</span>));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">$this</span>-&gt;showWatching) &#123;</span><br><span class=\"line\">      $is_watcher = $project-&gt;isUserWatcher($viewer_phid);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ($is_watcher) &#123;</span><br><span class=\"line\">        $item-&gt;addIcon(<span class=\"string\">'fa-eye'</span>, pht(<span class=\"string\">'Watching'</span>));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    $list-&gt;addItem($item);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> $list;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"最终的效果\"><a href=\"#最终的效果\" class=\"headerlink\" title=\"最终的效果\"></a>最终的效果</h2><p><img src=\"http://7xt8a6.com1.z0.glb.clouddn.com/project-1.PNG\" alt=\"project-maniphest\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>通过做这个需求，了解了 Phabricator 如下的技术细节</p>\n<ul>\n<li>Controller 间的流转细节</li>\n<li>每个应用之间通过 Edge 进行关系连接，一对一，一对多的关系</li>\n<li>列表页面的渲染</li>\n</ul>\n"},{"title":"在Junit单元测试中通过@PropertySource来获取Bean中的@Value属性值","title_url":"Spring-Junit-PropertySource-Value","date":"2016-09-29T16:00:00.000Z","description":"在Junit单元测试中通过@PropertySource来获取Bean中的@Value属性值","_content":"\n## 使用场景说明\n\n- 在平时开发的时候，为了测试Spring中的一个Bean，通常要通过`@ContextConfiguration`注解来加载一些XML配置，问题是XML配置越来越多，现在要减少甚至去除XML配置，从而简化开发\n\n- 古老的项目由于历史问题没有使用Junit来测试Bean导致现在切换过来复杂\n\n- 有时候只想在Junit中测试几个Bean\n\n- 避免加载XML配置，直接从properties文件中获取@Value属性值\n\n## 使用说明\n\n- 使用`@Configuration`注解将XML配置转换成在Bean中完成，`@PropertySource`注解用于指定properties文件\n```Java\n/**\n * 通过该类可以代替在xml中如下的配置\n * \n * \n *\t\n  \t  <bean class=\"org.springframework.context.support.PropertySourcesPlaceholderConfigurer\">\n        <property name=\"ignoreUnresolvablePlaceholders\" value=\"true\"/>\n        <property name=\"locations\">\n          <list>\n            <value>classpath:jdbc.properties</value>\n          </list>\n        </property>\n      </bean>\n * @author chen_k\n *\n */\n@Configuration\n@PropertySource(value = { \"classpath:jdbc.properties\" })\npublic class SpringPropertiesConfigure {\n\n\t@Bean\n    public static PropertySourcesPlaceholderConfigurer propertySourcesPlaceholderConfigurer() {\n        return new PropertySourcesPlaceholderConfigurer();\n    }\n}\n```\n\n- 使用`@ContextConfiguration`的`classes`属性来加载相关的几个Bean。DBService类中几个字段通过`@Value`从properties文件获取值\n```Java\n@ContextConfiguration(classes = {DBService.class, SpringPropertiesConfigure.class})\npublic class TestDBService extends BaseTest {\n\n\t@Autowired\n\tprivate DBService dBService;\n\t\n\t@Test\n\tpublic void testGetDBInfo() {\n\t\tString dbInfo = dBService.toString();\n\t\tAssert.assertNotNull(dbInfo);\n\t\tSystem.out.println(dbInfo);\n\t}\n}\n```\n\n## 完整的代码\n\n- 点击*[这里](https://github.com/toulezu/play/tree/master/SpringBoot/testSpringBoot)*\n\n## 参考\n\n- [Populating Spring @Value during Unit Test](http://stackoverflow.com/questions/17353327/populating-spring-value-during-unit-test?noredirect=1&lq=1)\n- [Spring @PropertySource & @Value annotations example](http://websystique.com/spring/spring-propertysource-value-annotations-example/)\n- [使用RunWith注解改变JUnit的默认执行类，并实现自已的Listener](http://blog.csdn.net/fenglibing/article/details/8584602)\n- [Spring基于注解TestContext 测试框架使用详解](http://blog.csdn.net/yaerfeng/article/details/25368447)\n\n","source":"_posts/在Junit单元测试中通过@PropertySource来获取Bean中的@Value属性值.md","raw":"---\ntitle: 在Junit单元测试中通过@PropertySource来获取Bean中的@Value属性值\ntitle_url: Spring-Junit-PropertySource-Value\ndate: 2016-09-30\ntags: [Spring,Junit]\ncategories: Spring\ndescription: 在Junit单元测试中通过@PropertySource来获取Bean中的@Value属性值\n---\n\n## 使用场景说明\n\n- 在平时开发的时候，为了测试Spring中的一个Bean，通常要通过`@ContextConfiguration`注解来加载一些XML配置，问题是XML配置越来越多，现在要减少甚至去除XML配置，从而简化开发\n\n- 古老的项目由于历史问题没有使用Junit来测试Bean导致现在切换过来复杂\n\n- 有时候只想在Junit中测试几个Bean\n\n- 避免加载XML配置，直接从properties文件中获取@Value属性值\n\n## 使用说明\n\n- 使用`@Configuration`注解将XML配置转换成在Bean中完成，`@PropertySource`注解用于指定properties文件\n```Java\n/**\n * 通过该类可以代替在xml中如下的配置\n * \n * \n *\t\n  \t  <bean class=\"org.springframework.context.support.PropertySourcesPlaceholderConfigurer\">\n        <property name=\"ignoreUnresolvablePlaceholders\" value=\"true\"/>\n        <property name=\"locations\">\n          <list>\n            <value>classpath:jdbc.properties</value>\n          </list>\n        </property>\n      </bean>\n * @author chen_k\n *\n */\n@Configuration\n@PropertySource(value = { \"classpath:jdbc.properties\" })\npublic class SpringPropertiesConfigure {\n\n\t@Bean\n    public static PropertySourcesPlaceholderConfigurer propertySourcesPlaceholderConfigurer() {\n        return new PropertySourcesPlaceholderConfigurer();\n    }\n}\n```\n\n- 使用`@ContextConfiguration`的`classes`属性来加载相关的几个Bean。DBService类中几个字段通过`@Value`从properties文件获取值\n```Java\n@ContextConfiguration(classes = {DBService.class, SpringPropertiesConfigure.class})\npublic class TestDBService extends BaseTest {\n\n\t@Autowired\n\tprivate DBService dBService;\n\t\n\t@Test\n\tpublic void testGetDBInfo() {\n\t\tString dbInfo = dBService.toString();\n\t\tAssert.assertNotNull(dbInfo);\n\t\tSystem.out.println(dbInfo);\n\t}\n}\n```\n\n## 完整的代码\n\n- 点击*[这里](https://github.com/toulezu/play/tree/master/SpringBoot/testSpringBoot)*\n\n## 参考\n\n- [Populating Spring @Value during Unit Test](http://stackoverflow.com/questions/17353327/populating-spring-value-during-unit-test?noredirect=1&lq=1)\n- [Spring @PropertySource & @Value annotations example](http://websystique.com/spring/spring-propertysource-value-annotations-example/)\n- [使用RunWith注解改变JUnit的默认执行类，并实现自已的Listener](http://blog.csdn.net/fenglibing/article/details/8584602)\n- [Spring基于注解TestContext 测试框架使用详解](http://blog.csdn.net/yaerfeng/article/details/25368447)\n\n","slug":"在Junit单元测试中通过@PropertySource来获取Bean中的@Value属性值","published":1,"updated":"2017-06-20T14:11:13.992Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfto0q90001z18c7sus7ai1s","content":"<h2 id=\"使用场景说明\"><a href=\"#使用场景说明\" class=\"headerlink\" title=\"使用场景说明\"></a>使用场景说明</h2><ul>\n<li><p>在平时开发的时候，为了测试Spring中的一个Bean，通常要通过<code>@ContextConfiguration</code>注解来加载一些XML配置，问题是XML配置越来越多，现在要减少甚至去除XML配置，从而简化开发</p>\n</li>\n<li><p>古老的项目由于历史问题没有使用Junit来测试Bean导致现在切换过来复杂</p>\n</li>\n<li><p>有时候只想在Junit中测试几个Bean</p>\n</li>\n<li><p>避免加载XML配置，直接从properties文件中获取@Value属性值</p>\n</li>\n</ul>\n<h2 id=\"使用说明\"><a href=\"#使用说明\" class=\"headerlink\" title=\"使用说明\"></a>使用说明</h2><ul>\n<li><p>使用<code>@Configuration</code>注解将XML配置转换成在Bean中完成，<code>@PropertySource</code>注解用于指定properties文件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * 通过该类可以代替在xml中如下的配置</span><br><span class=\"line\"> * </span><br><span class=\"line\"> * </span><br><span class=\"line\"> *\t</span><br><span class=\"line\">  \t  &lt;bean class=\"org.springframework.context.support.PropertySourcesPlaceholderConfigurer\"&gt;</span><br><span class=\"line\">        &lt;property name=\"ignoreUnresolvablePlaceholders\" value=\"true\"/&gt;</span><br><span class=\"line\">        &lt;property name=\"locations\"&gt;</span><br><span class=\"line\">          &lt;list&gt;</span><br><span class=\"line\">            &lt;value&gt;classpath:jdbc.properties&lt;/value&gt;</span><br><span class=\"line\">          &lt;/list&gt;</span><br><span class=\"line\">        &lt;/property&gt;</span><br><span class=\"line\">      &lt;/bean&gt;</span><br><span class=\"line\"> * <span class=\"doctag\">@author</span> chen_k</span><br><span class=\"line\"> *</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@PropertySource</span>(value = &#123; <span class=\"string\">\"classpath:jdbc.properties\"</span> &#125;)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SpringPropertiesConfigure</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> PropertySourcesPlaceholderConfigurer <span class=\"title\">propertySourcesPlaceholderConfigurer</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> PropertySourcesPlaceholderConfigurer();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用<code>@ContextConfiguration</code>的<code>classes</code>属性来加载相关的几个Bean。DBService类中几个字段通过<code>@Value</code>从properties文件获取值</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ContextConfiguration</span>(classes = &#123;DBService.class, SpringPropertiesConfigure.class&#125;)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestDBService</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Autowired</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> DBService dBService;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Test</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testGetDBInfo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tString dbInfo = dBService.toString();</span><br><span class=\"line\">\t\tAssert.assertNotNull(dbInfo);</span><br><span class=\"line\">\t\tSystem.out.println(dbInfo);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"完整的代码\"><a href=\"#完整的代码\" class=\"headerlink\" title=\"完整的代码\"></a>完整的代码</h2><ul>\n<li>点击<em><a href=\"https://github.com/toulezu/play/tree/master/SpringBoot/testSpringBoot\" target=\"_blank\" rel=\"external\">这里</a></em></li>\n</ul>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"http://stackoverflow.com/questions/17353327/populating-spring-value-during-unit-test?noredirect=1&amp;lq=1\" target=\"_blank\" rel=\"external\">Populating Spring @Value during Unit Test</a></li>\n<li><a href=\"http://websystique.com/spring/spring-propertysource-value-annotations-example/\" target=\"_blank\" rel=\"external\">Spring @PropertySource &amp; @Value annotations example</a></li>\n<li><a href=\"http://blog.csdn.net/fenglibing/article/details/8584602\" target=\"_blank\" rel=\"external\">使用RunWith注解改变JUnit的默认执行类，并实现自已的Listener</a></li>\n<li><a href=\"http://blog.csdn.net/yaerfeng/article/details/25368447\" target=\"_blank\" rel=\"external\">Spring基于注解TestContext 测试框架使用详解</a></li>\n</ul>\n","excerpt":"","more":"<h2 id=\"使用场景说明\"><a href=\"#使用场景说明\" class=\"headerlink\" title=\"使用场景说明\"></a>使用场景说明</h2><ul>\n<li><p>在平时开发的时候，为了测试Spring中的一个Bean，通常要通过<code>@ContextConfiguration</code>注解来加载一些XML配置，问题是XML配置越来越多，现在要减少甚至去除XML配置，从而简化开发</p>\n</li>\n<li><p>古老的项目由于历史问题没有使用Junit来测试Bean导致现在切换过来复杂</p>\n</li>\n<li><p>有时候只想在Junit中测试几个Bean</p>\n</li>\n<li><p>避免加载XML配置，直接从properties文件中获取@Value属性值</p>\n</li>\n</ul>\n<h2 id=\"使用说明\"><a href=\"#使用说明\" class=\"headerlink\" title=\"使用说明\"></a>使用说明</h2><ul>\n<li><p>使用<code>@Configuration</code>注解将XML配置转换成在Bean中完成，<code>@PropertySource</code>注解用于指定properties文件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * 通过该类可以代替在xml中如下的配置</span><br><span class=\"line\"> * </span><br><span class=\"line\"> * </span><br><span class=\"line\"> *\t</span><br><span class=\"line\">  \t  &lt;bean class=\"org.springframework.context.support.PropertySourcesPlaceholderConfigurer\"&gt;</span><br><span class=\"line\">        &lt;property name=\"ignoreUnresolvablePlaceholders\" value=\"true\"/&gt;</span><br><span class=\"line\">        &lt;property name=\"locations\"&gt;</span><br><span class=\"line\">          &lt;list&gt;</span><br><span class=\"line\">            &lt;value&gt;classpath:jdbc.properties&lt;/value&gt;</span><br><span class=\"line\">          &lt;/list&gt;</span><br><span class=\"line\">        &lt;/property&gt;</span><br><span class=\"line\">      &lt;/bean&gt;</span><br><span class=\"line\"> * <span class=\"doctag\">@author</span> chen_k</span><br><span class=\"line\"> *</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@PropertySource</span>(value = &#123; <span class=\"string\">\"classpath:jdbc.properties\"</span> &#125;)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SpringPropertiesConfigure</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> PropertySourcesPlaceholderConfigurer <span class=\"title\">propertySourcesPlaceholderConfigurer</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> PropertySourcesPlaceholderConfigurer();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用<code>@ContextConfiguration</code>的<code>classes</code>属性来加载相关的几个Bean。DBService类中几个字段通过<code>@Value</code>从properties文件获取值</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ContextConfiguration</span>(classes = &#123;DBService.class, SpringPropertiesConfigure.class&#125;)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestDBService</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Autowired</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> DBService dBService;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@Test</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testGetDBInfo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tString dbInfo = dBService.toString();</span><br><span class=\"line\">\t\tAssert.assertNotNull(dbInfo);</span><br><span class=\"line\">\t\tSystem.out.println(dbInfo);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"完整的代码\"><a href=\"#完整的代码\" class=\"headerlink\" title=\"完整的代码\"></a>完整的代码</h2><ul>\n<li>点击<em><a href=\"https://github.com/toulezu/play/tree/master/SpringBoot/testSpringBoot\">这里</a></em></li>\n</ul>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"http://stackoverflow.com/questions/17353327/populating-spring-value-during-unit-test?noredirect=1&amp;lq=1\">Populating Spring @Value during Unit Test</a></li>\n<li><a href=\"http://websystique.com/spring/spring-propertysource-value-annotations-example/\">Spring @PropertySource &amp; @Value annotations example</a></li>\n<li><a href=\"http://blog.csdn.net/fenglibing/article/details/8584602\">使用RunWith注解改变JUnit的默认执行类，并实现自已的Listener</a></li>\n<li><a href=\"http://blog.csdn.net/yaerfeng/article/details/25368447\">Spring基于注解TestContext 测试框架使用详解</a></li>\n</ul>\n"},{"title":"对 Spring 中一些常见的 Annotation 的理解","title_url":"Spring-Annotation","date":"2017-05-22T16:00:00.000Z","description":"对 Spring 中一些常见的 Annotation 的理解","_content":"\n## `@Service`\n\n作用于类上,自动根据bean的类名实例化一个首写字母为小写的bean，如果需要自己改名字则:`@Service(\"你自己改的bean名\")`, 默认是单例模式(singleton),用于业务层.\n\n## `@Component`\n\n功能和 `@Service` 类似,用于一些功能组件,或者帮助类.\n\n## `@Repository`\n\n功能和 `@Service` 类似,用于持久层(Dao)\n\n## `@Controller`\n\n功能和 `@Service` 类似,用于控制层(Controller),或者Web层\n\n## `@Autowired` 和 `@Resource`\n\n- 都作用于类成员变量、方法及构造函数上,用于成员变量自动注入\n- 只不过 `@Resource` 默认按 byName 自动注入,而 `@Autowired` 默认安装 byType 而已.\n- `@Resource` 可以带上 `@Resource(name=\"myCar\")` 或者 `@Resource(type=Car.class)` 来区分是通过 byName 还是 byType 自动注入.\n\n## `@Qualifier`\n- 对于 `@Autowired` 如果容器中有多个类型相同而名称不同的类型需要自动注入,需要多加一个 `@Qualifier(\"office\")` 来区分不同的类型\n```\npublic class Boss {  \n\n    @Autowired  \n    @Qualifier(\"office\")  \n    private Office office;  \n    …  \n} \n```\n这种情况如果都通过注解来定义Bean是不会存在的.\n\n## `@PostConstruct` 和 `@PreDestroy`\n这两个注释只能应用于方法上。标注了 `@PostConstruct` 注释的方法将在类实例化后调用，而标注了 `@PreDestroy` 的方法将在类销毁之前调用。  \n\n## 关于 context:annotation-config\n\n使用以上注解都必须在 Spring 的核心配置文件中加入如下配置\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>  \n<beans xmlns=\"http://www.springframework.org/schema/beans\"  \n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"  \n     xmlns:context=\"http://www.springframework.org/schema/context\"  \n     xsi:schemaLocation=\"http://www.springframework.org/schema/beans   \n http://www.springframework.org/schema/beans/spring-beans-2.5.xsd  \n http://www.springframework.org/schema/context   \n http://www.springframework.org/schema/context/spring-context-2.5.xsd\">  \n   \n    <context:annotation-config/>\n    \n    <bean id=\"boss\" class=\"com.test.Boss\"/>  \n    <bean id=\"office\" class=\"com.test.Office\">  \n        <property name=\"officeNo\" value=\"001\"/>  \n    </bean>  \n    <bean id=\"car\" class=\"com.test.Car\" scope=\"singleton\">  \n        <property name=\"brand\" value=\" 红旗 CA72\"/>  \n        <property name=\"price\" value=\"2000\"/>\n    </bean>  \n</beans>  \n```\n\n`<context:annotation-config/>` 将隐式地向 Spring 容器注册 AutowiredAnnotationBeanPostProcessor、CommonAnnotationBeanPostProcessor、PersistenceAnnotationBeanPostProcessor 以及 equiredAnnotationBeanPostProcessor 这 4 个 BeanPostProcessor。  \n该配置将处理容器中已有的Bean的依赖注入问题,在容器初始化的时候将容器中的实体中含有 `@Autowired` 或者 `@Resource` 的Bean自动注入相应的依赖Bean\n\n## 关于 context:component-scan\n\n这个配置更强大,不但启用了对类包进行扫描以实现注解驱动的**Bean定义**的功能，同时还启用了注解驱动的**依赖注入**的功能（即还隐式地在内部注册了 AutowiredAnnotationBeanPostProcessor 和 CommonAnnotationBeanPostProcessor），因此当使用 `<context:component-scan/>` 后，就可以将 `<context:annotation-config/>` 移除了。 \n最终的配置可以简化成如下的样子\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>  \n<beans xmlns=\"http://www.springframework.org/schema/beans\"  \n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"  \n     xmlns:context=\"http://www.springframework.org/schema/context\"  \n     xsi:schemaLocation=\"http://www.springframework.org/schema/beans   \n http://www.springframework.org/schema/beans/spring-beans-2.5.xsd  \n http://www.springframework.org/schema/context   \n http://www.springframework.org/schema/context/spring-context-2.5.xsd\">  \n   \n    <context:component-scan base-package=\"com.test\"/>\n    \n</beans>\n```\n\n## 参考\n\n- [使用Spring2.5的Autowired实现注释型的IOC](http://crabboy.iteye.com/blog/339840)\n- [Spring @Qualifier 注释](http://wiki.jikexueyuan.com/project/spring/annotation-based-configuration/spring-qualifier-annotation.html)","source":"_posts/对 Spring 中一些常见的 Annotation 的理解.md","raw":"---\ntitle: 对 Spring 中一些常见的 Annotation 的理解\ntitle_url: Spring-Annotation\ndate: 2017-05-23\ntags: [Spring,Annotation]\ncategories: 技术\ndescription: 对 Spring 中一些常见的 Annotation 的理解\n---\n\n## `@Service`\n\n作用于类上,自动根据bean的类名实例化一个首写字母为小写的bean，如果需要自己改名字则:`@Service(\"你自己改的bean名\")`, 默认是单例模式(singleton),用于业务层.\n\n## `@Component`\n\n功能和 `@Service` 类似,用于一些功能组件,或者帮助类.\n\n## `@Repository`\n\n功能和 `@Service` 类似,用于持久层(Dao)\n\n## `@Controller`\n\n功能和 `@Service` 类似,用于控制层(Controller),或者Web层\n\n## `@Autowired` 和 `@Resource`\n\n- 都作用于类成员变量、方法及构造函数上,用于成员变量自动注入\n- 只不过 `@Resource` 默认按 byName 自动注入,而 `@Autowired` 默认安装 byType 而已.\n- `@Resource` 可以带上 `@Resource(name=\"myCar\")` 或者 `@Resource(type=Car.class)` 来区分是通过 byName 还是 byType 自动注入.\n\n## `@Qualifier`\n- 对于 `@Autowired` 如果容器中有多个类型相同而名称不同的类型需要自动注入,需要多加一个 `@Qualifier(\"office\")` 来区分不同的类型\n```\npublic class Boss {  \n\n    @Autowired  \n    @Qualifier(\"office\")  \n    private Office office;  \n    …  \n} \n```\n这种情况如果都通过注解来定义Bean是不会存在的.\n\n## `@PostConstruct` 和 `@PreDestroy`\n这两个注释只能应用于方法上。标注了 `@PostConstruct` 注释的方法将在类实例化后调用，而标注了 `@PreDestroy` 的方法将在类销毁之前调用。  \n\n## 关于 context:annotation-config\n\n使用以上注解都必须在 Spring 的核心配置文件中加入如下配置\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>  \n<beans xmlns=\"http://www.springframework.org/schema/beans\"  \n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"  \n     xmlns:context=\"http://www.springframework.org/schema/context\"  \n     xsi:schemaLocation=\"http://www.springframework.org/schema/beans   \n http://www.springframework.org/schema/beans/spring-beans-2.5.xsd  \n http://www.springframework.org/schema/context   \n http://www.springframework.org/schema/context/spring-context-2.5.xsd\">  \n   \n    <context:annotation-config/>\n    \n    <bean id=\"boss\" class=\"com.test.Boss\"/>  \n    <bean id=\"office\" class=\"com.test.Office\">  \n        <property name=\"officeNo\" value=\"001\"/>  \n    </bean>  \n    <bean id=\"car\" class=\"com.test.Car\" scope=\"singleton\">  \n        <property name=\"brand\" value=\" 红旗 CA72\"/>  \n        <property name=\"price\" value=\"2000\"/>\n    </bean>  \n</beans>  \n```\n\n`<context:annotation-config/>` 将隐式地向 Spring 容器注册 AutowiredAnnotationBeanPostProcessor、CommonAnnotationBeanPostProcessor、PersistenceAnnotationBeanPostProcessor 以及 equiredAnnotationBeanPostProcessor 这 4 个 BeanPostProcessor。  \n该配置将处理容器中已有的Bean的依赖注入问题,在容器初始化的时候将容器中的实体中含有 `@Autowired` 或者 `@Resource` 的Bean自动注入相应的依赖Bean\n\n## 关于 context:component-scan\n\n这个配置更强大,不但启用了对类包进行扫描以实现注解驱动的**Bean定义**的功能，同时还启用了注解驱动的**依赖注入**的功能（即还隐式地在内部注册了 AutowiredAnnotationBeanPostProcessor 和 CommonAnnotationBeanPostProcessor），因此当使用 `<context:component-scan/>` 后，就可以将 `<context:annotation-config/>` 移除了。 \n最终的配置可以简化成如下的样子\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>  \n<beans xmlns=\"http://www.springframework.org/schema/beans\"  \n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"  \n     xmlns:context=\"http://www.springframework.org/schema/context\"  \n     xsi:schemaLocation=\"http://www.springframework.org/schema/beans   \n http://www.springframework.org/schema/beans/spring-beans-2.5.xsd  \n http://www.springframework.org/schema/context   \n http://www.springframework.org/schema/context/spring-context-2.5.xsd\">  \n   \n    <context:component-scan base-package=\"com.test\"/>\n    \n</beans>\n```\n\n## 参考\n\n- [使用Spring2.5的Autowired实现注释型的IOC](http://crabboy.iteye.com/blog/339840)\n- [Spring @Qualifier 注释](http://wiki.jikexueyuan.com/project/spring/annotation-based-configuration/spring-qualifier-annotation.html)","slug":"对 Spring 中一些常见的 Annotation 的理解","published":1,"updated":"2017-06-20T14:11:14.004Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfto0q94002118c7fn0rc1y8","content":"<h2 id=\"Service\"><a href=\"#Service\" class=\"headerlink\" title=\"@Service\"></a><code>@Service</code></h2><p>作用于类上,自动根据bean的类名实例化一个首写字母为小写的bean，如果需要自己改名字则:<code>@Service(&quot;你自己改的bean名&quot;)</code>, 默认是单例模式(singleton),用于业务层.</p>\n<h2 id=\"Component\"><a href=\"#Component\" class=\"headerlink\" title=\"@Component\"></a><code>@Component</code></h2><p>功能和 <code>@Service</code> 类似,用于一些功能组件,或者帮助类.</p>\n<h2 id=\"Repository\"><a href=\"#Repository\" class=\"headerlink\" title=\"@Repository\"></a><code>@Repository</code></h2><p>功能和 <code>@Service</code> 类似,用于持久层(Dao)</p>\n<h2 id=\"Controller\"><a href=\"#Controller\" class=\"headerlink\" title=\"@Controller\"></a><code>@Controller</code></h2><p>功能和 <code>@Service</code> 类似,用于控制层(Controller),或者Web层</p>\n<h2 id=\"Autowired-和-Resource\"><a href=\"#Autowired-和-Resource\" class=\"headerlink\" title=\"@Autowired 和 @Resource\"></a><code>@Autowired</code> 和 <code>@Resource</code></h2><ul>\n<li>都作用于类成员变量、方法及构造函数上,用于成员变量自动注入</li>\n<li>只不过 <code>@Resource</code> 默认按 byName 自动注入,而 <code>@Autowired</code> 默认安装 byType 而已.</li>\n<li><code>@Resource</code> 可以带上 <code>@Resource(name=&quot;myCar&quot;)</code> 或者 <code>@Resource(type=Car.class)</code> 来区分是通过 byName 还是 byType 自动注入.</li>\n</ul>\n<h2 id=\"Qualifier\"><a href=\"#Qualifier\" class=\"headerlink\" title=\"@Qualifier\"></a><code>@Qualifier</code></h2><ul>\n<li>对于 <code>@Autowired</code> 如果容器中有多个类型相同而名称不同的类型需要自动注入,需要多加一个 <code>@Qualifier(&quot;office&quot;)</code> 来区分不同的类型<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Boss &#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    @Autowired  </span><br><span class=\"line\">    @Qualifier(&quot;office&quot;)  </span><br><span class=\"line\">    private Office office;  </span><br><span class=\"line\">    …  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这种情况如果都通过注解来定义Bean是不会存在的.</p>\n<h2 id=\"PostConstruct-和-PreDestroy\"><a href=\"#PostConstruct-和-PreDestroy\" class=\"headerlink\" title=\"@PostConstruct 和 @PreDestroy\"></a><code>@PostConstruct</code> 和 <code>@PreDestroy</code></h2><p>这两个注释只能应用于方法上。标注了 <code>@PostConstruct</code> 注释的方法将在类实例化后调用，而标注了 <code>@PreDestroy</code> 的方法将在类销毁之前调用。  </p>\n<h2 id=\"关于-context-annotation-config\"><a href=\"#关于-context-annotation-config\" class=\"headerlink\" title=\"关于 context:annotation-config\"></a>关于 context:annotation-config</h2><p>使用以上注解都必须在 Spring 的核心配置文件中加入如下配置</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span> <span class=\"meta\">?&gt;</span></span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span>  </span><br><span class=\"line\">    <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>  </span><br><span class=\"line\">     <span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span>  </span><br><span class=\"line\">     <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans   </span><br><span class=\"line\"> http://www.springframework.org/schema/beans/spring-beans-2.5.xsd  </span><br><span class=\"line\"> http://www.springframework.org/schema/context   </span><br><span class=\"line\"> http://www.springframework.org/schema/context/spring-context-2.5.xsd\"</span>&gt;</span>  </span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context:annotation-config</span>/&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"boss\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.test.Boss\"</span>/&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"office\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.test.Office\"</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"officeNo\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"001\"</span>/&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"car\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.test.Car\"</span> <span class=\"attr\">scope</span>=<span class=\"string\">\"singleton\"</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"brand\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\" 红旗 CA72\"</span>/&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"price\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"2000\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><code>&lt;context:annotation-config/&gt;</code> 将隐式地向 Spring 容器注册 AutowiredAnnotationBeanPostProcessor、CommonAnnotationBeanPostProcessor、PersistenceAnnotationBeanPostProcessor 以及 equiredAnnotationBeanPostProcessor 这 4 个 BeanPostProcessor。<br>该配置将处理容器中已有的Bean的依赖注入问题,在容器初始化的时候将容器中的实体中含有 <code>@Autowired</code> 或者 <code>@Resource</code> 的Bean自动注入相应的依赖Bean</p>\n<h2 id=\"关于-context-component-scan\"><a href=\"#关于-context-component-scan\" class=\"headerlink\" title=\"关于 context:component-scan\"></a>关于 context:component-scan</h2><p>这个配置更强大,不但启用了对类包进行扫描以实现注解驱动的<strong>Bean定义</strong>的功能，同时还启用了注解驱动的<strong>依赖注入</strong>的功能（即还隐式地在内部注册了 AutowiredAnnotationBeanPostProcessor 和 CommonAnnotationBeanPostProcessor），因此当使用 <code>&lt;context:component-scan/&gt;</code> 后，就可以将 <code>&lt;context:annotation-config/&gt;</code> 移除了。<br>最终的配置可以简化成如下的样子</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span> <span class=\"meta\">?&gt;</span></span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span>  </span><br><span class=\"line\">    <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>  </span><br><span class=\"line\">     <span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span>  </span><br><span class=\"line\">     <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans   </span><br><span class=\"line\"> http://www.springframework.org/schema/beans/spring-beans-2.5.xsd  </span><br><span class=\"line\"> http://www.springframework.org/schema/context   </span><br><span class=\"line\"> http://www.springframework.org/schema/context/spring-context-2.5.xsd\"</span>&gt;</span>  </span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">\"com.test\"</span>/&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"http://crabboy.iteye.com/blog/339840\" target=\"_blank\" rel=\"external\">使用Spring2.5的Autowired实现注释型的IOC</a></li>\n<li><a href=\"http://wiki.jikexueyuan.com/project/spring/annotation-based-configuration/spring-qualifier-annotation.html\" target=\"_blank\" rel=\"external\">Spring @Qualifier 注释</a></li>\n</ul>\n","excerpt":"","more":"<h2 id=\"Service\"><a href=\"#Service\" class=\"headerlink\" title=\"@Service\"></a><code>@Service</code></h2><p>作用于类上,自动根据bean的类名实例化一个首写字母为小写的bean，如果需要自己改名字则:<code>@Service(&quot;你自己改的bean名&quot;)</code>, 默认是单例模式(singleton),用于业务层.</p>\n<h2 id=\"Component\"><a href=\"#Component\" class=\"headerlink\" title=\"@Component\"></a><code>@Component</code></h2><p>功能和 <code>@Service</code> 类似,用于一些功能组件,或者帮助类.</p>\n<h2 id=\"Repository\"><a href=\"#Repository\" class=\"headerlink\" title=\"@Repository\"></a><code>@Repository</code></h2><p>功能和 <code>@Service</code> 类似,用于持久层(Dao)</p>\n<h2 id=\"Controller\"><a href=\"#Controller\" class=\"headerlink\" title=\"@Controller\"></a><code>@Controller</code></h2><p>功能和 <code>@Service</code> 类似,用于控制层(Controller),或者Web层</p>\n<h2 id=\"Autowired-和-Resource\"><a href=\"#Autowired-和-Resource\" class=\"headerlink\" title=\"@Autowired 和 @Resource\"></a><code>@Autowired</code> 和 <code>@Resource</code></h2><ul>\n<li>都作用于类成员变量、方法及构造函数上,用于成员变量自动注入</li>\n<li>只不过 <code>@Resource</code> 默认按 byName 自动注入,而 <code>@Autowired</code> 默认安装 byType 而已.</li>\n<li><code>@Resource</code> 可以带上 <code>@Resource(name=&quot;myCar&quot;)</code> 或者 <code>@Resource(type=Car.class)</code> 来区分是通过 byName 还是 byType 自动注入.</li>\n</ul>\n<h2 id=\"Qualifier\"><a href=\"#Qualifier\" class=\"headerlink\" title=\"@Qualifier\"></a><code>@Qualifier</code></h2><ul>\n<li>对于 <code>@Autowired</code> 如果容器中有多个类型相同而名称不同的类型需要自动注入,需要多加一个 <code>@Qualifier(&quot;office&quot;)</code> 来区分不同的类型<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Boss &#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">    @Autowired  </span><br><span class=\"line\">    @Qualifier(&quot;office&quot;)  </span><br><span class=\"line\">    private Office office;  </span><br><span class=\"line\">    …  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这种情况如果都通过注解来定义Bean是不会存在的.</p>\n<h2 id=\"PostConstruct-和-PreDestroy\"><a href=\"#PostConstruct-和-PreDestroy\" class=\"headerlink\" title=\"@PostConstruct 和 @PreDestroy\"></a><code>@PostConstruct</code> 和 <code>@PreDestroy</code></h2><p>这两个注释只能应用于方法上。标注了 <code>@PostConstruct</code> 注释的方法将在类实例化后调用，而标注了 <code>@PreDestroy</code> 的方法将在类销毁之前调用。  </p>\n<h2 id=\"关于-context-annotation-config\"><a href=\"#关于-context-annotation-config\" class=\"headerlink\" title=\"关于 context:annotation-config\"></a>关于 context:annotation-config</h2><p>使用以上注解都必须在 Spring 的核心配置文件中加入如下配置</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span> <span class=\"meta\">?&gt;</span></span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span>  </span><br><span class=\"line\">    <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>  </span><br><span class=\"line\">     <span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span>  </span><br><span class=\"line\">     <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans   </span><br><span class=\"line\"> http://www.springframework.org/schema/beans/spring-beans-2.5.xsd  </span><br><span class=\"line\"> http://www.springframework.org/schema/context   </span><br><span class=\"line\"> http://www.springframework.org/schema/context/spring-context-2.5.xsd\"</span>&gt;</span>  </span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context:annotation-config</span>/&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"boss\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.test.Boss\"</span>/&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"office\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.test.Office\"</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"officeNo\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"001\"</span>/&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"car\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.test.Car\"</span> <span class=\"attr\">scope</span>=<span class=\"string\">\"singleton\"</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"brand\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\" 红旗 CA72\"</span>/&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"price\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"2000\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><code>&lt;context:annotation-config/&gt;</code> 将隐式地向 Spring 容器注册 AutowiredAnnotationBeanPostProcessor、CommonAnnotationBeanPostProcessor、PersistenceAnnotationBeanPostProcessor 以及 equiredAnnotationBeanPostProcessor 这 4 个 BeanPostProcessor。<br>该配置将处理容器中已有的Bean的依赖注入问题,在容器初始化的时候将容器中的实体中含有 <code>@Autowired</code> 或者 <code>@Resource</code> 的Bean自动注入相应的依赖Bean</p>\n<h2 id=\"关于-context-component-scan\"><a href=\"#关于-context-component-scan\" class=\"headerlink\" title=\"关于 context:component-scan\"></a>关于 context:component-scan</h2><p>这个配置更强大,不但启用了对类包进行扫描以实现注解驱动的<strong>Bean定义</strong>的功能，同时还启用了注解驱动的<strong>依赖注入</strong>的功能（即还隐式地在内部注册了 AutowiredAnnotationBeanPostProcessor 和 CommonAnnotationBeanPostProcessor），因此当使用 <code>&lt;context:component-scan/&gt;</code> 后，就可以将 <code>&lt;context:annotation-config/&gt;</code> 移除了。<br>最终的配置可以简化成如下的样子</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"php\"><span class=\"meta\">&lt;?</span>xml version=<span class=\"string\">\"1.0\"</span> encoding=<span class=\"string\">\"UTF-8\"</span> <span class=\"meta\">?&gt;</span></span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span>  </span><br><span class=\"line\">    <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span>  </span><br><span class=\"line\">     <span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span>  </span><br><span class=\"line\">     <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans   </span><br><span class=\"line\"> http://www.springframework.org/schema/beans/spring-beans-2.5.xsd  </span><br><span class=\"line\"> http://www.springframework.org/schema/context   </span><br><span class=\"line\"> http://www.springframework.org/schema/context/spring-context-2.5.xsd\"</span>&gt;</span>  </span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">\"com.test\"</span>/&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"http://crabboy.iteye.com/blog/339840\">使用Spring2.5的Autowired实现注释型的IOC</a></li>\n<li><a href=\"http://wiki.jikexueyuan.com/project/spring/annotation-based-configuration/spring-qualifier-annotation.html\">Spring @Qualifier 注释</a></li>\n</ul>\n"},{"title":"总结 git 中有关远端仓库和本地仓库的命令","title_url":"git-remote-branch-command","date":"2018-04-09T16:00:00.000Z","description":"总结 git 中有关远端仓库和本地仓库的命令","_content":"\n## 创建空的 git 本地仓库\n\n在一个空的目录下面通过\n\n```\ngit init\n```\n\n来创建一个空的 git 本地仓库, 随后下面有关远端仓库和本地仓库的命令可以用来完成 git 开发环境或者发布环境的搭建.\n\n## 远端仓库相关\n\n- 查看当前所有的远端仓库详情\n\n```\ngit remote -v\n```\n\n- 添加一个 远端仓库\n\n```\ngit remote add toulezu_pha git@github.com:toulezu/phabricator.git\n```\n\n其中 `toulezu_pha` 是远端的名称, 可以自己起一个, `git@github.com:toulezu/phabricator.git` 远端仓库地址\n\n- 删除一个 远端仓库\n\n```\ngit remote rm toulezu_pha\n```\n\n- 修改 远端仓库 的名称\n\n```\ngit remote rename toulezu_pha origin\n```\n\n其中 `toulezu_pha` 是现在的名称, `origin` 是修改后的名称\n\n- 查看 远端仓库 的详细信息\n\n```\ngit remote show origin\n```\n\n- 添加远端仓库后, 将所有数据同步到本地\n\n```\ngit fetch toulezu_pha\n```\n\n- 将远端仓库的所有数据同步到本地后, 检出远端仓库的某个分支, 并且该分支追踪远端仓库\n\n```\ngit checkout -b toulezu_pha_master toulezu_pha/master\n```\n\n其中 `toulezu_pha_master` 是本地分支的名称\n\n## 本地仓库相关\n\n- 查看本地仓库的详细信息\n\n```\ngit branch -vv\n```\n\n- 修改本地仓库分支名称\n\n```\ngit branch -m toulezu_pha_master master\n```\n\n其中 `toulezu_pha_master` 是现在的名称, `master` 是修改后的名称\n\n- 修改本地仓库分支名称后设置与远程分支关联\n\n```\ngit branch master --set-upstream-to origin/master\n```\n\n- 删除本地仓库分支\n\n```\ngit branch -D master\n```","source":"_posts/总结 git 中有关远端仓库和本地仓库的命令.md","raw":"---\ntitle: 总结 git 中有关远端仓库和本地仓库的命令\ntitle_url: git-remote-branch-command\ndate: 2018-04-10\ntags: git\ncategories: [git]\ndescription: 总结 git 中有关远端仓库和本地仓库的命令\n---\n\n## 创建空的 git 本地仓库\n\n在一个空的目录下面通过\n\n```\ngit init\n```\n\n来创建一个空的 git 本地仓库, 随后下面有关远端仓库和本地仓库的命令可以用来完成 git 开发环境或者发布环境的搭建.\n\n## 远端仓库相关\n\n- 查看当前所有的远端仓库详情\n\n```\ngit remote -v\n```\n\n- 添加一个 远端仓库\n\n```\ngit remote add toulezu_pha git@github.com:toulezu/phabricator.git\n```\n\n其中 `toulezu_pha` 是远端的名称, 可以自己起一个, `git@github.com:toulezu/phabricator.git` 远端仓库地址\n\n- 删除一个 远端仓库\n\n```\ngit remote rm toulezu_pha\n```\n\n- 修改 远端仓库 的名称\n\n```\ngit remote rename toulezu_pha origin\n```\n\n其中 `toulezu_pha` 是现在的名称, `origin` 是修改后的名称\n\n- 查看 远端仓库 的详细信息\n\n```\ngit remote show origin\n```\n\n- 添加远端仓库后, 将所有数据同步到本地\n\n```\ngit fetch toulezu_pha\n```\n\n- 将远端仓库的所有数据同步到本地后, 检出远端仓库的某个分支, 并且该分支追踪远端仓库\n\n```\ngit checkout -b toulezu_pha_master toulezu_pha/master\n```\n\n其中 `toulezu_pha_master` 是本地分支的名称\n\n## 本地仓库相关\n\n- 查看本地仓库的详细信息\n\n```\ngit branch -vv\n```\n\n- 修改本地仓库分支名称\n\n```\ngit branch -m toulezu_pha_master master\n```\n\n其中 `toulezu_pha_master` 是现在的名称, `master` 是修改后的名称\n\n- 修改本地仓库分支名称后设置与远程分支关联\n\n```\ngit branch master --set-upstream-to origin/master\n```\n\n- 删除本地仓库分支\n\n```\ngit branch -D master\n```","slug":"总结 git 中有关远端仓库和本地仓库的命令","published":1,"updated":"2018-04-10T12:51:33.936Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfto0q97002518c7z8gllv87","content":"<h2 id=\"创建空的-git-本地仓库\"><a href=\"#创建空的-git-本地仓库\" class=\"headerlink\" title=\"创建空的 git 本地仓库\"></a>创建空的 git 本地仓库</h2><p>在一个空的目录下面通过</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br></pre></td></tr></table></figure>\n<p>来创建一个空的 git 本地仓库, 随后下面有关远端仓库和本地仓库的命令可以用来完成 git 开发环境或者发布环境的搭建.</p>\n<h2 id=\"远端仓库相关\"><a href=\"#远端仓库相关\" class=\"headerlink\" title=\"远端仓库相关\"></a>远端仓库相关</h2><ul>\n<li>查看当前所有的远端仓库详情</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote -v</span><br></pre></td></tr></table></figure>\n<ul>\n<li>添加一个 远端仓库</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add toulezu_pha git@github.com:toulezu/phabricator.git</span><br></pre></td></tr></table></figure>\n<p>其中 <code>toulezu_pha</code> 是远端的名称, 可以自己起一个, <code>git@github.com:toulezu/phabricator.git</code> 远端仓库地址</p>\n<ul>\n<li>删除一个 远端仓库</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote rm toulezu_pha</span><br></pre></td></tr></table></figure>\n<ul>\n<li>修改 远端仓库 的名称</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote rename toulezu_pha origin</span><br></pre></td></tr></table></figure>\n<p>其中 <code>toulezu_pha</code> 是现在的名称, <code>origin</code> 是修改后的名称</p>\n<ul>\n<li>查看 远端仓库 的详细信息</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote show origin</span><br></pre></td></tr></table></figure>\n<ul>\n<li>添加远端仓库后, 将所有数据同步到本地</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git fetch toulezu_pha</span><br></pre></td></tr></table></figure>\n<ul>\n<li>将远端仓库的所有数据同步到本地后, 检出远端仓库的某个分支, 并且该分支追踪远端仓库</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b toulezu_pha_master toulezu_pha/master</span><br></pre></td></tr></table></figure>\n<p>其中 <code>toulezu_pha_master</code> 是本地分支的名称</p>\n<h2 id=\"本地仓库相关\"><a href=\"#本地仓库相关\" class=\"headerlink\" title=\"本地仓库相关\"></a>本地仓库相关</h2><ul>\n<li>查看本地仓库的详细信息</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -vv</span><br></pre></td></tr></table></figure>\n<ul>\n<li>修改本地仓库分支名称</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -m toulezu_pha_master master</span><br></pre></td></tr></table></figure>\n<p>其中 <code>toulezu_pha_master</code> 是现在的名称, <code>master</code> 是修改后的名称</p>\n<ul>\n<li>修改本地仓库分支名称后设置与远程分支关联</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch master --set-upstream-to origin/master</span><br></pre></td></tr></table></figure>\n<ul>\n<li>删除本地仓库分支</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -D master</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<h2 id=\"创建空的-git-本地仓库\"><a href=\"#创建空的-git-本地仓库\" class=\"headerlink\" title=\"创建空的 git 本地仓库\"></a>创建空的 git 本地仓库</h2><p>在一个空的目录下面通过</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br></pre></td></tr></table></figure>\n<p>来创建一个空的 git 本地仓库, 随后下面有关远端仓库和本地仓库的命令可以用来完成 git 开发环境或者发布环境的搭建.</p>\n<h2 id=\"远端仓库相关\"><a href=\"#远端仓库相关\" class=\"headerlink\" title=\"远端仓库相关\"></a>远端仓库相关</h2><ul>\n<li>查看当前所有的远端仓库详情</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote -v</span><br></pre></td></tr></table></figure>\n<ul>\n<li>添加一个 远端仓库</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add toulezu_pha git@github.com:toulezu/phabricator.git</span><br></pre></td></tr></table></figure>\n<p>其中 <code>toulezu_pha</code> 是远端的名称, 可以自己起一个, <code>git@github.com:toulezu/phabricator.git</code> 远端仓库地址</p>\n<ul>\n<li>删除一个 远端仓库</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote rm toulezu_pha</span><br></pre></td></tr></table></figure>\n<ul>\n<li>修改 远端仓库 的名称</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote rename toulezu_pha origin</span><br></pre></td></tr></table></figure>\n<p>其中 <code>toulezu_pha</code> 是现在的名称, <code>origin</code> 是修改后的名称</p>\n<ul>\n<li>查看 远端仓库 的详细信息</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote show origin</span><br></pre></td></tr></table></figure>\n<ul>\n<li>添加远端仓库后, 将所有数据同步到本地</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git fetch toulezu_pha</span><br></pre></td></tr></table></figure>\n<ul>\n<li>将远端仓库的所有数据同步到本地后, 检出远端仓库的某个分支, 并且该分支追踪远端仓库</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b toulezu_pha_master toulezu_pha/master</span><br></pre></td></tr></table></figure>\n<p>其中 <code>toulezu_pha_master</code> 是本地分支的名称</p>\n<h2 id=\"本地仓库相关\"><a href=\"#本地仓库相关\" class=\"headerlink\" title=\"本地仓库相关\"></a>本地仓库相关</h2><ul>\n<li>查看本地仓库的详细信息</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -vv</span><br></pre></td></tr></table></figure>\n<ul>\n<li>修改本地仓库分支名称</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -m toulezu_pha_master master</span><br></pre></td></tr></table></figure>\n<p>其中 <code>toulezu_pha_master</code> 是现在的名称, <code>master</code> 是修改后的名称</p>\n<ul>\n<li>修改本地仓库分支名称后设置与远程分支关联</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch master --set-upstream-to origin/master</span><br></pre></td></tr></table></figure>\n<ul>\n<li>删除本地仓库分支</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -D master</span><br></pre></td></tr></table></figure>"},{"title":"对循环冗余校验码CRC的理解","title_url":"understand-crc","date":"2017-09-10T16:00:00.000Z","description":"对循环冗余校验码CRC的理解,演示CRC校验码的详细计算过程","_content":"\n## 模2加法\n\n1+1=0, 0+1=1, 1+0=1, 0+0=0\n\n## 模2减法\n\n1-1=0, 0-1=1, 1-0=1, 0-0=0\n\n相当于二进制中的逻辑异或运算。也就是比较后两者对应位相同则结果为“0”，不同则结果为“1”.\n\n## 模2除法\n\n基于模2减法.\n\n## 模2乘法\n\n基于模2加法\n\n## 模运算举例\n\n![crc-1](http://7xt8a6.com1.z0.glb.clouddn.com/crc-1.jpg)\n\n## CRC校验码的位数\n\n>余数的位数一定要是比除数位数只能少一位，哪怕前面位是0，甚至是全为0（附带好整除时）\n\n余数 是指 CRC校验码\n除数 是指 生成多项式转成的二进制位\n生成多项式位数 = CRC校验码位数 + 1\n\n## 将多项式转成二进制位\n\n由`G（X）= X4 + X3 + 1`可以知道，它一共是5位（总位数等于最高位的幂次加1，即4+1=5），然后根据多项式各项的含义（多项式只列出二进制值为1的位，也就是这个二进制的第4位、第3位、第0位的二进制均为1，其它位均为0）很快就可得到它的二进制比特串为11001。\n\n`g（x）= x16 + x15 + x2 +1` 对应二进制比特串为：11000000000000101\n`g（x）= x16 + x15 + x5 +1` 对应二进制比特串为：11000000000100001\n\n**按照国际上通行的标准, 多项式转成二进制位后最高位和最低位必须均为“1”.**\n\n## 生成多项式\n\n用于在接收端进行校验时，对接收的帧进行除法运算的**除数**,通常是以多项方式表示.\n\n## CRC校验码\n\n所选定的除数二进制位数（假设为k位），然后在要发送的数据帧（假设为m位）后面加上k-1位“0”，然后以这个加了k-1个“0“的新帧（一共是m+k-1位）以“模2除法”方式除以上面这个除数，所得到的余数（也是二进制的比特串）就是该帧的CRC校验码.\n\n## 接收端处理\n\n将校验码(上面的余数)附加在原数据帧（就是m位的帧）后面，构建一个新帧发送到接收端；最后在接收端再把这个新帧以“模2除法”方式除以前面选择的除数(上面的生成多项式转成的二进制位)，如果没有余数，则表明该帧在传输过程中没出错，否则出现了差错。\n\n## 举个例子\n\n发送端要发送的 m 位二进制数据为 10110011, 一共8位.选择的生成多项式为 G(x) = X4 + X3 + 1, 将G(x) 转成二进制位:11001, 一共5位,那么将 4 位 0000 附加到 m位二进制数据 后为: 101100110000, 现在 被除数是 101100110000, 除数是 11001, 得到的余数为 0100, 最后将 m 位二进制数据 加上 余数 0100 得到 101100110100  发送给接收端.\n\n![crc-2](http://7xt8a6.com1.z0.glb.clouddn.com/crc-2.jpg)\n\n## 练习1\n\n- 信息字段代码为: 1011001, 对应 m(x)=x6+x4+x3+1(第6,4,3,0位为1,其他位为0)；\n- 假设生成多项式为：g(x)=x4+x3+1；则对应g(x)的代码为: 11001(第4,3,0位为1,其他位均为0)\n- 将信息字段后追加 4个零得到 10110010000(生成多项式一共5位所以要加4个零)\n- 将 10110010000 除以 11001 得到余数 1010,也就是说 CRC校验码为 1010\n- 最后的发送数据: 10110011010 (也就是原始数据加上CRC校验码)\n\n## 练习2\n\n- 已知信息位为 1100，\n- 生成多项式G(x) = x3+x+1, 对应的二进制位为 1011\n- 信息位加上3个零为 1100000\n- 1100000 除以 1011 得到的 CRC校验码为 010\n- 最后发送的信息为 1100010\n\n## 参考\n\n- [最通俗的CRC校验原理剖析](http://winda.blog.51cto.com/55153/1063951)","source":"_posts/对循环冗余校验码CRC的理解.md","raw":"---\ntitle: 对循环冗余校验码CRC的理解\ntitle_url: understand-crc\ndate: 2017-09-11\ntags: 计算机网络\ncategories: [计算机网络]\ndescription: 对循环冗余校验码CRC的理解,演示CRC校验码的详细计算过程\n---\n\n## 模2加法\n\n1+1=0, 0+1=1, 1+0=1, 0+0=0\n\n## 模2减法\n\n1-1=0, 0-1=1, 1-0=1, 0-0=0\n\n相当于二进制中的逻辑异或运算。也就是比较后两者对应位相同则结果为“0”，不同则结果为“1”.\n\n## 模2除法\n\n基于模2减法.\n\n## 模2乘法\n\n基于模2加法\n\n## 模运算举例\n\n![crc-1](http://7xt8a6.com1.z0.glb.clouddn.com/crc-1.jpg)\n\n## CRC校验码的位数\n\n>余数的位数一定要是比除数位数只能少一位，哪怕前面位是0，甚至是全为0（附带好整除时）\n\n余数 是指 CRC校验码\n除数 是指 生成多项式转成的二进制位\n生成多项式位数 = CRC校验码位数 + 1\n\n## 将多项式转成二进制位\n\n由`G（X）= X4 + X3 + 1`可以知道，它一共是5位（总位数等于最高位的幂次加1，即4+1=5），然后根据多项式各项的含义（多项式只列出二进制值为1的位，也就是这个二进制的第4位、第3位、第0位的二进制均为1，其它位均为0）很快就可得到它的二进制比特串为11001。\n\n`g（x）= x16 + x15 + x2 +1` 对应二进制比特串为：11000000000000101\n`g（x）= x16 + x15 + x5 +1` 对应二进制比特串为：11000000000100001\n\n**按照国际上通行的标准, 多项式转成二进制位后最高位和最低位必须均为“1”.**\n\n## 生成多项式\n\n用于在接收端进行校验时，对接收的帧进行除法运算的**除数**,通常是以多项方式表示.\n\n## CRC校验码\n\n所选定的除数二进制位数（假设为k位），然后在要发送的数据帧（假设为m位）后面加上k-1位“0”，然后以这个加了k-1个“0“的新帧（一共是m+k-1位）以“模2除法”方式除以上面这个除数，所得到的余数（也是二进制的比特串）就是该帧的CRC校验码.\n\n## 接收端处理\n\n将校验码(上面的余数)附加在原数据帧（就是m位的帧）后面，构建一个新帧发送到接收端；最后在接收端再把这个新帧以“模2除法”方式除以前面选择的除数(上面的生成多项式转成的二进制位)，如果没有余数，则表明该帧在传输过程中没出错，否则出现了差错。\n\n## 举个例子\n\n发送端要发送的 m 位二进制数据为 10110011, 一共8位.选择的生成多项式为 G(x) = X4 + X3 + 1, 将G(x) 转成二进制位:11001, 一共5位,那么将 4 位 0000 附加到 m位二进制数据 后为: 101100110000, 现在 被除数是 101100110000, 除数是 11001, 得到的余数为 0100, 最后将 m 位二进制数据 加上 余数 0100 得到 101100110100  发送给接收端.\n\n![crc-2](http://7xt8a6.com1.z0.glb.clouddn.com/crc-2.jpg)\n\n## 练习1\n\n- 信息字段代码为: 1011001, 对应 m(x)=x6+x4+x3+1(第6,4,3,0位为1,其他位为0)；\n- 假设生成多项式为：g(x)=x4+x3+1；则对应g(x)的代码为: 11001(第4,3,0位为1,其他位均为0)\n- 将信息字段后追加 4个零得到 10110010000(生成多项式一共5位所以要加4个零)\n- 将 10110010000 除以 11001 得到余数 1010,也就是说 CRC校验码为 1010\n- 最后的发送数据: 10110011010 (也就是原始数据加上CRC校验码)\n\n## 练习2\n\n- 已知信息位为 1100，\n- 生成多项式G(x) = x3+x+1, 对应的二进制位为 1011\n- 信息位加上3个零为 1100000\n- 1100000 除以 1011 得到的 CRC校验码为 010\n- 最后发送的信息为 1100010\n\n## 参考\n\n- [最通俗的CRC校验原理剖析](http://winda.blog.51cto.com/55153/1063951)","slug":"对循环冗余校验码CRC的理解","published":1,"updated":"2018-01-01T12:55:41.586Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfto0q9a002818c7mx1gqvnv","content":"<h2 id=\"模2加法\"><a href=\"#模2加法\" class=\"headerlink\" title=\"模2加法\"></a>模2加法</h2><p>1+1=0, 0+1=1, 1+0=1, 0+0=0</p>\n<h2 id=\"模2减法\"><a href=\"#模2减法\" class=\"headerlink\" title=\"模2减法\"></a>模2减法</h2><p>1-1=0, 0-1=1, 1-0=1, 0-0=0</p>\n<p>相当于二进制中的逻辑异或运算。也就是比较后两者对应位相同则结果为“0”，不同则结果为“1”.</p>\n<h2 id=\"模2除法\"><a href=\"#模2除法\" class=\"headerlink\" title=\"模2除法\"></a>模2除法</h2><p>基于模2减法.</p>\n<h2 id=\"模2乘法\"><a href=\"#模2乘法\" class=\"headerlink\" title=\"模2乘法\"></a>模2乘法</h2><p>基于模2加法</p>\n<h2 id=\"模运算举例\"><a href=\"#模运算举例\" class=\"headerlink\" title=\"模运算举例\"></a>模运算举例</h2><p><img src=\"http://7xt8a6.com1.z0.glb.clouddn.com/crc-1.jpg\" alt=\"crc-1\"></p>\n<h2 id=\"CRC校验码的位数\"><a href=\"#CRC校验码的位数\" class=\"headerlink\" title=\"CRC校验码的位数\"></a>CRC校验码的位数</h2><blockquote>\n<p>余数的位数一定要是比除数位数只能少一位，哪怕前面位是0，甚至是全为0（附带好整除时）</p>\n</blockquote>\n<p>余数 是指 CRC校验码<br>除数 是指 生成多项式转成的二进制位<br>生成多项式位数 = CRC校验码位数 + 1</p>\n<h2 id=\"将多项式转成二进制位\"><a href=\"#将多项式转成二进制位\" class=\"headerlink\" title=\"将多项式转成二进制位\"></a>将多项式转成二进制位</h2><p>由<code>G（X）= X4 + X3 + 1</code>可以知道，它一共是5位（总位数等于最高位的幂次加1，即4+1=5），然后根据多项式各项的含义（多项式只列出二进制值为1的位，也就是这个二进制的第4位、第3位、第0位的二进制均为1，其它位均为0）很快就可得到它的二进制比特串为11001。</p>\n<p><code>g（x）= x16 + x15 + x2 +1</code> 对应二进制比特串为：11000000000000101<br><code>g（x）= x16 + x15 + x5 +1</code> 对应二进制比特串为：11000000000100001</p>\n<p><strong>按照国际上通行的标准, 多项式转成二进制位后最高位和最低位必须均为“1”.</strong></p>\n<h2 id=\"生成多项式\"><a href=\"#生成多项式\" class=\"headerlink\" title=\"生成多项式\"></a>生成多项式</h2><p>用于在接收端进行校验时，对接收的帧进行除法运算的<strong>除数</strong>,通常是以多项方式表示.</p>\n<h2 id=\"CRC校验码\"><a href=\"#CRC校验码\" class=\"headerlink\" title=\"CRC校验码\"></a>CRC校验码</h2><p>所选定的除数二进制位数（假设为k位），然后在要发送的数据帧（假设为m位）后面加上k-1位“0”，然后以这个加了k-1个“0“的新帧（一共是m+k-1位）以“模2除法”方式除以上面这个除数，所得到的余数（也是二进制的比特串）就是该帧的CRC校验码.</p>\n<h2 id=\"接收端处理\"><a href=\"#接收端处理\" class=\"headerlink\" title=\"接收端处理\"></a>接收端处理</h2><p>将校验码(上面的余数)附加在原数据帧（就是m位的帧）后面，构建一个新帧发送到接收端；最后在接收端再把这个新帧以“模2除法”方式除以前面选择的除数(上面的生成多项式转成的二进制位)，如果没有余数，则表明该帧在传输过程中没出错，否则出现了差错。</p>\n<h2 id=\"举个例子\"><a href=\"#举个例子\" class=\"headerlink\" title=\"举个例子\"></a>举个例子</h2><p>发送端要发送的 m 位二进制数据为 10110011, 一共8位.选择的生成多项式为 G(x) = X4 + X3 + 1, 将G(x) 转成二进制位:11001, 一共5位,那么将 4 位 0000 附加到 m位二进制数据 后为: 101100110000, 现在 被除数是 101100110000, 除数是 11001, 得到的余数为 0100, 最后将 m 位二进制数据 加上 余数 0100 得到 101100110100  发送给接收端.</p>\n<p><img src=\"http://7xt8a6.com1.z0.glb.clouddn.com/crc-2.jpg\" alt=\"crc-2\"></p>\n<h2 id=\"练习1\"><a href=\"#练习1\" class=\"headerlink\" title=\"练习1\"></a>练习1</h2><ul>\n<li>信息字段代码为: 1011001, 对应 m(x)=x6+x4+x3+1(第6,4,3,0位为1,其他位为0)；</li>\n<li>假设生成多项式为：g(x)=x4+x3+1；则对应g(x)的代码为: 11001(第4,3,0位为1,其他位均为0)</li>\n<li>将信息字段后追加 4个零得到 10110010000(生成多项式一共5位所以要加4个零)</li>\n<li>将 10110010000 除以 11001 得到余数 1010,也就是说 CRC校验码为 1010</li>\n<li>最后的发送数据: 10110011010 (也就是原始数据加上CRC校验码)</li>\n</ul>\n<h2 id=\"练习2\"><a href=\"#练习2\" class=\"headerlink\" title=\"练习2\"></a>练习2</h2><ul>\n<li>已知信息位为 1100，</li>\n<li>生成多项式G(x) = x3+x+1, 对应的二进制位为 1011</li>\n<li>信息位加上3个零为 1100000</li>\n<li>1100000 除以 1011 得到的 CRC校验码为 010</li>\n<li>最后发送的信息为 1100010</li>\n</ul>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"http://winda.blog.51cto.com/55153/1063951\" target=\"_blank\" rel=\"external\">最通俗的CRC校验原理剖析</a></li>\n</ul>\n","excerpt":"","more":"<h2 id=\"模2加法\"><a href=\"#模2加法\" class=\"headerlink\" title=\"模2加法\"></a>模2加法</h2><p>1+1=0, 0+1=1, 1+0=1, 0+0=0</p>\n<h2 id=\"模2减法\"><a href=\"#模2减法\" class=\"headerlink\" title=\"模2减法\"></a>模2减法</h2><p>1-1=0, 0-1=1, 1-0=1, 0-0=0</p>\n<p>相当于二进制中的逻辑异或运算。也就是比较后两者对应位相同则结果为“0”，不同则结果为“1”.</p>\n<h2 id=\"模2除法\"><a href=\"#模2除法\" class=\"headerlink\" title=\"模2除法\"></a>模2除法</h2><p>基于模2减法.</p>\n<h2 id=\"模2乘法\"><a href=\"#模2乘法\" class=\"headerlink\" title=\"模2乘法\"></a>模2乘法</h2><p>基于模2加法</p>\n<h2 id=\"模运算举例\"><a href=\"#模运算举例\" class=\"headerlink\" title=\"模运算举例\"></a>模运算举例</h2><p><img src=\"http://7xt8a6.com1.z0.glb.clouddn.com/crc-1.jpg\" alt=\"crc-1\"></p>\n<h2 id=\"CRC校验码的位数\"><a href=\"#CRC校验码的位数\" class=\"headerlink\" title=\"CRC校验码的位数\"></a>CRC校验码的位数</h2><blockquote>\n<p>余数的位数一定要是比除数位数只能少一位，哪怕前面位是0，甚至是全为0（附带好整除时）</p>\n</blockquote>\n<p>余数 是指 CRC校验码<br>除数 是指 生成多项式转成的二进制位<br>生成多项式位数 = CRC校验码位数 + 1</p>\n<h2 id=\"将多项式转成二进制位\"><a href=\"#将多项式转成二进制位\" class=\"headerlink\" title=\"将多项式转成二进制位\"></a>将多项式转成二进制位</h2><p>由<code>G（X）= X4 + X3 + 1</code>可以知道，它一共是5位（总位数等于最高位的幂次加1，即4+1=5），然后根据多项式各项的含义（多项式只列出二进制值为1的位，也就是这个二进制的第4位、第3位、第0位的二进制均为1，其它位均为0）很快就可得到它的二进制比特串为11001。</p>\n<p><code>g（x）= x16 + x15 + x2 +1</code> 对应二进制比特串为：11000000000000101<br><code>g（x）= x16 + x15 + x5 +1</code> 对应二进制比特串为：11000000000100001</p>\n<p><strong>按照国际上通行的标准, 多项式转成二进制位后最高位和最低位必须均为“1”.</strong></p>\n<h2 id=\"生成多项式\"><a href=\"#生成多项式\" class=\"headerlink\" title=\"生成多项式\"></a>生成多项式</h2><p>用于在接收端进行校验时，对接收的帧进行除法运算的<strong>除数</strong>,通常是以多项方式表示.</p>\n<h2 id=\"CRC校验码\"><a href=\"#CRC校验码\" class=\"headerlink\" title=\"CRC校验码\"></a>CRC校验码</h2><p>所选定的除数二进制位数（假设为k位），然后在要发送的数据帧（假设为m位）后面加上k-1位“0”，然后以这个加了k-1个“0“的新帧（一共是m+k-1位）以“模2除法”方式除以上面这个除数，所得到的余数（也是二进制的比特串）就是该帧的CRC校验码.</p>\n<h2 id=\"接收端处理\"><a href=\"#接收端处理\" class=\"headerlink\" title=\"接收端处理\"></a>接收端处理</h2><p>将校验码(上面的余数)附加在原数据帧（就是m位的帧）后面，构建一个新帧发送到接收端；最后在接收端再把这个新帧以“模2除法”方式除以前面选择的除数(上面的生成多项式转成的二进制位)，如果没有余数，则表明该帧在传输过程中没出错，否则出现了差错。</p>\n<h2 id=\"举个例子\"><a href=\"#举个例子\" class=\"headerlink\" title=\"举个例子\"></a>举个例子</h2><p>发送端要发送的 m 位二进制数据为 10110011, 一共8位.选择的生成多项式为 G(x) = X4 + X3 + 1, 将G(x) 转成二进制位:11001, 一共5位,那么将 4 位 0000 附加到 m位二进制数据 后为: 101100110000, 现在 被除数是 101100110000, 除数是 11001, 得到的余数为 0100, 最后将 m 位二进制数据 加上 余数 0100 得到 101100110100  发送给接收端.</p>\n<p><img src=\"http://7xt8a6.com1.z0.glb.clouddn.com/crc-2.jpg\" alt=\"crc-2\"></p>\n<h2 id=\"练习1\"><a href=\"#练习1\" class=\"headerlink\" title=\"练习1\"></a>练习1</h2><ul>\n<li>信息字段代码为: 1011001, 对应 m(x)=x6+x4+x3+1(第6,4,3,0位为1,其他位为0)；</li>\n<li>假设生成多项式为：g(x)=x4+x3+1；则对应g(x)的代码为: 11001(第4,3,0位为1,其他位均为0)</li>\n<li>将信息字段后追加 4个零得到 10110010000(生成多项式一共5位所以要加4个零)</li>\n<li>将 10110010000 除以 11001 得到余数 1010,也就是说 CRC校验码为 1010</li>\n<li>最后的发送数据: 10110011010 (也就是原始数据加上CRC校验码)</li>\n</ul>\n<h2 id=\"练习2\"><a href=\"#练习2\" class=\"headerlink\" title=\"练习2\"></a>练习2</h2><ul>\n<li>已知信息位为 1100，</li>\n<li>生成多项式G(x) = x3+x+1, 对应的二进制位为 1011</li>\n<li>信息位加上3个零为 1100000</li>\n<li>1100000 除以 1011 得到的 CRC校验码为 010</li>\n<li>最后发送的信息为 1100010</li>\n</ul>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"http://winda.blog.51cto.com/55153/1063951\">最通俗的CRC校验原理剖析</a></li>\n</ul>\n"},{"title":"对锁的理解","title_url":"lock-synchronized-volatile","date":"2017-06-08T16:00:00.000Z","description":"对锁的理解","_content":"\n## 关于锁的基本概念\n\n锁提供了两种主要特性：互斥（mutual exclusion） 和可见性（visibility）。\n\n互斥即一次只允许一个线程持有某个特定的锁，因此可使用该特性实现对共享数据的协调访问协议，这样，一次就只有一个线程能够使用该共享数据。\n\n可见性要更加复杂一些，它必须确保释放锁之前对共享数据做出的更改对于随后获得该锁的另一个线程是可见的 —— 如果没有同步机制提供的这种可见性保证，线程看到的共享变量可能是修改前的值或不一致的值，这将引发许多严重问题。\n\n## 互斥\n\n- 使用 `synchronized` 来确保线程的互斥,也就是确保线程对共享数据的原子性操作.\n\n## 可见性\n\n- 使用 `volatile` 来确保可见性,多个线程总能读到共享变量的最新值\n\n- 要使 `volatile` 变量提供理想的线程安全，必须同时满足下面两个条件：\n\n    1. 对变量的写操作不依赖于当前值(也就是不能进行 读取->修改->写入 的操作, 只能进行 修改->写入)。\n\n    2. 该变量没有包含在具有其他变量的不变式中。\n\n\n- 对于第二个条件,具体的例子如下\n\n```java\n@NotThreadSafe \npublic class NumberRange {\n    private int lower, upper;\n \n    public int getLower() { return lower; }\n    public int getUpper() { return upper; }\n \n    public void setLower(int value) { \n        if (value > upper) \n            throw new IllegalArgumentException(...);\n        lower = value;\n    }\n \n    public void setUpper(int value) { \n        if (value < lower) \n            throw new IllegalArgumentException(...);\n        upper = value;\n    }\n}\n```\n\n- 对于上面的例子,如果初始状态是 (0, 5)，同一时间内，线程 A 调用 setLower(4) 并且线程 B 调用 setUpper(3)，显然这两个操作交叉存入的值是不符合条件的，那么两个线程都会通过用于保护不变式的检查，使得最后的范围值是 (4, 3) —— 一个无效值。至于针对范围的其他操作，我们需要使 setLower() 和 setUpper() 操作原子化 —— 而将字段定义为 volatile 类型是无法实现这一目的的。\n\n## synchronized 和 volatile 组合使用\n\n- 结合使用的一个例子, 其中 `synchronized`一次只允许一个线程访问值, `volatile` 允许多个线程执行读操作, 这样组合使用后既可以保证操作的原子性,也可以确保所有的线程在**读**上能够取得很好的性能\n\n```java\n@ThreadSafe\npublic class CheesyCounter {\n    // Employs the cheap read-write lock trick\n    // All mutative operations MUST be done with the 'this' lock held\n    @GuardedBy(\"this\") private volatile int value;\n \n    public int getValue() { return value; }\n \n    public synchronized int increment() {\n        return value++;\n    }\n}\n```\n\n## 参考\n\n- [正确使用 Volatile 变量](https://www.ibm.com/developerworks/cn/java/j-jtp06197.html)","source":"_posts/对锁的理解.md","raw":"---\ntitle: 对锁的理解\ntitle_url: lock-synchronized-volatile\ndate: 2017-06-09\ntags: [Java,synchronized,volatile,锁]\ncategories: 多线程\ndescription: 对锁的理解\n---\n\n## 关于锁的基本概念\n\n锁提供了两种主要特性：互斥（mutual exclusion） 和可见性（visibility）。\n\n互斥即一次只允许一个线程持有某个特定的锁，因此可使用该特性实现对共享数据的协调访问协议，这样，一次就只有一个线程能够使用该共享数据。\n\n可见性要更加复杂一些，它必须确保释放锁之前对共享数据做出的更改对于随后获得该锁的另一个线程是可见的 —— 如果没有同步机制提供的这种可见性保证，线程看到的共享变量可能是修改前的值或不一致的值，这将引发许多严重问题。\n\n## 互斥\n\n- 使用 `synchronized` 来确保线程的互斥,也就是确保线程对共享数据的原子性操作.\n\n## 可见性\n\n- 使用 `volatile` 来确保可见性,多个线程总能读到共享变量的最新值\n\n- 要使 `volatile` 变量提供理想的线程安全，必须同时满足下面两个条件：\n\n    1. 对变量的写操作不依赖于当前值(也就是不能进行 读取->修改->写入 的操作, 只能进行 修改->写入)。\n\n    2. 该变量没有包含在具有其他变量的不变式中。\n\n\n- 对于第二个条件,具体的例子如下\n\n```java\n@NotThreadSafe \npublic class NumberRange {\n    private int lower, upper;\n \n    public int getLower() { return lower; }\n    public int getUpper() { return upper; }\n \n    public void setLower(int value) { \n        if (value > upper) \n            throw new IllegalArgumentException(...);\n        lower = value;\n    }\n \n    public void setUpper(int value) { \n        if (value < lower) \n            throw new IllegalArgumentException(...);\n        upper = value;\n    }\n}\n```\n\n- 对于上面的例子,如果初始状态是 (0, 5)，同一时间内，线程 A 调用 setLower(4) 并且线程 B 调用 setUpper(3)，显然这两个操作交叉存入的值是不符合条件的，那么两个线程都会通过用于保护不变式的检查，使得最后的范围值是 (4, 3) —— 一个无效值。至于针对范围的其他操作，我们需要使 setLower() 和 setUpper() 操作原子化 —— 而将字段定义为 volatile 类型是无法实现这一目的的。\n\n## synchronized 和 volatile 组合使用\n\n- 结合使用的一个例子, 其中 `synchronized`一次只允许一个线程访问值, `volatile` 允许多个线程执行读操作, 这样组合使用后既可以保证操作的原子性,也可以确保所有的线程在**读**上能够取得很好的性能\n\n```java\n@ThreadSafe\npublic class CheesyCounter {\n    // Employs the cheap read-write lock trick\n    // All mutative operations MUST be done with the 'this' lock held\n    @GuardedBy(\"this\") private volatile int value;\n \n    public int getValue() { return value; }\n \n    public synchronized int increment() {\n        return value++;\n    }\n}\n```\n\n## 参考\n\n- [正确使用 Volatile 变量](https://www.ibm.com/developerworks/cn/java/j-jtp06197.html)","slug":"对锁的理解","published":1,"updated":"2017-06-20T14:11:14.006Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfto0q9d002c18c7da1bpe8r","content":"<h2 id=\"关于锁的基本概念\"><a href=\"#关于锁的基本概念\" class=\"headerlink\" title=\"关于锁的基本概念\"></a>关于锁的基本概念</h2><p>锁提供了两种主要特性：互斥（mutual exclusion） 和可见性（visibility）。</p>\n<p>互斥即一次只允许一个线程持有某个特定的锁，因此可使用该特性实现对共享数据的协调访问协议，这样，一次就只有一个线程能够使用该共享数据。</p>\n<p>可见性要更加复杂一些，它必须确保释放锁之前对共享数据做出的更改对于随后获得该锁的另一个线程是可见的 —— 如果没有同步机制提供的这种可见性保证，线程看到的共享变量可能是修改前的值或不一致的值，这将引发许多严重问题。</p>\n<h2 id=\"互斥\"><a href=\"#互斥\" class=\"headerlink\" title=\"互斥\"></a>互斥</h2><ul>\n<li>使用 <code>synchronized</code> 来确保线程的互斥,也就是确保线程对共享数据的原子性操作.</li>\n</ul>\n<h2 id=\"可见性\"><a href=\"#可见性\" class=\"headerlink\" title=\"可见性\"></a>可见性</h2><ul>\n<li><p>使用 <code>volatile</code> 来确保可见性,多个线程总能读到共享变量的最新值</p>\n</li>\n<li><p>要使 <code>volatile</code> 变量提供理想的线程安全，必须同时满足下面两个条件：</p>\n<ol>\n<li><p>对变量的写操作不依赖于当前值(也就是不能进行 读取-&gt;修改-&gt;写入 的操作, 只能进行 修改-&gt;写入)。</p>\n</li>\n<li><p>该变量没有包含在具有其他变量的不变式中。</p>\n</li>\n</ol>\n</li>\n</ul>\n<ul>\n<li>对于第二个条件,具体的例子如下</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@NotThreadSafe</span> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NumberRange</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> lower, upper;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getLower</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> lower; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getUpper</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> upper; &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setLower</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span> </span>&#123; </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (value &gt; upper) </span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(...);</span><br><span class=\"line\">        lower = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setUpper</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span> </span>&#123; </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (value &lt; lower) </span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(...);</span><br><span class=\"line\">        upper = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>对于上面的例子,如果初始状态是 (0, 5)，同一时间内，线程 A 调用 setLower(4) 并且线程 B 调用 setUpper(3)，显然这两个操作交叉存入的值是不符合条件的，那么两个线程都会通过用于保护不变式的检查，使得最后的范围值是 (4, 3) —— 一个无效值。至于针对范围的其他操作，我们需要使 setLower() 和 setUpper() 操作原子化 —— 而将字段定义为 volatile 类型是无法实现这一目的的。</li>\n</ul>\n<h2 id=\"synchronized-和-volatile-组合使用\"><a href=\"#synchronized-和-volatile-组合使用\" class=\"headerlink\" title=\"synchronized 和 volatile 组合使用\"></a>synchronized 和 volatile 组合使用</h2><ul>\n<li>结合使用的一个例子, 其中 <code>synchronized</code>一次只允许一个线程访问值, <code>volatile</code> 允许多个线程执行读操作, 这样组合使用后既可以保证操作的原子性,也可以确保所有的线程在<strong>读</strong>上能够取得很好的性能</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ThreadSafe</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CheesyCounter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Employs the cheap read-write lock trick</span></span><br><span class=\"line\">    <span class=\"comment\">// All mutative operations MUST be done with the 'this' lock held</span></span><br><span class=\"line\">    <span class=\"meta\">@GuardedBy</span>(<span class=\"string\">\"this\"</span>) <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">int</span> value;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getValue</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> value; &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">int</span> <span class=\"title\">increment</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://www.ibm.com/developerworks/cn/java/j-jtp06197.html\" target=\"_blank\" rel=\"external\">正确使用 Volatile 变量</a></li>\n</ul>\n","excerpt":"","more":"<h2 id=\"关于锁的基本概念\"><a href=\"#关于锁的基本概念\" class=\"headerlink\" title=\"关于锁的基本概念\"></a>关于锁的基本概念</h2><p>锁提供了两种主要特性：互斥（mutual exclusion） 和可见性（visibility）。</p>\n<p>互斥即一次只允许一个线程持有某个特定的锁，因此可使用该特性实现对共享数据的协调访问协议，这样，一次就只有一个线程能够使用该共享数据。</p>\n<p>可见性要更加复杂一些，它必须确保释放锁之前对共享数据做出的更改对于随后获得该锁的另一个线程是可见的 —— 如果没有同步机制提供的这种可见性保证，线程看到的共享变量可能是修改前的值或不一致的值，这将引发许多严重问题。</p>\n<h2 id=\"互斥\"><a href=\"#互斥\" class=\"headerlink\" title=\"互斥\"></a>互斥</h2><ul>\n<li>使用 <code>synchronized</code> 来确保线程的互斥,也就是确保线程对共享数据的原子性操作.</li>\n</ul>\n<h2 id=\"可见性\"><a href=\"#可见性\" class=\"headerlink\" title=\"可见性\"></a>可见性</h2><ul>\n<li><p>使用 <code>volatile</code> 来确保可见性,多个线程总能读到共享变量的最新值</p>\n</li>\n<li><p>要使 <code>volatile</code> 变量提供理想的线程安全，必须同时满足下面两个条件：</p>\n<ol>\n<li><p>对变量的写操作不依赖于当前值(也就是不能进行 读取-&gt;修改-&gt;写入 的操作, 只能进行 修改-&gt;写入)。</p>\n</li>\n<li><p>该变量没有包含在具有其他变量的不变式中。</p>\n</li>\n</ol>\n</li>\n</ul>\n<ul>\n<li>对于第二个条件,具体的例子如下</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@NotThreadSafe</span> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NumberRange</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> lower, upper;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getLower</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> lower; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getUpper</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> upper; &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setLower</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span> </span>&#123; </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (value &gt; upper) </span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(...);</span><br><span class=\"line\">        lower = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setUpper</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span> </span>&#123; </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (value &lt; lower) </span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(...);</span><br><span class=\"line\">        upper = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>对于上面的例子,如果初始状态是 (0, 5)，同一时间内，线程 A 调用 setLower(4) 并且线程 B 调用 setUpper(3)，显然这两个操作交叉存入的值是不符合条件的，那么两个线程都会通过用于保护不变式的检查，使得最后的范围值是 (4, 3) —— 一个无效值。至于针对范围的其他操作，我们需要使 setLower() 和 setUpper() 操作原子化 —— 而将字段定义为 volatile 类型是无法实现这一目的的。</li>\n</ul>\n<h2 id=\"synchronized-和-volatile-组合使用\"><a href=\"#synchronized-和-volatile-组合使用\" class=\"headerlink\" title=\"synchronized 和 volatile 组合使用\"></a>synchronized 和 volatile 组合使用</h2><ul>\n<li>结合使用的一个例子, 其中 <code>synchronized</code>一次只允许一个线程访问值, <code>volatile</code> 允许多个线程执行读操作, 这样组合使用后既可以保证操作的原子性,也可以确保所有的线程在<strong>读</strong>上能够取得很好的性能</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ThreadSafe</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CheesyCounter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Employs the cheap read-write lock trick</span></span><br><span class=\"line\">    <span class=\"comment\">// All mutative operations MUST be done with the 'this' lock held</span></span><br><span class=\"line\">    <span class=\"meta\">@GuardedBy</span>(<span class=\"string\">\"this\"</span>) <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">int</span> value;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getValue</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> value; &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">int</span> <span class=\"title\">increment</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://www.ibm.com/developerworks/cn/java/j-jtp06197.html\">正确使用 Volatile 变量</a></li>\n</ul>\n"},{"title":"总结一下关于Spring中bean的scope属性","title_url":"Spring-bean-scope-usage","date":"2016-07-12T16:00:00.000Z","description":"总结一下关于Spring中bean的scope属性，主要是Controller的singleton和prototype的区别，并举例说明","_content":"\n## 关于Spring bean的scope属性\n\n- Spring的bean默认是singleton-单例模式的，即Spring容器只存在一个共享的bean实例\n\n- 对于singleton-单例模式，如果有共享变量会导致线程不安全\n\n- 如果为prototype-原型模式，那么每次对bean的请求都会创建一个新的bean实例\n\n- prototype-原型模式是线程安全的，Spring中的Controller默认是singleton\n\n- 可以在类上面通过`@Scope(\"prototype\")`设置为多例，或者在xml中设置`scope=\"prototype\"`\n\n- singleton-单例模式相对prototype-原型模式性能更高，因为不会每次对bean的请求都会创建一个新的bean实例\n\n- 二者选择的原则：有状态的bean都使用prototype，而对无状态的bean则应该使用singleton\n\n- 有无状态是指bean中有无成员变量\n\n- Struts2的Action默认是多例的，原因在于Struts2将表单数据作为Action的成员变量\n\n- scope还可以设置成request、session和global session\n\n## 举例说明Controller的singleton和prototype的区别\n\n- TestController如下\n```java\n@Controller\n@RequestMapping(\"/test\")\n@Api(basePath = \"/test\", value = \"test\", description = \"测试相关接口\", position = 8)\npublic class TestController {\n\t\n\tprivate Map<String, String> cacheData = Collections.synchronizedMap(new HashMap<String, String>());\n\n\t@ResponseBody\n\t@RequestMapping(value = \"/test_cache\", method = RequestMethod.GET, produces = \"application/json; charset=utf-8\")\n\t@ApiOperation(value = \"测试scope\", notes = \"测试scope\", response = KVBean.class, responseContainer = \"List\")\n\tpublic List<KVBean> getTestCache(@RequestParam String key, @RequestParam String value) throws Exception {\n\t\t\n\t\tSystem.out.println(Thread.currentThread().getName());\n\t\tcacheData.put(key, value);\n\t\t\n\t\tList<KVBean> data = new ArrayList<KVBean>();\n\t\tfor (Entry<String, String> it : cacheData.entrySet()) {\n\t\t\tdata.add(new KVBean(it.getKey(), it.getValue()));\n\t\t}\n\t\t\n\t\treturn data;\n\t}\n\t\n}\n```\n\n- 第一次在浏览器中输入\n`http://localhost:8080/plainWebApi/test/test_cache?key=1&value=1`\n返回\n`[{\"key\":\"1\",\"value\":\"1\",\"next\":null}]`\n第二次在浏览器中输入\n`http://localhost:8080/plainWebApi/test/test_cache?key=2&value=2`\n返回\n`[{\"key\":\"1\",\"value\":\"1\",\"next\":null},{\"key\":\"2\",\"value\":\"2\",\"next\":null}]`\n可见对于两次请求cacheData都是同一个对象，TestController当然也没有被new。\n\n- 增加`@Scope(value = \"prototype\")`的TestController如下\n```java\n@Controller\n@RequestMapping(\"/test\")\n@Api(basePath = \"/test\", value = \"test\", description = \"测试相关接口\", position = 8)\n@Scope(value = \"prototype\")\npublic class TestController {\n\t\n\tprivate Map<String, String> cacheData = Collections.synchronizedMap(new HashMap<String, String>());\n\n\t@ResponseBody\n\t@RequestMapping(value = \"/test_cache\", method = RequestMethod.GET, produces = \"application/json; charset=utf-8\")\n\t@ApiOperation(value = \"测试scope\", notes = \"测试scope\", response = KVBean.class, responseContainer = \"List\")\n\tpublic List<KVBean> getTestCache(@RequestParam String key, @RequestParam String value) throws Exception {\n\t\t\n\t\tSystem.out.println(Thread.currentThread().getName());\n\t\tcacheData.put(key, value);\n\t\t\n\t\tList<KVBean> data = new ArrayList<KVBean>();\n\t\tfor (Entry<String, String> it : cacheData.entrySet()) {\n\t\t\tdata.add(new KVBean(it.getKey(), it.getValue()));\n\t\t}\n\t\t\n\t\treturn data;\n\t}\n\t\n}\n```\n\n- 同样第一次在浏览器中输入\n`http://localhost:8080/plainWebApi/test/test_cache?key=1&value=1`\n返回\n`[{\"key\":\"1\",\"value\":\"1\",\"next\":null}]`\n第二次在浏览器中输入\n`http://localhost:8080/plainWebApi/test/test_cache?key=2&value=2`\n返回\n`[{\"key\":\"2\",\"value\":\"2\",\"next\":null}]`\n可见对于两次请求cacheData都是不是一个对象，TestController当然也不是同一个。\n\n## 例子的详细代码\n\n- [点这里](https://github.com/toulezu/play/tree/master/plainWebApi)\n\n## 参考：\n- [Struts action的单例与多例](http://my.oschina.net/davidzhang/blog/67429)\n- [在spring来管理实例对象prototype和singleton的选择.针对action如何使用](http://www.cnblogs.com/shipengzhi/articles/2099694.html)\n- [Spring MVC Controller单例陷阱](http://lavasoft.blog.51cto.com/62575/1394669)\n- [struts+spring action应配置为scope=\"prototype\"](http://www.cnblogs.com/JemBai/archive/2010/11/10/1873954.html)\n- [struts2 Action获取表单数据](http://blog.csdn.net/lsh6688/article/details/7863322)\n","source":"_posts/总结一下Spring中Bean的单例和多例.md","raw":"---\ntitle: 总结一下关于Spring中bean的scope属性\ntitle_url: Spring-bean-scope-usage\ndate: 2016-07-13\ntags: Spring\ncategories: 技术\ndescription: 总结一下关于Spring中bean的scope属性，主要是Controller的singleton和prototype的区别，并举例说明\n---\n\n## 关于Spring bean的scope属性\n\n- Spring的bean默认是singleton-单例模式的，即Spring容器只存在一个共享的bean实例\n\n- 对于singleton-单例模式，如果有共享变量会导致线程不安全\n\n- 如果为prototype-原型模式，那么每次对bean的请求都会创建一个新的bean实例\n\n- prototype-原型模式是线程安全的，Spring中的Controller默认是singleton\n\n- 可以在类上面通过`@Scope(\"prototype\")`设置为多例，或者在xml中设置`scope=\"prototype\"`\n\n- singleton-单例模式相对prototype-原型模式性能更高，因为不会每次对bean的请求都会创建一个新的bean实例\n\n- 二者选择的原则：有状态的bean都使用prototype，而对无状态的bean则应该使用singleton\n\n- 有无状态是指bean中有无成员变量\n\n- Struts2的Action默认是多例的，原因在于Struts2将表单数据作为Action的成员变量\n\n- scope还可以设置成request、session和global session\n\n## 举例说明Controller的singleton和prototype的区别\n\n- TestController如下\n```java\n@Controller\n@RequestMapping(\"/test\")\n@Api(basePath = \"/test\", value = \"test\", description = \"测试相关接口\", position = 8)\npublic class TestController {\n\t\n\tprivate Map<String, String> cacheData = Collections.synchronizedMap(new HashMap<String, String>());\n\n\t@ResponseBody\n\t@RequestMapping(value = \"/test_cache\", method = RequestMethod.GET, produces = \"application/json; charset=utf-8\")\n\t@ApiOperation(value = \"测试scope\", notes = \"测试scope\", response = KVBean.class, responseContainer = \"List\")\n\tpublic List<KVBean> getTestCache(@RequestParam String key, @RequestParam String value) throws Exception {\n\t\t\n\t\tSystem.out.println(Thread.currentThread().getName());\n\t\tcacheData.put(key, value);\n\t\t\n\t\tList<KVBean> data = new ArrayList<KVBean>();\n\t\tfor (Entry<String, String> it : cacheData.entrySet()) {\n\t\t\tdata.add(new KVBean(it.getKey(), it.getValue()));\n\t\t}\n\t\t\n\t\treturn data;\n\t}\n\t\n}\n```\n\n- 第一次在浏览器中输入\n`http://localhost:8080/plainWebApi/test/test_cache?key=1&value=1`\n返回\n`[{\"key\":\"1\",\"value\":\"1\",\"next\":null}]`\n第二次在浏览器中输入\n`http://localhost:8080/plainWebApi/test/test_cache?key=2&value=2`\n返回\n`[{\"key\":\"1\",\"value\":\"1\",\"next\":null},{\"key\":\"2\",\"value\":\"2\",\"next\":null}]`\n可见对于两次请求cacheData都是同一个对象，TestController当然也没有被new。\n\n- 增加`@Scope(value = \"prototype\")`的TestController如下\n```java\n@Controller\n@RequestMapping(\"/test\")\n@Api(basePath = \"/test\", value = \"test\", description = \"测试相关接口\", position = 8)\n@Scope(value = \"prototype\")\npublic class TestController {\n\t\n\tprivate Map<String, String> cacheData = Collections.synchronizedMap(new HashMap<String, String>());\n\n\t@ResponseBody\n\t@RequestMapping(value = \"/test_cache\", method = RequestMethod.GET, produces = \"application/json; charset=utf-8\")\n\t@ApiOperation(value = \"测试scope\", notes = \"测试scope\", response = KVBean.class, responseContainer = \"List\")\n\tpublic List<KVBean> getTestCache(@RequestParam String key, @RequestParam String value) throws Exception {\n\t\t\n\t\tSystem.out.println(Thread.currentThread().getName());\n\t\tcacheData.put(key, value);\n\t\t\n\t\tList<KVBean> data = new ArrayList<KVBean>();\n\t\tfor (Entry<String, String> it : cacheData.entrySet()) {\n\t\t\tdata.add(new KVBean(it.getKey(), it.getValue()));\n\t\t}\n\t\t\n\t\treturn data;\n\t}\n\t\n}\n```\n\n- 同样第一次在浏览器中输入\n`http://localhost:8080/plainWebApi/test/test_cache?key=1&value=1`\n返回\n`[{\"key\":\"1\",\"value\":\"1\",\"next\":null}]`\n第二次在浏览器中输入\n`http://localhost:8080/plainWebApi/test/test_cache?key=2&value=2`\n返回\n`[{\"key\":\"2\",\"value\":\"2\",\"next\":null}]`\n可见对于两次请求cacheData都是不是一个对象，TestController当然也不是同一个。\n\n## 例子的详细代码\n\n- [点这里](https://github.com/toulezu/play/tree/master/plainWebApi)\n\n## 参考：\n- [Struts action的单例与多例](http://my.oschina.net/davidzhang/blog/67429)\n- [在spring来管理实例对象prototype和singleton的选择.针对action如何使用](http://www.cnblogs.com/shipengzhi/articles/2099694.html)\n- [Spring MVC Controller单例陷阱](http://lavasoft.blog.51cto.com/62575/1394669)\n- [struts+spring action应配置为scope=\"prototype\"](http://www.cnblogs.com/JemBai/archive/2010/11/10/1873954.html)\n- [struts2 Action获取表单数据](http://blog.csdn.net/lsh6688/article/details/7863322)\n","slug":"总结一下Spring中Bean的单例和多例","published":1,"updated":"2016-08-23T13:43:30.706Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfto0q9h002f18c79qruz4yt","content":"<h2 id=\"关于Spring-bean的scope属性\"><a href=\"#关于Spring-bean的scope属性\" class=\"headerlink\" title=\"关于Spring bean的scope属性\"></a>关于Spring bean的scope属性</h2><ul>\n<li><p>Spring的bean默认是singleton-单例模式的，即Spring容器只存在一个共享的bean实例</p>\n</li>\n<li><p>对于singleton-单例模式，如果有共享变量会导致线程不安全</p>\n</li>\n<li><p>如果为prototype-原型模式，那么每次对bean的请求都会创建一个新的bean实例</p>\n</li>\n<li><p>prototype-原型模式是线程安全的，Spring中的Controller默认是singleton</p>\n</li>\n<li><p>可以在类上面通过<code>@Scope(&quot;prototype&quot;)</code>设置为多例，或者在xml中设置<code>scope=&quot;prototype&quot;</code></p>\n</li>\n<li><p>singleton-单例模式相对prototype-原型模式性能更高，因为不会每次对bean的请求都会创建一个新的bean实例</p>\n</li>\n<li><p>二者选择的原则：有状态的bean都使用prototype，而对无状态的bean则应该使用singleton</p>\n</li>\n<li><p>有无状态是指bean中有无成员变量</p>\n</li>\n<li><p>Struts2的Action默认是多例的，原因在于Struts2将表单数据作为Action的成员变量</p>\n</li>\n<li><p>scope还可以设置成request、session和global session</p>\n</li>\n</ul>\n<h2 id=\"举例说明Controller的singleton和prototype的区别\"><a href=\"#举例说明Controller的singleton和prototype的区别\" class=\"headerlink\" title=\"举例说明Controller的singleton和prototype的区别\"></a>举例说明Controller的singleton和prototype的区别</h2><ul>\n<li><p>TestController如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/test\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@Api</span>(basePath = <span class=\"string\">\"/test\"</span>, value = <span class=\"string\">\"test\"</span>, description = <span class=\"string\">\"测试相关接口\"</span>, position = <span class=\"number\">8</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestController</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Map&lt;String, String&gt; cacheData = Collections.synchronizedMap(<span class=\"keyword\">new</span> HashMap&lt;String, String&gt;());</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">\t<span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/test_cache\"</span>, method = RequestMethod.GET, produces = <span class=\"string\">\"application/json; charset=utf-8\"</span>)</span><br><span class=\"line\">\t<span class=\"meta\">@ApiOperation</span>(value = <span class=\"string\">\"测试scope\"</span>, notes = <span class=\"string\">\"测试scope\"</span>, response = KVBean.class, responseContainer = <span class=\"string\">\"List\"</span>)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> List&lt;KVBean&gt; <span class=\"title\">getTestCache</span><span class=\"params\">(@RequestParam String key, @RequestParam String value)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(Thread.currentThread().getName());</span><br><span class=\"line\">\t\tcacheData.put(key, value);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tList&lt;KVBean&gt; data = <span class=\"keyword\">new</span> ArrayList&lt;KVBean&gt;();</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (Entry&lt;String, String&gt; it : cacheData.entrySet()) &#123;</span><br><span class=\"line\">\t\t\tdata.add(<span class=\"keyword\">new</span> KVBean(it.getKey(), it.getValue()));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> data;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>第一次在浏览器中输入<br><code>http://localhost:8080/plainWebApi/test/test_cache?key=1&amp;value=1</code><br>返回<br><code>[{&quot;key&quot;:&quot;1&quot;,&quot;value&quot;:&quot;1&quot;,&quot;next&quot;:null}]</code><br>第二次在浏览器中输入<br><code>http://localhost:8080/plainWebApi/test/test_cache?key=2&amp;value=2</code><br>返回<br><code>[{&quot;key&quot;:&quot;1&quot;,&quot;value&quot;:&quot;1&quot;,&quot;next&quot;:null},{&quot;key&quot;:&quot;2&quot;,&quot;value&quot;:&quot;2&quot;,&quot;next&quot;:null}]</code><br>可见对于两次请求cacheData都是同一个对象，TestController当然也没有被new。</p>\n</li>\n<li><p>增加<code>@Scope(value = &quot;prototype&quot;)</code>的TestController如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/test\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@Api</span>(basePath = <span class=\"string\">\"/test\"</span>, value = <span class=\"string\">\"test\"</span>, description = <span class=\"string\">\"测试相关接口\"</span>, position = <span class=\"number\">8</span>)</span><br><span class=\"line\"><span class=\"meta\">@Scope</span>(value = <span class=\"string\">\"prototype\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestController</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Map&lt;String, String&gt; cacheData = Collections.synchronizedMap(<span class=\"keyword\">new</span> HashMap&lt;String, String&gt;());</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">\t<span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/test_cache\"</span>, method = RequestMethod.GET, produces = <span class=\"string\">\"application/json; charset=utf-8\"</span>)</span><br><span class=\"line\">\t<span class=\"meta\">@ApiOperation</span>(value = <span class=\"string\">\"测试scope\"</span>, notes = <span class=\"string\">\"测试scope\"</span>, response = KVBean.class, responseContainer = <span class=\"string\">\"List\"</span>)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> List&lt;KVBean&gt; <span class=\"title\">getTestCache</span><span class=\"params\">(@RequestParam String key, @RequestParam String value)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(Thread.currentThread().getName());</span><br><span class=\"line\">\t\tcacheData.put(key, value);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tList&lt;KVBean&gt; data = <span class=\"keyword\">new</span> ArrayList&lt;KVBean&gt;();</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (Entry&lt;String, String&gt; it : cacheData.entrySet()) &#123;</span><br><span class=\"line\">\t\t\tdata.add(<span class=\"keyword\">new</span> KVBean(it.getKey(), it.getValue()));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> data;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>同样第一次在浏览器中输入<br><code>http://localhost:8080/plainWebApi/test/test_cache?key=1&amp;value=1</code><br>返回<br><code>[{&quot;key&quot;:&quot;1&quot;,&quot;value&quot;:&quot;1&quot;,&quot;next&quot;:null}]</code><br>第二次在浏览器中输入<br><code>http://localhost:8080/plainWebApi/test/test_cache?key=2&amp;value=2</code><br>返回<br><code>[{&quot;key&quot;:&quot;2&quot;,&quot;value&quot;:&quot;2&quot;,&quot;next&quot;:null}]</code><br>可见对于两次请求cacheData都是不是一个对象，TestController当然也不是同一个。</p>\n</li>\n</ul>\n<h2 id=\"例子的详细代码\"><a href=\"#例子的详细代码\" class=\"headerlink\" title=\"例子的详细代码\"></a>例子的详细代码</h2><ul>\n<li><a href=\"https://github.com/toulezu/play/tree/master/plainWebApi\" target=\"_blank\" rel=\"external\">点这里</a></li>\n</ul>\n<h2 id=\"参考：\"><a href=\"#参考：\" class=\"headerlink\" title=\"参考：\"></a>参考：</h2><ul>\n<li><a href=\"http://my.oschina.net/davidzhang/blog/67429\" target=\"_blank\" rel=\"external\">Struts action的单例与多例</a></li>\n<li><a href=\"http://www.cnblogs.com/shipengzhi/articles/2099694.html\" target=\"_blank\" rel=\"external\">在spring来管理实例对象prototype和singleton的选择.针对action如何使用</a></li>\n<li><a href=\"http://lavasoft.blog.51cto.com/62575/1394669\" target=\"_blank\" rel=\"external\">Spring MVC Controller单例陷阱</a></li>\n<li><a href=\"http://www.cnblogs.com/JemBai/archive/2010/11/10/1873954.html\" target=\"_blank\" rel=\"external\">struts+spring action应配置为scope=”prototype”</a></li>\n<li><a href=\"http://blog.csdn.net/lsh6688/article/details/7863322\" target=\"_blank\" rel=\"external\">struts2 Action获取表单数据</a></li>\n</ul>\n","excerpt":"","more":"<h2 id=\"关于Spring-bean的scope属性\"><a href=\"#关于Spring-bean的scope属性\" class=\"headerlink\" title=\"关于Spring bean的scope属性\"></a>关于Spring bean的scope属性</h2><ul>\n<li><p>Spring的bean默认是singleton-单例模式的，即Spring容器只存在一个共享的bean实例</p>\n</li>\n<li><p>对于singleton-单例模式，如果有共享变量会导致线程不安全</p>\n</li>\n<li><p>如果为prototype-原型模式，那么每次对bean的请求都会创建一个新的bean实例</p>\n</li>\n<li><p>prototype-原型模式是线程安全的，Spring中的Controller默认是singleton</p>\n</li>\n<li><p>可以在类上面通过<code>@Scope(&quot;prototype&quot;)</code>设置为多例，或者在xml中设置<code>scope=&quot;prototype&quot;</code></p>\n</li>\n<li><p>singleton-单例模式相对prototype-原型模式性能更高，因为不会每次对bean的请求都会创建一个新的bean实例</p>\n</li>\n<li><p>二者选择的原则：有状态的bean都使用prototype，而对无状态的bean则应该使用singleton</p>\n</li>\n<li><p>有无状态是指bean中有无成员变量</p>\n</li>\n<li><p>Struts2的Action默认是多例的，原因在于Struts2将表单数据作为Action的成员变量</p>\n</li>\n<li><p>scope还可以设置成request、session和global session</p>\n</li>\n</ul>\n<h2 id=\"举例说明Controller的singleton和prototype的区别\"><a href=\"#举例说明Controller的singleton和prototype的区别\" class=\"headerlink\" title=\"举例说明Controller的singleton和prototype的区别\"></a>举例说明Controller的singleton和prototype的区别</h2><ul>\n<li><p>TestController如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/test\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@Api</span>(basePath = <span class=\"string\">\"/test\"</span>, value = <span class=\"string\">\"test\"</span>, description = <span class=\"string\">\"测试相关接口\"</span>, position = <span class=\"number\">8</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestController</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Map&lt;String, String&gt; cacheData = Collections.synchronizedMap(<span class=\"keyword\">new</span> HashMap&lt;String, String&gt;());</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">\t<span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/test_cache\"</span>, method = RequestMethod.GET, produces = <span class=\"string\">\"application/json; charset=utf-8\"</span>)</span><br><span class=\"line\">\t<span class=\"meta\">@ApiOperation</span>(value = <span class=\"string\">\"测试scope\"</span>, notes = <span class=\"string\">\"测试scope\"</span>, response = KVBean.class, responseContainer = <span class=\"string\">\"List\"</span>)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> List&lt;KVBean&gt; <span class=\"title\">getTestCache</span><span class=\"params\">(@RequestParam String key, @RequestParam String value)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(Thread.currentThread().getName());</span><br><span class=\"line\">\t\tcacheData.put(key, value);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tList&lt;KVBean&gt; data = <span class=\"keyword\">new</span> ArrayList&lt;KVBean&gt;();</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (Entry&lt;String, String&gt; it : cacheData.entrySet()) &#123;</span><br><span class=\"line\">\t\t\tdata.add(<span class=\"keyword\">new</span> KVBean(it.getKey(), it.getValue()));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> data;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>第一次在浏览器中输入<br><code>http://localhost:8080/plainWebApi/test/test_cache?key=1&amp;value=1</code><br>返回<br><code>[{&quot;key&quot;:&quot;1&quot;,&quot;value&quot;:&quot;1&quot;,&quot;next&quot;:null}]</code><br>第二次在浏览器中输入<br><code>http://localhost:8080/plainWebApi/test/test_cache?key=2&amp;value=2</code><br>返回<br><code>[{&quot;key&quot;:&quot;1&quot;,&quot;value&quot;:&quot;1&quot;,&quot;next&quot;:null},{&quot;key&quot;:&quot;2&quot;,&quot;value&quot;:&quot;2&quot;,&quot;next&quot;:null}]</code><br>可见对于两次请求cacheData都是同一个对象，TestController当然也没有被new。</p>\n</li>\n<li><p>增加<code>@Scope(value = &quot;prototype&quot;)</code>的TestController如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/test\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@Api</span>(basePath = <span class=\"string\">\"/test\"</span>, value = <span class=\"string\">\"test\"</span>, description = <span class=\"string\">\"测试相关接口\"</span>, position = <span class=\"number\">8</span>)</span><br><span class=\"line\"><span class=\"meta\">@Scope</span>(value = <span class=\"string\">\"prototype\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestController</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Map&lt;String, String&gt; cacheData = Collections.synchronizedMap(<span class=\"keyword\">new</span> HashMap&lt;String, String&gt;());</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">\t<span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/test_cache\"</span>, method = RequestMethod.GET, produces = <span class=\"string\">\"application/json; charset=utf-8\"</span>)</span><br><span class=\"line\">\t<span class=\"meta\">@ApiOperation</span>(value = <span class=\"string\">\"测试scope\"</span>, notes = <span class=\"string\">\"测试scope\"</span>, response = KVBean.class, responseContainer = <span class=\"string\">\"List\"</span>)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> List&lt;KVBean&gt; <span class=\"title\">getTestCache</span><span class=\"params\">(@RequestParam String key, @RequestParam String value)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(Thread.currentThread().getName());</span><br><span class=\"line\">\t\tcacheData.put(key, value);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tList&lt;KVBean&gt; data = <span class=\"keyword\">new</span> ArrayList&lt;KVBean&gt;();</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (Entry&lt;String, String&gt; it : cacheData.entrySet()) &#123;</span><br><span class=\"line\">\t\t\tdata.add(<span class=\"keyword\">new</span> KVBean(it.getKey(), it.getValue()));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> data;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>同样第一次在浏览器中输入<br><code>http://localhost:8080/plainWebApi/test/test_cache?key=1&amp;value=1</code><br>返回<br><code>[{&quot;key&quot;:&quot;1&quot;,&quot;value&quot;:&quot;1&quot;,&quot;next&quot;:null}]</code><br>第二次在浏览器中输入<br><code>http://localhost:8080/plainWebApi/test/test_cache?key=2&amp;value=2</code><br>返回<br><code>[{&quot;key&quot;:&quot;2&quot;,&quot;value&quot;:&quot;2&quot;,&quot;next&quot;:null}]</code><br>可见对于两次请求cacheData都是不是一个对象，TestController当然也不是同一个。</p>\n</li>\n</ul>\n<h2 id=\"例子的详细代码\"><a href=\"#例子的详细代码\" class=\"headerlink\" title=\"例子的详细代码\"></a>例子的详细代码</h2><ul>\n<li><a href=\"https://github.com/toulezu/play/tree/master/plainWebApi\">点这里</a></li>\n</ul>\n<h2 id=\"参考：\"><a href=\"#参考：\" class=\"headerlink\" title=\"参考：\"></a>参考：</h2><ul>\n<li><a href=\"http://my.oschina.net/davidzhang/blog/67429\">Struts action的单例与多例</a></li>\n<li><a href=\"http://www.cnblogs.com/shipengzhi/articles/2099694.html\">在spring来管理实例对象prototype和singleton的选择.针对action如何使用</a></li>\n<li><a href=\"http://lavasoft.blog.51cto.com/62575/1394669\">Spring MVC Controller单例陷阱</a></li>\n<li><a href=\"http://www.cnblogs.com/JemBai/archive/2010/11/10/1873954.html\">struts+spring action应配置为scope=”prototype”</a></li>\n<li><a href=\"http://blog.csdn.net/lsh6688/article/details/7863322\">struts2 Action获取表单数据</a></li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjfto0q6e000018c7fhmhnelc","category_id":"cjfto0q6u000518c7nidpcgmn","_id":"cjfto0q78000d18c7hoi82lc7"},{"post_id":"cjfto0q6n000218c79vev3od3","category_id":"cjfto0q72000a18c7n8he85yh","_id":"cjfto0q7k000l18c71or8844z"},{"post_id":"cjfto0q7f000i18c7b4lsdge3","category_id":"cjfto0q7d000g18c7uc0haa3m","_id":"cjfto0q7o000q18c7tgrbbgkv"},{"post_id":"cjfto0q6v000618c7he65jdve","category_id":"cjfto0q7d000g18c7uc0haa3m","_id":"cjfto0q7s000t18c7nr2fumg8"},{"post_id":"cjfto0q6y000718c717iypstx","category_id":"cjfto0q7l000n18c7rrtxyu0m","_id":"cjfto0q7y000y18c7a1a5khuz"},{"post_id":"cjfto0q71000918c7otz5zahe","category_id":"cjfto0q7d000g18c7uc0haa3m","_id":"cjfto0q87001418c779erltz9"},{"post_id":"cjfto0q7w000x18c7wiqsuix8","category_id":"cjfto0q7d000g18c7uc0haa3m","_id":"cjfto0q8a001918c7jrd4juz7"},{"post_id":"cjfto0q7z001118c7qyw0c570","category_id":"cjfto0q7d000g18c7uc0haa3m","_id":"cjfto0q8c001b18c7p8a4dtfb"},{"post_id":"cjfto0q74000c18c7gl80uzhg","category_id":"cjfto0q7d000g18c7uc0haa3m","_id":"cjfto0q8i001f18c72icygmba"},{"post_id":"cjfto0q82001318c7rqqmyxus","category_id":"cjfto0q7d000g18c7uc0haa3m","_id":"cjfto0q8k001i18c719wd8qmq"},{"post_id":"cjfto0q7a000e18c7hh8ysf3p","category_id":"cjfto0q7d000g18c7uc0haa3m","_id":"cjfto0q8o001n18c7k7x4q4ar"},{"post_id":"cjfto0q8b001a18c7fzy90efp","category_id":"cjfto0q7d000g18c7uc0haa3m","_id":"cjfto0q8r001p18c7rdgfostu"},{"post_id":"cjfto0q7j000k18c7rnnt1zea","category_id":"cjfto0q8d001c18c735573xil","_id":"cjfto0q8t001s18c7628629id"},{"post_id":"cjfto0q8l001k18c7dodyglmn","category_id":"cjfto0q7d000g18c7uc0haa3m","_id":"cjfto0q8x001v18c7idg02o9q"},{"post_id":"cjfto0q7p000r18c7cz2r1xko","category_id":"cjfto0q8n001l18c7pgx6pyfq","_id":"cjfto0q95002218c7tmik1vba"},{"post_id":"cjfto0q94002118c7fn0rc1y8","category_id":"cjfto0q7d000g18c7uc0haa3m","_id":"cjfto0q9c002b18c7rsdug097"},{"post_id":"cjfto0q97002518c7z8gllv87","category_id":"cjfto0q96002318c7ad6bsw5g","_id":"cjfto0q9g002e18c74m0lurga"},{"post_id":"cjfto0q89001718c7bon74eem","category_id":"cjfto0q96002318c7ad6bsw5g","_id":"cjfto0q9l002h18c7dvoknv65"},{"post_id":"cjfto0q8e001d18c78in1mqpj","category_id":"cjfto0q9c002918c7pv5gaqkh","_id":"cjfto0q9n002l18c79bjzmt8s"},{"post_id":"cjfto0q9h002f18c79qruz4yt","category_id":"cjfto0q7d000g18c7uc0haa3m","_id":"cjfto0q9p002o18c7dbo8h7as"},{"post_id":"cjfto0q8i001h18c739sufkdm","category_id":"cjfto0q9l002i18c7984cw0qd","_id":"cjfto0q9q002q18c7t2tuakrg"},{"post_id":"cjfto0q8p001o18c7e3r5g958","category_id":"cjfto0q8n001l18c7pgx6pyfq","_id":"cjfto0q9s002t18c7cbuk1bff"},{"post_id":"cjfto0q8p001o18c7e3r5g958","category_id":"cjfto0q9n002m18c75nmjdx9i","_id":"cjfto0q9t002w18c7s3d5zbba"},{"post_id":"cjfto0q7m000p18c7ns1zpuc6","category_id":"cjfto0q8n001l18c7pgx6pyfq","_id":"cjfto0q9u002y18c74udx8pfz"},{"post_id":"cjfto0q7m000p18c7ns1zpuc6","category_id":"cjfto0q9n002m18c75nmjdx9i","_id":"cjfto0q9v003118c79w89xx8j"},{"post_id":"cjfto0q8r001q18c7uebmiy3w","category_id":"cjfto0q8n001l18c7pgx6pyfq","_id":"cjfto0q9w003418c7nzv1yuxz"},{"post_id":"cjfto0q8r001q18c7uebmiy3w","category_id":"cjfto0q9n002m18c75nmjdx9i","_id":"cjfto0q9y003618c7ym7uiqfp"},{"post_id":"cjfto0q8u001u18c7fpnhb10q","category_id":"cjfto0q8n001l18c7pgx6pyfq","_id":"cjfto0q9z003818c7mhnfvsol"},{"post_id":"cjfto0q8u001u18c7fpnhb10q","category_id":"cjfto0q9n002m18c75nmjdx9i","_id":"cjfto0qa1003b18c737dar4nu"},{"post_id":"cjfto0q8y001w18c7svark7tj","category_id":"cjfto0q8n001l18c7pgx6pyfq","_id":"cjfto0qa4003d18c7273x34rj"},{"post_id":"cjfto0q8y001w18c7svark7tj","category_id":"cjfto0q9n002m18c75nmjdx9i","_id":"cjfto0qa5003f18c78iw3974g"},{"post_id":"cjfto0q90001z18c7sus7ai1s","category_id":"cjfto0q9z003a18c757rvgfbk","_id":"cjfto0qa6003h18c7tl72kp9y"},{"post_id":"cjfto0q7t000v18c7bcj10zbn","category_id":"cjfto0q8n001l18c7pgx6pyfq","_id":"cjfto0qa8003m18c7ih9zgl95"},{"post_id":"cjfto0q7t000v18c7bcj10zbn","category_id":"cjfto0q9n002m18c75nmjdx9i","_id":"cjfto0qab003p18c78v3l2bmn"},{"post_id":"cjfto0q9a002818c7mx1gqvnv","category_id":"cjfto0qa6003i18c70czav9iq","_id":"cjfto0qab003r18c78qi01i47"},{"post_id":"cjfto0q9d002c18c7da1bpe8r","category_id":"cjfto0q9l002i18c7984cw0qd","_id":"cjfto0qac003s18c7c9i9v45x"}],"PostTag":[{"post_id":"cjfto0q6e000018c7fhmhnelc","tag_id":"cjfto0q6s000418c7lrvunees","_id":"cjfto0q73000b18c7a79c39mw"},{"post_id":"cjfto0q74000c18c7gl80uzhg","tag_id":"cjfto0q71000818c7tj8c7jv8","_id":"cjfto0q7e000h18c75xl2rb46"},{"post_id":"cjfto0q6n000218c79vev3od3","tag_id":"cjfto0q71000818c7tj8c7jv8","_id":"cjfto0q7i000j18c7r4760yq5"},{"post_id":"cjfto0q6v000618c7he65jdve","tag_id":"cjfto0q71000818c7tj8c7jv8","_id":"cjfto0q7l000o18c7l9iszstn"},{"post_id":"cjfto0q6y000718c717iypstx","tag_id":"cjfto0q7k000m18c7fmpkh28j","_id":"cjfto0q7v000w18c7e3j3jige"},{"post_id":"cjfto0q71000918c7otz5zahe","tag_id":"cjfto0q7s000s18c7tvptj1n0","_id":"cjfto0q81001218c7wy3fcj5d"},{"post_id":"cjfto0q82001318c7rqqmyxus","tag_id":"cjfto0q71000818c7tj8c7jv8","_id":"cjfto0q8a001818c7srni86eu"},{"post_id":"cjfto0q7a000e18c7hh8ysf3p","tag_id":"cjfto0q7y000z18c7c03w7bu0","_id":"cjfto0q8i001g18c7em84nb8p"},{"post_id":"cjfto0q7a000e18c7hh8ysf3p","tag_id":"cjfto0q88001618c77hsgbi8z","_id":"cjfto0q8l001j18c7bqx4a5hu"},{"post_id":"cjfto0q7f000i18c7b4lsdge3","tag_id":"cjfto0q8g001e18c7y3wh2r7o","_id":"cjfto0q93002018c7t03htzco"},{"post_id":"cjfto0q7f000i18c7b4lsdge3","tag_id":"cjfto0q8n001m18c753yqnuo2","_id":"cjfto0q97002418c7a01s6ugz"},{"post_id":"cjfto0q7f000i18c7b4lsdge3","tag_id":"cjfto0q8t001t18c79zwt8g9g","_id":"cjfto0q9a002718c7tvi0mkpy"},{"post_id":"cjfto0q7j000k18c7rnnt1zea","tag_id":"cjfto0q90001y18c7t9xc670l","_id":"cjfto0q9c002a18c78x16kc9h"},{"post_id":"cjfto0q7m000p18c7ns1zpuc6","tag_id":"cjfto0q99002618c7tz1h1aaz","_id":"cjfto0q9l002g18c7i7en72kf"},{"post_id":"cjfto0q7p000r18c7cz2r1xko","tag_id":"cjfto0q99002618c7tz1h1aaz","_id":"cjfto0q9n002k18c7o3taa4ao"},{"post_id":"cjfto0q7t000v18c7bcj10zbn","tag_id":"cjfto0q99002618c7tz1h1aaz","_id":"cjfto0q9q002p18c7bjdlu6zj"},{"post_id":"cjfto0q7w000x18c7wiqsuix8","tag_id":"cjfto0q9p002n18c72sntnlsc","_id":"cjfto0q9u002x18c79t1e94tj"},{"post_id":"cjfto0q7w000x18c7wiqsuix8","tag_id":"cjfto0q9r002s18c7h39pdbwo","_id":"cjfto0q9v003018c7dae4xkgp"},{"post_id":"cjfto0q7z001118c7qyw0c570","tag_id":"cjfto0q9t002v18c76ocxb9fn","_id":"cjfto0q9w003318c70vf2x7jk"},{"post_id":"cjfto0q89001718c7bon74eem","tag_id":"cjfto0q9w003218c7mkec9bzw","_id":"cjfto0q9z003918c7e60hwfkh"},{"post_id":"cjfto0q8b001a18c7fzy90efp","tag_id":"cjfto0q9y003718c7n4h9c0at","_id":"cjfto0qa7003j18c7eib3w4iu"},{"post_id":"cjfto0q8b001a18c7fzy90efp","tag_id":"cjfto0qa3003c18c7asmql9yi","_id":"cjfto0qa7003k18c76kqjlrio"},{"post_id":"cjfto0q8e001d18c78in1mqpj","tag_id":"cjfto0qa6003g18c72it4p675","_id":"cjfto0qaa003o18c754axcigx"},{"post_id":"cjfto0q8i001h18c739sufkdm","tag_id":"cjfto0q71000818c7tj8c7jv8","_id":"cjfto0qae003v18c7i0c2nj85"},{"post_id":"cjfto0q8i001h18c739sufkdm","tag_id":"cjfto0qa7003l18c7oy1fxxpb","_id":"cjfto0qae003w18c7jzs85rah"},{"post_id":"cjfto0q8i001h18c739sufkdm","tag_id":"cjfto0qab003q18c7htljnbsp","_id":"cjfto0qaf003y18c7p2g6vp2s"},{"post_id":"cjfto0q8i001h18c739sufkdm","tag_id":"cjfto0qad003t18c749abv0yv","_id":"cjfto0qaf003z18c72kd29b75"},{"post_id":"cjfto0q8l001k18c7dodyglmn","tag_id":"cjfto0q8g001e18c7y3wh2r7o","_id":"cjfto0qag004118c79bljo907"},{"post_id":"cjfto0q8l001k18c7dodyglmn","tag_id":"cjfto0qad003u18c7do0vemgm","_id":"cjfto0qag004218c7uv1e4ni2"},{"post_id":"cjfto0q8l001k18c7dodyglmn","tag_id":"cjfto0qae003x18c7e0n5zkve","_id":"cjfto0qah004418c7si09oha2"},{"post_id":"cjfto0q8p001o18c7e3r5g958","tag_id":"cjfto0q99002618c7tz1h1aaz","_id":"cjfto0qah004518c7irihyjes"},{"post_id":"cjfto0q8r001q18c7uebmiy3w","tag_id":"cjfto0q99002618c7tz1h1aaz","_id":"cjfto0qai004718c7cdr8k4do"},{"post_id":"cjfto0q8u001u18c7fpnhb10q","tag_id":"cjfto0q99002618c7tz1h1aaz","_id":"cjfto0qaj004918c7bji0e1u7"},{"post_id":"cjfto0q8y001w18c7svark7tj","tag_id":"cjfto0q99002618c7tz1h1aaz","_id":"cjfto0qak004b18c7o89e98sd"},{"post_id":"cjfto0q90001z18c7sus7ai1s","tag_id":"cjfto0qak004a18c7howv8nww","_id":"cjfto0qam004e18c7lnn2lfq4"},{"post_id":"cjfto0q90001z18c7sus7ai1s","tag_id":"cjfto0qa3003c18c7asmql9yi","_id":"cjfto0qam004f18c7q542w0ta"},{"post_id":"cjfto0q94002118c7fn0rc1y8","tag_id":"cjfto0qak004a18c7howv8nww","_id":"cjfto0qao004i18c7w6m7p3o1"},{"post_id":"cjfto0q94002118c7fn0rc1y8","tag_id":"cjfto0qam004g18c76up6hxfd","_id":"cjfto0qao004j18c7nyirruqe"},{"post_id":"cjfto0q97002518c7z8gllv87","tag_id":"cjfto0q9w003218c7mkec9bzw","_id":"cjfto0qap004l18c7dkaod10j"},{"post_id":"cjfto0q9a002818c7mx1gqvnv","tag_id":"cjfto0qao004k18c7zfbvl6xp","_id":"cjfto0qaq004n18c7g9l79ol1"},{"post_id":"cjfto0q9d002c18c7da1bpe8r","tag_id":"cjfto0q71000818c7tj8c7jv8","_id":"cjfto0qas004r18c7nso31al5"},{"post_id":"cjfto0q9d002c18c7da1bpe8r","tag_id":"cjfto0qaq004m18c7926yw5gs","_id":"cjfto0qas004s18c753emxgs5"},{"post_id":"cjfto0q9d002c18c7da1bpe8r","tag_id":"cjfto0qaq004o18c7jo0towsd","_id":"cjfto0qat004t18c7bcp172m9"},{"post_id":"cjfto0q9d002c18c7da1bpe8r","tag_id":"cjfto0qar004p18c7oxzu9t7z","_id":"cjfto0qat004u18c7emyhoro6"},{"post_id":"cjfto0q9h002f18c79qruz4yt","tag_id":"cjfto0qak004a18c7howv8nww","_id":"cjfto0qat004v18c7woj0rjst"}],"Tag":[{"name":"AngularJS","_id":"cjfto0q6s000418c7lrvunees"},{"name":"Java","_id":"cjfto0q71000818c7tj8c7jv8"},{"name":"JavaScript","_id":"cjfto0q7k000m18c7fmpkh28j"},{"name":"ELK","_id":"cjfto0q7s000s18c7tvptj1n0"},{"name":"Log4j","_id":"cjfto0q7y000z18c7c03w7bu0"},{"name":"Logstash","_id":"cjfto0q88001618c77hsgbi8z"},{"name":"Linux","_id":"cjfto0q8g001e18c7y3wh2r7o"},{"name":"MariaDB","_id":"cjfto0q8n001m18c753yqnuo2"},{"name":"MySql","_id":"cjfto0q8t001t18c79zwt8g9g"},{"name":"PHP","_id":"cjfto0q90001y18c7t9xc670l"},{"name":"Phabricator","_id":"cjfto0q99002618c7tz1h1aaz"},{"name":"Swagger2","_id":"cjfto0q9p002n18c72sntnlsc"},{"name":"SpringMVC","_id":"cjfto0q9r002s18c7h39pdbwo"},{"name":"自动部署","_id":"cjfto0q9t002v18c76ocxb9fn"},{"name":"git","_id":"cjfto0q9w003218c7mkec9bzw"},{"name":"Maven","_id":"cjfto0q9y003718c7n4h9c0at"},{"name":"Junit","_id":"cjfto0qa3003c18c7asmql9yi"},{"name":"感想","_id":"cjfto0qa6003g18c72it4p675"},{"name":"Thread","_id":"cjfto0qa7003l18c7oy1fxxpb"},{"name":"Runnable","_id":"cjfto0qab003q18c7htljnbsp"},{"name":"Executor","_id":"cjfto0qad003t18c749abv0yv"},{"name":"系统监控","_id":"cjfto0qad003u18c7do0vemgm"},{"name":"Tomcat","_id":"cjfto0qae003x18c7e0n5zkve"},{"name":"Spring","_id":"cjfto0qak004a18c7howv8nww"},{"name":"Annotation","_id":"cjfto0qam004g18c76up6hxfd"},{"name":"计算机网络","_id":"cjfto0qao004k18c7zfbvl6xp"},{"name":"synchronized","_id":"cjfto0qaq004m18c7926yw5gs"},{"name":"volatile","_id":"cjfto0qaq004o18c7jo0towsd"},{"name":"锁","_id":"cjfto0qar004p18c7oxzu9t7z"}]}}